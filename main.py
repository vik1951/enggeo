# -*- coding: utf-8 -*-
from PyQt5 import QtCore
from PyQt5 import QtGui
from PyQt5 import QtSql
from PyQt5 import QtWidgets
from egdb import *
from egfunc import *
import egdelegat
from operator import itemgetter
from pyreportjasper import JasperPy         # JasperPy в версии pyreportjasper 1.0.2 для OpenJDK-8
#from pyreportjasper import PyReportJasper  # PyReportJasper в версии pyreportjasper 2.1.2 для OpenJDK-11+
import sys, datetime, egclasswin, math, os, time
import decimal as dc
import numpy as np
import webbrowser  # Для просмотра отчетов в броузере по умолчанию
import subprocess   # Для просмотра отчетов в Просмотре файла Linux

QtCore.QLocale.system().toFloat('C')
QtCore.QLocale.system().toDouble('C')
sys.setrecursionlimit(10000) # Увеличен лимит рекурсии с 1000 до 10000

class MassageWinI(QtWidgets.QDialog, egclasswin.Ui_MassInfo):
    def __init__(self, infotext):
        """Инициализация окна сообщений"""
        super().__init__()
        self.setupUi(self)
        self.label_2.setText(infotext)
        self.pushButton.clicked.connect(self.accept)


class MassageWinQ(QtWidgets.QDialog, egclasswin.Ui_MassQuestion):
    def __init__(self, infotext):
        """Инициализация окна сообщений"""
        super().__init__()
        self.setupUi(self)
        self.label_2.setText(infotext)
        self.pushButton.clicked.connect(self.accept)
        self.pushButton_2.clicked.connect(self.reject)


class ActivateObekt(QtWidgets.QDialog, egclasswin.Ui_ActivateObekt):
    def __init__(self):
        """Инициализация окна активации объекта"""
        super().__init__()
        self.setupUi(self)
        with UseDatebase(dbconfig) as curs:
            curs.execute("SELECT * FROM obekt ORDER BY id")
            self.recAll = curs.fetchall()
        self.listAll = list(self.recAll)
        self.listAll.sort(key=lambda tup: tup[11])
        lval = list(self.listAll[0])
        self.label_2.setText(lval[7])
        self.retval = lval[0]
        self.radIndex = 1
        i = 0
        while i < len(self.listAll):
            self.comboBox.addItem(list(self.listAll[i])[11] + " (" + list(self.listAll[i])[1] + ")", [0])
            i += 1
        self.comboBox.activated.connect(self.refresh)
        self.pushButton.clicked.connect(self.accept)
        self.pushButton.clicked.connect(self.activOb)

    def refresh(self) -> int:
        """Обновляет экранную форму"""
        valIndex = self.comboBox.currentIndex()
        lval = list(self.listAll[valIndex])
        self.label_2.setText(lval[7])
        self.retval = lval[0]
        return self.retval

    def activOb(self) -> int:
        """Активация объекта"""
        global idActivObekt
        idActivObekt = self.retval
        i = 0
        for i in range(0, form.combo.count()):
            if form.combo.itemData(i, role=QtCore.Qt.UserRole) == idActivObekt:
                break
            else:
                continue
        form.combo.setCurrentIndex(i)
        return idActivObekt


class PoiskObekt(QtWidgets.QDialog, egclasswin.Ui_PoiskObekt):
    def __init__(self, recall):
        """Инициализация окна поиска объекта
        recall - список объектов"""
        self.recAll = recall
        super().__init__()
        self.setupUi(self)
        self.listAll = list(self.recAll)
        self.listAll.sort(key=lambda tup: tup[1])
        lval = list(self.listAll[0])
        self.label_3.setText(lval[7])
        self.retval = lval[0]
        self.radIndex = 1
        i = 0
        while i < len(self.listAll):
            self.comboBox.addItem(list(self.listAll[i])[1], [0])    # Список архивных номеров
            i += 1
        i = 0
        while i < len(self.listAll):
            self.comboBox_2.addItem(list(self.listAll[i])[11], [0]) # Список Договоров
            i += 1
        retval = True
        self.label_4.setEnabled(False)
        self.comboBox_2.setEnabled(False)
        self.radioButton.toggled.connect(self.refresh)
        self.radioButton_3.toggled.connect(self.refresh)
        self.comboBox.activated.connect(self.refresh)
        self.comboBox_2.activated.connect(self.refresh)
        self.pushButton_2.clicked.connect(self.accept)
        self.pushButton.clicked.connect(self.reject)

    def refresh(self) -> int:
        """Обновляет экранную форму"""
        if self.radioButton.isChecked() == True:
            self.label_2.setEnabled(True)
            self.comboBox.setEnabled(True)
            self.label_4.setEnabled(False)
            self.comboBox_2.setEnabled(False)
            self.radIndex = 1
            valIndex = self.comboBox.currentIndex()
        elif self.radioButton_3.isChecked() == True:
            self.label_2.setEnabled(False)
            self.comboBox.setEnabled(False)
            self.label_4.setEnabled(True)
            self.comboBox_2.setEnabled(True)
            self.radIndex = 2
            valIndex = self.comboBox_2.currentIndex()
        else:
            self.label_2.setEnabled(False)
            self.comboBox.setEnabled(False)
            self.label_4.setEnabled(False)
            self.comboBox_2.setEnabled(False)
            self.radIndex = 3
            valIndex = 0
        lval = list(self.listAll[valIndex])
        self.label_3.setText(lval[7])
        self.retval = lval[0]
        return self.retval


class ReportWindow(QtWidgets.QDialog, egclasswin.Ui_Report_win):
    def __init__(self):
        """Инициализация окна Отчетов"""
        super().__init__()
        self.setupUi(self)
        recAll = [("Електронний документ Portable Document Format (.pdf)", "pdf"),
                    ("Текстовий документ Microsoft Word 2007-2013 (.docx)", "docx"),
                    ("Електронна таблиця Microsoft Excel 2007-2013 (.xlsx)", "xlsx"),
                    ("Текст з форматуванням Rich Text Format (.rtf)", "rtf"),
                    ("Текстовий документ OpenDocument Text (.odt)", "odt"),
                    ("Електронна таблиця OpenDocument Format (.ods)", "ods"),
                    ("Документ розмітки (.xml)", "xml"),
                    ("Документ гіпертекстової розмітки (.html)", "html")]
        for i in range(0, len(recAll)):
            recOne = recAll[i]
            self.comboBox.addItem(recOne[0])
            self.comboBox.setItemData(i, recOne[1], role=QtCore.Qt.UserRole)
        model = QtGui.QStandardItemModel()        # Создание модели
        model.setColumnCount(1)
        # Формирование списка отчетных материалов
        parent = QtGui.QStandardItem(7)
        parent.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
        parent.setText("Журнали та каталоги")
        podrazdel = [("Журнал статичного зондування", "statzondjurn_A4P", 1),
                     ("Журнал динамічного зондування", "2", 1),
                     ("Журнал пошарового опису свердловин", "burjurn_A4P", 1),
                     ("Каталог проб за порядком номерів", "obrazecn_A4P", 1),
                     ("Каталог проб за видами зразків", "obrazecv_A4P", 1),
                     ("Каталог координат пунктів відбору проб", "burkoord_A4P", 1),
                     ("Каталог координат пунктів статичного зондування", "szondkoord_A4P", 1)]
        for row in range(0, 7):
            itemrow = podrazdel[row]
            for column in range(0, 1):
                it = itemrow[column]
                item = QtGui.QStandardItem(it)
                item.setFlags(parent.flags())
                parent.setChild(row, column, item)
                item.setData(itemrow[1], role=QtCore.Qt.UserRole)
                item.setData(itemrow[2], role=QtCore.Qt.UserRole + 1)
        model.appendRow(parent)
        parent = QtGui.QStandardItem(7)
        parent.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
        parent.setText("Детальні таблиці результатів випробувань")
        podrazdel = [("Результати статичного зондування", "statzond_A4P", 3),
                     ("Значення граничного опору забівної палі за даними статичного зондування", "szondsvay_A4P", 3),
                     ("Результати динамічного зондування", "назва звіту", 4),
                     ("Результати лабораторних визначень фізичних властивостей зв'язних ґрунтів", "glina_A3L", 2),
                     ("Результати лабораторних визначень фізичних властивостей незв'язних ґрунтів", "pesok_A3L", 2),
                     ("Результати лабораторних визначень гранулометричного складу незв'язних ґрунтів", "granpes_A3L", 2),
                     ("Результати лабораторних визначень гранулометричного складу і фізико-механічних властивостей незв'язних ґрунтів", "granfizpes_A3L", 2)]
        for row in range(0, 7):
            itemrow = podrazdel[row]
            for column in range(0, 1):
                it = itemrow[column]
                item = QtGui.QStandardItem(it)
                item.setFlags(parent.flags())
                parent.setChild(row, column, item)
                item.setData(itemrow[1], role=QtCore.Qt.UserRole)
                item.setData(itemrow[2], role=QtCore.Qt.UserRole + 1)
        model.appendRow(parent)
        parent = QtGui.QStandardItem(7)
        parent.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
        parent.setText("Паспорти результатів механічних випробувань")
        podrazdel = [("Паспорт визначення міцності ґрунту методом одноплощинного зрізу", "srez_A4P", 5),
                     ("Паспорт визначення міцності ґрунту методом одновісного стиску", "2", 5),
                     ("Паспорт визначення міцності та деформованості ґрунту методом тривісного стиску", "3", 5),
                     ("Паспорт визначення деформованості ґрунту методом компресійного стиску", "compres_A4P", 5),
                     ("Паспорт визначення властивостей просідання ґрунту", "prosad_A4P", 5),
                     ("Паспорт визначення набухаючих властивостей ґрунту ", "nabuh_A4P", 5),
                     ("Паспорт визначення властивостей усадки ґрунту ", "usadka_A4P", 5)]
        for row in range(0, 7):
            itemrow = podrazdel[row]
            for column in range(0, 1):
                it = itemrow[column]
                item = QtGui.QStandardItem(it)
                item.setFlags(parent.flags())
                parent.setChild(row, column, item)
                item.setData(itemrow[1], role=QtCore.Qt.UserRole)
                item.setData(itemrow[2], role=QtCore.Qt.UserRole + 1)
        model.appendRow(parent)
        parent = QtGui.QStandardItem(6)
        parent.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
        parent.setText("Паспорти результатів хімічних випробувань")
        podrazdel = [("Паспорт визначення ступеня агресивності ґрунту на бетонні, залізобетонні, металеві конструкції та оболонку кабелю", "agressgrpasp_A4P", 2),
                     ("Паспорт визначення ступеня агресивності ґрунту на бетонні та залізобетонні конструкції", "agressgrbpasp_A4P", 2),
                     ("Паспорт визначення ступеня агресивності ґрунту на металеві конструкції та оболонку кабелю", "agressgrmpasp_A4P", 2),
                     ("Паспорт визначення ступеня агресивності води на бетонні, залізобетонні, металеві конструкції та оболонку кабелю", "agressvodpasp_A4P", 2),
                     ("Паспорт визначення ступеня агресивності води на бетонні та залізобетонні конструкції", "agressvodbpasp_A4P", 2),
                     ("Паспорт визначення ступеня агресивності води на металеві конструкції та оболонку кабелю", "agressvodmpasp_A4P", 2)]
        for row in range(0, 6):
            itemrow = podrazdel[row]
            for column in range(0, 1):
                it = itemrow[column]
                item = QtGui.QStandardItem(it)
                item.setFlags(parent.flags())
                parent.setChild(row, column, item)
                item.setData(itemrow[1], role=QtCore.Qt.UserRole)
                item.setData(itemrow[2], role=QtCore.Qt.UserRole + 1)
        model.appendRow(parent)
        parent = QtGui.QStandardItem(5)
        parent.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
        parent.setText("Паспорти результатів статистичної обробки")
        podrazdel = [("Паспорт статистичної обробки фізичних властивостей зв'язних ґрунтів", "statglina_A4P", 5),
                     ("Паспорт статистичної обробки фізичних властивостей незв'язних ґрунтів", "statpesok_A4P", 5),
                     ("Паспорт статистичної обробки результатів іспитів ґрунтів методом одноплощинного зрізу за показниками tg(φ), с", "statsreztgc_A4P", 5),
                     ("Паспорт статистичної обробки результатів іспитів ґрунтів методом одноплощинного зрізу за показниками τ, σ", "statsreztp_A4P", 5),
                     ("Паспорт статистичної обробки результатів компресійних іспитів ґрунтів по модулю деформации (E)", "statcompres_A4P", 5)]
        for row in range(0, 5):
            itemrow = podrazdel[row]
            for column in range(0, 1):
                it = itemrow[column]
                item = QtGui.QStandardItem(it)
                item.setFlags(parent.flags())
                parent.setChild(row, column, item)
                item.setData(itemrow[1], role=QtCore.Qt.UserRole)
                item.setData(itemrow[2], role=QtCore.Qt.UserRole + 1)
        model.appendRow(parent)
        parent = QtGui.QStandardItem(8)
        parent.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
        parent.setText("Зведені таблиці результатів випробувань")
        podrazdel = [("Нормативні значення фізичних властивостей ґрунтів", "1", 1),
                     ("Розрахункові значення фізичних властивостей ґрунтів", "2", 1),
                     ("Нормативні та розрахункові значення механічних властивостей ґрунтів", "3", 1),
                     ("Результати визначень ступеня агресивності ґрунтів по відношенню до бетонних та залізобетонних конструкцій", "agressbgrunt_A4L", 2),
                     ("Результати визначень ступеня агресивності ґрунтів по відношенню до металевих конструкцій", "agressmgrunt_A4L", 2),
                     ("Результати визначень ступеня агресивності ґрунтів по відношенню до свінцевої та алюмінієвої оболонці кабелю", "agresskgrunt_A4L", 2),
                     ("Результати визначень ступеня агресивності води по відношенню до бетонних, залізобетонних та металевих конструкцій", "agressbvoda_A3L", 2),
                     ("Результати визначень ступеня агресивності води по відношенню до свінцевої та алюмінієвої оболонці кабелю", "agresskvoda_A4L", 2)]
        for row in range(0, 8):
            itemrow = podrazdel[row]
            for column in range(0, 1):
                it = itemrow[column]
                item = QtGui.QStandardItem(it)
                item.setFlags(parent.flags())
                parent.setChild(row, column, item)
                item.setData(itemrow[1], role=QtCore.Qt.UserRole)
                item.setData(itemrow[2], role=QtCore.Qt.UserRole + 1)
        model.appendRow(parent)
        # Создание представления
        self.treeView.setModel(model)
        self.treeView.setColumnWidth(0, 580)
        self.treeView.setColumnHidden(1, True)
        self.treeView.setAnimated(True)
        # Назначение обработчиков сигналов
        self.pushButton.clicked.connect(self.accept)
        self.pushButton.clicked.connect(self.setReport)
        self.pushButton_2.clicked.connect(self.reject)
        self.comboBox.activated.connect(self.setFormat)
        self.toolButton.clicked.connect(self.setFile)
        self.refresh()

    def refresh(self) -> str:
        """Обновление окна"""
        output = os.path.dirname(os.path.abspath(__file__)) + '/reports/outreport/zvit'
        self.lineEdit.setText(output)
        return output

    def setFormat(self) -> str:
        """Выбор формата файла отчета"""
        formatF = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole)
        return formatF

    def setReport(self) -> bool:
        """Выбор отчета"""
        nameReport = ''
        typeReport = ''
        for sel in self.treeView.selectedIndexes():
            nameReport = sel.data(role=QtCore.Qt.UserRole)
            typeReport = sel.data(role=QtCore.Qt.UserRole + 1)  # Тип отчета для выбора параметров отчета
            # typeReport = 1 Выбор объектов
            # typeReport = 2 Выбор объектов и скважин
            # typeExport = 3 Выбор объектов и пунктов статического зондирования
            # typeExport = 4 Выбор объектов и пунктов динамического зондирования
            # typeExport = 5 Выбор объектов, скважин и образцов
        formatF = self.setFormat()
        if self.treeView.selectedIndexes() == []:
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "Формування звіту",
                                           "Не обрано звіт. Необхідно вибрати звіт з переліку")
            btnOK = QtWidgets.QPushButton("&OK")
            btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
            result = self.formMassWin.exec()
            retval = False
        else:
            self.getReport(nameReport, formatF, typeReport)
            retval = True
        return retval


    def outreport(self) -> str:
        """Файл отчета на выходе"""
        outname = self.lineEdit.text()
        return outname

    def getParametr(self,typeReport) -> set:
        """Выбор параметров отчета"""
        if typeReport == 1:
            formPar = Report_par1()
            formPar.exec()
            parId = formPar.setPar()
        elif typeReport == 2:
            formPar = Report_par2()
            formPar.exec()
            parId = formPar.setPar()
        elif typeReport == 3:
            formPar = Report_par3()
            formPar.exec()
            parId = formPar.setPar()
        elif typeReport == 4:
            formPar = Report_par4()
            formPar.exec()
            parId = formPar.setPar()
        elif typeReport == 5:
            formPar = Report_par5()
            formPar.exec()
            parId = formPar.setPar()
        else:
            parId = ''
        return parId

    def getReport(self, nameReport, formatF, typeReport) -> bool:
        """Создание отчета по заданым параметрам"""
        par1 = self.getParametr(typeReport)
        if par1 == '':
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "Формування звіту",
                                           "Не обрано параметрів звіту або відсутня інформація щодо цього запиту. "
                                           "\nНеобхідно вибрати параметри звіту (об'єкт, пункт відбору зразків або зразки) з переліку, або додати необхідну інформацію.")
            btnOK = QtWidgets.QPushButton("&OK")
            btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
            result = self.formMassWin.exec()
            outPar = False  # Параметры отчета не указаны
        else:
            if typeReport == 1: # Формирование списка ID объектов
                with UseDatebase(dbconfig) as curs:
                    curs.execute("CREATE OR REPLACE VIEW idobekt (id, numdoc, sost, sost_2, prover, prover_2) AS (VALUES " + par1 + ")")
            elif typeReport == 2: # Формирование списка ID пунктов отбора проб
                with UseDatebase(dbconfig) as curs:
                    curs.execute("CREATE OR REPLACE VIEW idburehole (id, numdoc, sost, sost_2, prover, prover_2) AS (VALUES " + par1 + ")")
            elif typeReport == 3: # Формирование списка ID пунктов статического зондирования
                with UseDatebase(dbconfig) as curs:
                    curs.execute("CREATE OR REPLACE VIEW idpointszond (id, numdoc, sost, sost_2, prover, prover_2) AS (VALUES " + par1 + ")")
            elif typeReport == 4: # Формирование списка ID пунктов динамического зондирования
                with UseDatebase(dbconfig) as curs:
                    curs.execute("CREATE OR REPLACE VIEW idpointdzond (id, numdoc, sost, sost_2, prover, prover_2) AS (VALUES " + par1 + ")")
            else:
                with UseDatebase(dbconfig) as curs: # Формирование списка ID образцов
                    curs.execute("CREATE OR REPLACE VIEW idobrazec (id, numdoc, sost, sost_2, prover, prover_2) AS (VALUES " + par1 + ")")
            outPar = True   # Параметры отчета указаны
        if nameReport is not None and len(nameReport) > 1:
            input_file = os.path.dirname(os.path.abspath(__file__)) + '/reports/' + nameReport
            if self.lineEdit.text() is None:
                output = os.path.dirname(os.path.abspath(__file__)) + '/reports/outreport'
            else:
                output = self.lineEdit.text()
            con = {
                'driver': 'postgres',
                'locale': 'uk_UA',
                'username': 'vik',
                'password': '123',
                'host': 'localhost',
                'database': 'enggeo',
                'schema': 'public',
                'port': '5432',
                'jdbc_driver': 'org.postgresql.Driver'
            }
            jasper = JasperPy()   # PyReportJasper() в новой версии pyreportjasper 2.1.2
#            jasper = PyReportJasper()
            # Предварительная компиляция отчета JasperStudio в OpenJDK-8 ('.jrxml' -> '.jasper')
#            jasper.compile(input_file + '.jrxml')
            # Формирование откомпилированого отчета в формате указанном в переменной 'formatF' и
            # с использованием базы данных указанных в переменной 'con'
            jasper.process(input_file,
                           output_file=output,
                           format_list=[formatF],
                           db_connection=con,
                           locale='ru_UA')
            retval = True
        else:
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "Формування звіту",
                                           "Не обрано звіт. Необхідно вибрати звіт з переліку")
            btnOK = QtWidgets.QPushButton("&OK")
            btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
            result = self.formMassWin.exec()
            retval = False
        if outPar == True:
            self.testOutFile(output, formatF)
        return retval

    def testOutFile(self, output, formatF) -> set:
        """Проверка наполнения файла"""
        with open(output + '.' + formatF, 'rb') as fileOut:
            lines = fileOut.readlines() # Считывание содержимого файла в список
            if len(lines) < 35:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "Формування звіту",
                                               "Вихідні дані для звіту не виявлено. Отримано порожній або не повний звіт."
                                               "\nЗвіт можна переглянути за адресою: " + output + '.' + formatF)
                btnOK = QtWidgets.QPushButton("&OK")
                btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                result = self.formMassWin.exec()
            else:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question, "Формування звіту",
                                               "Звіт сформовано."
                                               "\nЗвіт можна переглянути за адресою: " + output + '.' + formatF +
                                               ". \nБажаєте переглянути звіт зараз?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    try:
                        subprocess.call(["xdg-open", output + '.' + formatF])  # Отображение содержимого файла в Просмотр документа
                    except:
                        webbrowser.open_new(output + '.' + formatF)  # Отображение содержимого файла в назначеном по умолчанию browser
                else:
                    pass
            fileOut.close()

    def setFile(self) -> set:
        """Назначение файла для сохранения отчета"""
        winFile = QtWidgets.QFileDialog(parent=None,
                              caption="Вибір файлу звіту",
                              directory=QtCore.QDir.currentPath() + '/exports/outexport',
                              filter="Всі файли (*);;PDF (*.pdf);;XLSX (*.xlsx);;ODT (*.odt);;ODS (*.ods)")
        winFile.setAcceptMode(1)
        winFile.setLabelText(1, "Ім'я файлу")
        winFile.setLabelText(3, "Гаразд")
        winFile.setLabelText(4, "Відміна")
        result = winFile.exec()
        if result == QtWidgets.QDialog.Accepted:
            f = winFile.selectedFiles()
            self.lineEdit.setText(f[0])
        else:
            pass


class Report_par(QtWidgets.QDialog, egclasswin.Ui_Report_par):
    def __init__(self) -> set:
        """Инициализация окна параметров отчета для геологического калькулятора"""
        super().__init__()
        self.setupUi(self)
        self.paramobekt = str()
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT id,
                                fio,
                                doljnost
                            FROM public.ispol 
                            WHERE ispol.vidrab != 2
                            ORDER BY ispol.fio ASC""")
            recAll = curs.fetchall()
        for i in range(0, len(recAll)):
            recOne = recAll[i]
            self.comboBox.addItem(recOne[1])
            self.comboBox.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
            self.comboBox.setItemData(i, recOne[2], role=QtCore.Qt.UserRole+1)
        self.comboBox.insertItem(0, '')
        self.comboBox.setItemData(0, 0, role=QtCore.Qt.UserRole)
        self.comboBox.setItemData(0, '', role=QtCore.Qt.UserRole+1)
        self.comboBox.setCurrentText('')
        for i in range(0, len(recAll)):
            recOne = recAll[i]
            self.comboBox_2.addItem(recOne[1])
            self.comboBox_2.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
            self.comboBox_2.setItemData(i, recOne[2], role=QtCore.Qt.UserRole+1)
        self.comboBox_2.insertItem(0, '')
        self.comboBox_2.setItemData(0, 0, role=QtCore.Qt.UserRole)
        self.comboBox_2.setItemData(0, '', role=QtCore.Qt.UserRole+1)
        self.comboBox_2.setCurrentText('')
        # Назначение обработчиков сигналов
        self.pushButton.clicked.connect(self.setPar)
        self.pushButton.clicked.connect(self.accept)

    @QtCore.pyqtSlot()
    def setPar(self) -> set:
        """Определение параметров (id - объекта) запроса"""
        self.paramobekt = ''
        numdoc = self.lineEdit.text()
        sost = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.EditRole)
        sost_2 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole + 1)
        prover = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), role=QtCore.Qt.EditRole)
        prover_2 = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), role=QtCore.Qt.UserRole + 1)
        self.paramobekt = self.paramobekt + "(" + str(idActivObekt) + ", '" + numdoc + "', '" + sost + "', '" + sost_2 + "', '" + prover + "', '" + prover_2 + "'),"
        self.paramobekt = self.paramobekt.strip(",")
        return self.paramobekt


class Report_par1(QtWidgets.QDialog, egclasswin.Ui_Report_par1):
    def __init__(self) -> set:
        """Инициализация окна параметров объекта"""
        super().__init__()
        self.setupUi(self)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT id,
                                fio,
                                doljnost
                            FROM public.ispol 
                            WHERE ispol.vidrab != 2
                            ORDER BY ispol.fio ASC""")
            recAll = curs.fetchall()
        for i in range(0, len(recAll)):
            recOne = recAll[i]
            self.comboBox.addItem(recOne[1])
            self.comboBox.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
            self.comboBox.setItemData(i, recOne[2], role=QtCore.Qt.UserRole+1)
        self.comboBox.insertItem(0, '')
        self.comboBox.setItemData(0, 0, role=QtCore.Qt.UserRole)
        self.comboBox.setItemData(0, '', role=QtCore.Qt.UserRole+1)
        self.comboBox.setCurrentText('')
        for i in range(0, len(recAll)):
            recOne = recAll[i]
            self.comboBox_2.addItem(recOne[1])
            self.comboBox_2.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
            self.comboBox_2.setItemData(i, recOne[2], role=QtCore.Qt.UserRole+1)
        self.comboBox_2.insertItem(0, '')
        self.comboBox_2.setItemData(0, 0, role=QtCore.Qt.UserRole)
        self.comboBox_2.setItemData(0, '', role=QtCore.Qt.UserRole+1)
        self.comboBox_2.setCurrentText('')
        sel = "SELECT id, numdog, archnum, name FROM obekt ORDER BY id"
        with UseDatebase(dbconfig) as curs:
            curs.execute(sel)
            recAll = curs.fetchall()
        self.model = QtGui.QStandardItemModel()  # Создание модели
        self.model.setColumnCount(3)
        self.model.setHorizontalHeaderLabels(["Номер \nдоговору",
                                                   "Архівний \nномер",
                                                   "Назва об'єкта"])
        self.model.horizontalHeaderItem(0).setTextAlignment(QtCore.Qt.AlignCenter)
        self.model.horizontalHeaderItem(1).setTextAlignment(QtCore.Qt.AlignCenter)
        self.model.horizontalHeaderItem(2).setTextAlignment(QtCore.Qt.AlignCenter)
        self.selmodel = QtCore.QItemSelectionModel(self.model)  # Создание модели выделения
        self.countrec = len(recAll)
        parentobekt = QtGui.QStandardItem(self.countrec)
        parentobekt.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
        parentobekt.setText("Перелік об'єктів")
        for row in range(0, self.countrec):
            itemrow = recAll[row]
            for column in range(0, 3):
                if column == 0:
                    it = itemrow[1]
                    itemobekt = QtGui.QStandardItem(it)
                    itemobekt.setCheckable(True)
                    itemobekt.setFlags(parentobekt.flags() | QtCore.Qt.ItemIsUserCheckable)
                    itemobekt.setData(itemrow[0], role=QtCore.Qt.UserRole)
                elif column == 1:
                    it = itemrow[2]
                    itemobekt = QtGui.QStandardItem(it)
                    itemobekt.setFlags(parentobekt.flags())
                    itemobekt.setTextAlignment(QtCore.Qt.AlignCenter)
                else:
                    it = itemrow[3]
                    itemobekt = QtGui.QStandardItem(it)
                    itemobekt.setFlags(parentobekt.flags())
                parentobekt.setChild(row, column, itemobekt)
        self.model.appendRow(parentobekt)
        # Создание представления
        self.treeView.setModel(self.model)
        self.treeView.setSelectionModel(self.selmodel)
        self.treeView.setColumnWidth(0, 130)
        self.treeView.setColumnWidth(1, 90)
        ind = self.model.index(1, 1).parent()
        self.treeView.setFirstColumnSpanned(0, ind, True)
        self.treeView.expand(self.model.index(0, 0))
        self.treeView.setSelectionMode(2)
        self.treeView.setSortingEnabled(True)
        self.treeView.sortByColumn(0, QtCore.Qt.AscendingOrder)
        self.treeView.setTextElideMode(QtCore.Qt.ElideNone) # Текст не обрезается
        self.treeView.setWordWrap(True)
        # Назначение обработчиков сигналов
        self.pushButton.clicked.connect(self.accept)
        self.pushButton.clicked.connect(self.setPar)
        self.pushButton_2.clicked.connect(self.setReject)
        self.treeView.clicked.connect(self.checkObekt, QtCore.Qt.DirectConnection)

    @QtCore.pyqtSlot()
    def setPar(self) -> set:
        """Определение параметров (id - объекта) запроса"""
        paramobekt = str()
        numdoc = self.lineEdit.text()
        sost = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.EditRole)
        sost_2 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole + 1)
        prover = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), role=QtCore.Qt.EditRole)
        prover_2 = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), role=QtCore.Qt.UserRole + 1)
        for i in range(0, self.countrec):
            if self.model.item(0, 0).child(i, 0).checkState() == 2:
                id = self.model.item(0, 0).child(i, 0).data(role=QtCore.Qt.UserRole)
                paramobekt = paramobekt + "(" + str(id) + ", '" + numdoc + "', '" + sost + "', '" + sost_2 + "', '" + prover + "', '" + prover_2 + "'),"
            else:
                pass
        paramobekt = paramobekt.strip(",")
        return paramobekt

    @QtCore.pyqtSlot(QtCore.QModelIndex, name='checkObekt')
    def setCheck(self, ind) -> set:
        """Выделение check-полей и заполнение или снятие подсветки с отмеченых check-полей
        ind - индекс елемента"""
        nrow = ind.row()
        self.selmodel.setCurrentIndex(ind, QtCore.QItemSelectionModel.Toggle | QtCore.QItemSelectionModel.Rows)
        selrow = self.selmodel.selectedRows(0)
        if self.model.data(ind) == "Перелік об'єктів":
            i = len(selrow)
            for i in range(0, i):
                nrow = selrow[i].row()
                self.model.item(0, 0).child(nrow, 0).setCheckState(0)
                for j in range(0, 3):
                    self.model.item(0, 0).child(nrow, j).setBackground(QtGui.QBrush(QtCore.Qt.white))
            self.selmodel.clearSelection()
            self.treeView.update()
        else:
            if self.selmodel.isSelected(ind):
                self.model.item(0, 0).child(nrow, 0).setCheckState(2)
                for j in range(0, 3):
                    self.model.item(0, 0).child(nrow, j).setBackground(QtGui.QBrush(QtCore.Qt.cyan))
            else:
                self.model.item(0, 0).child(nrow, 0).setCheckState(0)
                for j in range(0, 3):
                    self.model.item(0, 0).child(nrow, j).setBackground(QtGui.QBrush(QtCore.Qt.white))

    def setReject(self) -> set:
        """Снятие всех отметок перед закрытием окна"""
        selrow = self.selmodel.selectedRows(0)
        i = len(selrow)
        for i in range(0, i):
            nrow = selrow[i].row()
            self.model.item(0, 0).child(nrow, 0).setCheckState(0)
        self.selmodel.clearSelection()
        self.reject()


class Report_par2(QtWidgets.QDialog, egclasswin.Ui_Report_par1):
    def __init__(self) -> set:
        """Инициализация окна параметров объекта с пунктами отбора проб"""
        super().__init__()
        self.setupUi(self)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT id,
                                fio,
                                doljnost
                            FROM public.ispol 
                            WHERE ispol.vidrab != 2
                            ORDER BY ispol.fio ASC""")
            recAll = curs.fetchall()
        for i in range(0, len(recAll)):
            recOne = recAll[i]
            self.comboBox.addItem(recOne[1])
            self.comboBox.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
            self.comboBox.setItemData(i, recOne[2], role=QtCore.Qt.UserRole+1)
        self.comboBox.insertItem(0, '')
        self.comboBox.setItemData(0, 0, role=QtCore.Qt.UserRole)
        self.comboBox.setItemData(0, '', role=QtCore.Qt.UserRole+1)
        self.comboBox.setCurrentText('')
        for i in range(0, len(recAll)):
            recOne = recAll[i]
            self.comboBox_2.addItem(recOne[1])
            self.comboBox_2.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
            self.comboBox_2.setItemData(i, recOne[2], role=QtCore.Qt.UserRole+1)
        self.comboBox_2.insertItem(0, '')
        self.comboBox_2.setItemData(0, 0, role=QtCore.Qt.UserRole)
        self.comboBox_2.setItemData(0, '', role=QtCore.Qt.UserRole+1)
        self.comboBox_2.setCurrentText('')
        sel = "SELECT id, numdog, archnum, name FROM obekt ORDER BY id"
        with UseDatebase(dbconfig) as curs:
            curs.execute(sel)
            recAll = curs.fetchall()
        self.countrec = len(recAll) # Количество строк
        self.model = QtGui.QStandardItemModel()  # Создание модели
#        self.model.setRowCount(self.countrec)
        self.model.setColumnCount(3)
        self.model.setHorizontalHeaderLabels(["Номер \nдоговору",
                                                   "Архівний \nномер",
                                                   "Назва об'єкта"])
        self.model.horizontalHeaderItem(0).setTextAlignment(QtCore.Qt.AlignCenter)
        self.model.horizontalHeaderItem(1).setTextAlignment(QtCore.Qt.AlignCenter)
        self.model.horizontalHeaderItem(2).setTextAlignment(QtCore.Qt.AlignCenter)
        self.selmodel = QtCore.QItemSelectionModel(self.model)  # Создание модели выделения
        # Формирование первого уровня иерархического списка
        parentob = QtGui.QStandardItem(0,3)
        parentob.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
        parentob.setText("Перелік об'єктів та пунктів відбору проб")
        # Формирование второго уровня иерархического списка
        for row in range(0, self.countrec):
            rowOne = recAll[row]
            id_obekt = rowOne[0]
            itemobekt1 = QtGui.QStandardItem(rowOne[1])
            itemobekt1.setCheckable(True)
            itemobekt1.setTristate(True)
            itemobekt1.setAutoTristate(True)
            itemobekt1.setFlags(parentob.flags() | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsAutoTristate)
            itemobekt1.setCheckState(QtCore.Qt.Unchecked)
            itemobekt2 = QtGui.QStandardItem(rowOne[2])
            itemobekt2.setFlags(parentob.flags())
            itemobekt2.setTextAlignment(QtCore.Qt.AlignCenter)
            itemobekt3 = QtGui.QStandardItem(rowOne[3])
            itemobekt3.setFlags(parentob.flags())
            parentob.appendRow([itemobekt1, itemobekt2, itemobekt3])
            # Формирование списка выработок по текущему объекту
            selhole = "SELECT id, id_obekt, vidhole || ' № ' || num_hole AS numhole,\
                                    substring(vidhole for 1) || ' ' || setnumhole(num_hole, 2) AS num_hole\
                                    FROM burehole\
                                    WHERE id_obekt = %(v)s\
                                    ORDER BY vidhole, setnumhole(num_hole, 7)"
            with UseDatebase(dbconfig) as curs:
                curs.execute(selhole, {'v': id_obekt})
                recAllHole = curs.fetchall()
            self.counthole = len(recAllHole)  # Количество скважин по объекту
            for rowhole in range(0, self.counthole):
                strrowhole = recAllHole[rowhole]
                itemhole1 = QtGui.QStandardItem(strrowhole[3])
                itemhole1.setCheckable(True)
                itemhole1.setAutoTristate(True)
                itemhole1.setData(strrowhole[0], QtCore.Qt.UserRole)
                itemhole1.setFlags(itemobekt1.flags())
                itemhole1.setCheckState(QtCore.Qt.Unchecked)
                itemhole2 = QtGui.QStandardItem('')
                itemhole2.setFlags(itemobekt1.flags())
                itemhole3 = QtGui.QStandardItem(strrowhole[2])
                itemhole3.setFlags(itemobekt1.flags())
                itemobekt1.appendRow([itemhole1, itemhole2, itemhole3])
        self.model.appendRow(parentob)
        # Создание представления
        self.treeView.setModel(self.model)
        self.treeView.setSelectionModel(self.selmodel)
        self.treeView.setColumnWidth(0, 130)
        self.treeView.setColumnWidth(1, 90)
        ind = self.model.index(1, 1).parent()
        self.treeView.setFirstColumnSpanned(0, ind, True)
        self.treeView.expand(self.model.index(0, 0))
        self.treeView.setSelectionMode(2)
        self.treeView.setSortingEnabled(True)
        self.treeView.sortByColumn(0, QtCore.Qt.AscendingOrder)
        self.treeView.setTextElideMode(QtCore.Qt.ElideNone)  # Текст не обрезается
        self.treeView.setWordWrap(True)
        # Назначение обработчиков сигналов
        self.pushButton.clicked.connect(self.accept)
        self.pushButton.clicked.connect(self.setPar)
        self.pushButton_2.clicked.connect(self.setReject)
        self.treeView.clicked.connect(self.checkPoint, QtCore.Qt.DirectConnection)

    @QtCore.pyqtSlot()
    def setPar(self) -> set:
        """Определение параметров (id - пункта) запроса"""
        paramhole = str()
        numdoc = self.lineEdit.text()
        sost = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.EditRole)
        sost_2 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole + 1)
        prover = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), role=QtCore.Qt.EditRole)
        prover_2 = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), role=QtCore.Qt.UserRole + 1)
        for i in range(0, self.countrec):
            counthole = self.model.item(0,0).child(i,0).rowCount()
            for j in range(0, counthole):
                if self.model.item(0,0).child(i,0).child(j, 0).checkState() == 2:
                    id = self.model.item(0, 0).child(i, 0).child(j, 0).data(role=QtCore.Qt.UserRole)
                    paramhole = paramhole + "(" + str(
                        id) + ", '" + numdoc + "', '" + sost + "', '" + sost_2 + "', '" + prover + "', '" + prover_2 + "'),"
        paramhole = paramhole.strip(",")
        return paramhole

    @QtCore.pyqtSlot(QtCore.QModelIndex, name='checkPoint')
    def setCheck(self, ind) -> set:
        """Выделение check-полей и заполнение или снятие подсветки с отмеченых check-полей
        ind - индекс елемента"""
        self.treeView.setFocus()
        if self.model.itemFromIndex(ind).parent() == None:  # Первый уровень "Перелік об'єктів". Очистка всех check-box
            selrow = self.selmodel.selectedIndexes()
            countsel = len(selrow)
            for i in range(0, countsel):
                it = self.model.itemFromIndex(selrow[i])
                if it.checkState() == 2:
                    it.setCheckState(0)
                else:
                    pass
            self.selmodel.clearSelection()
            selrow = self.selmodel.selectedIndexes()
        else:
            self.selmodel.setCurrentIndex(ind, QtCore.QItemSelectionModel.Toggle | QtCore.QItemSelectionModel.Rows)
            if self.model.itemFromIndex(ind).parent().parent() == None:  # Второй уровень "Номер Договора"
                nrow = ind.row()
                if self.selmodel.isSelected(ind):
                    itdog = self.model.item(0, 0).child(nrow, 0)
                    itdog.setCheckState(QtCore.Qt.Checked)
                    rcount = itdog.rowCount()
                    for j in range(0, rcount):
                        ithole = self.model.item(0, 0).child(nrow, 0).child(j, 0)
                        ithole.setCheckState(QtCore.Qt.Checked)
                        itindhole = self.model.indexFromItem(ithole)
                        self.selmodel.select(itindhole,
                                             QtCore.QItemSelectionModel.Select | QtCore.QItemSelectionModel.Rows)
                        rcount2 = ithole.rowCount()
                        for jjj in range(0, rcount2):
                            itobr = self.model.item(0, 0).child(nrow, 0).child(j, 0).child(jjj, 0)
                            itobr.setCheckState(QtCore.Qt.Checked)
                            itindobr = self.model.indexFromItem(itobr)
                            self.selmodel.select(itindobr,
                                                 QtCore.QItemSelectionModel.Select | QtCore.QItemSelectionModel.Rows)
                else:
                    itdog = self.model.item(0, 0).child(nrow, 0)
                    itdog.setCheckState(QtCore.Qt.Unchecked)
                    rcount = itdog.rowCount()
                    for j in range(0, rcount):
                        ithole = self.model.item(0, 0).child(nrow, 0).child(j, 0)
                        ithole.setCheckState(QtCore.Qt.Unchecked)
                        itindhole = self.model.indexFromItem(ithole)
                        self.selmodel.select(itindhole,
                                             QtCore.QItemSelectionModel.Deselect | QtCore.QItemSelectionModel.Rows)
                        rcount2 = ithole.rowCount()
                        for jjj in range(0, rcount2):
                            itobr = self.model.item(0, 0).child(nrow, 0).child(j, 0).child(jjj, 0)
                            itobr.setCheckState(QtCore.Qt.Unchecked)
                            itindobr = self.model.indexFromItem(itobr)
                            self.selmodel.select(itindobr,
                                                 QtCore.QItemSelectionModel.Deselect | QtCore.QItemSelectionModel.Rows)
            else:
                if self.model.itemFromIndex(ind).parent().parent().parent() == None:  # Третий уровень "Скважины"
                    nrow = ind.row()
                    if self.selmodel.isSelected(ind):
                        ithole = self.model.itemFromIndex(ind).parent().child(nrow, 0)
                        ithole.setCheckState(QtCore.Qt.Checked)
                        rcount = ithole.rowCount()
                        for jj in range(0, rcount):
                            itobr = self.model.itemFromIndex(ind).parent().child(nrow, 0).child(jj, 0)
                            itobr.setCheckState(QtCore.Qt.Checked)
                            itindobr = self.model.indexFromItem(itobr)
                            self.selmodel.select(itindobr,
                                                 QtCore.QItemSelectionModel.Select | QtCore.QItemSelectionModel.Rows)
                    else:
                        ithole = self.model.itemFromIndex(ind).parent().child(nrow, 0)
                        ithole.setCheckState(QtCore.Qt.Unchecked)
                        rcount = ithole.rowCount()
                        for jj in range(0, rcount):
                            itobr = self.model.itemFromIndex(ind).parent().child(nrow, 0).child(jj, 0)
                            itobr.setCheckState(QtCore.Qt.Unchecked)
                            itindobr = self.model.indexFromItem(itobr)
                            self.selmodel.select(itindobr,
                                                 QtCore.QItemSelectionModel.Deselect | QtCore.QItemSelectionModel.Rows)
                    itdog = self.model.itemFromIndex(ind).parent()
                    itinddog = self.model.indexFromItem(itdog)
                    countcheckhole = 0
                    counthole = self.model.itemFromIndex(ind).parent().rowCount()
                    for i in range(0, counthole):
                        ithole = self.model.itemFromIndex(ind).parent().child(i, 0)
                        if ithole.checkState() == 2:
                            countcheckhole += 1
                    if countcheckhole == counthole:
                        itdog.setCheckState(QtCore.Qt.Checked)
                        self.selmodel.select(itinddog,
                                             QtCore.QItemSelectionModel.Select | QtCore.QItemSelectionModel.Rows)
                    elif countcheckhole == 0:
                        itdog.setCheckState(QtCore.Qt.Unchecked)
                        self.selmodel.select(itinddog,
                                             QtCore.QItemSelectionModel.Deselect | QtCore.QItemSelectionModel.Rows)
                    else:
                        itdog.setCheckState(QtCore.Qt.PartiallyChecked)
                        self.selmodel.select(itinddog,
                                             QtCore.QItemSelectionModel.Select | QtCore.QItemSelectionModel.Rows)

    def setReject(self) -> set:
        """Снятие всех отметок перед закрытием окна"""
        selrow = self.selmodel.selectedIndexes()
        countsel = len(selrow)
        for i in range(0, countsel):
            it = self.model.itemFromIndex(selrow[i])
            if it.checkState() == 2:
                it.setCheckState(0)
            else:
                pass
        self.selmodel.clearSelection()
        self.reject()


class Report_par3(QtWidgets.QDialog, egclasswin.Ui_Report_par1):
    def __init__(self) -> set:
        """Инициализация окна параметров объекта с пунктами статического зондирования"""
        super().__init__()
        self.setupUi(self)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT id,
                                fio,
                                doljnost
                            FROM public.ispol 
                            WHERE ispol.vidrab != 2
                            ORDER BY ispol.fio ASC""")
            recAll = curs.fetchall()
        for i in range(0, len(recAll)):
            recOne = recAll[i]
            self.comboBox.addItem(recOne[1])
            self.comboBox.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
            self.comboBox.setItemData(i, recOne[2], role=QtCore.Qt.UserRole+1)
        self.comboBox.insertItem(0, '')
        self.comboBox.setItemData(0, 0, role=QtCore.Qt.UserRole)
        self.comboBox.setItemData(0, '', role=QtCore.Qt.UserRole+1)
        self.comboBox.setCurrentText('')
        for i in range(0, len(recAll)):
            recOne = recAll[i]
            self.comboBox_2.addItem(recOne[1])
            self.comboBox_2.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
            self.comboBox_2.setItemData(i, recOne[2], role=QtCore.Qt.UserRole+1)
        self.comboBox_2.insertItem(0, '')
        self.comboBox_2.setItemData(0, 0, role=QtCore.Qt.UserRole)
        self.comboBox_2.setItemData(0, '', role=QtCore.Qt.UserRole+1)
        self.comboBox_2.setCurrentText('')
        sel = "SELECT id, numdog, archnum, name FROM obekt ORDER BY id"
        with UseDatebase(dbconfig) as curs:
            curs.execute(sel)
            recAll = curs.fetchall()
        self.countrec = len(recAll) # Количество строк
        self.model = QtGui.QStandardItemModel()  # Создание модели
#        self.model.setRowCount(self.countrec)
        self.model.setColumnCount(3)
        self.model.setHorizontalHeaderLabels(["Номер \nдоговору",
                                                   "Архівний \nномер",
                                                   "Назва об'єкта"])
        self.model.horizontalHeaderItem(0).setTextAlignment(QtCore.Qt.AlignCenter)
        self.model.horizontalHeaderItem(1).setTextAlignment(QtCore.Qt.AlignCenter)
        self.model.horizontalHeaderItem(2).setTextAlignment(QtCore.Qt.AlignCenter)
        self.selmodel = QtCore.QItemSelectionModel(self.model)  # Создание модели выделения
        # Формирование первого уровня иерархического списка
        parentob = QtGui.QStandardItem(0,3)
        parentob.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
        parentob.setText("Перелік об'єктів та пунктів статичного зондування")
        # Формирование второго уровня иерархического списка
        for row in range(0, self.countrec):
            rowOne = recAll[row]
            id_obekt = rowOne[0]
            itemobekt1 = QtGui.QStandardItem(rowOne[1])
            itemobekt1.setCheckable(True)
            itemobekt1.setFlags(parentob.flags() | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsAutoTristate)
            itemobekt1.setCheckState(QtCore.Qt.Unchecked)
            itemobekt2 = QtGui.QStandardItem(rowOne[2])
            itemobekt2.setFlags(parentob.flags())
            itemobekt2.setTextAlignment(QtCore.Qt.AlignCenter)
            itemobekt3 = QtGui.QStandardItem(rowOne[3])
            itemobekt3.setFlags(parentob.flags())
            parentob.appendRow([itemobekt1, itemobekt2, itemobekt3])
            # Формирование списка выработок по текущему объекту
            selhole = "SELECT id, id_obekt, 'Пункт статичного зондування № ' || num_point AS numpointszond,\
                                    'СЗ ' || num_point AS numpoint\
                                    FROM pointszond\
                                    WHERE id_obekt = %(v)s\
                                    ORDER BY setnumhole(num_point, 7)"
            with UseDatebase(dbconfig) as curs:
                curs.execute(selhole, {'v': id_obekt})
                recAllHole = curs.fetchall()
            self.counthole = len(recAllHole)  # Количество пунктов по объекту
            for rowhole in range(0, self.counthole):
                strrowhole = recAllHole[rowhole]
                itemhole1 = QtGui.QStandardItem(strrowhole[3])
                itemhole1.setCheckable(True)
                itemhole1.setData(strrowhole[0], QtCore.Qt.UserRole)
                itemhole1.setFlags(itemobekt1.flags())
                itemhole2 = QtGui.QStandardItem('')
                itemhole2.setFlags(itemobekt2.flags())
                itemhole3 = QtGui.QStandardItem(strrowhole[2])
                itemhole3.setFlags(itemobekt3.flags())
                itemobekt1.appendRow([itemhole1, itemhole2, itemhole3])
        self.model.appendRow(parentob)
        # Создание представления
        self.treeView.setModel(self.model)
        self.treeView.setSelectionModel(self.selmodel)
        self.treeView.setColumnWidth(0, 150)
        self.treeView.setColumnWidth(1, 90)
        ind = self.model.index(1, 1).parent()
        self.treeView.setFirstColumnSpanned(0, ind, True)
        self.treeView.expand(self.model.index(0, 0))
        self.treeView.setSelectionMode(2)
        self.treeView.setSortingEnabled(True)
        self.treeView.sortByColumn(0, QtCore.Qt.AscendingOrder)
        self.treeView.setTextElideMode(QtCore.Qt.ElideNone)  # Текст не обрезается
        self.treeView.setWordWrap(True)
        # Назначение обработчиков сигналов
        self.pushButton.clicked.connect(self.accept)
        self.pushButton.clicked.connect(self.setPar)
        self.pushButton_2.clicked.connect(self.setReject)
        self.treeView.clicked.connect(self.checkPoint, QtCore.Qt.DirectConnection)

    @QtCore.pyqtSlot()
    def setPar(self) -> set:
        """Определение параметров (id - пункта) запроса"""
        paramhole = str()
        numdoc = self.lineEdit.text()
        sost = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.EditRole)
        sost_2 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole + 1)
        prover = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), role=QtCore.Qt.EditRole)
        prover_2 = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), role=QtCore.Qt.UserRole + 1)
        for i in range(0, self.countrec):
            counthole = self.model.item(0,0).child(i,0).rowCount()
            for j in range(0, counthole):
                if self.model.item(0,0).child(i,0).child(j, 0).checkState() == 2:
                    id = self.model.item(0, 0).child(i, 0).child(j, 0).data(role=QtCore.Qt.UserRole)
                    paramhole = paramhole + "(" + str(
                        id) + ", '" + numdoc + "', '" + sost + "', '" + sost_2 + "', '" + prover + "', '" + prover_2 + "'),"
        paramhole = paramhole.strip(",")
        return paramhole

    @QtCore.pyqtSlot(QtCore.QModelIndex, name='checkPoint')
    def setCheck(self, ind) -> set:
        """Выделение check-полей и заполнение или снятие подсветки с отмеченых check-полей
        ind - индекс елемента"""
        self.treeView.setFocus()
        if self.model.itemFromIndex(ind).parent() == None:  # Первый уровень "Перелік об'єктів". Очистка всех check-box
            selrow = self.selmodel.selectedIndexes()
            countsel = len(selrow)
            for i in range(0, countsel):
                it = self.model.itemFromIndex(selrow[i])
                if it.checkState() == 2:
                    it.setCheckState(0)
                else:
                    pass
            self.selmodel.clearSelection()
            selrow = self.selmodel.selectedIndexes()
        else:
            self.selmodel.setCurrentIndex(ind, QtCore.QItemSelectionModel.Toggle | QtCore.QItemSelectionModel.Rows)
            if self.model.itemFromIndex(ind).parent().parent() == None:  # Второй уровень "Номер Договора"
                nrow = ind.row()
                if self.selmodel.isSelected(ind):
                    itdog = self.model.item(0, 0).child(nrow, 0)
                    itdog.setCheckState(QtCore.Qt.Checked)
                    rcount = itdog.rowCount()
                    for j in range(0, rcount):
                        ithole = self.model.item(0, 0).child(nrow, 0).child(j, 0)
                        ithole.setCheckState(QtCore.Qt.Checked)
                        itindhole = self.model.indexFromItem(ithole)
                        self.selmodel.select(itindhole,
                                             QtCore.QItemSelectionModel.Select | QtCore.QItemSelectionModel.Rows)
                        rcount2 = ithole.rowCount()
                        for jjj in range(0, rcount2):
                            itobr = self.model.item(0, 0).child(nrow, 0).child(j, 0).child(jjj, 0)
                            itobr.setCheckState(QtCore.Qt.Checked)
                            itindobr = self.model.indexFromItem(itobr)
                            self.selmodel.select(itindobr,
                                                 QtCore.QItemSelectionModel.Select | QtCore.QItemSelectionModel.Rows)
                else:
                    itdog = self.model.item(0, 0).child(nrow, 0)
                    itdog.setCheckState(QtCore.Qt.Unchecked)
                    rcount = itdog.rowCount()
                    for j in range(0, rcount):
                        ithole = self.model.item(0, 0).child(nrow, 0).child(j, 0)
                        ithole.setCheckState(QtCore.Qt.Unchecked)
                        itindhole = self.model.indexFromItem(ithole)
                        self.selmodel.select(itindhole,
                                             QtCore.QItemSelectionModel.Deselect | QtCore.QItemSelectionModel.Rows)
                        rcount2 = ithole.rowCount()
                        for jjj in range(0, rcount2):
                            itobr = self.model.item(0, 0).child(nrow, 0).child(j, 0).child(jjj, 0)
                            itobr.setCheckState(QtCore.Qt.Unchecked)
                            itindobr = self.model.indexFromItem(itobr)
                            self.selmodel.select(itindobr,
                                                 QtCore.QItemSelectionModel.Deselect | QtCore.QItemSelectionModel.Rows)
            else:
                if self.model.itemFromIndex(ind).parent().parent().parent() == None:  # Третий уровень "Пункты"
                    nrow = ind.row()
                    if self.selmodel.isSelected(ind):
                        ithole = self.model.itemFromIndex(ind).parent().child(nrow, 0)
                        ithole.setCheckState(QtCore.Qt.Checked)
                        rcount = ithole.rowCount()
                        for jj in range(0, rcount):
                            itobr = self.model.itemFromIndex(ind).parent().child(nrow, 0).child(jj, 0)
                            itobr.setCheckState(QtCore.Qt.Checked)
                            itindobr = self.model.indexFromItem(itobr)
                            self.selmodel.select(itindobr,
                                                 QtCore.QItemSelectionModel.Select | QtCore.QItemSelectionModel.Rows)
                    else:
                        ithole = self.model.itemFromIndex(ind).parent().child(nrow, 0)
                        ithole.setCheckState(QtCore.Qt.Unchecked)
                        rcount = ithole.rowCount()
                        for jj in range(0, rcount):
                            itobr = self.model.itemFromIndex(ind).parent().child(nrow, 0).child(jj, 0)
                            itobr.setCheckState(QtCore.Qt.Unchecked)
                            itindobr = self.model.indexFromItem(itobr)
                            self.selmodel.select(itindobr,
                                                 QtCore.QItemSelectionModel.Deselect | QtCore.QItemSelectionModel.Rows)
                    itdog = self.model.itemFromIndex(ind).parent()
                    itinddog = self.model.indexFromItem(itdog)
                    countcheckhole = 0
                    counthole = self.model.itemFromIndex(ind).parent().rowCount()
                    for i in range(0, counthole):
                        ithole = self.model.itemFromIndex(ind).parent().child(i, 0)
                        if ithole.checkState() == 2:
                            countcheckhole += 1
                    if countcheckhole == counthole:
                        itdog.setCheckState(QtCore.Qt.Checked)
                        self.selmodel.select(itinddog,
                                             QtCore.QItemSelectionModel.Select | QtCore.QItemSelectionModel.Rows)
                    elif countcheckhole == 0:
                        itdog.setCheckState(QtCore.Qt.Unchecked)
                        self.selmodel.select(itinddog,
                                             QtCore.QItemSelectionModel.Deselect | QtCore.QItemSelectionModel.Rows)
                    else:
                        itdog.setCheckState(QtCore.Qt.PartiallyChecked)
                        self.selmodel.select(itinddog,
                                             QtCore.QItemSelectionModel.Select | QtCore.QItemSelectionModel.Rows)

    def setReject(self) -> set:
        """Снятие всех отметок перед закрытием окна"""
        selrow = self.selmodel.selectedIndexes()
        countsel = len(selrow)
        for i in range(0, countsel):
            it = self.model.itemFromIndex(selrow[i])
            if it.checkState() == 2:
                it.setCheckState(0)
            else:
                pass
        self.selmodel.clearSelection()
        self.reject()

class Report_par4(QtWidgets.QDialog, egclasswin.Ui_Report_par1):
    def __init__(self) -> set:
        """Инициализация окна параметров объекта с пунктами динамического зондирования"""
        super().__init__()
        self.setupUi(self)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT id,
                                fio,
                                doljnost
                            FROM public.ispol 
                            WHERE ispol.vidrab != 2
                            ORDER BY ispol.fio ASC""")
            recAll = curs.fetchall()
        for i in range(0, len(recAll)):
            recOne = recAll[i]
            self.comboBox.addItem(recOne[1])
            self.comboBox.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
            self.comboBox.setItemData(i, recOne[2], role=QtCore.Qt.UserRole+1)
        self.comboBox.insertItem(0, '')
        self.comboBox.setItemData(0, 0, role=QtCore.Qt.UserRole)
        self.comboBox.setItemData(0, '', role=QtCore.Qt.UserRole+1)
        self.comboBox.setCurrentText('')
        for i in range(0, len(recAll)):
            recOne = recAll[i]
            self.comboBox_2.addItem(recOne[1])
            self.comboBox_2.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
            self.comboBox_2.setItemData(i, recOne[2], role=QtCore.Qt.UserRole+1)
        self.comboBox_2.insertItem(0, '')
        self.comboBox_2.setItemData(0, 0, role=QtCore.Qt.UserRole)
        self.comboBox_2.setItemData(0, '', role=QtCore.Qt.UserRole+1)
        self.comboBox_2.setCurrentText('')
        sel = "SELECT id, numdog, archnum, name FROM obekt ORDER BY id"
        with UseDatebase(dbconfig) as curs:
            curs.execute(sel)
            recAll = curs.fetchall()
        self.countrec = len(recAll) # Количество строк
        self.model = QtGui.QStandardItemModel()  # Создание модели
#        self.model.setRowCount(self.countrec)
        self.model.setColumnCount(3)
        self.model.setHorizontalHeaderLabels(["Номер \nдоговору",
                                                   "Архівний \nномер",
                                                   "Назва об'єкта"])
        self.model.horizontalHeaderItem(0).setTextAlignment(QtCore.Qt.AlignCenter)
        self.model.horizontalHeaderItem(1).setTextAlignment(QtCore.Qt.AlignCenter)
        self.model.horizontalHeaderItem(2).setTextAlignment(QtCore.Qt.AlignCenter)
        self.selmodel = QtCore.QItemSelectionModel(self.model)  # Создание модели выделения
        # Формирование первого уровня иерархического списка
        parentob = QtGui.QStandardItem(0,3)
        parentob.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
        parentob.setText("Перелік об'єктів та пунктів динамічного зондування")
        # Формирование второго уровня иерархического списка
        for row in range(0, self.countrec):
            rowOne = recAll[row]
            id_obekt = rowOne[0]
            itemobekt1 = QtGui.QStandardItem(rowOne[1])
            itemobekt1.setCheckable(True)
            itemobekt1.setFlags(parentob.flags() | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsAutoTristate)
            itemobekt1.setCheckState(QtCore.Qt.Unchecked)
            itemobekt2 = QtGui.QStandardItem(rowOne[2])
            itemobekt2.setFlags(parentob.flags())
            itemobekt2.setTextAlignment(QtCore.Qt.AlignCenter)
            itemobekt3 = QtGui.QStandardItem(rowOne[3])
            itemobekt3.setFlags(parentob.flags())
            parentob.appendRow([itemobekt1, itemobekt2, itemobekt3])
            # Формирование списка выработок по текущему объекту
            selhole = "SELECT id, id_obekt, 'Пункт динамічного зондування № ' || num_point AS numpointdzond,\
                                    'ДЗ ' || num_point AS numpoint\
                                    FROM pointdzond\
                                    WHERE id_obekt = %(v)s\
                                    ORDER BY setnumhole(num_point, 7)"
            with UseDatebase(dbconfig) as curs:
                curs.execute(selhole, {'v': id_obekt})
                recAllHole = curs.fetchall()
            self.counthole = len(recAllHole)  # Количество пунктов по объекту
            for rowhole in range(0, self.counthole):
                strrowhole = recAllHole[rowhole]
                itemhole1 = QtGui.QStandardItem(strrowhole[3])
                itemhole1.setCheckable(True)
                itemhole1.setData(strrowhole[0], QtCore.Qt.UserRole)
                itemhole1.setFlags(itemobekt1.flags())
                itemhole2 = QtGui.QStandardItem('')
                itemhole2.setFlags(itemobekt2.flags())
                itemhole3 = QtGui.QStandardItem(strrowhole[2])
                itemhole3.setFlags(itemobekt3.flags())
                itemobekt1.appendRow([itemhole1, itemhole2, itemhole3])
        self.model.appendRow(parentob)
        # Создание представления
        self.treeView.setModel(self.model)
        self.treeView.setSelectionModel(self.selmodel)
        self.treeView.setColumnWidth(0, 130)
        self.treeView.setColumnWidth(1, 90)
        ind = self.model.index(1, 1).parent()
        self.treeView.setFirstColumnSpanned(0, ind, True)
        self.treeView.expand(self.model.index(0, 0))
        self.treeView.setSelectionMode(2)
        self.treeView.setSortingEnabled(True)
        self.treeView.sortByColumn(0, QtCore.Qt.AscendingOrder)
        self.treeView.setTextElideMode(QtCore.Qt.ElideNone)  # Текст не обрезается
        self.treeView.setWordWrap(True)
        # Назначение обработчиков сигналов
        self.pushButton.clicked.connect(self.accept)
        self.pushButton.clicked.connect(self.setPar)
        self.pushButton_2.clicked.connect(self.setReject)
        self.treeView.clicked.connect(self.checkPoint, QtCore.Qt.DirectConnection)

    @QtCore.pyqtSlot()
    def setPar(self) -> set:
        """Определение параметров (id - пункта) запроса"""
        paramhole = str()
        numdoc = self.lineEdit.text()
        sost = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.EditRole)
        sost_2 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole + 1)
        prover = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), role=QtCore.Qt.EditRole)
        prover_2 = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), role=QtCore.Qt.UserRole + 1)
        for i in range(0, self.countrec):
            counthole = self.model.item(0,0).child(i,0).rowCount()
            for j in range(0, counthole):
                if self.model.item(0,0).child(i,0).child(j, 0).checkState() == 2:
                    id = self.model.item(0, 0).child(i, 0).child(j, 0).data(role=QtCore.Qt.UserRole)
                    paramhole = paramhole + "(" + str(
                        id) + ", '" + numdoc + "', '" + sost + "', '" + sost_2 + "', '" + prover + "', '" + prover_2 + "'),"
        paramhole = paramhole.strip(",")
        return paramhole

    @QtCore.pyqtSlot(QtCore.QModelIndex, name='checkPoint')
    def setCheck(self, ind) -> set:
        """Выделение check-полей и заполнение или снятие подсветки с отмеченых check-полей
        ind - индекс елемента"""
        self.treeView.setFocus()
        if self.model.itemFromIndex(ind).parent() == None:  # Первый уровень "Перелік об'єктів". Очистка всех check-box
            selrow = self.selmodel.selectedIndexes()
            countsel = len(selrow)
            for i in range(0, countsel):
                it = self.model.itemFromIndex(selrow[i])
                if it.checkState() == 2:
                    it.setCheckState(0)
                else:
                    pass
            self.selmodel.clearSelection()
            selrow = self.selmodel.selectedIndexes()
        else:
            self.selmodel.setCurrentIndex(ind, QtCore.QItemSelectionModel.Toggle | QtCore.QItemSelectionModel.Rows)
            if self.model.itemFromIndex(ind).parent().parent() == None:  # Второй уровень "Номер Договора"
                nrow = ind.row()
                if self.selmodel.isSelected(ind):
                    itdog = self.model.item(0, 0).child(nrow, 0)
                    itdog.setCheckState(QtCore.Qt.Checked)
                    rcount = itdog.rowCount()
                    for j in range(0, rcount):
                        ithole = self.model.item(0, 0).child(nrow, 0).child(j, 0)
                        ithole.setCheckState(QtCore.Qt.Checked)
                        itindhole = self.model.indexFromItem(ithole)
                        self.selmodel.select(itindhole,
                                             QtCore.QItemSelectionModel.Select | QtCore.QItemSelectionModel.Rows)
                        rcount2 = ithole.rowCount()
                        for jjj in range(0, rcount2):
                            itobr = self.model.item(0, 0).child(nrow, 0).child(j, 0).child(jjj, 0)
                            itobr.setCheckState(QtCore.Qt.Checked)
                            itindobr = self.model.indexFromItem(itobr)
                            self.selmodel.select(itindobr,
                                                 QtCore.QItemSelectionModel.Select | QtCore.QItemSelectionModel.Rows)
                else:
                    itdog = self.model.item(0, 0).child(nrow, 0)
                    itdog.setCheckState(QtCore.Qt.Unchecked)
                    rcount = itdog.rowCount()
                    for j in range(0, rcount):
                        ithole = self.model.item(0, 0).child(nrow, 0).child(j, 0)
                        ithole.setCheckState(QtCore.Qt.Unchecked)
                        itindhole = self.model.indexFromItem(ithole)
                        self.selmodel.select(itindhole,
                                             QtCore.QItemSelectionModel.Deselect | QtCore.QItemSelectionModel.Rows)
                        rcount2 = ithole.rowCount()
                        for jjj in range(0, rcount2):
                            itobr = self.model.item(0, 0).child(nrow, 0).child(j, 0).child(jjj, 0)
                            itobr.setCheckState(QtCore.Qt.Unchecked)
                            itindobr = self.model.indexFromItem(itobr)
                            self.selmodel.select(itindobr,
                                                 QtCore.QItemSelectionModel.Deselect | QtCore.QItemSelectionModel.Rows)
            else:
                if self.model.itemFromIndex(ind).parent().parent().parent() == None:  # Третий уровень "Пункты"
                    nrow = ind.row()
                    if self.selmodel.isSelected(ind):
                        ithole = self.model.itemFromIndex(ind).parent().child(nrow, 0)
                        ithole.setCheckState(QtCore.Qt.Checked)
                        rcount = ithole.rowCount()
                        for jj in range(0, rcount):
                            itobr = self.model.itemFromIndex(ind).parent().child(nrow, 0).child(jj, 0)
                            itobr.setCheckState(QtCore.Qt.Checked)
                            itindobr = self.model.indexFromItem(itobr)
                            self.selmodel.select(itindobr,
                                                 QtCore.QItemSelectionModel.Select | QtCore.QItemSelectionModel.Rows)
                    else:
                        ithole = self.model.itemFromIndex(ind).parent().child(nrow, 0)
                        ithole.setCheckState(QtCore.Qt.Unchecked)
                        rcount = ithole.rowCount()
                        for jj in range(0, rcount):
                            itobr = self.model.itemFromIndex(ind).parent().child(nrow, 0).child(jj, 0)
                            itobr.setCheckState(QtCore.Qt.Unchecked)
                            itindobr = self.model.indexFromItem(itobr)
                            self.selmodel.select(itindobr,
                                                 QtCore.QItemSelectionModel.Deselect | QtCore.QItemSelectionModel.Rows)
                    itdog = self.model.itemFromIndex(ind).parent()
                    itinddog = self.model.indexFromItem(itdog)
                    countcheckhole = 0
                    counthole = self.model.itemFromIndex(ind).parent().rowCount()
                    for i in range(0, counthole):
                        ithole = self.model.itemFromIndex(ind).parent().child(i, 0)
                        if ithole.checkState() == 2:
                            countcheckhole += 1
                    if countcheckhole == counthole:
                        itdog.setCheckState(QtCore.Qt.Checked)
                        self.selmodel.select(itinddog,
                                             QtCore.QItemSelectionModel.Select | QtCore.QItemSelectionModel.Rows)
                    elif countcheckhole == 0:
                        itdog.setCheckState(QtCore.Qt.Unchecked)
                        self.selmodel.select(itinddog,
                                             QtCore.QItemSelectionModel.Deselect | QtCore.QItemSelectionModel.Rows)
                    else:
                        itdog.setCheckState(QtCore.Qt.PartiallyChecked)
                        self.selmodel.select(itinddog,
                                             QtCore.QItemSelectionModel.Select | QtCore.QItemSelectionModel.Rows)

    def setReject(self) -> set:
        """Снятие всех отметок перед закрытием окна"""
        selrow = self.selmodel.selectedIndexes()
        countsel = len(selrow)
        for i in range(0, countsel):
            it = self.model.itemFromIndex(selrow[i])
            if it.checkState() == 2:
                it.setCheckState(0)
            else:
                pass
        self.selmodel.clearSelection()
        self.reject()


class Report_par5(QtWidgets.QDialog, egclasswin.Ui_Report_par1):
    def __init__(self) -> set:
        """Инициализация окна параметров объекта с пунктами отбора проб и пробами"""
        super().__init__()
        self.setupUi(self)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT id,
                                fio,
                                doljnost
                            FROM public.ispol 
                            WHERE ispol.vidrab != 2
                            ORDER BY ispol.fio ASC""")
            recAll = curs.fetchall()
        for i in range(0, len(recAll)):
            recOne = recAll[i]
            self.comboBox.addItem(recOne[1])
            self.comboBox.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
            self.comboBox.setItemData(i, recOne[2], role=QtCore.Qt.UserRole+1)
        self.comboBox.insertItem(0, '')
        self.comboBox.setItemData(0, 0, role=QtCore.Qt.UserRole)
        self.comboBox.setItemData(0, '', role=QtCore.Qt.UserRole+1)
        self.comboBox.setCurrentText('')
        for i in range(0, len(recAll)):
            recOne = recAll[i]
            self.comboBox_2.addItem(recOne[1])
            self.comboBox_2.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
            self.comboBox_2.setItemData(i, recOne[2], role=QtCore.Qt.UserRole+1)
        self.comboBox_2.insertItem(0, '')
        self.comboBox_2.setItemData(0, 0, role=QtCore.Qt.UserRole)
        self.comboBox_2.setItemData(0, '', role=QtCore.Qt.UserRole+1)
        self.comboBox_2.setCurrentText('')
        sel = "SELECT id, numdog, archnum, name FROM obekt ORDER BY id"
        with UseDatebase(dbconfig) as curs:
            curs.execute(sel)
            recAll = curs.fetchall()
        self.countrec = len(recAll) # Количество строк
        self.model = QtGui.QStandardItemModel()  # Создание модели
        self.model.setColumnCount(3)
        self.model.setHorizontalHeaderLabels(["Номер \nдоговору",
                                                   "Архівний \nномер",
                                                   "Назва об'єкта"])
        self.model.horizontalHeaderItem(0).setTextAlignment(QtCore.Qt.AlignCenter)
        self.model.horizontalHeaderItem(1).setTextAlignment(QtCore.Qt.AlignCenter)
        self.model.horizontalHeaderItem(2).setTextAlignment(QtCore.Qt.AlignCenter)
        self.selmodel = QtCore.QItemSelectionModel(self.model)  # Создание модели выделения
        # Формирование первого уровня иерархического списка
        parentob = QtGui.QStandardItem(0,4)
        parentob.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
        parentob.setText("Перелік об'єктів, пунктів відбору проб та зразків")
        # Формирование второго уровня иерархического списка (объекты)
        for row in range(0, self.countrec):
            rowOne = recAll[row]
            id_obekt = rowOne[0]
            itemobekt1 = QtGui.QStandardItem(rowOne[1])
            itemobekt1.setCheckable(True)
            itemobekt1.setTristate(True)
            itemobekt1.setAutoTristate(True)
            itemobekt1.setFlags(parentob.flags() | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsAutoTristate)
            itemobekt1.setCheckState(QtCore.Qt.Unchecked)
            itemobekt2 = QtGui.QStandardItem(rowOne[2])
            itemobekt2.setFlags(parentob.flags())
            itemobekt2.setTextAlignment(QtCore.Qt.AlignCenter)
            itemobekt3 = QtGui.QStandardItem(rowOne[3])
            itemobekt3.setFlags(parentob.flags())
            parentob.appendRow([itemobekt1, itemobekt2, itemobekt3])
            # Формирование третьего уровня иерархического списка (выработки по текущему объекту)
            selhole = "SELECT id, id_obekt, vidhole || ' № ' ||num_hole AS numhole, substring(vidhole for 1) || ' ' || setnumhole(num_hole, 2) AS num_hole\
                                    FROM burehole\
                                    WHERE id_obekt = %(v)s\
                                    ORDER BY vidhole, setnumhole(num_hole, 7)"
            with UseDatebase(dbconfig) as curs:
                curs.execute(selhole, {'v': id_obekt})
                recAllHole = curs.fetchall()
            self.counthole = len(recAllHole)  # Количество скважин по объекту
            for rowhole in range(0, self.counthole):
                strrowhole = recAllHole[rowhole]
                itemhole1 = QtGui.QStandardItem(strrowhole[3])
                itemhole1.setCheckable(True)
                itemhole1.setTristate(True)
                itemhole1.setAutoTristate(True)
                itemhole1.setFlags(itemobekt1.flags())
                itemhole1.setCheckState(QtCore.Qt.Unchecked)
                itemhole2 = QtGui.QStandardItem('')
                itemhole2.setFlags(itemobekt2.flags())
                itemhole3 = QtGui.QStandardItem(strrowhole[2])
                itemhole3.setFlags(itemobekt3.flags())
                itemobekt1.appendRow([itemhole1, itemhole2, itemhole3])
                id_burehole = strrowhole[0]
                # Формирование четвертого уровня иерархического списка (образцы по скважинам)
                selobrazec = "SELECT id, id_burehole, setnumhole(num_obrazec, 1), 'Зразок № ' || setnumhole(num_obrazec, 1) || '. Глибина відбору ' || glub_otbor || ' м. ' || vid_obr || ' (' || LOWER(mater_obr) || ')' AS numobrazec\
                                        FROM obrazec\
                                        WHERE id_burehole = %(v)s\
                                        ORDER BY glub_otbor ASC"
                with UseDatebase(dbconfig) as curs:
                    curs.execute(selobrazec, {'v': id_burehole})
                    recAllObrazec = curs.fetchall()
                self.countobrazec = len(recAllObrazec)  # Количество образцов по скважине
                for rowobrazec in range(0, self.countobrazec):
                    strrowobrazec = recAllObrazec[rowobrazec]
                    itemobrazec1 = QtGui.QStandardItem(strrowobrazec[2])
                    itemobrazec1.setCheckable(True)
                    itemobrazec1.setTristate(True)
                    itemobrazec1.setAutoTristate(True)
                    itemobrazec1.setFlags(itemhole1.flags())
                    itemobrazec1.setData(strrowobrazec[0], QtCore.Qt.UserRole)
                    itemobrazec2 = QtGui.QStandardItem('')
                    itemobrazec2.setFlags(itemhole2.flags())
                    itemobrazec3 = QtGui.QStandardItem(strrowobrazec[3])
                    itemobrazec3.setFlags(itemhole3.flags())
                    itemhole1.appendRow([itemobrazec1, itemobrazec2, itemobrazec3])
        self.model.appendRow(parentob)
        # Создание представления
        self.treeView.setModel(self.model)
        self.treeView.setSelectionModel(self.selmodel)
        self.treeView.setColumnWidth(0, 130)
        self.treeView.setColumnWidth(1, 90)
        self.treeView.setWordWrap(True)
        ind = self.model.index(1, 1)
        self.treeView.setFirstColumnSpanned(0, ind, True)
        self.treeView.expand(self.model.index(0, 0))
        self.treeView.setSelectionMode(2)
        self.treeView.setSortingEnabled(True)
        self.treeView.sortByColumn(0, QtCore.Qt.AscendingOrder)
        self.treeView.setTextElideMode(QtCore.Qt.ElideNone)  # Текст не обрезается
        self.treeView.setWordWrap(True)
        self.treeView.resetIndentation()
        # Назначение обработчиков сигналов
        self.pushButton.clicked.connect(self.accept)
        self.pushButton.clicked.connect(self.setPar)
        self.pushButton_2.clicked.connect(self.setReject)
        self.treeView.clicked.connect(self.checkPoint, QtCore.Qt.DirectConnection)

    @QtCore.pyqtSlot()
    def setPar(self) -> set:
        """Определение параметров (id - образца) запроса"""
        paramobr = str()
        numdoc = self.lineEdit.text()
        sost = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.EditRole)
        sost_2 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole + 1)
        prover = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), role=QtCore.Qt.EditRole)
        prover_2 = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), role=QtCore.Qt.UserRole + 1)
        for i in range(0, self.countrec):
            counthole = self.model.item(0, 0).child(i, 0).rowCount()
            for j in range(0, counthole):
                countobrazec = self.model.item(0, 0).child(i, 0).child(j, 0).rowCount()
                for ij in range(0, countobrazec):
                    if self.model.item(0, 0).child(i, 0).child(j, 0).child(ij, 0).checkState() == 2:
                        id = self.model.item(0, 0).child(i, 0).child(j, 0).child(ij, 0).data(role=QtCore.Qt.UserRole)
                        paramobr = paramobr + "(" + str(
                            id) + ", '" + numdoc + "', '" + sost + "', '" + sost_2 + "', '" + prover + "', '" + prover_2 + "'),"
        paramobr = paramobr.strip(",")
        return paramobr

    @QtCore.pyqtSlot(QtCore.QModelIndex, name='checkPoint')
    def setCheck(self, ind) -> set:
        """Выделение check-полей и заполнение или снятие подсветки с отмеченых check-полей
        ind - индекс елемента"""
        self.treeView.setFocus()
        if self.model.itemFromIndex(ind).parent() == None: # Первый уровень "Перелік об'єктів". Очистка всех check-box
            selrow = self.selmodel.selectedIndexes()
            countsel = len(selrow)
            for i in range(0, countsel):
                it = self.model.itemFromIndex(selrow[i])
                if it.checkState() == 2:
                    it.setCheckState(0)
                else:
                    pass
            self.selmodel.clearSelection()
            selrow = self.selmodel.selectedIndexes()
        else:
            self.selmodel.setCurrentIndex(ind, QtCore.QItemSelectionModel.Toggle | QtCore.QItemSelectionModel.Rows)
            if self.model.itemFromIndex(ind).parent().parent() == None: # Второй уровень "Номер Договора"
                nrow = ind.row()
                if self.selmodel.isSelected(ind):
                    itdog = self.model.item(0, 0).child(nrow, 0)
                    itdog.setCheckState(QtCore.Qt.Checked)
                    rcount = itdog.rowCount()
                    for j in range(0, rcount):
                        ithole = self.model.item(0, 0).child(nrow, 0).child(j, 0)
                        ithole.setCheckState(QtCore.Qt.Checked)
                        itindhole = self.model.indexFromItem(ithole)
                        self.selmodel.select(itindhole, QtCore.QItemSelectionModel.Select | QtCore.QItemSelectionModel.Rows)
                        rcount2 = ithole.rowCount()
                        for jjj in range(0, rcount2):
                            itobr = self.model.item(0, 0).child(nrow, 0).child(j, 0).child(jjj, 0)
                            itobr.setCheckState(QtCore.Qt.Checked)
                            itindobr = self.model.indexFromItem(itobr)
                            self.selmodel.select(itindobr, QtCore.QItemSelectionModel.Select | QtCore.QItemSelectionModel.Rows)
                else:
                    itdog = self.model.item(0, 0).child(nrow, 0)
                    itdog.setCheckState(QtCore.Qt.Unchecked)
                    rcount = itdog.rowCount()
                    for j in range(0, rcount):
                        ithole = self.model.item(0, 0).child(nrow, 0).child(j, 0)
                        ithole.setCheckState(QtCore.Qt.Unchecked)
                        itindhole = self.model.indexFromItem(ithole)
                        self.selmodel.select(itindhole, QtCore.QItemSelectionModel.Deselect | QtCore.QItemSelectionModel.Rows)
                        rcount2 = ithole.rowCount()
                        for jjj in range(0, rcount2):
                            itobr = self.model.item(0, 0).child(nrow, 0).child(j, 0).child(jjj, 0)
                            itobr.setCheckState(QtCore.Qt.Unchecked)
                            itindobr = self.model.indexFromItem(itobr)
                            self.selmodel.select(itindobr, QtCore.QItemSelectionModel.Deselect | QtCore.QItemSelectionModel.Rows)
            else:
                if self.model.itemFromIndex(ind).parent().parent().parent() == None:    # Третий уровень "Скважины"
                    nrow = ind.row()
                    if self.selmodel.isSelected(ind):
                        ithole = self.model.itemFromIndex(ind).parent().child(nrow, 0)
                        ithole.setCheckState(QtCore.Qt.Checked)
                        rcount = ithole.rowCount()
                        for jj in range(0, rcount):
                            itobr = self.model.itemFromIndex(ind).parent().child(nrow, 0).child(jj, 0)
                            itobr.setCheckState(QtCore.Qt.Checked)
                            itindobr = self.model.indexFromItem(itobr)
                            self.selmodel.select(itindobr, QtCore.QItemSelectionModel.Select | QtCore.QItemSelectionModel.Rows)
                    else:
                        ithole = self.model.itemFromIndex(ind).parent().child(nrow, 0)
                        ithole.setCheckState(QtCore.Qt.Unchecked)
                        rcount = ithole.rowCount()
                        for jj in range(0, rcount):
                            itobr = self.model.itemFromIndex(ind).parent().child(nrow, 0).child(jj, 0)
                            itobr.setCheckState(QtCore.Qt.Unchecked)
                            itindobr = self.model.indexFromItem(itobr)
                            self.selmodel.select(itindobr, QtCore.QItemSelectionModel.Deselect | QtCore.QItemSelectionModel.Rows)
                    itdog = self.model.itemFromIndex(ind).parent()
                    itinddog = self.model.indexFromItem(itdog)
                    countcheckhole = 0
                    counthole = self.model.itemFromIndex(ind).parent().rowCount()
                    for i in range(0, counthole):
                        ithole = self.model.itemFromIndex(ind).parent().child(i, 0)
                        if ithole.checkState() == 2:
                            countcheckhole += 1
                    if countcheckhole == counthole:
                        itdog.setCheckState(QtCore.Qt.Checked)
                        self.selmodel.select(itinddog, QtCore.QItemSelectionModel.Select | QtCore.QItemSelectionModel.Rows)
                    elif countcheckhole == 0:
                        itdog.setCheckState(QtCore.Qt.Unchecked)
                        self.selmodel.select(itinddog, QtCore.QItemSelectionModel.Deselect | QtCore.QItemSelectionModel.Rows)
                    else:
                        itdog.setCheckState(QtCore.Qt.PartiallyChecked)
                        self.selmodel.select(itinddog, QtCore.QItemSelectionModel.Select | QtCore.QItemSelectionModel.Rows)
                else:   # Четвертый уровень "Образцы"
                    nrow = ind.row()
                    if self.selmodel.isSelected(ind):
                        itobr = self.model.itemFromIndex(ind).parent().child(nrow, 0)
                        itobr.setCheckState(QtCore.Qt.Checked)
                    else:
                        itobr = self.model.itemFromIndex(ind).parent().child(nrow, 0)
                        itobr.setCheckState(QtCore.Qt.Unchecked)
                    ithole = self.model.itemFromIndex(ind).parent()
                    itindhole = self.model.indexFromItem(ithole)
                    countcheckobr = 0
                    countobr = self.model.itemFromIndex(ind).parent().rowCount()
                    for i in range(0, countobr):
                        itobr = self.model.itemFromIndex(ind).parent().child(i, 0)
                        if itobr.checkState() == 2:
                            countcheckobr += 1
                    if countcheckobr == countobr:
                        ithole.setCheckState(QtCore.Qt.Checked)
                        self.selmodel.select(itindhole, QtCore.QItemSelectionModel.Select | QtCore.QItemSelectionModel.Rows)
                    elif countcheckobr == 0:
                        ithole.setCheckState(QtCore.Qt.Unchecked)
                        self.selmodel.select(itindhole, QtCore.QItemSelectionModel.Deselect | QtCore.QItemSelectionModel.Rows)
                    else:
                        ithole.setCheckState(QtCore.Qt.PartiallyChecked)
                        self.selmodel.select(itindhole, QtCore.QItemSelectionModel.Select | QtCore.QItemSelectionModel.Rows)
                    ind = self.model.indexFromItem(self.model.itemFromIndex(ind).parent())    # Переход на уровень Скважины
                    itdog = self.model.itemFromIndex(ind).parent()
                    itinddog = self.model.indexFromItem(itdog)
                    countcheckhole = 0
                    counthole = self.model.itemFromIndex(ind).parent().rowCount()
                    for i in range(0, counthole):
                        ithole = self.model.itemFromIndex(ind).parent().child(i, 0)
                        if ithole.checkState() == 2:
                            countcheckhole += 1
                    if countcheckhole == counthole:
                        itdog.setCheckState(QtCore.Qt.Checked)
                        self.selmodel.select(itinddog,
                                             QtCore.QItemSelectionModel.Select | QtCore.QItemSelectionModel.Rows)
                    elif countcheckhole == 0:
                        itdog.setCheckState(QtCore.Qt.Unchecked)
                        self.selmodel.select(itinddog,
                                             QtCore.QItemSelectionModel.Deselect | QtCore.QItemSelectionModel.Rows)
                    else:
                        itdog.setCheckState(QtCore.Qt.PartiallyChecked)
                        self.selmodel.select(itinddog,
                                             QtCore.QItemSelectionModel.Select | QtCore.QItemSelectionModel.Rows)

    def setReject(self) -> set:
        """Снятие всех отметок перед закрытием окна"""
        selrow = self.selmodel.selectedIndexes()
        countsel = len(selrow)
        for i in range(0, countsel):
            it = self.model.itemFromIndex(selrow[i])
            if it.checkState() == 2:
                it.setCheckState(0)
            else:
                pass
        self.selmodel.clearSelection()
        self.reject()


class ExportWindow(QtWidgets.QDialog, egclasswin.Ui_Export_win):
    def __init__(self) -> set:
        """Инициализация окна Экспорта"""
        super().__init__()
        self.setupUi(self)
        recAll = [("Текстовий файл - значення розділені комами, Comma Separated Values (.csv)", ".csv", "CSV, HEADER"),
                  ("Текстовий файл - значення розділені табуляцією (.txt)", ".txt", "TEXT"),
                  ("Електронна таблиця Microsoft Exel 1997-2003 (.xls)", ".xls", "CSV, HEADER"),
                  ("Електронна таблиця Microsoft Exel 2003-2007 (.xml)", ".xml", "CSV, HEADER"),
                  ("Електронна таблиця Microsoft Exel 2007-2013 (.xlsx)", ".xlsx", "CSV, HEADER"),
                  ("Електронна таблиця ODF (.ods)", ".ods", "CSV, HEADER"),
                  ("Файл двоїчного формату binary (.bin)", ".bin", "BINARY")]
        for i in range(0, len(recAll)):
            recOne = recAll[i]
            self.comboBox.addItem(recOne[0])
            self.comboBox.setItemData(i, recOne[1], role=QtCore.Qt.UserRole)
            self.comboBox.setItemData(i, recOne[2], role=QtCore.Qt.UserRole + 1)
        model = QtGui.QStandardItemModel()        # Создание модели
        model.setColumnCount(1)
        # Формирование списка экспортних материалов
        parent = QtGui.QStandardItem(3)
        parent.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
        parent.setText("Загальні дані")
        podrazdel = [("Характеристика об'єктів (проектів)", "obekt", 1),
                     ("Характеристика Замовників", "customer", 1),
                     ("Характеристика Виконавців", "contractor", 1)]
        for row in range(0, 3):
            itemrow = podrazdel[row]
            for column in range(0, 1):
                it = itemrow[column]
                item = QtGui.QStandardItem(it)
                item.setFlags(parent.flags())
                parent.setChild(row, column, item)
                item.setData(itemrow[1], role=QtCore.Qt.UserRole)
                item.setData(itemrow[2], role=QtCore.Qt.UserRole + 1)
        model.appendRow(parent)
        parent = QtGui.QStandardItem(3)
        parent.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
        parent.setText("Характеристика пунктів вишукування")
        podrazdel = [("Пункти статичного зондування", "pointszond", 3),
                     ("Пункти динамічного зондування", "pointdzond", 4),
                     ("Свердловини, шурфи та інші пункти відбору проб", "burehole", 2)]
        for row in range(0, 3):
            itemrow = podrazdel[row]
            for column in range(0, 1):
                it = itemrow[column]
                item = QtGui.QStandardItem(it)
                item.setFlags(parent.flags())
                parent.setChild(row, column, item)
                item.setData(itemrow[1], role=QtCore.Qt.UserRole)
                item.setData(itemrow[2], role=QtCore.Qt.UserRole + 1)
        model.appendRow(parent)
        parent = QtGui.QStandardItem(3)
        parent.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
        parent.setText("Пошаровий опис пунктів відбору проб та характеристика проб і зразків")
        podrazdel = [("Пошаровий опис пунктів відбору проб", "strate", 2),
                     ("Каталог проб за порядком номерів", "obrazecn", 2),
                     ("Каталог проб за видами зразків", "obrazecv", 2)]
        for row in range(0, 3):
            itemrow = podrazdel[row]
            for column in range(0, 1):
                it = itemrow[column]
                item = QtGui.QStandardItem(it)
                item.setFlags(parent.flags())
                parent.setChild(row, column, item)
                item.setData(itemrow[1], role=QtCore.Qt.UserRole)
                item.setData(itemrow[2], role=QtCore.Qt.UserRole + 1)
        model.appendRow(parent)
        parent = QtGui.QStandardItem(3)
        parent.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
        parent.setText("Результати польових іспитів")
        podrazdel = [("Результати статичного зондування", "statzond", 3),
                     ("Значення граничного опору забівної палі за даними статичного зондування", "szondsvay", 3),
                     ("Результати динамічного зондування", "dinzond", 4)]
        for row in range(0, 3):
            itemrow = podrazdel[row]
            for column in range(0, 1):
                it = itemrow[column]
                item = QtGui.QStandardItem(it)
                item.setFlags(parent.flags())
                parent.setChild(row, column, item)
                item.setData(itemrow[1], role=QtCore.Qt.UserRole)
                item.setData(itemrow[2], role=QtCore.Qt.UserRole + 1)
        model.appendRow(parent)
        parent = QtGui.QStandardItem(3)
        parent.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
        parent.setText("Результати лабораторних випробувань фізичних властивостей ґрунтів")
        podrazdel = [("Результати лабораторних визначень фізичних властивостей незв'язних ґрунтів", "pesok", 2),
                     ("Результати лабораторних визначень гранулометричного складу незв'язних ґрунтів", "granpes", 2),
                     ("Результати лабораторних визначень гранулометричного складу і фізико-механічних властивостей незв'язних ґрунтів", "granfizpes", 2)]
        for row in range(0, 3):
            itemrow = podrazdel[row]
            for column in range(0, 1):
                it = itemrow[column]
                item = QtGui.QStandardItem(it)
                item.setFlags(parent.flags())
                parent.setChild(row, column, item)
                item.setData(itemrow[1], role=QtCore.Qt.UserRole)
                item.setData(itemrow[2], role=QtCore.Qt.UserRole + 1)
        model.appendRow(parent)
        parent = QtGui.QStandardItem(7)
        parent.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
        parent.setText("Результати лабораторних випробувань механічних властивостей ґрунтів")
        podrazdel = [("Результати визначення міцності ґрунту методом одноплощинного зрізу", "srez", 5),
                     ("Результати визначення міцності ґрунту методом одновісного стиску", "2", 5),
                     ("Результати визначення міцності та деформованості ґрунту методом тривісного стиску", "3", 5),
                     ("Результати визначення деформованості ґрунту методом компресійного стиску", "compres", 5),
                     ("Результати визначення властивостей просідання ґрунту", "prosad", 5),
                     ("Результати визначення набухаючих властивостей ґрунту ", "nabuh", 5),
                     ("Результати визначення властивостей усадки ґрунту ", "usadka", 5)]
        for row in range(0, 7):
            itemrow = podrazdel[row]
            for column in range(0, 1):
                it = itemrow[column]
                item = QtGui.QStandardItem(it)
                item.setFlags(parent.flags())
                parent.setChild(row, column, item)
                item.setData(itemrow[1], role=QtCore.Qt.UserRole)
                item.setData(itemrow[2], role=QtCore.Qt.UserRole + 1)
        model.appendRow(parent)
        parent = QtGui.QStandardItem(2)
        parent.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
        parent.setText("Результати лабораторних випробувань хімічних властивостей ґрунтів та води")
        podrazdel = [("Результати визначень ступеня хімічної агресивності ґрунтів", "agressgrunt", 1),
                     ("Результати визначень ступеня хімічної агресивності води", "agressvoda", 1)]
        for row in range(0, 2):
            itemrow = podrazdel[row]
            for column in range(0, 1):
                it = itemrow[column]
                item = QtGui.QStandardItem(it)
                item.setFlags(parent.flags())
                parent.setChild(row, column, item)
                item.setData(itemrow[1], role=QtCore.Qt.UserRole)
                item.setData(itemrow[2], role=QtCore.Qt.UserRole + 1)
        model.appendRow(parent)
        parent = QtGui.QStandardItem(2)
        parent.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
        parent.setText("Результати статистичної обробки властивостей ґрунтів")
        podrazdel = [("Нормативні та розрахункові значення фізичних властивостей ґрунтів", "1", 1),
                     ("Нормативні та розрахункові значення механічних властивостей ґрунтів", "3", 1)]
        for row in range(0, 2):
            itemrow = podrazdel[row]
            for column in range(0, 1):
                it = itemrow[column]
                item = QtGui.QStandardItem(it)
                item.setFlags(parent.flags())
                parent.setChild(row, column, item)
                item.setData(itemrow[1], role=QtCore.Qt.UserRole)
                item.setData(itemrow[2], role=QtCore.Qt.UserRole + 1)
        model.appendRow(parent)
        # Создание представления
        self.treeView.setModel(model)
        self.treeView.setColumnWidth(0, 580)
        self.treeView.setColumnHidden(1, True)
        self.treeView.setAnimated(True)
        # Назначение обработчиков сигналов
        self.pushButton.clicked.connect(self.accept)
        self.pushButton.clicked.connect(self.setExport)
        self.pushButton_2.clicked.connect(self.reject)
        self.comboBox.activated.connect(self.setFormat)
        self.toolButton.clicked.connect(self.setFile)
        self.refresh()

    def refresh(self) -> set:
        """Обновление окна"""
        output = os.path.dirname(os.path.abspath(__file__)) + '/export/exportfile'
        self.lineEdit.setText(output)

    def setFormat(self) -> set:
        """Выбор формата экспортируемого файла"""
        formatF = []
        formatF.append(self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole))
        formatF.append(self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole + 1))
        return formatF

    def setExport(self) -> set:
        """Выбор экспорта"""
        for sel in self.treeView.selectedIndexes():
            nameExport = sel.data(role=QtCore.Qt.UserRole)
            typeExport = sel.data(role=QtCore.Qt.UserRole + 1)  # Тип файла для выбора параметров экспорта
            # typeExport = 1 Выбор объектов
            # typeExport = 2 Выбор объектов и пунктов (скважин)
            # typeExport = 3 Выбор объектов и пунктов статического зондирования
            # typeExport = 4 Выбор объектов и пунктов динамического зондирования
            # typeExport = 5 Выбор объектов, скважин и образцов
        formatF = self.setFormat()
        if self.treeView.selectedIndexes() == []:
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning,"Формування експорту",
                                           "Не обрано вид матеріалів для експорту. Необхідно вибрати матеріали з переліку")
            btnOK = QtWidgets.QPushButton("&OK")
            btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
            result = self.formMassWin.exec()
        else:
            try:
                self.getExport(nameExport, formatF, typeExport)
            except:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "Формування експорту",
                                               "Недостатньо прав користувача. Зверніться до адміністратора для вирішення проблеми.")
                btnOK = QtWidgets.QPushButton("&OK")
                btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                result = self.formMassWin.exec()

    def outExport(self, nameExport, formatF) -> set:
        """Файл экспорта на выходе"""
        if self.lineEdit.text() is None or self.lineEdit.text() == "":
            output = os.path.dirname(os.path.abspath(__file__)) + '/export/' + nameExport
        else:
            output = self.lineEdit.text()
        output = output + formatF[0]
        return output

    def getParametr(self,typeExport) -> set:
        """Выбор параметров экспорта"""
        if typeExport == 1:
            formPar = Export_par1()
            formPar.exec()
            parId = formPar.setPar()
        elif typeExport == 2:
            formPar = Export_par2()
            formPar.exec()
            parId = formPar.setPar()
        elif typeExport == 3:
            formPar = Export_par3()
            formPar.exec()
            parId = formPar.setPar()
        elif typeExport == 4:
            formPar = Export_par4()
            formPar.exec()
            parId = formPar.setPar()
        elif typeExport == 5:
            formPar = Export_par5()
            formPar.exec()
            parId = formPar.setPar()
        else:
            parId = ''
        return parId

    def getExport(self, nameExport, formatF, typeExport) -> set:
        """Создание экспортного файла по заданым параметрам у клиента"""
        par1 = self.getParametr(typeExport)
        if par1 == '':
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "Формування експортних матеріалів",
                                           "Відсутні вибрані матеріали, або не обрано параметрів для експорту. "
                                           "Необхідно вибрати параметри для експорту (об'єкт, пункт відбору зразків або зразки) з переліку")
            btnOK = QtWidgets.QPushButton("&OK")
            btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
            result = self.formMassWin.exec()
            outPar = False  # Параметры экспорта не указаны
        else:
            if typeExport == 1: # Формирование списка ID объектов
                with UseDatebase(dbconfig) as curs:
                    curs.execute("CREATE OR REPLACE VIEW idobekt (id, numdoc, sost, sost_2, prover, prover_2) AS (VALUES " + par1 + ")")
            elif typeExport == 2: # Формирование списка ID пунктов отбора проб
                with UseDatebase(dbconfig) as curs:
                    curs.execute("CREATE OR REPLACE VIEW idburehole (id, numdoc, sost, sost_2, prover, prover_2) AS (VALUES " + par1 + ")")
            elif typeExport == 3: # Формирование списка ID пунктов статического зондирования
                with UseDatebase(dbconfig) as curs:
                    curs.execute("CREATE OR REPLACE VIEW idpointszond (id, numdoc, sost, sost_2, prover, prover_2) AS (VALUES " + par1 + ")")
            elif typeExport == 4: # Формирование списка ID пунктов динамического зондирования
                with UseDatebase(dbconfig) as curs:
                    curs.execute("CREATE OR REPLACE VIEW idpointdzond (id, numdoc, sost, sost_2, prover, prover_2) AS (VALUES " + par1 + ")")
            else:
                with UseDatebase(dbconfig) as curs: # Формирование списка ID образцов
                    curs.execute("CREATE OR REPLACE VIEW idobrazec (id, numdoc, sost, sost_2, prover, prover_2) AS (VALUES " + par1 + ")")
            outPar = True   # Параметры экспорта указаны
        output = self.outExport(nameExport, formatF)
        if nameExport == "obekt":
            sql = """COPY (SELECT obekt.*, idobekt.* 
                            FROM obekt, idobekt 
                            WHERE obekt.id = idobekt.id) 
                            TO STDOUT WITH (FORMAT """ + formatF[1] + ");"
            with UseDatebase(dbconfig) as curs:
                with open(output, 'wb') as fileout:
                    curs.copy_expert(sql, fileout)
            outPar = True  # Параметры экспорта указаны
        elif nameExport == "customer":
            sql = """COPY (SELECT obekt.id AS id_obekt, customer.*, idobekt.*
                            FROM obekt, customer, idobekt
                            WHERE obekt.id = idobekt.id AND obekt.id_customer = customer.id) 
                            TO STDOUT WITH (FORMAT """ + formatF[1] + ");"
            with UseDatebase(dbconfig) as curs:
                with open(output, 'wb') as fileout:
                    curs.copy_expert(sql, fileout)
            outPar = True  # Параметры экспорта указаны
        elif nameExport == "contractor":
            sql = """COPY (SELECT obekt.id AS id_obekt, firma.*, idobekt.*
                            FROM obekt, firma, idobekt
                            WHERE obekt.id = idobekt.id AND obekt.id_firma = firma.id) 
                            TO STDOUT WITH (FORMAT """ + formatF[1] + ");"
            with UseDatebase(dbconfig) as curs:
                with open(output, 'wb') as fileout:
                    curs.copy_expert(sql, fileout)
            outPar = True  # Параметры экспорта указаны
        elif nameExport == "pointszond":
            sql = """COPY (SELECT pointszond.*,
                            idpointszond.*,
                            tipzonds.*,
                            vburman.doljnost AS burdoljnost,
                            vburman.fio AS burfio,
                            vgeoman.doljnost AS geodoljnost,
                            vgeoman.fio AS geofio,
                            vgdzman.doljnost AS gdzdoljnost,
                            vgdzman.fio AS gdzfio
                           FROM pointszond,
                            idpointszond,
                            tipzonds,
                            vburman,
                            vgeoman,
                            vgdzman
                          WHERE pointszond.id = idpointszond.id AND pointszond.id_zond = tipzonds.id AND pointszond.id_burman = vburman.id AND pointszond.id_geoman = vgeoman.id AND pointszond.id_gdzman = vgdzman.id
                          ORDER BY (setnumhole(pointszond.num_point, 7))) 
                          TO STDOUT WITH (FORMAT """ + formatF[1] + ");"
            with UseDatebase(dbconfig) as curs:
                with open(output, 'wb') as fileout:
                    curs.copy_expert(sql, fileout)
            outPar = True  # Параметры экспорта указаны
        elif nameExport == "burehole":
            sql = """COPY (SELECT burehole.id,
                                burehole.id_obekt,
                                burehole.num_hole,
                                burehole.diametr,
                                burehole.koord_x,
                                burehole.koord_y,
                                burehole.koord_z,
                                burehole.glub,
                                burehole.date_start,
                                burehole.date_finish,
                                burehole.vidbur,
                                burehole.vidhole,
                                vburman.doljnost AS burdoljnost,
                                vburman.fio AS burfio,
                                vgeoman.doljnost AS geodoljnost,
                                vgeoman.fio AS geofio,
                                vgdzman.doljnost AS gdzdoljnost,
                                vgdzman.fio AS gdzfio,
                                tipbur.tip_name,
                                tipbur.bur_name,
                                idburehole.numdoc,
                                idburehole.sost_2,
                                idburehole.sost,
                                idburehole.prover_2,
                                idburehole.prover
                           FROM burehole,
                                vburman,
                                vgeoman,
                                vgdzman,
                                tipbur,
                                idburehole
                          WHERE burehole.id = idburehole.id AND burehole.id_burman = vburman.id AND burehole.id_geoman = vgeoman.id AND burehole.id_gdzman = vgdzman.id AND burehole.id_bur = tipbur.id
                          ORDER BY (setnumhole(burehole.num_hole, 7))) 
                          TO STDOUT WITH (FORMAT """ + formatF[1] + ");"
            with UseDatebase(dbconfig) as curs:
                with open(output, 'wb') as fileout:
                    curs.copy_expert(sql, fileout)
            outPar = True  # Параметры экспорта указаны
        elif nameExport == "strate":
            sql = """COPY (SELECT strate.*, idburehole.*
                            FROM strate, idburehole
                            WHERE strate.id_burehole = idburehole.id
                            ORDER BY strate.id_burehole, strate.strate2) 
                            TO STDOUT WITH (FORMAT """ + formatF[1] + ");"
            with UseDatebase(dbconfig) as curs:
                with open(output, 'wb') as fileout:
                    curs.copy_expert(sql, fileout)
            outPar = True  # Параметры экспорта указаны
        elif nameExport == "obrazecn":
            sql = """COPY (SELECT obrazec.*, idburehole.*
                            FROM obrazec, idburehole
                            WHERE obrazec.id_burehole = idburehole.id
                            ORDER BY obrazec.id_burehole, obrazec.glub_otbor) 
                            TO STDOUT WITH (FORMAT """ + formatF[1] + ");"
            with UseDatebase(dbconfig) as curs:
                with open(output, 'wb') as fileout:
                    curs.copy_expert(sql, fileout)
            outPar = True  # Параметры экспорта указаны
        elif nameExport == "obrazecv":
            sql = """COPY (SELECT obrazec.*, idburehole.*
                            FROM obrazec, idburehole
                            WHERE obrazec.id_burehole = idburehole.id
                            ORDER BY obrazec.vid_obr, obrazec.id_burehole) 
                            TO STDOUT WITH (FORMAT """ + formatF[1] + ");"
            with UseDatebase(dbconfig) as curs:
                with open(output, 'wb') as fileout:
                    curs.copy_expert(sql, fileout)
            outPar = True  # Параметры экспорта указаны
        elif nameExport == "statzond":
            sql = """COPY (SELECT statzond.*, 
                            CASE
                                WHEN statzond.lob > 0 THEN round(statzond.bok / statzond.lob / 10, 2)
                                ELSE 0
                            END AS r,
                            idpointszond.*
                            FROM statzond, idpointszond
                            WHERE statzond.id_pointszond = idpointszond.id
                            ORDER BY statzond.id_pointszond, statzond.glub) 
                            TO STDOUT WITH (FORMAT """ + formatF[1] + ");"
            with UseDatebase(dbconfig) as curs:
                with open(output, 'wb') as fileout:
                    curs.copy_expert(sql, fileout)
            outPar = True  # Параметры экспорта указаны
        elif nameExport == "szondsvay":
            sql = """COPY ( WITH qszond AS (
                                SELECT vstatzondid.id,
                                    vstatzondid.id_pointszond,
                                    vstatzondid.glub,
                                    vstatzondid.lob,
                                    vstatzondid.bok,
                                    qs(vstatzondid.glub, 0.35, vstatzondid.id_pointszond) AS qs35,
                                    qs(vstatzondid.glub, 0.45, vstatzondid.id_pointszond) AS qs45,
                                    bizond(vstatzondid.bok, vstatzondid.kodgrunt) * vstatzondid.bok * 0.1 AS bifsi,
                                    vstatzondid.numdoc,
                                    vstatzondid.sost,
                                    vstatzondid.sost_2,
                                    vstatzondid.prover,
                                    vstatzondid.prover_2
                                FROM vstatzondid), b1 AS (
                                    SELECT qszond.id,
                                        qszond.id_pointszond,
                                        qszond.glub,
                                        qszond.lob,
                                        qszond.bok,
                                        qszond.qs35,
                                        qszond.qs45,
                                        b1zond(qszond.qs35, 1, 1) AS b135,
                                        b1zond(qszond.qs45, 1, 1) AS b145,
                                        qszond.bifsi,
                                        sumfsh(qszond.glub, qszond.id_pointszond) * 0.35 * 4::numeric AS fu35,
                                        sumfsh(qszond.glub, qszond.id_pointszond) * 0.45 * 4::numeric AS fu45,
                                        qszond.numdoc,
                                        qszond.sost,
                                        qszond.sost_2,
                                        qszond.prover,
                                        qszond.prover_2
                                    FROM qszond)
                            SELECT b1.id,
                                b1.id_pointszond,
                                b1.glub,
                                b1.lob,
                                b1.bok,
                                b1.qs35,
                                b1.qs45,
                                b1.b135,
                                b1.b145,
                                b1.qs35 * b1.b135 AS rs35,
                                b1.qs45 * b1.b145 AS rs45,
                                b1.qs35 * b1.b135 * 0.35 * 0.35 AS rsa35,
                                b1.qs45 * b1.b145 * 0.45 * 0.45 AS rsa45,
                                b1.bifsi,
                                b1.fu35,
                                b1.fu45,
                                b1.numdoc,
                                b1.sost,
                                b1.sost_2,
                                b1.prover,
                                b1.prover_2
                            FROM b1) 
                            TO STDOUT WITH (FORMAT """ + formatF[1] + ");"
            with UseDatebase(dbconfig) as curs:
                with open(output, 'wb') as fileout:
                    curs.copy_expert(sql, fileout)
            outPar = True  # Параметры экспорта указаны
        elif nameExport == "pesok":
            sql = """COPY (SELECT burehole.id, burehole.num_hole, obrazec.glub_otbor, obrazec.lab_num, pesok.*, idburehole.*
                            FROM pesok, obrazec, burehole, idburehole
                            WHERE idburehole.id = burehole.id AND burehole.id = obrazec.id_burehole AND obrazec.id = pesok.id_obrazec
                            ORDER BY setnumhole(burehole.num_hole, 7), obrazec.glub_otbor) 
                            TO STDOUT WITH (FORMAT """ + formatF[1] + ");"
            with UseDatebase(dbconfig) as curs:
                with open(output, 'wb') as fileout:
                    curs.copy_expert(sql, fileout)
            outPar = True  # Параметры экспорта указаны
        elif nameExport == "granpes":
            sql = """COPY (SELECT burehole.id, burehole.num_hole, obrazec.glub_otbor, obrazec.lab_num, gran.*, idburehole.*
                            FROM idburehole, burehole, obrazec, gran 
                            WHERE idburehole.id = burehole.id AND burehole.id = obrazec.id_burehole AND obrazec.id = gran.id_obrazec
                            ORDER BY setnumhole(burehole.num_hole, 7), obrazec.glub_otbor) 
                            TO STDOUT WITH (FORMAT """ + formatF[1] + ");"
            with UseDatebase(dbconfig) as curs:
                with open(output, 'wb') as fileout:
                    curs.copy_expert(sql, fileout)
            outPar = True  # Параметры экспорта указаны
        elif nameExport == "granfizpes":
            sql = """COPY (SELECT vpesok.*, idburehole.*
                            FROM idburehole, vpesok 
                            WHERE idburehole.id = vpesok.id_burehole
                            ORDER BY setnumhole(vpesok.num_hole, 7), vpesok.glub_otbor) 
                            TO STDOUT WITH (FORMAT """ + formatF[1] + ");"
            with UseDatebase(dbconfig) as curs:
                with open(output, 'wb') as fileout:
                    curs.copy_expert(sql, fileout)
            outPar = True  # Параметры экспорта указаны
        elif nameExport == "srez":
            sql = """COPY (SELECT vsrez.*, idobrazec.*
                            FROM idobrazec, vsrez 
                            WHERE idobrazec.id = vsrez.id_obrazec
                            ORDER BY vsrez.id_obekt, setnumhole(vsrez.num_hole, 7), vsrez.glub_otbor, vsrez.nagruzka) 
                            TO STDOUT WITH (FORMAT """ + formatF[1] + ");"
            with UseDatebase(dbconfig) as curs:
                with open(output, 'wb') as fileout:
                    curs.copy_expert(sql, fileout)
            outPar = True  # Параметры экспорта указаны
        elif nameExport == "compres":
            sql = """COPY (SELECT vcompres.*, idobrazec.*
                            FROM idobrazec, vcompres 
                            WHERE idobrazec.id = vcompres.id_obrazec
                            ORDER BY vcompres.id_obekt, setnumhole(vcompres.num_hole, 7), vcompres.glub_otbor, vcompres.nagruzka) 
                            TO STDOUT WITH (FORMAT """ + formatF[1] + ");"
            with UseDatebase(dbconfig) as curs:
                with open(output, 'wb') as fileout:
                    curs.copy_expert(sql, fileout)
            outPar = True  # Параметры экспорта указаны
        elif nameExport == "prosad":
            sql = """COPY (SELECT vprosad.*, idobrazec.*
                            FROM idobrazec, vprosad 
                            WHERE idobrazec.id = vprosad.id_obrazec
                            ORDER BY vprosad.id_obekt, setnumhole(vprosad.num_hole, 7), vprosad.glub_otbor, vprosad.nagruzka) 
                            TO STDOUT WITH (FORMAT """ + formatF[1] + ");"
            with UseDatebase(dbconfig) as curs:
                with open(output, 'wb') as fileout:
                    curs.copy_expert(sql, fileout)
            outPar = True  # Параметры экспорта указаны
        elif nameExport == "nabuh":
            sql = """COPY (SELECT vnabuh.*, idobrazec.*, 
                                pribor.name_pribor AS name_pribor_c,
                                pribor.visota AS visota_c,
                                pribor.diametr AS diametr_c,
                                pribor.plosch AS plosch_c 
                            FROM idobrazec, vnabuh, pribor
                            WHERE idobrazec.id = vnabuh.id_obrazec AND vnabuh.id_pribor_c = pribor.id
                            ORDER BY vnabuh.id_obekt, setnumhole(vnabuh.num_hole, 7), vnabuh.glub_otbor, vnabuh.nagruzka) 
                            TO STDOUT WITH (FORMAT """ + formatF[1] + ");"
            with UseDatebase(dbconfig) as curs:
                with open(output, 'wb') as fileout:
                    curs.copy_expert(sql, fileout)
            outPar = True  # Параметры экспорта указаны
        elif nameExport == "usadka":
            sql = """COPY (SELECT vusadka.*, idobrazec.*
                            FROM idobrazec, vusadka 
                            WHERE idobrazec.id = vusadka.id_obrazec
                            ORDER BY vusadka.id_obekt, setnumhole(vusadka.num_hole, 7), vusadka.glub_otbor, vusadka.vlag_u DESC) 
                            TO STDOUT WITH (FORMAT """ + formatF[1] + ");"
            with UseDatebase(dbconfig) as curs:
                with open(output, 'wb') as fileout:
                    curs.copy_expert(sql, fileout)
            outPar = True  # Параметры экспорта указаны
        elif nameExport == "agressgrunt":
            sql = """COPY (SELECT vgruntchimall.*, idobekt.*
                            FROM idobekt, vgruntchimall 
                            WHERE idobekt.id = vgruntchimall.id_obekt
                            ORDER BY vgruntchimall.id_obekt, vgruntchimall.vidhole, setnumhole(vgruntchimall.num_hole, 7), vgruntchimall.glub_otbor) 
                            TO STDOUT WITH (FORMAT """ + formatF[1] + ");"
            with UseDatebase(dbconfig) as curs:
                with open(output, 'wb') as fileout:
                    curs.copy_expert(sql, fileout)
            outPar = True  # Параметры экспорта указаны
        elif nameExport == "agressvoda":
            sql = """COPY (SELECT vvodachimall.*
                            FROM vvodachimall 
                            ORDER BY vvodachimall.id_obekt, vvodachimall.vidhole, setnumhole(vvodachimall.num_hole, 7), vvodachimall.glub_otbor) 
                            TO STDOUT WITH (FORMAT """ + formatF[1] + ");"
            with UseDatebase(dbconfig) as curs:
                with open(output, 'wb') as fileout:
                    curs.copy_expert(sql, fileout)
            outPar = True  # Параметры экспорта указаны
        else:
            outPar = False  # Параметры экспорта не указаны
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "Формування експортних матеріалів",
                                           "Не обрано даних для експорту, або відсутні матеріали для експорту по даному запросу. Необхідно вибрати матеріали для експорту з переліку")
            btnOK = QtWidgets.QPushButton("&OK")
            btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
            result = self.formMassWin.exec()
        if outPar == True:
            self.testOutFile(output)

    def testOutFile(self, output) -> set:
        """Проверка наполнения файла"""
        with open(output, 'rb') as fileOut:
            lines = fileOut.readlines() # Считывание содержимого файла в список
            if len(lines) < 2:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "Формування експортних матеріалів",
                                               "Вихідні дані єкспорту не виявлено. Отримано порожній або не повний файл експорту."
                                               "\nФайл експорту можна переглянути за адресою: " + output)
                btnOK = QtWidgets.QPushButton("&OK")
                btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                result = self.formMassWin.exec()
            else:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information, "Формування експортних матеріалів",
                                               "Файл експорту сформовано."
                                               "\nФайл експорту можна переглянути за адресою: " + output)
                btnOK = QtWidgets.QPushButton("&OK")
                btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                result = self.formMassWin.exec()
            fileOut.close()

    def setFile(self) -> set:
        """Назначение файла экспорта для сохранения"""
        winFile = QtWidgets.QFileDialog(parent=None,
                              caption="Вибір файлу для експорту",
                              directory=QtCore.QDir.currentPath() + '/export',
                              filter="Всі файли (*);;CSV (*.csv);;TXT (*.txt);;XLSX (*.xlsx);;XLS (*.xls);;ODS (*.ods)")
        winFile.setAcceptMode(1)
        winFile.setLabelText(1, "Ім'я файлу")
        winFile.setLabelText(3, "Гаразд")
        winFile.setLabelText(4, "Відміна")
        result = winFile.exec()
        if result == QtWidgets.QDialog.Accepted:
            f = winFile.selectedFiles()
            self.lineEdit.setText(f[0])
        else:
            pass


class Export_par1(QtWidgets.QDialog, egclasswin.Ui_Export_par):
    def __init__(self) -> set:
        """Инициализация окна параметров объекта"""
        super().__init__()
        self.setupUi(self)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT id,
                                fio,
                                doljnost
                            FROM public.ispol 
                            WHERE ispol.vidrab != 2
                            ORDER BY ispol.fio ASC""")
            recAll = curs.fetchall()
        for i in range(0, len(recAll)):
            recOne = recAll[i]
            self.comboBox.addItem(recOne[1])
            self.comboBox.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
            self.comboBox.setItemData(i, recOne[2], role=QtCore.Qt.UserRole+1)
        self.comboBox.insertItem(0, '')
        self.comboBox.setItemData(0, 0, role=QtCore.Qt.UserRole)
        self.comboBox.setItemData(0, '', role=QtCore.Qt.UserRole+1)
        self.comboBox.setCurrentText('')
        for i in range(0, len(recAll)):
            recOne = recAll[i]
            self.comboBox_2.addItem(recOne[1])
            self.comboBox_2.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
            self.comboBox_2.setItemData(i, recOne[2], role=QtCore.Qt.UserRole+1)
        self.comboBox_2.insertItem(0, '')
        self.comboBox_2.setItemData(0, 0, role=QtCore.Qt.UserRole)
        self.comboBox_2.setItemData(0, '', role=QtCore.Qt.UserRole+1)
        self.comboBox_2.setCurrentText('')
        sel = "SELECT id, numdog, archnum, name FROM obekt ORDER BY id"
        with UseDatebase(dbconfig) as curs:
            curs.execute(sel)
            recAll = curs.fetchall()
        self.model = QtGui.QStandardItemModel()  # Создание модели
        self.model.setColumnCount(3)
        self.model.setHorizontalHeaderLabels(["Номер \nдоговору",
                                                   "Архівний \nномер",
                                                   "Назва об'єкта"])
        self.model.horizontalHeaderItem(0).setTextAlignment(QtCore.Qt.AlignCenter)
        self.model.horizontalHeaderItem(1).setTextAlignment(QtCore.Qt.AlignCenter)
        self.model.horizontalHeaderItem(2).setTextAlignment(QtCore.Qt.AlignCenter)
        self.countrec = len(recAll)
        parentobekt = QtGui.QStandardItem(self.countrec)
        parentobekt.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
        parentobekt.setText("Перелік об'єктів")
        for row in range(0, self.countrec):
            itemrow = recAll[row]
            for column in range(0, 3):
                if column == 0:
                    it = itemrow[1]
                    itemobekt = QtGui.QStandardItem(it)
                    itemobekt.setCheckable(True)
                    itemobekt.setFlags(parentobekt.flags() | QtCore.Qt.ItemIsUserCheckable)
                    itemobekt.setData(itemrow[0], role=QtCore.Qt.UserRole)
                elif column == 1:
                    it = itemrow[2]
                    itemobekt = QtGui.QStandardItem(it)
                    itemobekt.setFlags(parentobekt.flags())
                    itemobekt.setTextAlignment(QtCore.Qt.AlignCenter)
                else:
                    it = itemrow[3]
                    itemobekt = QtGui.QStandardItem(it)
                    itemobekt.setFlags(parentobekt.flags())
                parentobekt.setChild(row, column, itemobekt)
        self.model.appendRow(parentobekt)
        # Создание представления
        self.treeView.setModel(self.model)
        self.treeView.setColumnWidth(0, 128)
        self.treeView.setColumnWidth(1, 70)
        self.treeView.setSortingEnabled(True)
        self.treeView.sortByColumn(0, QtCore.Qt.AscendingOrder)
        ind = self.model.index(1, 1)
        self.treeView.setFirstColumnSpanned(0, ind, True)
        self.treeView.expand(self.model.index(0, 0))
        # Назначение обработчиков сигналов
        self.pushButton.clicked.connect(self.accept)
        self.pushButton.clicked.connect(self.setPar)
#        self.pushButton.clicked.connect(self.setExport)
        self.pushButton_2.clicked.connect(self.reject)
        self.model.itemChanged.connect(self.setCheck)

    @QtCore.pyqtSlot()
    def setPar(self) -> set:
        """Определение параметров (id - объекта) запроса"""
        paramobekt = str()
        numdoc = self.lineEdit.text()
        sost = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.EditRole)
        sost_2 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole + 1)
        prover = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), role=QtCore.Qt.EditRole)
        prover_2 = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), role=QtCore.Qt.UserRole + 1)
        for i in range(0, self.countrec):
            if self.model.item(0,0).child(i,0).checkState() == 2:
                id = self.model.item(0,0).child(i,0).data(role=QtCore.Qt.UserRole)
                paramobekt = paramobekt + "(" + str(id) + ", '" + numdoc + "', '" + sost + "', '" + sost_2 + "', '" + prover + "', '" + prover_2 + "'),"
            else:
                pass
        paramobekt = paramobekt.strip(",")
        return paramobekt

    @QtCore.pyqtSlot()
    def setCheck(self) -> set:
        """Заполнение или снятие подсветки с отмеченых check-полей"""
        ii = self.model.item(0, 0).rowCount()
        for i in range(0, ii):
            if self.model.item(0, 0).child(i, 0).checkState() == 2:
                for j in range(0, 3):
                    self.model.item(0, 0).child(i, j).setBackground(QtGui.QBrush(QtCore.Qt.yellow))
            else:
                for j in range(0, 3):
                    self.model.item(0, 0).child(i, j).setBackground(QtGui.QBrush(QtCore.Qt.white))


class Export_par2(QtWidgets.QDialog, egclasswin.Ui_Export_par):
    def __init__(self) -> set:
        """Инициализация окна параметров объекта с пунктами отбора проб"""
        super().__init__()
        self.setupUi(self)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT id,
                                fio,
                                doljnost
                            FROM public.ispol 
                            WHERE ispol.vidrab != 2
                            ORDER BY ispol.fio ASC""")
            recAll = curs.fetchall()
        for i in range(0, len(recAll)):
            recOne = recAll[i]
            self.comboBox.addItem(recOne[1])
            self.comboBox.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
            self.comboBox.setItemData(i, recOne[2], role=QtCore.Qt.UserRole+1)
        self.comboBox.insertItem(0, '')
        self.comboBox.setItemData(0, 0, role=QtCore.Qt.UserRole)
        self.comboBox.setItemData(0, '', role=QtCore.Qt.UserRole+1)
        self.comboBox.setCurrentText('')
        for i in range(0, len(recAll)):
            recOne = recAll[i]
            self.comboBox_2.addItem(recOne[1])
            self.comboBox_2.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
            self.comboBox_2.setItemData(i, recOne[2], role=QtCore.Qt.UserRole+1)
        self.comboBox_2.insertItem(0, '')
        self.comboBox_2.setItemData(0, 0, role=QtCore.Qt.UserRole)
        self.comboBox_2.setItemData(0, '', role=QtCore.Qt.UserRole+1)
        self.comboBox_2.setCurrentText('')
        sel = "SELECT id, numdog, archnum, name FROM obekt ORDER BY id"
        with UseDatebase(dbconfig) as curs:
            curs.execute(sel)
            recAll = curs.fetchall()
        self.countrec = len(recAll) # Количество строк
        self.model = QtGui.QStandardItemModel()  # Создание модели
#        self.model.setRowCount(self.countrec)
        self.model.setColumnCount(3)
        self.model.setHorizontalHeaderLabels(["Номер \nдоговору",
                                                   "Архівний \nномер",
                                                   "Назва об'єкта"])
        self.model.horizontalHeaderItem(0).setTextAlignment(QtCore.Qt.AlignCenter)
        self.model.horizontalHeaderItem(1).setTextAlignment(QtCore.Qt.AlignCenter)
        self.model.horizontalHeaderItem(2).setTextAlignment(QtCore.Qt.AlignCenter)
        # Формирование первого уровня иерархического списка
        parentob = QtGui.QStandardItem(0,3)
        parentob.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
        parentob.setText("Перелік об'єктів та пунктів відбору проб")
        # Формирование второго уровня иерархического списка объектов
        for row in range(0, self.countrec):
            rowOne = recAll[row]
            id_obekt = rowOne[0]
            itemobekt1 = QtGui.QStandardItem(rowOne[1])
            itemobekt1.setCheckable(True)
            itemobekt1.setFlags(parentob.flags() | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsTristate | QtCore.Qt.ItemIsAutoTristate)
            itemobekt1.setCheckState(QtCore.Qt.PartiallyChecked)
            itemobekt2 = QtGui.QStandardItem(rowOne[2])
            itemobekt2.setFlags(parentob.flags())
            itemobekt3 = QtGui.QStandardItem(rowOne[3])
            itemobekt3.setFlags(parentob.flags())
            parentob.appendRow([itemobekt1, itemobekt2, itemobekt3])
            # Формирование третьего уровня иерархического списка выработок по текущему объекту
            selhole = "SELECT id, id_obekt, vidhole || ' № ' ||num_hole AS numhole\
                                    FROM burehole\
                                    WHERE id_obekt = %(v)s\
                                    ORDER BY vidhole, setnumhole(num_hole, 7)"
            with UseDatebase(dbconfig) as curs:
                curs.execute(selhole, {'v': id_obekt})
                recAllHole = curs.fetchall()
            self.counthole = len(recAllHole)  # Количество скважин по объекту
            for rowhole in range(0, self.counthole):
                strrowhole = recAllHole[rowhole]
                itemhole1 = QtGui.QStandardItem('')
                itemhole1.setFlags(itemobekt1.flags())
                itemhole2 = QtGui.QStandardItem('')
                itemhole2.setFlags(itemobekt1.flags())
                itemhole3 = QtGui.QStandardItem(strrowhole[2])
                itemhole3.setCheckable(True)
                itemhole3.setFlags(itemobekt1.flags())
                itemhole3.setData(strrowhole[0], QtCore.Qt.UserRole)
                itemobekt1.appendRow([itemhole1, itemhole2, itemhole3])
        self.model.appendRow(parentob)
        # Создание представления
        self.treeView.setModel(self.model)
        self.treeView.setColumnWidth(0, 128)
        self.treeView.setColumnWidth(1, 70)
        self.treeView.setWordWrap(True)
        ind = self.model.index(1, 1)
        self.treeView.setFirstColumnSpanned(0, ind, True)
        self.treeView.expand(self.model.index(0, 0))
        self.treeView.setSortingEnabled(True)
        self.treeView.sortByColumn(0, QtCore.Qt.AscendingOrder)
        # Назначение обработчиков сигналов
        self.pushButton.clicked.connect(self.accept)
        self.pushButton.clicked.connect(self.setPar)
#        self.pushButton.clicked.connect(self.setExport)
        self.pushButton_2.clicked.connect(self.reject)
        self.model.itemChanged.connect(self.setCheck)

    @QtCore.pyqtSlot()
    def setPar(self) -> set:
        """Определение параметров (id - пункта) запроса"""
        paramhole = str()
        numdoc = self.lineEdit.text()
        sost = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.EditRole)
        sost_2 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole + 1)
        prover = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), role=QtCore.Qt.EditRole)
        prover_2 = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), role=QtCore.Qt.UserRole + 1)
        for i in range(0, self.countrec):
            counthole = self.model.item(0,0).child(i,0).rowCount()
            for j in range(0, counthole):
                if self.model.item(0,0).child(i,0).child(j,2).checkState() == 2:
                    id = self.model.item(0, 0).child(i, 0).child(j,2).data(role=QtCore.Qt.UserRole)
                    paramhole = paramhole + "(" + str(
                        id) + ", '" + numdoc + "', '" + sost + "', '" + sost_2 + "', '" + prover + "', '" + prover_2 + "'),"
        paramhole = paramhole.strip(",")
        return paramhole

    @QtCore.pyqtSlot()
    def setCheck(self) -> set:
        """Заполнение или снятие меток с дочерних check-полей"""
        ii = self.model.item(0, 0).rowCount()
        for i in range(0, ii):
            if self.model.item(0, 0).child(i, 0).checkState() == 0:
                self.model.item(0, 0).child(i, 0).setCheckState(QtCore.Qt.PartiallyChecked)
            elif self.model.item(0, 0).child(i, 0).checkState() == 2:
                jj = self.model.item(0, 0).child(i, 0).rowCount()
                for j in range(0, jj):
                    self.model.item(0, 0).child(i, 0).child(j, 2).setCheckState(QtCore.Qt.Checked)
                    self.model.item(0, 0).child(i, 0).child(j, 2).setBackground(QtGui.QBrush(QtCore.Qt.yellow))
            else:
                jj = self.model.item(0, 0).child(i, 0).rowCount()
                for j in range(0, jj):
                    if self.model.item(0, 0).child(i, 0).child(j, 2).checkState() == 2:
                        self.model.item(0, 0).child(i, 0).child(j, 2).setBackground(QtGui.QBrush(QtCore.Qt.yellow))
                    else:
                        self.model.item(0, 0).child(i, 0).child(j, 2).setBackground(QtGui.QBrush(QtCore.Qt.white))


class Export_par3(QtWidgets.QDialog, egclasswin.Ui_Export_par):
    def __init__(self) -> set:
        """Инициализация окна параметров объекта с пунктами статического зондирования"""
        super().__init__()
        self.setupUi(self)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT id,
                                fio,
                                doljnost
                            FROM public.ispol 
                            WHERE ispol.vidrab != 2
                            ORDER BY ispol.fio ASC""")
            recAll = curs.fetchall()
        for i in range(0, len(recAll)):
            recOne = recAll[i]
            self.comboBox.addItem(recOne[1])
            self.comboBox.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
            self.comboBox.setItemData(i, recOne[2], role=QtCore.Qt.UserRole+1)
        self.comboBox.insertItem(0, '')
        self.comboBox.setItemData(0, 0, role=QtCore.Qt.UserRole)
        self.comboBox.setItemData(0, '', role=QtCore.Qt.UserRole+1)
        self.comboBox.setCurrentText('')
        for i in range(0, len(recAll)):
            recOne = recAll[i]
            self.comboBox_2.addItem(recOne[1])
            self.comboBox_2.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
            self.comboBox_2.setItemData(i, recOne[2], role=QtCore.Qt.UserRole+1)
        self.comboBox_2.insertItem(0, '')
        self.comboBox_2.setItemData(0, 0, role=QtCore.Qt.UserRole)
        self.comboBox_2.setItemData(0, '', role=QtCore.Qt.UserRole+1)
        self.comboBox_2.setCurrentText('')
        sel = "SELECT id, numdog, archnum, name FROM obekt ORDER BY id"
        with UseDatebase(dbconfig) as curs:
            curs.execute(sel)
            recAll = curs.fetchall()
        self.countrec = len(recAll) # Количество строк
        self.model = QtGui.QStandardItemModel()  # Создание модели
#        self.model.setRowCount(self.countrec)
        self.model.setColumnCount(3)
        self.model.setHorizontalHeaderLabels(["Номер \nдоговору",
                                                   "Архівний \nномер",
                                                   "Назва об'єкта"])
        self.model.horizontalHeaderItem(0).setTextAlignment(QtCore.Qt.AlignCenter)
        self.model.horizontalHeaderItem(1).setTextAlignment(QtCore.Qt.AlignCenter)
        self.model.horizontalHeaderItem(2).setTextAlignment(QtCore.Qt.AlignCenter)
        # Формирование первого уровня иерархического списка
        parentob = QtGui.QStandardItem(0,3)
        parentob.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
        parentob.setText("Перелік об'єктів та пунктів статичного зондування")
        # Формирование второго уровня иерархического списка
        for row in range(0, self.countrec):
            rowOne = recAll[row]
            id_obekt = rowOne[0]
            itemobekt1 = QtGui.QStandardItem(rowOne[1])
            itemobekt1.setCheckable(True)
            itemobekt1.setFlags(parentob.flags() | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsTristate | QtCore.Qt.ItemIsAutoTristate)
            itemobekt1.setCheckState(QtCore.Qt.PartiallyChecked)
            itemobekt2 = QtGui.QStandardItem(rowOne[2])
            itemobekt2.setFlags(parentob.flags())
            itemobekt3 = QtGui.QStandardItem(rowOne[3])
            itemobekt3.setFlags(parentob.flags())
            parentob.appendRow([itemobekt1, itemobekt2, itemobekt3])
            # Формирование списка выработок по текущему объекту
            selhole = "SELECT id, id_obekt, 'Пункт статичного зондування № ' || num_point AS numpointszond\
                                    FROM pointszond\
                                    WHERE id_obekt = %(v)s\
                                    ORDER BY setnumhole(num_point, 7)"
            with UseDatebase(dbconfig) as curs:
                curs.execute(selhole, {'v': id_obekt})
                recAllHole = curs.fetchall()
            self.counthole = len(recAllHole)  # Количество скважин по объекту
            for rowhole in range(0, self.counthole):
                strrowhole = recAllHole[rowhole]
                itemhole1 = QtGui.QStandardItem('')
                itemhole1.setFlags(itemobekt1.flags())
                itemhole2 = QtGui.QStandardItem('')
                itemhole2.setFlags(itemobekt1.flags())
                itemhole3 = QtGui.QStandardItem(strrowhole[2])
                itemhole3.setCheckable(True)
                itemhole3.setFlags(itemobekt1.flags())
                itemhole3.setData(strrowhole[0], QtCore.Qt.UserRole)
                itemobekt1.appendRow([itemhole1, itemhole2, itemhole3])
        self.model.appendRow(parentob)
        # Создание представления
        self.treeView.setModel(self.model)
        self.treeView.setColumnWidth(0, 128)
        self.treeView.setColumnWidth(1, 70)
        self.treeView.setWordWrap(True)
        ind = self.model.index(1, 1)
        self.treeView.setFirstColumnSpanned(0, ind, True)
        self.treeView.expand(self.model.index(0, 0))
        self.treeView.setSortingEnabled(True)
        self.treeView.sortByColumn(0, QtCore.Qt.AscendingOrder)
        # Назначение обработчиков сигналов
        self.pushButton.clicked.connect(self.accept)
        self.pushButton.clicked.connect(self.setPar)
#        self.pushButton.clicked.connect(self.setExport)
        self.pushButton_2.clicked.connect(self.reject)
        self.model.itemChanged.connect(self.setCheck)

    @QtCore.pyqtSlot()
    def setPar(self) -> set:
        """Определение параметров (id - пункта) запроса"""
        paramhole = str()
        numdoc = self.lineEdit.text()
        sost = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.EditRole)
        sost_2 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole + 1)
        prover = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), role=QtCore.Qt.EditRole)
        prover_2 = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), role=QtCore.Qt.UserRole + 1)
        for i in range(0, self.countrec):
            counthole = self.model.item(0,0).child(i,0).rowCount()
            for j in range(0, counthole):
                if self.model.item(0,0).child(i,0).child(j,2).checkState() == 2:
                    id = self.model.item(0, 0).child(i, 0).child(j,2).data(role=QtCore.Qt.UserRole)
                    paramhole = paramhole + "(" + str(
                        id) + ", '" + numdoc + "', '" + sost + "', '" + sost_2 + "', '" + prover + "', '" + prover_2 + "'),"
        paramhole = paramhole.strip(",")
        return paramhole

    @QtCore.pyqtSlot()
    def setCheck(self) -> set:
        """Заполнение или снятие меток с дочерних check-полей"""
        ii = self.model.item(0, 0).rowCount()
        for i in range(0, ii):
            if self.model.item(0, 0).child(i, 0).checkState() == 0:
                self.model.item(0, 0).child(i, 0).setCheckState(QtCore.Qt.PartiallyChecked)
            elif self.model.item(0, 0).child(i, 0).checkState() == 2:
                jj = self.model.item(0, 0).child(i, 0).rowCount()
                for j in range(0, jj):
                    self.model.item(0, 0).child(i, 0).child(j, 2).setCheckState(QtCore.Qt.Checked)
                    self.model.item(0, 0).child(i, 0).child(j, 2).setBackground(QtGui.QBrush(QtCore.Qt.yellow))
            else:
                jj = self.model.item(0, 0).child(i, 0).rowCount()
                for j in range(0, jj):
                    if self.model.item(0, 0).child(i, 0).child(j, 2).checkState() == 2:
                        self.model.item(0, 0).child(i, 0).child(j, 2).setBackground(QtGui.QBrush(QtCore.Qt.yellow))
                    else:
                        self.model.item(0, 0).child(i, 0).child(j, 2).setBackground(QtGui.QBrush(QtCore.Qt.white))

class Export_par4(QtWidgets.QDialog, egclasswin.Ui_Export_par):
    def __init__(self) -> set:
        """Инициализация окна параметров объекта с пунктами динамического зондирования"""
        super().__init__()
        self.setupUi(self)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT id,
                                fio,
                                doljnost
                            FROM public.ispol 
                            WHERE ispol.vidrab != 2
                            ORDER BY ispol.fio ASC""")
            recAll = curs.fetchall()
        for i in range(0, len(recAll)):
            recOne = recAll[i]
            self.comboBox.addItem(recOne[1])
            self.comboBox.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
            self.comboBox.setItemData(i, recOne[2], role=QtCore.Qt.UserRole+1)
        self.comboBox.insertItem(0, '')
        self.comboBox.setItemData(0, 0, role=QtCore.Qt.UserRole)
        self.comboBox.setItemData(0, '', role=QtCore.Qt.UserRole+1)
        self.comboBox.setCurrentText('')
        for i in range(0, len(recAll)):
            recOne = recAll[i]
            self.comboBox_2.addItem(recOne[1])
            self.comboBox_2.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
            self.comboBox_2.setItemData(i, recOne[2], role=QtCore.Qt.UserRole+1)
        self.comboBox_2.insertItem(0, '')
        self.comboBox_2.setItemData(0, 0, role=QtCore.Qt.UserRole)
        self.comboBox_2.setItemData(0, '', role=QtCore.Qt.UserRole+1)
        self.comboBox_2.setCurrentText('')
        sel = "SELECT id, numdog, archnum, name FROM obekt ORDER BY id"
        with UseDatebase(dbconfig) as curs:
            curs.execute(sel)
            recAll = curs.fetchall()
        self.countrec = len(recAll) # Количество строк
        self.model = QtGui.QStandardItemModel()  # Создание модели
#        self.model.setRowCount(self.countrec)
        self.model.setColumnCount(3)
        self.model.setHorizontalHeaderLabels(["Номер \nдоговору",
                                                   "Архівний \nномер",
                                                   "Назва об'єкта"])
        self.model.horizontalHeaderItem(0).setTextAlignment(QtCore.Qt.AlignCenter)
        self.model.horizontalHeaderItem(1).setTextAlignment(QtCore.Qt.AlignCenter)
        self.model.horizontalHeaderItem(2).setTextAlignment(QtCore.Qt.AlignCenter)
        # Формирование первого уровня иерархического списка
        parentob = QtGui.QStandardItem(0,3)
        parentob.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
        parentob.setText("Перелік об'єктів та пунктів динамічного зондування")
        # Формирование второго уровня иерархического списка
        for row in range(0, self.countrec):
            rowOne = recAll[row]
            id_obekt = rowOne[0]
            itemobekt1 = QtGui.QStandardItem(rowOne[1])
            itemobekt1.setCheckable(True)
            itemobekt1.setFlags(parentob.flags() | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsTristate | QtCore.Qt.ItemIsAutoTristate)
            itemobekt1.setCheckState(QtCore.Qt.PartiallyChecked)
            itemobekt2 = QtGui.QStandardItem(rowOne[2])
            itemobekt2.setFlags(parentob.flags())
            itemobekt3 = QtGui.QStandardItem(rowOne[3])
            itemobekt3.setFlags(parentob.flags())
            parentob.appendRow([itemobekt1, itemobekt2, itemobekt3])
            # Формирование списка выработок по текущему объекту
            selhole = "SELECT id, id_obekt, 'Пункт динамічного зондування № ' || num_point AS numpointdzond\
                                    FROM pointdzond\
                                    WHERE id_obekt = %(v)s\
                                    ORDER BY setnumhole(num_point, 7)"
            with UseDatebase(dbconfig) as curs:
                curs.execute(selhole, {'v': id_obekt})
                recAllHole = curs.fetchall()
            self.counthole = len(recAllHole)  # Количество пунктов по объекту
            for rowhole in range(0, self.counthole):
                strrowhole = recAllHole[rowhole]
                itemhole1 = QtGui.QStandardItem('')
                itemhole1.setFlags(itemobekt1.flags())
                itemhole2 = QtGui.QStandardItem('')
                itemhole2.setFlags(itemobekt1.flags())
                itemhole3 = QtGui.QStandardItem(strrowhole[2])
                itemhole3.setCheckable(True)
                itemhole3.setFlags(itemobekt1.flags())
                itemhole3.setData(strrowhole[0], QtCore.Qt.UserRole)
                itemobekt1.appendRow([itemhole1, itemhole2, itemhole3])
        self.model.appendRow(parentob)
        # Создание представления
        self.treeView.setModel(self.model)
        self.treeView.setColumnWidth(0, 128)
        self.treeView.setColumnWidth(1, 70)
        self.treeView.setWordWrap(True)
        ind = self.model.index(1, 1)
        self.treeView.setFirstColumnSpanned(0, ind, True)
        self.treeView.expand(self.model.index(0, 0))
        self.treeView.setSortingEnabled(True)
        self.treeView.sortByColumn(0, QtCore.Qt.AscendingOrder)
        # Назначение обработчиков сигналов
        self.pushButton.clicked.connect(self.accept)
        self.pushButton.clicked.connect(self.setPar)
#        self.pushButton.clicked.connect(self.setExport)
        self.pushButton_2.clicked.connect(self.reject)
        self.model.itemChanged.connect(self.setCheck)

    @QtCore.pyqtSlot()
    def setPar(self) -> set:
        """Определение параметров (id - пункта) запроса"""
        paramhole = str()
        numdoc = self.lineEdit.text()
        sost = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.EditRole)
        sost_2 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole + 1)
        prover = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), role=QtCore.Qt.EditRole)
        prover_2 = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), role=QtCore.Qt.UserRole + 1)
        for i in range(0, self.countrec):
            counthole = self.model.item(0,0).child(i,0).rowCount()
            for j in range(0, counthole):
                if self.model.item(0,0).child(i,0).child(j,2).checkState() == 2:
                    id = self.model.item(0, 0).child(i, 0).child(j,2).data(role=QtCore.Qt.UserRole)
                    paramhole = paramhole + "(" + str(
                        id) + ", '" + numdoc + "', '" + sost + "', '" + sost_2 + "', '" + prover + "', '" + prover_2 + "'),"
        paramhole = paramhole.strip(",")
        return paramhole

    @QtCore.pyqtSlot()
    def setCheck(self) -> set:
        """Заполнение или снятие меток с дочерних check-полей"""
        ii = self.model.item(0, 0).rowCount()
        for i in range(0, ii):
            if self.model.item(0, 0).child(i, 0).checkState() == 0:
                self.model.item(0, 0).child(i, 0).setCheckState(QtCore.Qt.PartiallyChecked)
            elif self.model.item(0, 0).child(i, 0).checkState() == 2:
                jj = self.model.item(0, 0).child(i, 0).rowCount()
                for j in range(0, jj):
                    self.model.item(0, 0).child(i, 0).child(j, 2).setCheckState(QtCore.Qt.Checked)
                    self.model.item(0, 0).child(i, 0).child(j, 2).setBackground(QtGui.QBrush(QtCore.Qt.yellow))
            else:
                jj = self.model.item(0, 0).child(i, 0).rowCount()
                for j in range(0, jj):
                    if self.model.item(0, 0).child(i, 0).child(j, 2).checkState() == 2:
                        self.model.item(0, 0).child(i, 0).child(j, 2).setBackground(QtGui.QBrush(QtCore.Qt.yellow))
                    else:
                        self.model.item(0, 0).child(i, 0).child(j, 2).setBackground(QtGui.QBrush(QtCore.Qt.white))


class Export_par5(QtWidgets.QDialog, egclasswin.Ui_Export_par):
    def __init__(self) -> set:
        """Инициализация окна параметров объекта с пунктами отбора проб и пробами"""
        super().__init__()
        self.setupUi(self)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT id,
                                fio,
                                doljnost
                            FROM public.ispol 
                            WHERE ispol.vidrab != 2
                            ORDER BY ispol.fio ASC""")
            recAll = curs.fetchall()
        for i in range(0, len(recAll)):
            recOne = recAll[i]
            self.comboBox.addItem(recOne[1])
            self.comboBox.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
            self.comboBox.setItemData(i, recOne[2], role=QtCore.Qt.UserRole+1)
        self.comboBox.insertItem(0, '')
        self.comboBox.setItemData(0, 0, role=QtCore.Qt.UserRole)
        self.comboBox.setItemData(0, '', role=QtCore.Qt.UserRole+1)
        self.comboBox.setCurrentText('')
        for i in range(0, len(recAll)):
            recOne = recAll[i]
            self.comboBox_2.addItem(recOne[1])
            self.comboBox_2.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
            self.comboBox_2.setItemData(i, recOne[2], role=QtCore.Qt.UserRole+1)
        self.comboBox_2.insertItem(0, '')
        self.comboBox_2.setItemData(0, 0, role=QtCore.Qt.UserRole)
        self.comboBox_2.setItemData(0, '', role=QtCore.Qt.UserRole+1)
        self.comboBox_2.setCurrentText('')
        sel = "SELECT id, numdog, archnum, name FROM obekt ORDER BY id"
        with UseDatebase(dbconfig) as curs:
            curs.execute(sel)
            recAll = curs.fetchall()
        self.countrec = len(recAll) # Количество строк
        self.model = QtGui.QStandardItemModel()  # Создание модели
        self.model.setColumnCount(3)
        self.model.setHorizontalHeaderLabels(["Номер \nдоговору",
                                                   "Архівний \nномер",
                                                   "Назва об'єкта"])
        self.model.horizontalHeaderItem(0).setTextAlignment(QtCore.Qt.AlignCenter)
        self.model.horizontalHeaderItem(1).setTextAlignment(QtCore.Qt.AlignCenter)
        self.model.horizontalHeaderItem(2).setTextAlignment(QtCore.Qt.AlignCenter)
        self.selmodel = QtCore.QItemSelectionModel(self.model)  # Создание модели выделения
        # Формирование первого уровня иерархического списка
        parentob = QtGui.QStandardItem(0,4)
        parentob.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
        parentob.setText("Перелік об'єктів, пунктів відбору проб та зразків")
        # Формирование второго уровня иерархического списка (объекты)
        for row in range(0, self.countrec):
            rowOne = recAll[row]
            id_obekt = rowOne[0]
            itemobekt1 = QtGui.QStandardItem(rowOne[1])
            itemobekt1.setCheckable(True)
            itemobekt1.setTristate(True)
            itemobekt1.setAutoTristate(True)
            itemobekt1.setFlags(parentob.flags() | QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsAutoTristate)
            itemobekt1.setCheckState(QtCore.Qt.Unchecked)
            itemobekt2 = QtGui.QStandardItem(rowOne[2])
            itemobekt2.setFlags(parentob.flags())
            itemobekt2.setTextAlignment(QtCore.Qt.AlignCenter)
            itemobekt3 = QtGui.QStandardItem(rowOne[3])
            itemobekt3.setFlags(parentob.flags())
            parentob.appendRow([itemobekt1, itemobekt2, itemobekt3])
            # Формирование третьего уровня иерархического списка (выработки по текущему объекту)
            selhole = "SELECT id, id_obekt, vidhole || ' № ' ||num_hole AS numhole, substring(vidhole for 1) || ' ' || setnumhole(num_hole, 2) AS num_hole\
                                    FROM burehole\
                                    WHERE id_obekt = %(v)s\
                                    ORDER BY vidhole, setnumhole(num_hole, 7)"
            with UseDatebase(dbconfig) as curs:
                curs.execute(selhole, {'v': id_obekt})
                recAllHole = curs.fetchall()
            self.counthole = len(recAllHole)  # Количество скважин по объекту
            for rowhole in range(0, self.counthole):
                strrowhole = recAllHole[rowhole]
                itemhole1 = QtGui.QStandardItem(strrowhole[3])
                itemhole1.setCheckable(True)
                itemhole1.setTristate(True)
                itemhole1.setAutoTristate(True)
                itemhole1.setFlags(itemobekt1.flags())
                itemhole1.setCheckState(QtCore.Qt.Unchecked)
                itemhole2 = QtGui.QStandardItem('')
                itemhole2.setFlags(itemobekt2.flags())
                itemhole3 = QtGui.QStandardItem(strrowhole[2])
                itemhole3.setFlags(itemobekt3.flags())
                itemobekt1.appendRow([itemhole1, itemhole2, itemhole3])
                id_burehole = strrowhole[0]
                # Формирование четвертого уровня иерархического списка (образцы по скважинам)
                selobrazec = "SELECT id, id_burehole, setnumhole(num_obrazec, 1), 'Зразок № ' || setnumhole(num_obrazec, 1) || '. Глибина відбору ' || glub_otbor || ' м. ' || vid_obr || ' (' || LOWER(mater_obr) || ')' AS numobrazec\
                                FROM obrazec\
                                WHERE id_burehole = %(v)s\
                                ORDER BY glub_otbor ASC"
                with UseDatebase(dbconfig) as curs:
                    curs.execute(selobrazec, {'v': id_burehole})
                    recAllObrazec = curs.fetchall()
                self.countobrazec = len(recAllObrazec)  # Количество образцов по скважине
                for rowobrazec in range(0, self.countobrazec):
                    strrowobrazec = recAllObrazec[rowobrazec]
                    itemobrazec1 = QtGui.QStandardItem(strrowobrazec[2])
                    itemobrazec1.setCheckable(True)
                    itemobrazec1.setTristate(True)
                    itemobrazec1.setAutoTristate(True)
                    itemobrazec1.setFlags(itemhole1.flags())
                    itemobrazec1.setData(strrowobrazec[0], QtCore.Qt.UserRole)
                    itemobrazec2 = QtGui.QStandardItem('')
                    itemobrazec2.setFlags(itemhole2.flags())
                    itemobrazec3 = QtGui.QStandardItem(strrowobrazec[3])
                    itemobrazec3.setFlags(itemhole3.flags())
                    itemhole1.appendRow([itemobrazec1, itemobrazec2, itemobrazec3])
        self.model.appendRow(parentob)
        # Создание представления
        self.treeView.setModel(self.model)
        self.treeView.setSelectionModel(self.selmodel)
        self.treeView.setColumnWidth(0, 130)
        self.treeView.setColumnWidth(1, 90)
        self.treeView.setWordWrap(True)
        ind = self.model.index(1, 1)
        self.treeView.setFirstColumnSpanned(0, ind, True)
        self.treeView.expand(self.model.index(0, 0))
        self.treeView.setSelectionMode(2)
        self.treeView.setSortingEnabled(True)
        self.treeView.sortByColumn(0, QtCore.Qt.AscendingOrder)
        self.treeView.setTextElideMode(QtCore.Qt.ElideNone)  # Текст не обрезается
        self.treeView.resetIndentation()
        # Назначение обработчиков сигналов
        self.pushButton.clicked.connect(self.accept)
        self.pushButton.clicked.connect(self.setPar)
        self.pushButton_2.clicked.connect(self.setReject)
        self.treeView.clicked.connect(self.checkPoint, QtCore.Qt.DirectConnection)

    @QtCore.pyqtSlot()
    def setPar(self) -> set:
        """Определение параметров (id - образца) запроса"""
        paramobr = str()
        numdoc = self.lineEdit.text()
        sost = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.EditRole)
        sost_2 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole + 1)
        prover = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), role=QtCore.Qt.EditRole)
        prover_2 = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), role=QtCore.Qt.UserRole + 1)
        for i in range(0, self.countrec):
            counthole = self.model.item(0, 0).child(i, 0).rowCount()
            for j in range(0, counthole):
                countobrazec = self.model.item(0, 0).child(i, 0).child(j, 0).rowCount()
                for ij in range(0, countobrazec):
                    if self.model.item(0, 0).child(i, 0).child(j, 0).child(ij, 0).checkState() == 2:
                        id = self.model.item(0, 0).child(i, 0).child(j, 0).child(ij, 0).data(role=QtCore.Qt.UserRole)
                        paramobr = paramobr + "(" + str(
                            id) + ", '" + numdoc + "', '" + sost + "', '" + sost_2 + "', '" + prover + "', '" + prover_2 + "'),"
        paramobr = paramobr.strip(",")
        return paramobr

    @QtCore.pyqtSlot(QtCore.QModelIndex, name='checkPoint')
    def setCheck(self, ind) -> set:
        """Выделение check-полей и заполнение или снятие подсветки с отмеченых check-полей
        ind - индекс елемента"""
        self.treeView.setFocus()
        if self.model.itemFromIndex(ind).parent() == None: # Первый уровень "Перелік об'єктів". Очистка всех check-box
            selrow = self.selmodel.selectedIndexes()
            countsel = len(selrow)
            for i in range(0, countsel):
                it = self.model.itemFromIndex(selrow[i])
                if it.checkState() == 2:
                    it.setCheckState(0)
                else:
                    pass
            self.selmodel.clearSelection()
            selrow = self.selmodel.selectedIndexes()
        else:
            self.selmodel.setCurrentIndex(ind, QtCore.QItemSelectionModel.Toggle | QtCore.QItemSelectionModel.Rows)
            if self.model.itemFromIndex(ind).parent().parent() == None: # Второй уровень "Номер Договора"
                nrow = ind.row()
                if self.selmodel.isSelected(ind):
                    itdog = self.model.item(0, 0).child(nrow, 0)
                    itdog.setCheckState(QtCore.Qt.Checked)
                    rcount = itdog.rowCount()
                    for j in range(0, rcount):
                        ithole = self.model.item(0, 0).child(nrow, 0).child(j, 0)
                        ithole.setCheckState(QtCore.Qt.Checked)
                        itindhole = self.model.indexFromItem(ithole)
                        self.selmodel.select(itindhole, QtCore.QItemSelectionModel.Select | QtCore.QItemSelectionModel.Rows)
                        rcount2 = ithole.rowCount()
                        for jjj in range(0, rcount2):
                            itobr = self.model.item(0, 0).child(nrow, 0).child(j, 0).child(jjj, 0)
                            itobr.setCheckState(QtCore.Qt.Checked)
                            itindobr = self.model.indexFromItem(itobr)
                            self.selmodel.select(itindobr, QtCore.QItemSelectionModel.Select | QtCore.QItemSelectionModel.Rows)
                else:
                    itdog = self.model.item(0, 0).child(nrow, 0)
                    itdog.setCheckState(QtCore.Qt.Unchecked)
                    rcount = itdog.rowCount()
                    for j in range(0, rcount):
                        ithole = self.model.item(0, 0).child(nrow, 0).child(j, 0)
                        ithole.setCheckState(QtCore.Qt.Unchecked)
                        itindhole = self.model.indexFromItem(ithole)
                        self.selmodel.select(itindhole, QtCore.QItemSelectionModel.Deselect | QtCore.QItemSelectionModel.Rows)
                        rcount2 = ithole.rowCount()
                        for jjj in range(0, rcount2):
                            itobr = self.model.item(0, 0).child(nrow, 0).child(j, 0).child(jjj, 0)
                            itobr.setCheckState(QtCore.Qt.Unchecked)
                            itindobr = self.model.indexFromItem(itobr)
                            self.selmodel.select(itindobr, QtCore.QItemSelectionModel.Deselect | QtCore.QItemSelectionModel.Rows)
            else:
                if self.model.itemFromIndex(ind).parent().parent().parent() == None:    # Третий уровень "Скважины"
                    nrow = ind.row()
                    if self.selmodel.isSelected(ind):
                        ithole = self.model.itemFromIndex(ind).parent().child(nrow, 0)
                        ithole.setCheckState(QtCore.Qt.Checked)
                        rcount = ithole.rowCount()
                        for jj in range(0, rcount):
                            itobr = self.model.itemFromIndex(ind).parent().child(nrow, 0).child(jj, 0)
                            itobr.setCheckState(QtCore.Qt.Checked)
                            itindobr = self.model.indexFromItem(itobr)
                            self.selmodel.select(itindobr, QtCore.QItemSelectionModel.Select | QtCore.QItemSelectionModel.Rows)
                    else:
                        ithole = self.model.itemFromIndex(ind).parent().child(nrow, 0)
                        ithole.setCheckState(QtCore.Qt.Unchecked)
                        rcount = ithole.rowCount()
                        for jj in range(0, rcount):
                            itobr = self.model.itemFromIndex(ind).parent().child(nrow, 0).child(jj, 0)
                            itobr.setCheckState(QtCore.Qt.Unchecked)
                            itindobr = self.model.indexFromItem(itobr)
                            self.selmodel.select(itindobr, QtCore.QItemSelectionModel.Deselect | QtCore.QItemSelectionModel.Rows)
                    itdog = self.model.itemFromIndex(ind).parent()
                    itinddog = self.model.indexFromItem(itdog)
                    countcheckhole = 0
                    counthole = self.model.itemFromIndex(ind).parent().rowCount()
                    for i in range(0, counthole):
                        ithole = self.model.itemFromIndex(ind).parent().child(i, 0)
                        if ithole.checkState() == 2:
                            countcheckhole += 1
                    if countcheckhole == counthole:
                        itdog.setCheckState(QtCore.Qt.Checked)
                        self.selmodel.select(itinddog, QtCore.QItemSelectionModel.Select | QtCore.QItemSelectionModel.Rows)
                    elif countcheckhole == 0:
                        itdog.setCheckState(QtCore.Qt.Unchecked)
                        self.selmodel.select(itinddog, QtCore.QItemSelectionModel.Deselect | QtCore.QItemSelectionModel.Rows)
                    else:
                        itdog.setCheckState(QtCore.Qt.PartiallyChecked)
                        self.selmodel.select(itinddog, QtCore.QItemSelectionModel.Select | QtCore.QItemSelectionModel.Rows)
                else:   # Четвертый уровень "Образцы"
                    nrow = ind.row()
                    if self.selmodel.isSelected(ind):
                        itobr = self.model.itemFromIndex(ind).parent().child(nrow, 0)
                        itobr.setCheckState(QtCore.Qt.Checked)
                    else:
                        itobr = self.model.itemFromIndex(ind).parent().child(nrow, 0)
                        itobr.setCheckState(QtCore.Qt.Unchecked)
                    ithole = self.model.itemFromIndex(ind).parent()
                    itindhole = self.model.indexFromItem(ithole)
                    countcheckobr = 0
                    countobr = self.model.itemFromIndex(ind).parent().rowCount()
                    for i in range(0, countobr):
                        itobr = self.model.itemFromIndex(ind).parent().child(i, 0)
                        if itobr.checkState() == 2:
                            countcheckobr += 1
                    if countcheckobr == countobr:
                        ithole.setCheckState(QtCore.Qt.Checked)
                        self.selmodel.select(itindhole, QtCore.QItemSelectionModel.Select | QtCore.QItemSelectionModel.Rows)
                    elif countcheckobr == 0:
                        ithole.setCheckState(QtCore.Qt.Unchecked)
                        self.selmodel.select(itindhole, QtCore.QItemSelectionModel.Deselect | QtCore.QItemSelectionModel.Rows)
                    else:
                        ithole.setCheckState(QtCore.Qt.PartiallyChecked)
                        self.selmodel.select(itindhole, QtCore.QItemSelectionModel.Select | QtCore.QItemSelectionModel.Rows)
                    ind = self.model.indexFromItem(self.model.itemFromIndex(ind).parent())    # Переход на уровень Скважины
                    itdog = self.model.itemFromIndex(ind).parent()
                    itinddog = self.model.indexFromItem(itdog)
                    countcheckhole = 0
                    counthole = self.model.itemFromIndex(ind).parent().rowCount()
                    for i in range(0, counthole):
                        ithole = self.model.itemFromIndex(ind).parent().child(i, 0)
                        if ithole.checkState() == 2:
                            countcheckhole += 1
                    if countcheckhole == counthole:
                        itdog.setCheckState(QtCore.Qt.Checked)
                        self.selmodel.select(itinddog,
                                             QtCore.QItemSelectionModel.Select | QtCore.QItemSelectionModel.Rows)
                    elif countcheckhole == 0:
                        itdog.setCheckState(QtCore.Qt.Unchecked)
                        self.selmodel.select(itinddog,
                                             QtCore.QItemSelectionModel.Deselect | QtCore.QItemSelectionModel.Rows)
                    else:
                        itdog.setCheckState(QtCore.Qt.PartiallyChecked)
                        self.selmodel.select(itinddog,
                                             QtCore.QItemSelectionModel.Select | QtCore.QItemSelectionModel.Rows)

    def setReject(self) -> set:
        """Снятие всех отметок перед закрытием окна"""
        selrow = self.selmodel.selectedIndexes()
        countsel = len(selrow)
        for i in range(0, countsel):
            it = self.model.itemFromIndex(selrow[i])
            if it.checkState() == 2:
                it.setCheckState(0)
            else:
                pass
        self.selmodel.clearSelection()
        self.reject()


class IspolWindow(QtWidgets.QTabWidget, egclasswin.Ui_Ispol_win):
    def __init__(self) -> set:
        """Инициализация окна  Исполнители работ"""
        super().__init__()
        self.setupUi(self)
        self.vidrab = 1
        self.recCountIspol = 0      # Количество записей руководителей
        self.recCountIspol_2 = 0    # Количество записей буровиков
        self.recCountIspol_3 = 0    # Количество записей геологов
        self.recCountIspol_4 = 0    # Количество записей геодезистов
        self.recCountIspol_5 = 0    # Количество записей гидрологов
        self.recCountIspol_6 = 0    # Количество записей геофизиков
        self.recCountIspol_7 = 0    # Количество записей лаборантов
        self.modelIspol = QtGui.QStandardItemModel(10, 4)  # Создание модели Руководители
        self.selmodelIspol = QtCore.QItemSelectionModel(self.modelIspol)  # Создание модели выделения
        self.modelIspol.setRowCount(len(self.recAll))
        self.modelIspol.setHorizontalHeaderLabels(['ID Ispol',
                                                  'Vidrab',
                                                  'Посада',
                                                  'ПІБ'])
        self.modelIspol_2 = QtGui.QStandardItemModel(10, 4)  # Создание модели Буровики
        self.selmodelIspol_2 = QtCore.QItemSelectionModel(self.modelIspol)  # Создание модели выделения
        self.modelIspol_2.setRowCount(len(self.recAll))
        self.modelIspol_2.setHorizontalHeaderLabels(['ID Ispol',
                                                   'Vidrab',
                                                   'Посада',
                                                   'ПІБ'])
        self.modelIspol_3 = QtGui.QStandardItemModel(10, 4)  # Создание модели Геологи
        self.selmodelIspol_3 = QtCore.QItemSelectionModel(self.modelIspol)  # Создание модели выделения
        self.modelIspol_3.setRowCount(len(self.recAll))
        self.modelIspol_3.setHorizontalHeaderLabels(['ID Ispol',
                                                     'Vidrab',
                                                     'Посада',
                                                     'ПІБ'])
        self.modelIspol_4 = QtGui.QStandardItemModel(10, 4)  # Создание модели Геодезисты
        self.selmodelIspol_4 = QtCore.QItemSelectionModel(self.modelIspol)  # Создание модели выделения
        self.modelIspol_4.setRowCount(len(self.recAll))
        self.modelIspol_4.setHorizontalHeaderLabels(['ID Ispol',
                                                     'Vidrab',
                                                     'Посада',
                                                     'ПІБ'])
        self.modelIspol_5 = QtGui.QStandardItemModel(10, 4)  # Создание модели Гидрологи
        self.selmodelIspol_5 = QtCore.QItemSelectionModel(self.modelIspol)  # Создание модели выделения
        self.modelIspol_5.setRowCount(len(self.recAll))
        self.modelIspol_5.setHorizontalHeaderLabels(['ID Ispol',
                                                     'Vidrab',
                                                     'Посада',
                                                     'ПІБ'])
        self.modelIspol_6 = QtGui.QStandardItemModel(10, 4)  # Создание модели Геофизики
        self.selmodelIspol_6 = QtCore.QItemSelectionModel(self.modelIspol)  # Создание модели выделения
        self.modelIspol_6.setRowCount(len(self.recAll))
        self.modelIspol_6.setHorizontalHeaderLabels(['ID Ispol',
                                                     'Vidrab',
                                                     'Посада',
                                                     'ПІБ'])
        self.modelIspol_7 = QtGui.QStandardItemModel(10, 4)  # Создание модели Лаборанты
        self.selmodelIspol_7 = QtCore.QItemSelectionModel(self.modelIspol)  # Создание модели выделения
        self.modelIspol_7.setRowCount(len(self.recAll))
        self.modelIspol_7.setHorizontalHeaderLabels(['ID Ispol',
                                                     'Vidrab',
                                                     'Посада',
                                                     'ПІБ'])
        self.tableIspol.setModel(self.modelIspol)  # Создание представления Руководители
        self.tableIspol.setGeometry(QtCore.QRect(10, 10, 568, 233))
        self.tableIspol.setColumnWidth(0, 10)
        self.tableIspol.setColumnWidth(1, 10)
        self.tableIspol.setColumnWidth(2, 330)
        self.tableIspol.setColumnWidth(3, 210)
        self.tableIspol.setColumnHidden(0, True)
        self.tableIspol.setColumnHidden(1, True)
        self.tableIspol_2.setModel(self.modelIspol_2)  # Создание представления Буровики
        self.tableIspol_2.setGeometry(QtCore.QRect(10, 10, 568, 233))
        self.tableIspol_2.setColumnWidth(0, 10)
        self.tableIspol_2.setColumnWidth(1, 10)
        self.tableIspol_2.setColumnWidth(2, 330)
        self.tableIspol_2.setColumnWidth(3, 210)
        self.tableIspol_2.setColumnHidden(0, True)
        self.tableIspol_2.setColumnHidden(1, True)
        self.tableIspol_3.setModel(self.modelIspol_3)  # Создание представления Геологи
        self.tableIspol_3.setGeometry(QtCore.QRect(10, 10, 568, 233))
        self.tableIspol_3.setColumnWidth(0, 10)
        self.tableIspol_3.setColumnWidth(1, 10)
        self.tableIspol_3.setColumnWidth(2, 330)
        self.tableIspol_3.setColumnWidth(3, 210)
        self.tableIspol_3.setColumnHidden(0, True)
        self.tableIspol_3.setColumnHidden(1, True)
        self.tableIspol_4.setModel(self.modelIspol_4)  # Создание представления Геодезисты
        self.tableIspol_4.setGeometry(QtCore.QRect(10, 10, 568, 233))
        self.tableIspol_4.setColumnWidth(0, 10)
        self.tableIspol_4.setColumnWidth(1, 10)
        self.tableIspol_4.setColumnWidth(2, 330)
        self.tableIspol_4.setColumnWidth(3, 210)
        self.tableIspol_4.setColumnHidden(0, True)
        self.tableIspol_4.setColumnHidden(1, True)
        self.tableIspol_5.setModel(self.modelIspol_5)  # Создание представления Гидрологи
        self.tableIspol_5.setGeometry(QtCore.QRect(10, 10, 568, 233))
        self.tableIspol_5.setColumnWidth(0, 10)
        self.tableIspol_5.setColumnWidth(1, 10)
        self.tableIspol_5.setColumnWidth(2, 330)
        self.tableIspol_5.setColumnWidth(3, 210)
        self.tableIspol_5.setColumnHidden(0, True)
        self.tableIspol_5.setColumnHidden(1, True)
        self.tableIspol_6.setModel(self.modelIspol_6)  # Создание представления Геофизики
        self.tableIspol_6.setGeometry(QtCore.QRect(10, 10, 568, 233))
        self.tableIspol_6.setColumnWidth(0, 10)
        self.tableIspol_6.setColumnWidth(1, 10)
        self.tableIspol_6.setColumnWidth(2, 330)
        self.tableIspol_6.setColumnWidth(3, 210)
        self.tableIspol_6.setColumnHidden(0, True)
        self.tableIspol_6.setColumnHidden(1, True)
        self.tableIspol_7.setModel(self.modelIspol_7)  # Создание представления Лаборанты
        self.tableIspol_7.setGeometry(QtCore.QRect(10, 10, 568, 233))
        self.tableIspol_7.setColumnWidth(0, 10)
        self.tableIspol_7.setColumnWidth(1, 10)
        self.tableIspol_7.setColumnWidth(2, 330)
        self.tableIspol_7.setColumnWidth(3, 210)
        self.tableIspol_7.setColumnHidden(0, True)
        self.tableIspol_7.setColumnHidden(1, True)
        self.recAll = self.requerySelect(0)
        if not self.recAll:
            self.addRecord()
        else:
            self.recCount = len(self.recAll)
            self.recNum = 0
            self.recOld = self.recAll[self.recNum]
            self.Id = self.recOld[0]  # ID исполнителя
        # Обновление формы и панели инструментов
        self.refreshToolbar()
        self.refreshRecord(self.vidrab)
        # Назначение обработчиков сигналов
        self.currentChanged[int].connect(self.askTo)

    def requerySelect(self, vidrab) -> set:
        """Обновление запроса исполнителей"""
        if vidrab == 0:
            with UseDatebase(dbconfig) as curs:
                curs.execute("SELECT * FROM ispol ORDER BY id")
                self.recAll = curs.fetchall()
        else:
            with UseDatebase(dbconfig) as curs:
                curs.execute("SELECT * FROM ispol WHERE vidrab = %(v)s ORDER BY id;", {'v': vidrab})
                self.recAll = curs.fetchall()
        return self.recAll

    def refreshRecord(self, vidrab) -> set:
        """ Обновление формы"""
        if vidrab == 1:
            self.refreshTable()
        elif vidrab == 2:
            self.refreshTable_2()
        elif vidrab == 3:
            self.refreshTable_3()
        elif vidrab == 4:
            self.refreshTable_4()
        elif vidrab == 5:
            self.refreshTable_5()
        elif vidrab == 6:
            self.refreshTable_6()
        elif vidrab == 7:
            self.refreshTable_7()
        else:
            pass

    def askTo(self, vidrab) -> set:
        """ Проверка изменений при переключении вкладок"""
        vidrab = vidrab + 1
        if self.vidrab == 1:
            self.asktoSave()
        elif self.vidrab == 2:
            self.asktoSave_2()
        elif self.vidrab == 3:
            self.asktoSave_3()
        elif self.vidrab == 4:
            self.asktoSave_4()
        elif self.vidrab == 5:
            self.asktoSave_5()
        elif self.vidrab == 6:
            self.asktoSave_6()
        elif self.vidrab == 7:
            self.asktoSave_7()
        else:
            pass
        if vidrab == 1:
            self.refreshTable()
        elif vidrab == 2:
            self.refreshTable_2()
        elif vidrab == 3:
            self.refreshTable_3()
        elif vidrab == 4:
            self.refreshTable_4()
        elif vidrab == 5:
            self.refreshTable_5()
        elif vidrab == 6:
            self.refreshTable_6()
        elif vidrab == 7:
            self.refreshTable_7()
        else:
            pass

    def askToHide(self, vidrab) -> set:
        """ Проверка изменений при переключении вкладок"""
        if vidrab == 1:
            self.asktoSave()
        elif vidrab == 2:
            self.asktoSave_2()
        elif vidrab == 3:
            self.asktoSave_3()
        elif vidrab == 4:
            self.asktoSave_4()
        elif vidrab == 5:
            self.asktoSave_5()
        elif vidrab == 6:
            self.asktoSave_6()
        elif vidrab == 7:
            self.asktoSave_7()
        else:
            pass

    def refreshTable(self) -> set:
        """Обновление таблицы Руководители"""
        self.vidrab = 1
        self.recAll = self.requerySelect(1)
        self.recCountIspol = len(self.recAll)
        self.recAllOldIspol = []
        if self.recCountIspol > 0:
            self.modelIspol.setRowCount(self.recCountIspol)
            self.tableIspol.setEnabled(True)
            self.modelIspol.removeRows(0, self.modelIspol.rowCount())
            item0 = QtWidgets.QTableWidgetItem()
            item0.setData(QtCore.Qt.EditRole, id)
            for i in range(0, self.recCountIspol):  # Занесение данных в ячейки таблицы
                self.recOldIspol = self.recAll[i][0:4]
                listrow = list(self.recOldIspol)  # Список одной строки
                item0 = QtGui.QStandardItem(str(listrow[0]))  # ID
                item1 = QtGui.QStandardItem(str(listrow[1]))  # Вид работ
                item2 = QtGui.QStandardItem(str(listrow[2]))  # Должность
                item3 = QtGui.QStandardItem(str(listrow[3]))  # ФИО
                self.modelIspol.appendRow([item0, item1, item2, item3])
                oldIspolOne = []
                for j in range(0, 4):  # Занесение данных в ячейки таблицы
                    it = listrow[j]
                    oldIspolOne.append(it)
                self.recAllOldIspol.append(oldIspolOne)  # Формирование исходного списка Руководители
        else:
            self.tableIspol.setEnabled(False)
            self.modelIspol.removeRows(0, self.modelIspol.rowCount())
        self.recAllNewIspol = self.recAllOldIspol
        self.tableIspol.selectRow(0)

    def refreshTable_2(self) -> set:
        """Обновление таблицы Буровики"""
        self.vidrab = 2
        self.recAll = self.requerySelect(2)
        self.recCountIspol_2 = len(self.recAll)
        self.recAllOldIspol_2 = []
        if self.recCountIspol_2 > 0:
            self.modelIspol_2.setRowCount(self.recCountIspol_2)
            self.tableIspol_2.setEnabled(True)
            self.modelIspol_2.removeRows(0, self.modelIspol_2.rowCount())
            item0 = QtWidgets.QTableWidgetItem()
            item0.setData(QtCore.Qt.EditRole, id)
            for i in range(0, self.recCountIspol_2):  # Занесение данных в ячейки таблицы
                self.recOldIspol = self.recAll[i][0:4]
                listrow = list(self.recOldIspol)  # Список одной строки
                item0 = QtGui.QStandardItem(str(listrow[0]))  # ID
                item1 = QtGui.QStandardItem(str(listrow[1]))  # Вид работ
                item2 = QtGui.QStandardItem(str(listrow[2]))  # Должность
                item3 = QtGui.QStandardItem(str(listrow[3]))  # ФИО
                self.modelIspol_2.appendRow([item0, item1, item2, item3])
                oldIspolOne = []
                for j in range(0, 4):  # Занесение данных в ячейки таблицы
                    it = listrow[j]
                    oldIspolOne.append(it)
                self.recAllOldIspol_2.append(oldIspolOne)  # Формирование исходного списка Бурильщики
        else:
            self.tableIspol_2.setEnabled(False)
            self.modelIspol_2.removeRows(0, self.modelIspol_2.rowCount())
        self.recAllNewIspol_2 = self.recAllOldIspol_2
        self.tableIspol_2.selectRow(0)

    def refreshTable_3(self) -> set:
        """Обновление таблицы Геологи"""
        self.vidrab = 3
        self.recAll = self.requerySelect(3)
        self.recCountIspol_3 = len(self.recAll)
        self.recAllOldIspol_3 = []
        if self.recCountIspol_3 > 0:
            self.modelIspol_3.setRowCount(self.recCountIspol_3)
            self.tableIspol_3.setEnabled(True)
            self.modelIspol_3.removeRows(0, self.modelIspol_3.rowCount())
            item0 = QtWidgets.QTableWidgetItem()
            item0.setData(QtCore.Qt.EditRole, id)
            for i in range(0, self.recCountIspol_3):  # Занесение данных в ячейки таблицы
                self.recOldIspol = self.recAll[i][0:4]
                listrow = list(self.recOldIspol)  # Список одной строки
                item0 = QtGui.QStandardItem(str(listrow[0]))  # ID
                item1 = QtGui.QStandardItem(str(listrow[1]))  # Вид работ
                item2 = QtGui.QStandardItem(str(listrow[2]))  # Должность
                item3 = QtGui.QStandardItem(str(listrow[3]))  # ФИО
                self.modelIspol_3.appendRow([item0, item1, item2, item3])
                oldIspolOne = []
                for j in range(0, 4):  # Занесение данных в ячейки таблицы
                    it = listrow[j]
                    oldIspolOne.append(it)
                self.recAllOldIspol_3.append(oldIspolOne)  # Формирование исходного списка Исполнителей
        else:
            self.tableIspol_3.setEnabled(False)
            self.modelIspol_3.removeRows(0, self.modelIspol_3.rowCount())
        self.recAllNewIspol_3 = self.recAllOldIspol_3
        self.tableIspol_3.selectRow(0)

    def refreshTable_4(self) -> set:
        """Обновление таблицы Геодезисты"""
        self.vidrab = 4
        self.recAll = self.requerySelect(4)
        self.recCountIspol_4 = len(self.recAll)
        self.recAllOldIspol_4 = []
        if self.recCountIspol_4 > 0:
            self.modelIspol_4.setRowCount(self.recCountIspol_4)
            self.tableIspol_4.setEnabled(True)
            self.modelIspol_4.removeRows(0, self.modelIspol_4.rowCount())
            item0 = QtWidgets.QTableWidgetItem()
            item0.setData(QtCore.Qt.EditRole, id)
            for i in range(0, self.recCountIspol_4):  # Занесение данных в ячейки таблицы
                self.recOldIspol = self.recAll[i][0:4]
                listrow = list(self.recOldIspol)  # Список одной строки
                item0 = QtGui.QStandardItem(str(listrow[0]))  # ID
                item1 = QtGui.QStandardItem(str(listrow[1]))  # Вид работ
                item2 = QtGui.QStandardItem(str(listrow[2]))  # Должность
                item3 = QtGui.QStandardItem(str(listrow[3]))  # ФИО
                self.modelIspol_4.appendRow([item0, item1, item2, item3])
                oldIspolOne = []
                for j in range(0, 4):  # Занесение данных в ячейки таблицы
                    it = listrow[j]
                    oldIspolOne.append(it)
                self.recAllOldIspol_4.append(oldIspolOne)  # Формирование исходного списка Геодезисты
        else:
            self.tableIspol_4.setEnabled(False)
            self.modelIspol_4.removeRows(0, self.modelIspol_4.rowCount())
        self.recAllNewIspol_4 = self.recAllOldIspol_4
        self.tableIspol_4.selectRow(0)

    def refreshTable_5(self) -> set:
        """Обновление таблицы Гидрологи"""
        self.vidrab = 5
        self.recAll = self.requerySelect(5)
        self.recCountIspol_5 = len(self.recAll)
        self.recAllOldIspol_5 = []
        if self.recCountIspol_5 > 0:
            self.modelIspol_5.setRowCount(self.recCountIspol_5)
            self.tableIspol_5.setEnabled(True)
            self.modelIspol_5.removeRows(0, self.modelIspol_5.rowCount())
            item0 = QtWidgets.QTableWidgetItem()
            item0.setData(QtCore.Qt.EditRole, id)
            for i in range(0, self.recCountIspol_5):  # Занесение данных в ячейки таблицы
                self.recOldIspol = self.recAll[i][0:4]
                listrow = list(self.recOldIspol)  # Список одной строки
                item0 = QtGui.QStandardItem(str(listrow[0]))  # ID
                item1 = QtGui.QStandardItem(str(listrow[1]))  # Вид работ
                item2 = QtGui.QStandardItem(str(listrow[2]))  # Должность
                item3 = QtGui.QStandardItem(str(listrow[3]))  # ФИО
                self.modelIspol_5.appendRow([item0, item1, item2, item3])
                oldIspolOne = []
                for j in range(0, 4):  # Занесение данных в ячейки таблицы
                    it = listrow[j]
                    oldIspolOne.append(it)
                self.recAllOldIspol_5.append(oldIspolOne)  # Формирование исходного списка Гидрологи
        else:
            self.tableIspol_5.setEnabled(False)
            self.modelIspol_5.removeRows(0, self.modelIspol_5.rowCount())
        self.recAllNewIspol_5 = self.recAllOldIspol_5
        self.tableIspol_5.selectRow(0)

    def refreshTable_6(self) -> set:
        """Обновление таблицы Геофизики"""
        self.vidrab = 6
        self.recAll = self.requerySelect(6)
        self.recCountIspol_6 = len(self.recAll)
        self.recAllOldIspol_6 = []
        if self.recCountIspol_6 > 0:
            self.modelIspol_6.setRowCount(self.recCountIspol_6)
            self.tableIspol_6.setEnabled(True)
            self.modelIspol_6.removeRows(0, self.modelIspol_6.rowCount())
            item0 = QtWidgets.QTableWidgetItem()
            item0.setData(QtCore.Qt.EditRole, id)
            for i in range(0, self.recCountIspol_6):  # Занесение данных в ячейки таблицы
                self.recOldIspol = self.recAll[i][0:4]
                listrow = list(self.recOldIspol)  # Список одной строки
                item0 = QtGui.QStandardItem(str(listrow[0]))  # ID
                item1 = QtGui.QStandardItem(str(listrow[1]))  # Вид работ
                item2 = QtGui.QStandardItem(str(listrow[2]))  # Должность
                item3 = QtGui.QStandardItem(str(listrow[3]))  # ФИО
                self.modelIspol_6.appendRow([item0, item1, item2, item3])
                oldIspolOne = []
                for j in range(0, 4):  # Занесение данных в ячейки таблицы
                    it = listrow[j]
                    oldIspolOne.append(it)
                self.recAllOldIspol_6.append(oldIspolOne)  # Формирование исходного списка Геодезисты
        else:
            self.tableIspol_6.setEnabled(False)
            self.modelIspol_6.removeRows(0, self.modelIspol_6.rowCount())
        self.recAllNewIspol_6 = self.recAllOldIspol_6
        self.tableIspol_6.selectRow(0)

    def refreshTable_7(self) -> set:
        """Обновление таблицы Лаборанты"""
        self.vidrab = 7
        self.recAll = self.requerySelect(7)
        self.recCountIspol_7 = len(self.recAll)
        self.recAllOldIspol_7 = []
        if self.recCountIspol_7 > 0:
            self.modelIspol_7.setRowCount(self.recCountIspol_7)
            self.tableIspol_7.setEnabled(True)
            self.modelIspol_7.removeRows(0, self.modelIspol_7.rowCount())
            item0 = QtWidgets.QTableWidgetItem()
            item0.setData(QtCore.Qt.EditRole, id)
            for i in range(0, self.recCountIspol_7):  # Занесение данных в ячейки таблицы
                self.recOldIspol = self.recAll[i][0:4]
                listrow = list(self.recOldIspol)  # Список одной строки
                item0 = QtGui.QStandardItem(str(listrow[0]))  # ID
                item1 = QtGui.QStandardItem(str(listrow[1]))  # Вид работ
                item2 = QtGui.QStandardItem(str(listrow[2]))  # Должность
                item3 = QtGui.QStandardItem(str(listrow[3]))  # ФИО
                self.modelIspol_7.appendRow([item0, item1, item2, item3])
                oldIspolOne = []
                for j in range(0, 4):  # Занесение данных в ячейки таблицы
                    it = listrow[j]
                    oldIspolOne.append(it)
                self.recAllOldIspol_7.append(oldIspolOne)  # Формирование исходного списка Лаборанты
        else:
            self.tableIspol_7.setEnabled(False)
            self.modelIspol_7.removeRows(0, self.modelIspol_7.rowCount())
        self.recAllNewIspol_7 = self.recAllOldIspol_7
        self.tableIspol_7.selectRow(0)

    def refreshToolbar(self) -> set:
        """Обновляет панель инструментов"""
        form.action_8.setEnabled(False)  # Первая запись
        form.action_9.setEnabled(False)  # Предыдущая запись
        form.action_10.setEnabled(False)  # Следующая запись
        form.action_11.setEnabled(False)  # Последняя запись

    def showEvent(self, e) -> set:
        """Выполняет действия при выводе окна на экран"""
        form.action_36.setEnabled(False)
        QtWidgets.QTabWidget.showEvent(self, e)

    def hideEvent(self, e) -> set:
        """Выполняет действия при скрытии окна"""
        form.action_36.setEnabled(True)
        form.ispolwin = None
        if self.recAll != []:
            self.askToHide(self.vidrab)
        form.refreshMain()
        QtWidgets.QTabWidget.hideEvent(self, e)

    def addRecord(self) -> set:
        """Добавляет новую запись"""
        vidrab = self.currentIndex() + 1
        with UseDatebase(dbconfig) as curs:
            curs.execute("INSERT INTO ispol (vidrab) VALUES (%(v1)s);", {'v1': vidrab})
        self.recAll = self.requerySelect(vidrab)
        recCount = len(self.recAll)
        if vidrab == 1:
            self.asktoSave()
            self.refreshTable()
            self.tableIspol.setFocus()
            sel = self.tableIspol.selectionModel()
            ind = self.tableIspol.model().index(recCount-1, 2)
            sel.setCurrentIndex(ind, QtCore.QItemSelectionModel.ClearAndSelect)
        elif vidrab == 2:
            self.asktoSave_2()
            self.refreshTable_2()
            self.tableIspol_2.setFocus()
            sel = self.tableIspol_2.selectionModel()
            ind = self.tableIspol_2.model().index(recCount - 1, 2)
            sel.setCurrentIndex(ind, QtCore.QItemSelectionModel.ClearAndSelect)
        elif vidrab == 3:
            self.asktoSave_3()
            self.refreshTable_3()
            self.tableIspol_3.setFocus()
            sel = self.tableIspol_3.selectionModel()
            ind = self.tableIspol_3.model().index(recCount - 1, 2)
            sel.setCurrentIndex(ind, QtCore.QItemSelectionModel.ClearAndSelect)
        elif vidrab == 4:
            self.asktoSave_4()
            self.refreshTable_4()
            self.tableIspol_4.setFocus()
            sel = self.tableIspol_4.selectionModel()
            ind = self.tableIspol_4.model().index(recCount - 1, 2)
            sel.setCurrentIndex(ind, QtCore.QItemSelectionModel.ClearAndSelect)
        elif vidrab == 5:
            self.asktoSave_5()
            self.refreshTable_5()
            self.tableIspol_5.setFocus()
            sel = self.tableIspol_5.selectionModel()
            ind = self.tableIspol_5.model().index(recCount - 1, 2)
            sel.setCurrentIndex(ind, QtCore.QItemSelectionModel.ClearAndSelect)
        elif vidrab == 6:
            self.asktoSave_6()
            self.refreshTable_6()
            self.tableIspol_6.setFocus()
            sel = self.tableIspol_6.selectionModel()
            ind = self.tableIspol_6.model().index(recCount - 1, 2)
            sel.setCurrentIndex(ind, QtCore.QItemSelectionModel.ClearAndSelect)
        elif vidrab == 7:
            self.asktoSave_7()
            self.refreshTable_7()
            self.tableIspol_7.setFocus()
            sel = self.tableIspol_7.selectionModel()
            ind = self.tableIspol_7.model().index(recCount - 1, 2)
            sel.setCurrentIndex(ind, QtCore.QItemSelectionModel.ClearAndSelect)

    def delRecord(self) -> set:
        """Удаляет текущую запись"""
        vidrab = self.currentIndex() + 1
        if vidrab == 1:
            valIndex = self.tableIspol.currentIndex()   # Создание экземпляра класса ModelIndex
            ind = self.modelIspol.index(valIndex.row(), 0)
            val0 = self.modelIspol.data(ind)   # ID Руководители
        elif vidrab == 2:
            valIndex = self.tableIspol_2.currentIndex()  # Создание экземпляра класса ModelIndex
            ind = self.modelIspol_2.index(valIndex.row(), 0)
            val0 = self.modelIspol_2.data(ind)  # ID Буровики
        elif vidrab == 3:
            valIndex = self.tableIspol_3.currentIndex()  # Создание экземпляра класса ModelIndex
            ind = self.modelIspol_3.index(valIndex.row(), 0)
            val0 = self.modelIspol_3.data(ind)  # ID Геологи
        elif vidrab == 4:
            valIndex = self.tableIspol_4.currentIndex()  # Создание экземпляра класса ModelIndex
            ind = self.modelIspol_4.index(valIndex.row(), 0)
            val0 = self.modelIspol_4.data(ind)  # ID Геодезисты
        elif vidrab == 5:
            valIndex = self.tableIspol_5.currentIndex()  # Создание экземпляра класса ModelIndex
            ind = self.modelIspol_5.index(valIndex.row(), 0)
            val0 = self.modelIspol_5.data(ind)  # ID Гидрологи
        elif vidrab == 6:
            valIndex = self.tableIspol_6.currentIndex()  # Создание экземпляра класса ModelIndex
            ind = self.modelIspol_6.index(valIndex.row(), 0)
            val0 = self.modelIspol_6.data(ind)  # ID Геофизики
        elif vidrab == 7:
            valIndex = self.tableIspol_7.currentIndex()  # Создание экземпляра класса ModelIndex
            ind = self.modelIspol_7.index(valIndex.row(), 0)
            val0 = self.modelIspol_7.data(ind)  # ID Лаборанты
        with UseDatebase(dbconfig) as curs:
            curs.execute("DELETE FROM ispol WHERE id = %(v0)s;", {'v0': val0})
        self.requerySelect(vidrab)
        self.recCount = len(self.recAll)
        if self.recCount > 0:
            if vidrab == 1:
                self.refreshTable()
                self.tableIspol.selectRow(self.recCount - 1)
            elif vidrab == 2:
                self.refreshTable_2()
                self.tableIspol_2.selectRow(self.recCount - 1)
            elif vidrab == 3:
                self.refreshTable_3()
                self.tableIspol_3.selectRow(self.recCount - 1)
        else:
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information, "Виконавці",
                                           "Видалено останній запис")
            btnOK = QtWidgets.QPushButton("&OK")
            btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
            result = self.formMassWin.exec()
            if result == 0:
                self.formMassWin.close()
                self.parent().close()

    def asktoSave(self) -> set:
        """Проверка наличия изменений в таблице Руководители"""
        # Считывание данных и обновление списка согласно значений экранной формы
        self.recAllNewIspol = []
        for i in range(0, self.recCountIspol):
            rec = []
            for j in range(0, 4):
                if j == 0 or j == 1:
                    el = int(self.modelIspol.item(i, j).data(QtCore.Qt.EditRole))
                else:
                    el = self.modelIspol.item(i, j).data(QtCore.Qt.EditRole)
                if el == 'None':
                    el = None
                rec.append(el)  # Формирование текущей записи из элементов
            self.recAllNewIspol.append(rec)  # Формирование обновленного списка (записей-кортежей)
        if self.recAllNewIspol == self.recAllOldIspol:
            ask = True
        else:
            ask = False
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question, "Виконавці робіт - Керівники",
                                           "Є незбережені дані. Ви бажаєте їх зберегти?")
            btnYes = QtWidgets.QPushButton("&Так")
            btnNo = QtWidgets.QPushButton("&Ні")
            btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
            self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
            self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
            self.formMassWin.setDefaultButton(btnYes)
            result = self.formMassWin.exec()
            if result == 0:
                self.saveIspol(1)
            else:
                pass
        return ask

    def asktoSave_2(self) -> set:
        """Проверка наличия изменений в таблице Бурильщики"""
        # Считывание данных и обновление списка согласно значений экранной формы
        self.recAllNewIspol_2 = []
        for i in range(0, self.recCountIspol_2):
            rec = []
            for j in range(0, 4):
                if j == 0 or j == 1:
                    el = int(self.modelIspol_2.item(i, j).data(QtCore.Qt.EditRole))
                else:
                    el = self.modelIspol_2.item(i, j).data(QtCore.Qt.EditRole)
                if el == 'None':
                    el = None
                rec.append(el)  # Формирование текущей записи из элементов
            self.recAllNewIspol_2.append(rec)  # Формирование обновленного списка (записей-кортежей)
        if self.recAllNewIspol_2 == self.recAllOldIspol_2:
            ask = True
        else:
            ask = False
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question, "Виконавці робіт - Буровики",
                                           "Є незбережені дані. Ви бажаєте їх зберегти?")
            btnYes = QtWidgets.QPushButton("&Так")
            btnNo = QtWidgets.QPushButton("&Ні")
            btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
            self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
            self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
            self.formMassWin.setDefaultButton(btnYes)
            result = self.formMassWin.exec()
            if result == 0:
                self.saveIspol(2)
            else:
                pass
        return ask

    def asktoSave_3(self) -> set:
        """Проверка наличия изменений в таблице Геологи"""
        # Считывание данных и обновление списка согласно значений экранной формы
        self.recAllNewIspol_3 = []
        for i in range(0, self.recCountIspol_3):
            rec = []
            for j in range(0, 4):
                if j == 0 or j == 1:
                    el = int(self.modelIspol_3.item(i, j).data(QtCore.Qt.EditRole))
                else:
                    el = self.modelIspol_3.item(i, j).data(QtCore.Qt.EditRole)
                if el == 'None':
                    el = None
                rec.append(el)  # Формирование текущей записи из элементов
            self.recAllNewIspol_3.append(rec)  # Формирование обновленного списка (записей-кортежей)
        if self.recAllNewIspol_3 == self.recAllOldIspol_3:
            ask = True
        else:
            ask = False
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question, "Виконавці робіт - Геологи",
                                           "Є незбережені дані. Ви бажаєте їх зберегти?")
            btnYes = QtWidgets.QPushButton("&Так")
            btnNo = QtWidgets.QPushButton("&Ні")
            btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
            self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
            self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
            self.formMassWin.setDefaultButton(btnYes)
            result = self.formMassWin.exec()
            if result == 0:
                self.saveIspol(3)
            else:
                pass
        return ask

    def asktoSave_4(self) -> set:
        """Проверка наличия изменений в таблице Геодезисты"""
        # Считывание данных и обновление списка согласно значений экранной формы
        self.recAllNewIspol_4 = []
        for i in range(0, self.recCountIspol_4):
            rec = []
            for j in range(0, 4):
                if j == 0 or j == 1:
                    el = int(self.modelIspol_4.item(i, j).data(QtCore.Qt.EditRole))
                else:
                    el = self.modelIspol_4.item(i, j).data(QtCore.Qt.EditRole)
                if el == 'None':
                    el = None
                rec.append(el)  # Формирование текущей записи из элементов
            self.recAllNewIspol_4.append(rec)  # Формирование обновленного списка (записей-кортежей)
        if self.recAllNewIspol_4 == self.recAllOldIspol_4:
            ask = True
        else:
            ask = False
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question, "Виконавці робіт - Геодезисти",
                                           "Є незбережені дані. Ви бажаєте їх зберегти?")
            btnYes = QtWidgets.QPushButton("&Так")
            btnNo = QtWidgets.QPushButton("&Ні")
            btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
            self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
            self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
            self.formMassWin.setDefaultButton(btnYes)
            result = self.formMassWin.exec()
            if result == 0:
                self.saveIspol(4)
            else:
                pass
        return ask

    def asktoSave_5(self) -> set:
        """Проверка наличия изменений в таблице Гидрологи"""
        # Считывание данных и обновление списка согласно значений экранной формы
        self.recAllNewIspol_5 = []
        for i in range(0, self.recCountIspol_5):
            rec = []
            for j in range(0, 4):
                if j == 0 or j == 1:
                    el = int(self.modelIspol_5.item(i, j).data(QtCore.Qt.EditRole))
                else:
                    el = self.modelIspol_5.item(i, j).data(QtCore.Qt.EditRole)
                if el == 'None':
                    el = None
                rec.append(el)  # Формирование текущей записи из элементов
            self.recAllNewIspol_5.append(rec)  # Формирование обновленного списка (записей-кортежей)
        if self.recAllNewIspol_5 == self.recAllOldIspol_5:
            ask = True
        else:
            ask = False
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question, "Виконавці робіт - Гідрологи",
                                           "Є незбережені дані. Ви бажаєте їх зберегти?")
            btnYes = QtWidgets.QPushButton("&Так")
            btnNo = QtWidgets.QPushButton("&Ні")
            btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
            self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
            self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
            self.formMassWin.setDefaultButton(btnYes)
            result = self.formMassWin.exec()
            if result == 0:
                self.saveIspol(5)
            else:
                pass
        return ask

    def asktoSave_6(self) -> set:
        """Проверка наличия изменений в таблице Геофизики"""
        # Считывание данных и обновление списка согласно значений экранной формы
        self.recAllNewIspol_6 = []
        for i in range(0, self.recCountIspol_6):
            rec = []
            for j in range(0, 4):
                if j == 0 or j == 1:
                    el = int(self.modelIspol_6.item(i, j).data(QtCore.Qt.EditRole))
                else:
                    el = self.modelIspol_6.item(i, j).data(QtCore.Qt.EditRole)
                if el == 'None':
                    el = None
                rec.append(el)  # Формирование текущей записи из элементов
            self.recAllNewIspol_6.append(rec)  # Формирование обновленного списка (записей-кортежей)
        if self.recAllNewIspol_6 == self.recAllOldIspol_6:
            ask = True
        else:
            ask = False
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question, "Виконавці робіт - Геофізики",
                                           "Є незбережені дані. Ви бажаєте їх зберегти?")
            btnYes = QtWidgets.QPushButton("&Так")
            btnNo = QtWidgets.QPushButton("&Ні")
            btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
            self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
            self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
            self.formMassWin.setDefaultButton(btnYes)
            result = self.formMassWin.exec()
            if result == 0:
                self.saveIspol(6)
            else:
                pass
        return ask

    def asktoSave_7(self) -> set:
        """Проверка наличия изменений в таблице Лаборанты"""
        # Считывание данных и обновление списка согласно значений экранной формы
        self.recAllNewIspol_7 = []
        for i in range(0, self.recCountIspol_7):
            rec = []
            for j in range(0, 4):
                if j == 0 or j == 1:
                    el = int(self.modelIspol_7.item(i, j).data(QtCore.Qt.EditRole))
                else:
                    el = self.modelIspol_7.item(i, j).data(QtCore.Qt.EditRole)
                if el == 'None':
                    el = None
                rec.append(el)  # Формирование текущей записи из элементов
            self.recAllNewIspol_7.append(rec)  # Формирование обновленного списка (записей-кортежей)
        if self.recAllNewIspol_7 == self.recAllOldIspol_7:
            ask = True
        else:
            ask = False
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question, "Виконавці робіт - Лаборанти",
                                           "Є незбережені дані. Ви бажаєте їх зберегти?")
            btnYes = QtWidgets.QPushButton("&Так")
            btnNo = QtWidgets.QPushButton("&Ні")
            btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
            self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
            self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
            self.formMassWin.setDefaultButton(btnYes)
            result = self.formMassWin.exec()
            if result == 0:
                self.saveIspol(7)
            else:
                pass
        return ask

    def saveRecord(self, ask) -> set:
        """Сохранение записей"""
        vidrab = self.currentIndex() + 1
        if vidrab == 1:
            self.asktoSave()
        elif vidrab == 2:
            self.asktoSave_2()
        elif vidrab == 3:
            self.asktoSave_3()
        elif vidrab == 4:
            self.asktoSave_4()
        elif vidrab == 5:
            self.asktoSave_5()
        elif vidrab == 6:
            self.asktoSave_6()
        elif vidrab == 7:
            self.asktoSave_7()
        else:
            pass

    def saveIspol(self, vidrab) -> set:
        """Сохранение записей таблицы исполнителей работ"""
        if vidrab == 1:
            recCount = self.recCountIspol
            recAllNew = self.recAllNewIspol
        elif vidrab == 2:
            recCount = self.recCountIspol_2
            recAllNew = self.recAllNewIspol_2
        elif vidrab == 3:
            recCount = self.recCountIspol_3
            recAllNew = self.recAllNewIspol_3
        elif vidrab == 4:
            recCount = self.recCountIspol_4
            recAllNew = self.recAllNewIspol_4
        elif vidrab == 5:
            recCount = self.recCountIspol_5
            recAllNew = self.recAllNewIspol_5
        elif vidrab == 6:
            recCount = self.recCountIspol_6
            recAllNew = self.recAllNewIspol_6
        elif vidrab == 7:
            recCount = self.recCountIspol_7
            recAllNew = self.recAllNewIspol_7
        else:
            pass
        for i in range(0, recCount):
            recTab = recAllNew[i]
            val0 = recTab[0]
            val1 = vidrab
            val2 = recTab[2]
            val3 = recTab[3]
            with UseDatebase(dbconfig) as curs:
                curs.execute("""UPDATE ispol
                                SET vidrab = %(v1)s,
                                    doljnost = %(v2)s,
                                    fio = %(v3)s
                                WHERE id = %(v0)s;""",
                             {'v1': val1, 'v2': val2, 'v3': val3, 'v0': val0})
        self.requerySelect(vidrab)
        if vidrab == 1:
            self.refreshTable()
        elif vidrab == 2:
            self.refreshTable_2()
        elif vidrab == 3:
            self.refreshTable_3()
        elif vidrab == 4:
            self.refreshTable_4()
        elif vidrab == 5:
            self.refreshTable_5()
        elif vidrab == 6:
            self.refreshTable_6()
        elif vidrab == 7:
            self.refreshTable_7()
        else:
            pass


class TipburWindow(QtWidgets.QTabWidget, egclasswin.Ui_Tipbur_win):
    def __init__(self) -> set:
        """Инициализация окна  Буровые установки"""
        super().__init__()
        self.setupUi(self)
        self.recAllOldTipbur = []
        self.id_tipbur = 1
        self.recCountTipbur = 0      # Количество записей самоходных установок
        self.recCountTipbur_2 = 0    # Количество записей плавучих установок
        self.recCountTipbur_3 = 0    # Количество записей малогабаритных установок
        self.modelTipbur = QtGui.QStandardItemModel(10, 12)  # Создание модели самоходных установок
        self.selmodelTipbur = QtCore.QItemSelectionModel(self.modelTipbur)  # Создание модели выделения
        self.modelTipbur.setRowCount(len(self.recAll))
        self.modelTipbur.setHorizontalHeaderLabels(['ID Tipbur',
                                                    'id_tipbur',
                                                    'Тип \nбурової установки',
                                                    'Найменування \nбурової установки',
                                                    'Глибина \nбуріння \nшнеком',
                                                    'Глибина \nбуріння \nшурфобуром',
                                                    'Глибина \nбуріння \nколонковим \nспособом',
                                                    'Глибина \nбуріння \nударно-канатним \nспособом',
                                                    'Діаметр \nбуріння \nшнеком',
                                                    'Діаметр \nбуріння \nшурфобуром',
                                                    'Діаметр \nбуріння \nколонковим \nспособом',
                                                    'Діаметр \nбуріння \nударно-канатним \nспособом'])
        self.modelTipbur_2 = QtGui.QStandardItemModel(10, 12)  # Создание модели плавучих установок
        self.selmodelTipbur_2 = QtCore.QItemSelectionModel(self.modelTipbur)  # Создание модели выделения
        self.modelTipbur_2.setRowCount(len(self.recAll))
        self.modelTipbur_2.setHorizontalHeaderLabels(['ID Tipbur',
                                                    'id_tipbur',
                                                    'Тип \nбурової установки',
                                                    'Найменування \nбурової установки',
                                                    'Глибина \nбуріння \nшнеком',
                                                    'Глибина \nбуріння \nшурфобуром',
                                                    'Глибина \nбуріння \nколонковим \nспособом',
                                                    'Глибина \nбуріння \nударно-канатним \nспособом',
                                                    'Діаметр \nбуріння \nшнеком',
                                                    'Діаметр \nбуріння \nшурфобуром',
                                                    'Діаметр \nбуріння \nколонковим \nспособом',
                                                    'Діаметр \nбуріння \nударно-канатним \nспособом'])
        self.modelTipbur_3 = QtGui.QStandardItemModel(10, 12)  # Создание модели малогабаритных установок
        self.selmodelTipbur_3 = QtCore.QItemSelectionModel(self.modelTipbur)  # Создание модели выделения
        self.modelTipbur_3.setRowCount(len(self.recAll))
        self.modelTipbur_3.setHorizontalHeaderLabels(['ID Tipbur',
                                                    'id_tipbur',
                                                    'Тип \nбурової установки',
                                                    'Найменування \nбурової установки',
                                                    'Глибина \nбуріння \nшнеком',
                                                    'Глибина \nбуріння \nшурфобуром',
                                                    'Глибина \nбуріння \nколонковим \nспособом',
                                                    'Глибина \nбуріння \nударно-канатним \nспособом',
                                                    'Діаметр \nбуріння \nшнеком',
                                                    'Діаметр \nбуріння \nшурфобуром',
                                                    'Діаметр \nбуріння \nколонковим \nспособом',
                                                    'Діаметр \nбуріння \nударно-канатним \nспособом'])
        self.tableTipbur.setModel(self.modelTipbur)  # Создание представления самоходные установки
        self.tableTipbur.setGeometry(QtCore.QRect(10, 10, 568, 233))
        self.tableTipbur.setColumnWidth(0, 10)
        self.tableTipbur.setColumnWidth(1, 10)
        self.tableTipbur.setColumnWidth(2, 180)
        self.tableTipbur.setColumnWidth(3, 220)
        self.tableTipbur.setColumnWidth(7, 140)
        self.tableTipbur.setColumnWidth(11, 140)
        self.tableTipbur.setColumnHidden(0, True)
        self.tableTipbur.setColumnHidden(1, True)
        self.tableTipbur_2.setModel(self.modelTipbur_2)  # Создание представления плавучие установки
        self.tableTipbur_2.setGeometry(QtCore.QRect(10, 10, 568, 233))
        self.tableTipbur_2.setColumnWidth(0, 10)
        self.tableTipbur_2.setColumnWidth(1, 10)
        self.tableTipbur_2.setColumnWidth(2, 180)
        self.tableTipbur_2.setColumnWidth(3, 220)
        self.tableTipbur_2.setColumnWidth(7, 140)
        self.tableTipbur_2.setColumnWidth(11, 140)
        self.tableTipbur_2.setColumnHidden(0, True)
        self.tableTipbur_2.setColumnHidden(1, True)
        self.tableTipbur_3.setModel(self.modelTipbur_3)  # Создание представления малогабаритные установки
        self.tableTipbur_3.setGeometry(QtCore.QRect(10, 10, 568, 233))
        self.tableTipbur_3.setColumnWidth(0, 10)
        self.tableTipbur_3.setColumnWidth(1, 10)
        self.tableTipbur_3.setColumnWidth(2, 180)
        self.tableTipbur_3.setColumnWidth(3, 220)
        self.tableTipbur_3.setColumnWidth(7, 140)
        self.tableTipbur_3.setColumnWidth(11, 140)
        self.tableTipbur_3.setColumnHidden(0, True)
        self.tableTipbur_3.setColumnHidden(1, True)
        self.recAll = self.requerySelect(0)
        if not self.recAll:
            self.addRecord()
        else:
            self.recCount = len(self.recAll)
            self.recNum = 0
            self.recOld = self.recAll[self.recNum]
            self.Id = self.recOld[0]  # ID бурового оборудования
        self.GlubDelegate = egdelegat.DoubleSpinBoxDelegate_5_1()
        self.TipBur = egdelegat.ComboBoxDelegateTipBur()
        self.NameBur = egdelegat.TextEditDelegate()
        self.tableTipbur.setItemDelegate(self.GlubDelegate)
        self.tableTipbur.setItemDelegateForColumn(2, self.TipBur)
        self.tableTipbur.setItemDelegateForColumn(3, QtWidgets.QItemDelegate())
        self.tableTipbur_2.setItemDelegate(self.GlubDelegate)
        self.tableTipbur_2.setItemDelegateForColumn(2, self.TipBur)
        self.tableTipbur_2.setItemDelegateForColumn(3, QtWidgets.QItemDelegate())
        self.tableTipbur_3.setItemDelegate(self.GlubDelegate)
        self.tableTipbur_3.setItemDelegateForColumn(2, self.TipBur)
        self.tableTipbur_3.setItemDelegateForColumn(3, QtWidgets.QItemDelegate())
        # Обновление формы и панели инструментов
        self.refreshToolbar()
        self.refreshRecord(self.id_tipbur)
        # Назначение обработчиков сигналов
        self.currentChanged[int].connect(self.askTo)

    def requerySelect(self, id_tipbur) -> set:
        """Обновление запроса буровых установок"""
        if id_tipbur == 0:
            with UseDatebase(dbconfig) as curs:
                curs.execute("SELECT * FROM tipbur ORDER BY id")
                self.recAll = curs.fetchall()
        else:
            with UseDatebase(dbconfig) as curs:
                curs.execute("SELECT * FROM tipbur WHERE id_tipbur = %(v)s ORDER BY id;", {'v': id_tipbur})
                self.recAll = curs.fetchall()
        return self.recAll

    def refreshRecord(self, id_tipbur) -> set:
        """ Обновление формы"""
        if id_tipbur == 1:
            self.refreshTable()
        elif id_tipbur == 2:
            self.refreshTable_2()
        elif id_tipbur == 3:
            self.refreshTable_3()
        else:
            pass

    def askTo(self, id_tipbur) -> set:
        """ Проверка изменений при переключении вкладок"""
        id_tipbur = id_tipbur + 1
        if self.id_tipbur == 1:
            self.asktoSave()
        elif self.id_tipbur == 2:
            self.asktoSave_2()
        elif self.id_tipbur == 3:
            self.asktoSave_3()
        else:
            pass
        if id_tipbur == 1:
            self.refreshTable()
        elif id_tipbur == 2:
            self.refreshTable_2()
        elif id_tipbur == 3:
            self.refreshTable_3()
        else:
            pass

    def askToHide(self, id_tipbur) -> set:
        """ Проверка изменений при переключении вкладок"""
        if id_tipbur == 1:
            self.asktoSave()
        elif id_tipbur == 2:
            self.asktoSave_2()
        elif id_tipbur == 3:
            self.asktoSave_3()
        else:
            pass

    def refreshTable(self) -> set:
        """Обновление таблицы Самоходные установки"""
        self.id_tipbur = 1
        self.recAll = self.requerySelect(self.id_tipbur)
        self.recCountTipbur = len(self.recAll)
        self.recAllOldTipbur = []
        if self.recCountTipbur > 0:
            self.modelTipbur.setRowCount(self.recCountTipbur)
            self.tableTipbur.setEnabled(True)
            self.modelTipbur.removeRows(0, self.modelTipbur.rowCount())
            item0 = QtWidgets.QTableWidgetItem()
            item0.setData(QtCore.Qt.EditRole, id)
            for i in range(0, self.recCountTipbur):  # Занесение данных в ячейки таблицы
                self.recOldTipbur = self.recAll[i][0:12]
                listrow = list(self.recOldTipbur)  # Список одной строки
                rowval = [] # Пустая строка таблицы
                oldTipburOne = []
                for j in range(0, 12):  # Занесение данных в ячейки таблицы
                    if j > 3:
                        if str(listrow[j]) == 'None' or str(listrow[j]) == '0.0':
                            item = QtGui.QStandardItem('-')
                        else:
                            item = QtGui.QStandardItem(str(listrow[j]))
                    else:
                        item = QtGui.QStandardItem(str(listrow[j]))
                    item.setTextAlignment(QtCore.Qt.AlignCenter | QtCore.Qt.AlignCenter)
                    rowval.append(item) # Формирование строки таблицы с добавлением значений
                    oldTipburOne.append(listrow[j]) # Формирование строки записи
                self.modelTipbur.appendRow(rowval)  # Формирование всей таблицы с добавлением строк
                self.recAllOldTipbur.append(oldTipburOne)  # Формирование исходного списка Самоходные установки
        else:
            self.tableTipbur.setEnabled(False)
            self.modelTipbur.removeRows(0, self.modelTipbur.rowCount())
        self.recAllNewTipbur = self.recAllOldTipbur
        self.tableTipbur.selectRow(0)

    def refreshTable_2(self) -> set:
        """Обновление таблицы Плавучие установки"""
        self.id_tipbur = 2
        self.recAll = self.requerySelect(self.id_tipbur)
        self.recCountTipbur_2 = len(self.recAll)
        self.recAllOldTipbur_2 = []
        if self.recCountTipbur_2 > 0:
            self.modelTipbur_2.setRowCount(self.recCountTipbur_2)
            self.tableTipbur_2.setEnabled(True)
            self.modelTipbur_2.removeRows(0, self.modelTipbur_2.rowCount())
            item0 = QtWidgets.QTableWidgetItem()
            item0.setData(QtCore.Qt.EditRole, id)
            for i in range(0, self.recCountTipbur_2):  # Занесение данных в ячейки таблицы
                self.recOldTipbur = self.recAll[i][0:12]
                listrow = list(self.recOldTipbur)  # Список одной строки
                rowval = []
                oldTipburOne = []
                for j in range(0, 12):  # Занесение данных в ячейки таблицы
                    if j > 3:
                        if str(listrow[j]) == 'None' or str(listrow[j]) == '0.0':
                            item = QtGui.QStandardItem('-')
                        else:
                            item = QtGui.QStandardItem(str(listrow[j]))
                    else:
                        item = QtGui.QStandardItem(str(listrow[j]))
                    item.setTextAlignment(QtCore.Qt.AlignCenter | QtCore.Qt.AlignCenter)
                    rowval.append(item)  # Формирование строки таблицы
                    oldTipburOne.append(listrow[j]) # Формирование строки записи
                self.modelTipbur_2.appendRow(rowval)  # Формирование всей таблицы
                self.recAllOldTipbur_2.append(oldTipburOne)  # Формирование исходного списка Плавучие установки
        else:
            self.tableTipbur_2.setEnabled(False)
            self.modelTipbur_2.removeRows(0, self.modelTipbur_2.rowCount())
        self.recAllNewTipbur_2 = self.recAllOldTipbur_2
        self.tableTipbur_2.selectRow(0)

    def refreshTable_3(self) -> set:
        """Обновление таблицы Малогабаритные установки"""
        self.id_tipbur = 3
        self.recAll = self.requerySelect(self.id_tipbur)
        self.recCountTipbur_3 = len(self.recAll)
        self.recAllOldTipbur_3 = []
        if self.recCountTipbur_3 > 0:
            self.modelTipbur_3.setRowCount(self.recCountTipbur_3)
            self.tableTipbur_3.setEnabled(True)
            self.modelTipbur_3.removeRows(0, self.modelTipbur_3.rowCount())
            item0 = QtWidgets.QTableWidgetItem()
            item0.setData(QtCore.Qt.EditRole, id)
            for i in range(0, self.recCountTipbur_3):  # Занесение данных в ячейки таблицы
                self.recOldTipbur = self.recAll[i][0:12]
                listrow = list(self.recOldTipbur)  # Список одной строки
                rowval = []
                oldTipburOne = []
                for j in range(0, 12):  # Занесение данных в ячейки таблицы
                    if j > 3:
                        if str(listrow[j]) == 'None' or str(listrow[j]) == '0.0':
                            item = QtGui.QStandardItem('-')
                        else:
                            item = QtGui.QStandardItem(str(listrow[j]))
                    else:
                        item = QtGui.QStandardItem(str(listrow[j]))
                    item.setTextAlignment(QtCore.Qt.AlignCenter | QtCore.Qt.AlignCenter)
                    rowval.append(item)  # Формирование строки таблицы
                    oldTipburOne.append(listrow[j]) # Формирование строки записи
                self.modelTipbur_3.appendRow(rowval)  # Формирование всей таблицы
                self.recAllOldTipbur_3.append(oldTipburOne)  # Формирование исходного списка Малогабаритные установки
        else:
            self.tableTipbur_3.setEnabled(False)
            self.modelTipbur_3.removeRows(0, self.modelTipbur_3.rowCount())
        self.recAllNewTipbur_3 = self.recAllOldTipbur_3
        self.tableTipbur_3.selectRow(0)

    def refreshToolbar(self) -> set:
        """Обновляет панель инструментов"""
        form.action_8.setEnabled(False)  # Первая запись
        form.action_9.setEnabled(False)  # Предыдущая запись
        form.action_10.setEnabled(False)  # Следующая запись
        form.action_11.setEnabled(False)  # Последняя запись

    def showEvent(self, e) -> set:
        """Выполняет действия при выводе окна на экран"""
        form.action_37.setEnabled(False)
        QtWidgets.QTabWidget.showEvent(self, e)

    def hideEvent(self, e) -> set:
        """Выполняет действия при скрытии окна"""
        form.action_37.setEnabled(True)
        form.tipburwin = None
        if self.recAll != []:
            self.askToHide(self.id_tipbur)
        form.refreshMain()
        QtWidgets.QTabWidget.hideEvent(self, e)

    def addRecord(self) -> set:
        """Добавляет новую запись"""
        id_tipbur = self.currentIndex() + 1
        with UseDatebase(dbconfig) as curs:
            curs.execute("INSERT INTO tipbur (id_tipbur) VALUES (%(v1)s);", {'v1': id_tipbur})
        self.recAll = self.requerySelect(id_tipbur)
        recCount = len(self.recAll)
        if id_tipbur == 1:
            self.asktoSave()
            self.refreshTable()
            self.tableTipbur.setFocus()
            sel = self.tableTipbur.selectionModel()
            ind = self.tableTipbur.model().index(recCount-1, 2)
            sel.setCurrentIndex(ind, QtCore.QItemSelectionModel.ClearAndSelect)
        elif id_tipbur == 2:
            self.asktoSave_2()
            self.refreshTable_2()
            self.tableTipbur_2.setFocus()
            sel = self.tableTipbur_2.selectionModel()
            ind = self.tableTipbur_2.model().index(recCount - 1, 2)
            sel.setCurrentIndex(ind, QtCore.QItemSelectionModel.ClearAndSelect)
        elif id_tipbur == 3:
            self.asktoSave_3()
            self.refreshTable_3()
            self.tableTipbur_3.setFocus()
            sel = self.tableTipbur_3.selectionModel()
            ind = self.tableTipbur_3.model().index(recCount - 1, 2)
            sel.setCurrentIndex(ind, QtCore.QItemSelectionModel.ClearAndSelect)

    def delRecord(self) -> set:
        """Удаляет текущую запись"""
        id_tipbur = self.currentIndex() + 1
        if id_tipbur == 1:
            valIndex = self.tableTipbur.currentIndex()   # Создание экземпляра класса ModelIndex
            ind = self.modelTipbur.index(valIndex.row(), 0)
            val0 = self.modelTipbur.data(ind)   # ID Самоходные установки
        elif id_tipbur == 2:
            valIndex = self.tableTipbur_2.currentIndex()  # Создание экземпляра класса ModelIndex
            ind = self.modelTipbur_2.index(valIndex.row(), 0)
            val0 = self.modelTipbur_2.data(ind)  # ID Плавучие установки
        elif id_tipbur == 3:
            valIndex = self.tableTipbur_3.currentIndex()  # Создание экземпляра класса ModelIndex
            ind = self.modelTipbur_3.index(valIndex.row(), 0)
            val0 = self.modelTipbur_3.data(ind)  # ID Малогабаритные установки
        with UseDatebase(dbconfig) as curs:
            curs.execute("DELETE FROM tipbur WHERE id = %(v0)s;", {'v0': val0})
        self.requerySelect(id_tipbur)
        self.recCount = len(self.recAll)
        if self.recCount > 0:
            if id_tipbur == 1:
                self.refreshTable()
                self.tableTipbur.selectRow(self.recCount - 1)
            elif id_tipbur == 2:
                self.refreshTable_2()
                self.tableTipbur_2.selectRow(self.recCount - 1)
            elif id_tipbur == 3:
                self.refreshTable_3()
                self.tableTipbur_3.selectRow(self.recCount - 1)
        else:
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information, "Бурове обладнання",
                                           "Видалено останній запис")
            btnOK = QtWidgets.QPushButton("&OK")
            btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
            result = self.formMassWin.exec()
            if result == 0:
                self.formMassWin.close()
                self.parent().close()

    def asktoSave(self) -> set:
        """Проверка наличия изменений в таблице Самоходные установки"""
        # Считывание данных и обновление списка согласно значений экранной формы
        self.recAllNewTipbur = []
        for i in range(0, self.recCountTipbur):
            rec = []
            for j in range(0, 12):
                if j == 0 or j == 1:
                    el = int(self.modelTipbur.item(i, j).data(QtCore.Qt.EditRole))
                elif j == 2 or j == 3:
                    el = str(self.modelTipbur.item(i, j).data(QtCore.Qt.EditRole))
                else:
                    el = str(self.modelTipbur.item(i, j).data(QtCore.Qt.EditRole))
                    if el == 'None' or el == '-':
                        el = None
                    else:
                        el = dc.Decimal(el)
                rec.append(el)  # Формирование текущей записи из элементов
            self.recAllNewTipbur.append(rec)  # Формирование обновленного списка (записей-кортежей)
        if self.recAllNewTipbur == self.recAllOldTipbur:
            ask = True
        else:
            ask = False
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question, "Бурове обладнання - Самохідні верстати",
                                           "Є незбережені дані. Ви бажаєте їх зберегти?")
            btnYes = QtWidgets.QPushButton("&Так")
            btnNo = QtWidgets.QPushButton("&Ні")
            btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
            self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
            self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
            self.formMassWin.setDefaultButton(btnYes)
            result = self.formMassWin.exec()
            if result == 0:
                self.saveIspol(1)
            else:
                pass
        return ask

    def asktoSave_2(self) -> set:
        """Проверка наличия изменений в таблице Бурильщики"""
        # Считывание данных и обновление списка согласно значений экранной формы
        self.recAllNewTipbur_2 = []
        for i in range(0, self.recCountTipbur_2):
            rec = []
            for j in range(0, 12):
                if j == 0 or j == 1:
                    el = int(self.modelTipbur_2.item(i, j).data(QtCore.Qt.EditRole))
                elif j == 2 or j == 3:
                    el = str(self.modelTipbur_2.item(i, j).data(QtCore.Qt.EditRole))
                else:
                    el = str(self.modelTipbur_2.item(i, j).data(QtCore.Qt.EditRole))
                    if el == 'None' or el == '-':
                        el = None
                    else:
                        el = dc.Decimal(el)
                rec.append(el)  # Формирование текущей записи из элементов
            self.recAllNewTipbur_2.append(rec)  # Формирование обновленного списка (записей-кортежей)
        if self.recAllNewTipbur_2 == self.recAllOldTipbur_2:
            ask = True
        else:
            ask = False
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question, "Бурове обладнання - Плавучі установки",
                                           "Є незбережені дані. Ви бажаєте їх зберегти?")
            btnYes = QtWidgets.QPushButton("&Так")
            btnNo = QtWidgets.QPushButton("&Ні")
            btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
            self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
            self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
            self.formMassWin.setDefaultButton(btnYes)
            result = self.formMassWin.exec()
            if result == 0:
                self.saveIspol(2)
            else:
                pass
        return ask

    def asktoSave_3(self) -> set:
        """Проверка наличия изменений в таблице Геологи"""
        # Считывание данных и обновление списка согласно значений экранной формы
        self.recAllNewTipbur_3 = []
        for i in range(0, self.recCountTipbur_3):
            rec = []
            for j in range(0, 12):
                if j == 0 or j == 1:
                    el = int(self.modelTipbur_3.item(i, j).data(QtCore.Qt.EditRole))
                elif j == 2 or j == 3:
                    el = str(self.modelTipbur_3.item(i, j).data(QtCore.Qt.EditRole))
                else:
                    el = str(self.modelTipbur_3.item(i, j).data(QtCore.Qt.EditRole))
                    if el == 'None' or el == '-':
                        el = None
                    else:
                        el = dc.Decimal(el)
                rec.append(el)  # Формирование текущей записи из элементов
            self.recAllNewTipbur_3.append(rec)  # Формирование обновленного списка (записей-кортежей)
        if self.recAllNewTipbur_3 == self.recAllOldTipbur_3:
            ask = True
        else:
            ask = False
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question, "Бурове обладнання - Малогабаритні установки",
                                           "Є незбережені дані. Ви бажаєте їх зберегти?")
            btnYes = QtWidgets.QPushButton("&Так")
            btnNo = QtWidgets.QPushButton("&Ні")
            btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
            self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
            self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
            self.formMassWin.setDefaultButton(btnYes)
            result = self.formMassWin.exec()
            if result == 0:
                self.saveIspol(3)
            else:
                pass
        return ask

    def saveRecord(self, ask) -> set:
        """Сохранение записей"""
        id_tipbur = self.currentIndex() + 1
        if id_tipbur == 1:
            self.asktoSave()
        elif id_tipbur == 2:
            self.asktoSave_2()
        elif id_tipbur == 3:
            self.asktoSave_3()
        else:
            pass

    def saveTipbur(self, id_tipbur) -> set:
        """Сохранение записей таблицы бурового оборудования"""
        if id_tipbur == 1:
            recCount = self.recCountTipbur
            recAllNew = self.recAllNewTipbur
        elif id_tipbur == 2:
            recCount = self.recCountTipbur_2
            recAllNew = self.recAllNewTipbur_2
        elif id_tipbur == 3:
            recCount = self.recCountTipbur_3
            recAllNew = self.recAllNewTipbur_3
        else:
            pass
        for i in range(0, recCount):
            recTab = recAllNew[i]
            val0 = recTab[0]
            val1 = id_tipbur
            val2 = recTab[2]
            val3 = recTab[3]
            val4 = recTab[4]
            val5 = recTab[5]
            val6 = recTab[6]
            val7 = recTab[7]
            val8 = recTab[8]
            val9 = recTab[9]
            val10 = recTab[10]
            val11 = recTab[11]
            with UseDatebase(dbconfig) as curs:
                curs.execute("""UPDATE tipbur
                                SET id_tipbur = %(v1)s,
                                    tip_name = %(v2)s,
                                    bur_name = %(v3)s,
                                    glubshnek = %(v4)s,
                                    glubshurf = %(v5)s,
                                    glubkol = %(v6)s,
                                    glubudar = %(v7)s,
                                    diamshnek = %(v8)s,
                                    diamshurf = %(v9)s,
                                    diamkol = %(v10)s,
                                    diamudar = %(v11)s
                                WHERE id = %(v0)s;""",
                             {'v1': val1, 'v2': val2, 'v3': val3, 'v4': val4, 'v5': val5, 'v6': val6,
                              'v7': val7, 'v8': val8, 'v9': val9, 'v10': val10, 'v11': val11, 'v0': val0})
        self.requerySelect(id_tipbur)
        if id_tipbur == 1:
            self.refreshTable()
        elif id_tipbur == 2:
            self.refreshTable_2()
        elif id_tipbur == 3:
            self.refreshTable_3()
        else:
            pass


class SZondWindow(QtWidgets.QTabWidget, egclasswin.Ui_Szond_win):
    def __init__(self):
        """Инициализация окна Статическое зондирование"""
        super().__init__()
        self.setupUi(self)
        global idActivObekt
        self.recAllOldSzond = []
        self.recCountSzond = 0
        # Подготовка инструментов для рисования
        self.penblack = QtGui.QPen(QtCore.Qt.black)
        self.penr = QtGui.QPen(QtCore.Qt.red)
        self.penbl = QtGui.QPen(QtCore.Qt.blue)
        self.penblackp = QtGui.QPen(QtCore.Qt.black, 1, QtCore.Qt.DotLine)
        self.brushr = QtGui.QBrush(QtCore.Qt.red)
        self.brushy = QtGui.QBrush(QtCore.Qt.yellow)
        self.brushly = QtGui.QColor(255, 255, 0, 30)
        self.brushg = QtGui.QBrush(QtCore.Qt.green)
        self.brushb = QtGui.QBrush(QtCore.Qt.blue)
        self.penb = QtGui.QPen(self.brushb, 3)
        # Оформление сцены графиков
        self.scene = QtWidgets.QGraphicsScene(0, 0, 180, 570, self.graphicsView)
        self.scene_2 = QtWidgets.QGraphicsScene(0, 0, 180, 570, self.graphicsView_2)
        self.graphicsView.setScene(self.scene)
        self.graphicsView_2.setScene(self.scene_2)
        self.modelSzond = QtGui.QStandardItemModel(30, 6)  # Создание модели
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT tipzonds.id, 
                                tipzonds.tip, 
                                tipzonds.tip_name, 
                                tipzonds.name
                            FROM public.tipzonds""")
            recAll = curs.fetchall()
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox_1.addItem(recOne[1] + " " + recOne[3])
                self.comboBox_1.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
                self.comboBox_1.setItemData(i, recOne[1], role=QtCore.Qt.UserRole + 1)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT burehole.id, 
                                burehole.num_hole 
                            FROM public.obekt,
                                public.burehole 
                            WHERE obekt.id = burehole.id_obekt 
                            AND obekt.id = %(v)s
                            AND (burehole.vidhole = 'Свердловина' 
                            OR burehole.vidhole = 'Дудка-свердловина' 
                            OR burehole.vidhole = 'Шурф-свердловина' 
                            OR burehole.vidhole = 'Дудка' 
                            OR burehole.vidhole = 'Шурф')
                            ORDER BY burehole.num_hole ASC""", {'v': idActivObekt})
            recAll = curs.fetchall()
            self.listNumBurehole = recAll   # Список скважин активного объекта
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox_2.addItem(recOne[1])
                self.comboBox_2.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
        self.comboBox_2.insertItem(0, "")
        self.comboBox_2.setItemData(0, None, role=QtCore.Qt.UserRole)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT id,
                                fio
                            FROM public.ispol 
                            WHERE ispol.vidrab = 2 OR ispol.vidrab = 0
                            ORDER BY ispol.fio ASC""")
            recAll = curs.fetchall()
        for i in range(0, len(recAll)):
            recOne = recAll[i]
            self.comboBox_3.addItem(recOne[1])
            self.comboBox_3.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT id,
                                fio
                            FROM public.ispol 
                            WHERE ispol.vidrab = 3 OR ispol.vidrab = 0
                            ORDER BY ispol.fio ASC""")
            recAll = curs.fetchall()
        for i in range(0, len(recAll)):
            recOne = recAll[i]
            self.comboBox_4.addItem(recOne[1])
            self.comboBox_4.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT id,
                                fio
                            FROM public.ispol 
                            WHERE ispol.vidrab = 4 OR ispol.vidrab = 0
                            ORDER BY ispol.fio ASC""")
            recAll = curs.fetchall()
        for i in range(0, len(recAll)):
            recOne = recAll[i]
            self.comboBox_5.addItem(recOne[1])
            self.comboBox_5.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT id,
                                sys,
                                region
                            FROM public.syskoord 
                            ORDER BY syskoord.id ASC""")
            recAll = curs.fetchall()
        for i in range(0, len(recAll)):
            recOne = recAll[i]
            self.comboBox_6.addItem(recOne[1])
            self.comboBox_6.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
            self.comboBox_6.setItemData(i, recOne[2], role=QtCore.Qt.UserRole + 1)
        # Подготовка таблицы точек зондирования
        self.modelPointSzond = QtGui.QStandardItemModel(30, 15)  # Создание модели точек зондирования
        self.selmodelPointSzond = QtCore.QItemSelectionModel(self.modelPointSzond)  # Создание модели выделения
        self.modelPointSzond.setRowCount(len(self.recAll))
        self.modelPointSzond.setHorizontalHeaderLabels(['ID PointSzond',
                                                  'ID obekt',
                                                  'Тип зонда',
                                                  'Номер точки \nзондування',
                                                  'Номер \nсвердловини',
                                                  'Система координат',
                                                  'Координата X',
                                                  'Координата Y',
                                                  'Абсолютна \nвідмітка (м)',
                                                  'Початкова \nглибина (м)',
                                                  'Кінцева \nглибина (м)',
                                                  'Крок \nвимірювань (м)',
                                                  'Дата іспитів',
                                                  'Буровий майстер',
                                                  'Геолог',
                                                  'Геодезіст'])
        self.tablePointSzond.setModel(self.modelPointSzond)  # Создание представления
        self.tablePointSzond.setSelectionModel(self.selmodelPointSzond)  # Установить модель выделения в представлении
        self.tablePointSzond.setGeometry(QtCore.QRect(10, 10, 1100, 615))
        self.tablePointSzond.setColumnWidth(0, 10)      # ID PointSzond
        self.tablePointSzond.setColumnWidth(1, 10)      # ID obekt
        self.tablePointSzond.setColumnWidth(2, 140)     # Тип зонда
        self.tablePointSzond.setColumnWidth(3, 100)     # Номер точки зондування
        self.tablePointSzond.setColumnWidth(4, 100)     # Номер свердловини
        self.tablePointSzond.setColumnWidth(5, 140)     # Система координат
        self.tablePointSzond.setColumnWidth(6, 100)      # Координата X
        self.tablePointSzond.setColumnWidth(7, 100)      # Координата Y
        self.tablePointSzond.setColumnWidth(8, 90)      # Абсолютна відмітка (м)
        self.tablePointSzond.setColumnWidth(9, 90)      # Початкова глибина (м)
        self.tablePointSzond.setColumnWidth(10, 90)      # Кінцева глибина (м)
        self.tablePointSzond.setColumnWidth(11, 110)     # Крок вимірювань (м)
        self.tablePointSzond.setColumnWidth(12, 100)     # Дата іспитів
        self.tablePointSzond.setColumnWidth(13, 140)     # Буровий майстер
        self.tablePointSzond.setColumnWidth(14, 140)     # Геолог
        self.tablePointSzond.setColumnWidth(15, 140)     # Геодезіст
        self.tablePointSzond.setColumnHidden(0, True)
        self.tablePointSzond.setColumnHidden(1, True)
        # Обновление главного запроса
        self.requerySelect()
        if not self.recAll:
            self.addRecord()
        else:
            self.recCount = len(self.recAll)
            self.recNum = 0
            self.recOld = self.recAll[self.recNum]
            self.bhId = self.recOld[3]
        # Подготовка таблицы результатов зондирования
        self.modelSzond = QtGui.QStandardItemModel(30, 6)  # Создание модели
        self.modelSzond.setHorizontalHeaderLabels(['id',
                                                   'id_point',
                                                   'Глибина\n''занурення\n''зонда\n''м',
                                                   'Питомий\n''опір грунту під\n''наконечником зонда\n''qc МПа',
                                                   'Питомий\n''опір грунту\n''на муфті тертя\n''fs кПа',
                                                   'Питомий\n''опір грунту під\n''наконечником зонда\n''qc МПа',
                                                   'Загальний опір\n''грунту на бічній\n''поверхні зонда\n''Qs кН'])
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT *
                            FROM public.statzond 
                            WHERE statzond.id_pointszond = %(v2)s
                            ORDER BY statzond.glub ASC""", {'v2': self.bhId})
            self.recAllStatzond = curs.fetchall()
        self.modelSzond.setRowCount(len(self.recAllStatzond))
        self.tableSzond.setModel(self.modelSzond)  # Создание представления
        self.tableSzond.setGeometry(QtCore.QRect(320, 40, 391, 595))    # надо высота 595 было 592
        self.tableSzond.setColumnWidth(0, 10)
        self.tableSzond.setColumnWidth(1, 10)
        self.tableSzond.setColumnWidth(2, 88)
        self.tableSzond.setColumnWidth(3, 150)
        self.tableSzond.setColumnWidth(4, 110)
        self.tableSzond.setColumnWidth(5, 150)
        self.tableSzond.setColumnWidth(6, 110)
        self.tableSzond.setColumnHidden(0, True)
        self.tableSzond.setColumnHidden(1, True)
        # Назначение делегатов
        self.DelegateTypeSZond = egdelegat.ComboBoxDelegateTypeSZond()
        self.DelegateNumBurehole = egdelegat.ComboBoxDelegateNumBurehole()
        self.DelegateSyskoord = egdelegat.ComboBoxDelegateSyskoord()
        self.DelegateBurman = egdelegat.ComboBoxDelegateBurman()
        self.DelegateGeoman = egdelegat.ComboBoxDelegateGeoman()
        self.DelegateGdzman = egdelegat.ComboBoxDelegateGdzman()
        self.DelegateDate = egdelegat.DateDelegate()
        self.DelegateSzond_62 = egdelegat.DoubleSpinBoxDelegate()
        self.DelegateSzond_XY = egdelegat.DoubleSpinBoxDelegate10()
        self.DelegateSzond_Absotm = egdelegat.DoubleSpinBoxDelegate_Absotm()
        self.DelegateSzond_shag = egdelegat.DoubleSpinBoxDelegate_31()
        self.tableSzond.setItemDelegateForColumn(2, self.DelegateSzond_62)
        self.tableSzond.setItemDelegateForColumn(3, self.DelegateSzond_62)
        self.tableSzond.setItemDelegateForColumn(4, self.DelegateSzond_62)
        self.tableSzond.setItemDelegateForColumn(5, self.DelegateSzond_62)
        self.tableSzond.setItemDelegateForColumn(6, self.DelegateSzond_62)
        self.tablePointSzond.setItemDelegateForColumn(2, self.DelegateTypeSZond)
        self.tablePointSzond.setItemDelegateForColumn(4, self.DelegateNumBurehole)
        self.tablePointSzond.setItemDelegateForColumn(5, self.DelegateSyskoord)
        self.tablePointSzond.setItemDelegateForColumn(6, self.DelegateSzond_XY)
        self.tablePointSzond.setItemDelegateForColumn(7, self.DelegateSzond_XY)
        self.tablePointSzond.setItemDelegateForColumn(8, self.DelegateSzond_Absotm)
        self.tablePointSzond.setItemDelegateForColumn(9, self.DelegateSzond_62)
        self.tablePointSzond.setItemDelegateForColumn(10, self.DelegateSzond_62)
        self.tablePointSzond.setItemDelegateForColumn(11, self.DelegateSzond_shag)
        self.tablePointSzond.setItemDelegateForColumn(12, self.DelegateDate)
        self.tablePointSzond.setItemDelegateForColumn(13, self.DelegateBurman)
        self.tablePointSzond.setItemDelegateForColumn(14, self.DelegateGeoman)
        self.tablePointSzond.setItemDelegateForColumn(15, self.DelegateGdzman)
        self.graphicsView.setGeometry(QtCore.QRect(720, 40, 190, 595))
        self.graphicsView_2.setGeometry(QtCore.QRect(920, 40, 190, 595))
        # Назначение обработчиков сигналов
        self.currentChanged.connect(self.asktoSave)
        self.currentChanged.connect(self.setRow)
        self.comboBox_1.currentIndexChanged.connect(self.refreshTableSzond)
        self.toolButton_1.clicked.connect(self.addSzond)
        self.toolButton_2.clicked.connect(self.delSzond)
        self.toolButton_3.clicked.connect(self.addSzondAll)
        self.toolButton_4.clicked.connect(self.delSzondAll)
        self.toolButton_5.clicked.connect(self.copySzond)
        #self.toolButton_5.clicked.connect(self.setFile)
        self.toolButton_6.clicked.connect(self.clearFieldSzond)
#        self.selmodelPointSzond.currentChanged.connect(self.currentRow)
        self.selmodelPointSzond.selectionChanged['QItemSelection', 'QItemSelection'].connect(self.currentRow)
        self.refreshToolbar()
        self.refreshRecord()

    def requerySelect(self) -> list:
        """Обновление главного запроса для экранной формы формирование списка"""
        global idActivObekt
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT obekt.id, 
                                obekt.numdog,
                                obekt.archnum, 
                                pointszond.id,
                                pointszond.id_obekt,
                                pointszond.id_zond,
                                pointszond.num_point, 
                                pointszond.id_burehole,
                                pointszond.id_syskoord,
                                pointszond.koord_x,
                                pointszond.koord_y, 
                                pointszond.koord_z,
                                pointszond.glubin,
                                pointszond.glub, 
                                pointszond.shag,
                                pointszond.date_finish, 
                                pointszond.id_burman,
                                pointszond.id_geoman,
                                pointszond.id_gdzman,
                                tipzonds.tip,
                                tipzonds.name,
                                burehole.num_hole,
                                vburman.fio,
                                vgeoman.fio,
                                vgdzman.fio,
                                syskoord.sys
                            FROM public.obekt,
                                public.pointszond
                                    LEFT JOIN public.burehole ON public.pointszond.id_burehole = public.burehole.id 
                                    LEFT JOIN public.vburman ON public.pointszond.id_burman = public.vburman.id
                                    LEFT JOIN public.vgeoman ON public.pointszond.id_geoman = public.vgeoman.id
                                    LEFT JOIN public.vgdzman ON public.pointszond.id_gdzman = public.vgdzman.id
                                    LEFT JOIN public.syskoord ON public.pointszond.id_syskoord = public.syskoord.id,
                                public.tipzonds
                            WHERE obekt.id = pointszond.id_obekt
                                AND pointszond.id_zond = tipzonds.id
                                AND obekt.id = %(v0)s 
                            ORDER BY pointszond.id ASC""", {'v0': idActivObekt})
            self.recAll = curs.fetchall()
            return self.recAll

    def refreshRecord(self) -> bool:
        """Обновляет экранную форму с отображаемой записью"""
        # Передача значений из списка в экранную форму
        if self.recAll == []:
            self.recOld = []
        else:
            self.recOld = self.recAll[self.recNum]
        if self.recOld:
            self.label.setText("Ідентіфікатор об'єкта - " + str(self.recOld[0]) + "\n" +
                               "Номер договору - " + self.recOld[1] + "\n" +
                               "Архівний номер звіту - " + self.recOld[2] + "\n" +
                               "Ідентіфікатор пункту - " + str(self.recOld[3]))  # ID объекта, Номер договора, Архивный номер и ID пункта
            self.bhId = self.recOld[3]  # ID пункта зондирования
            self.obID = self.recOld[4]  # ID объекта
            self.comboBox_1.setCurrentIndex(
                self.comboBox_1.findData(self.recOld[5], role=QtCore.Qt.UserRole))  # Тип зонда
            self.lineEdit_1.setText(self.recOld[6])  # Номер пункта зондирования
            self.comboBox_2.setCurrentIndex(
                self.comboBox_2.findData(self.recOld[7], role=QtCore.Qt.UserRole))  # Привязка к скважине
            self.comboBox_6.setCurrentIndex(
                self.comboBox_6.findData(self.recOld[8], role=QtCore.Qt.UserRole))  # ID системы координат
            if self.recOld[9] is None:
                self.doubleSpinBox_1.setValue(self.doubleSpinBox_1.minimum())
            else:
                self.doubleSpinBox_1.setValue(self.recOld[9])  # Координата Х
            if self.recOld[10] is None:
                self.doubleSpinBox_2.setValue(self.doubleSpinBox_2.minimum())
            else:
                self.doubleSpinBox_2.setValue(self.recOld[10])  # Координата Y
            if self.recOld[11] is None:
                self.doubleSpinBox_3.setValue(self.doubleSpinBox_3.minimum())
            else:
                self.doubleSpinBox_3.setValue(self.recOld[11])  # Абс. отметка
            if self.recOld[12] is None:
                self.doubleSpinBox_4.setValue(self.doubleSpinBox_4.minimum())
            else:
                self.doubleSpinBox_4.setValue(self.recOld[12])  # Начальная глубина
            if self.recOld[13] is None:
                self.doubleSpinBox_5.setValue(self.doubleSpinBox_5.minimum())
            else:
                self.doubleSpinBox_5.setValue(self.recOld[13])  # Конечная глубина
            self.doubleSpinBox_6.setValue(self.recOld[14])  # Шаг зондирования
            self.dateEdit_1.setDate(self.recOld[15])  # Дата работ
            self.comboBox_3.setCurrentIndex(
                self.comboBox_3.findData(self.recOld[16], role=QtCore.Qt.UserRole))  # ID буровика
            self.comboBox_4.setCurrentIndex(
                self.comboBox_4.findData(self.recOld[17], role=QtCore.Qt.UserRole))  # ID геолога
            self.comboBox_5.setCurrentIndex(
                self.comboBox_5.findData(self.recOld[18], role=QtCore.Qt.UserRole))  # ID геодезиста
            self.readPointSzond()
            recval = True
        else:
            recval = False
        self.refreshCharZond()
        self.refreshTableSzond()
        self.refreshGraph()
        self.refreshTablePointSzond()
        return recval

    def refreshCharZond(self) -> bool:
        """Обновление характеристик зонда"""
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT *
                            FROM public.tipzonds 
                            WHERE tipzonds.id = %(v12)s""",
                         {'v12': self.id_zond})
            self.recCharSzond = curs.fetchone()
            if self.recCharSzond == None:
                recval = False
            else:
                self.label_15.setText("Кут при вершині конусу - " + str(self.recCharSzond[3]) + " град.")
                self.label_16.setText("Діаметр основи конусу - " + str(self.recCharSzond[4]) + " мм")
                if self.recCharSzond[8] == None:
                    self.label_18.setText("Зовнішній діаметр муфти - " + str(self.recCharSzond[5]) + " мм")
                    self.label_19.setText("Довжина муфти тертя - " + str(self.recCharSzond[6]) + " мм")
                else:
                    self.label_18.setText("Зовнішній діаметр кожуху - " + str(self.recCharSzond[7]) + " мм")
                    self.label_19.setText("Довжина кожуху - " + str(self.recCharSzond[8]) + " мм")
                recval = True
        return recval

    def refreshTableSzond(self) -> bool:
        """Обновление таблицы замеров статического зондирования"""
        i = self.comboBox_1.currentIndex()
        self.val12 = self.comboBox_1.itemData(i, role=QtCore.Qt.UserRole+1)   # Тип зонда
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT max(glub), max(lob), max(bok), max(qlob), max(qbok)
                            FROM public.statzond 
                            WHERE statzond.id_pointszond = %(v2)s""", {'v2': self.bhId})
            self.recAllMaxSzond = curs.fetchall()
            self.maxh = self.recAllMaxSzond[0][0]  # Максимальная глубина погружения конуса
            self.maxqc = self.recAllMaxSzond[0][1]  # Максимальное лобовое qc для зонда 2 типа
            self.maxfs = self.recAllMaxSzond[0][2]  # Максимальное боковое fs для зонда 2 типа
            self.maxqlob = self.recAllMaxSzond[0][3]  # Максимальное общее для зонда 1 типа
            self.maxqbok = self.recAllMaxSzond[0][4]  # Максимальное боковое для зонда 1 типа
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT *
                            FROM public.statzond 
                            WHERE statzond.id_pointszond = %(v2)s
                            ORDER BY statzond.glub ASC""", {'v2': self.bhId})
            self.recAllSzond = curs.fetchall()  # Полный исходный список замеров
        self.recCountSzond = len(self.recAllSzond)
        self.recAllOldSzond = []
        if self.recCountSzond > 0:
            self.modelSzond.setRowCount(self.recCountSzond)
            self.tableSzond.setEnabled(True)
            self.toolButton_2.setEnabled(True)
            self.modelSzond.removeRows(0, self.modelSzond.rowCount())
            for i in range(0, self.recCountSzond):  # Занесение данных в ячейки таблицы
                self.recOldSzond = self.recAllSzond[i][0:7]
                listrow = list(self.recOldSzond)  # Список одной строки
                item0 = QtGui.QStandardItem(str(listrow[0]))
                item1 = QtGui.QStandardItem(str(listrow[1]))
                item2 = QtGui.QStandardItem(str(listrow[2]))
                if listrow[3] is None:
                    item3 = QtGui.QStandardItem('-')
                else:
                    item3 = QtGui.QStandardItem(str(listrow[3]))
                if listrow[4] is None:
                    item4 = QtGui.QStandardItem('-')
                else:
                    item4 = QtGui.QStandardItem(str(listrow[4]))
                if listrow[5] is None:
                    item5 = QtGui.QStandardItem('-')
                else:
                    item5 = QtGui.QStandardItem(str(listrow[5]))
                if listrow[6] is None:
                    item6 = QtGui.QStandardItem('-')
                else:
                    item6 = QtGui.QStandardItem(str(listrow[6]))
                item2.setTextAlignment(QtCore.Qt.AlignCenter)
                item3.setTextAlignment(QtCore.Qt.AlignCenter)
                item4.setTextAlignment(QtCore.Qt.AlignCenter)
                item5.setTextAlignment(QtCore.Qt.AlignCenter)
                item6.setTextAlignment(QtCore.Qt.AlignCenter)
                if self.val12 == "I":
                    self.tableSzond.hideColumn(3)
                    self.tableSzond.hideColumn(4)
                    self.tableSzond.showColumn(5)
                    self.tableSzond.showColumn(6)
                    self.label_20.setText("Графік зміни Qs (кН) від глибини (м)")
                else:
                    self.tableSzond.showColumn(3)
                    self.tableSzond.showColumn(4)
                    self.tableSzond.hideColumn(5)
                    self.tableSzond.hideColumn(6)
                    self.label_20.setText("Графік зміни fs (кПа) від глибини (м)")
                self.modelSzond.appendRow([item0, item1, item2, item3, item4, item5, item6])
            self.recAllOldSzond = self.readSzond()  # Формирование начального списка результатов статического зондирования
            recval = True
        else:
            self.tableSzond.setEnabled(False)
            self.toolButton_2.setEnabled(False)
            self.modelSzond.removeRows(0, self.modelSzond.rowCount())
            recval = False
        self.recAllNewSzond = self.recAllOldSzond
        return recval

    def refreshGraph(self) -> set:
        """Обновление графиков"""
        # Обновление графика лобового сопротивление
        self.scene.clear()
        self.scene.addRect(30, 20, 150, 540, self.penblack, self.brushly)   # Область построения графика
        i = 0
        for i in range(0, 540, 4):
            self.scene.addLine(28, 20 + i, 30, 20 + i, self.penblack)
        i = 0
        for i in range(0, 545, 20):
            self.scene.addLine(26, 20 + i, 30, 20 + i, self.penblack)
        i = 20
        for i in range(0, 560, 20):
            self.scene.addLine(30, 20 + i, self.scene.width(), 20 + i, self.penblackp)
        h = 0
        for h in range(0, 560, 20):
            ytext = QtWidgets.QGraphicsSimpleTextItem(str(h / 20))
            self.scene.addItem(ytext)
            ytext.setPos(0, h + 20 - 8)
        yname = QtWidgets.QGraphicsSimpleTextItem("h м")
        self.scene.addItem(yname)
        yname.setPos(6, 566)
        i = 0
        for i in range(0, 180, 5):
            self.scene.addLine(30 + i, 18, 30 + i, 20, self.penblack)
        i = 0
        for i in range(0, 180, 25):
            self.scene.addLine(30 + i, 16, 30 + i, 20, self.penblack)
        i = 25
        for i in range(0, 180, 25):
            self.scene.addLine(30 + i, 20, 30 + i, self.scene.height() - 10, self.penblackp)
        if self.val12 == "II":
            if self.maxqc != None:
                j = 5
                while j < 50:
                    i = 0
                    if self.maxqc < j:
                        for i in range(0, 150, 25):
                            ytext = QtWidgets.QGraphicsSimpleTextItem(str(int(i / 25 / 5 * j)))
                            self.scene.addItem(ytext)
                            if j < 10:
                                ytext.setPos(i + 25 + 1, 0)
                            elif j < 55:
                                ytext.setPos(i + 25 - 1, 0)
                            else:
                                ytext.setPos(i + 25 - 3, 0)
                        i = 0
                        for i in range(0, self.recCountSzond):
                            glub = self.recAllSzond[i][2]
                            qc = self.recAllSzond[i][3]
                            if qc == None:
                                qc = 0
                            self.scene.addLine(30, 20 + glub * 20, round(30 + qc * 25 / j * 5), 20 + glub * 20,
                                               self.penr)
                        break
                    else:
                        j += 5
        else:
            if self.maxqlob != None:
                j = 5
                while j < 50:
                    i = 0
                    if self.maxqlob < j:
                        for i in range(0, 150, 25):
                            ytext = QtWidgets.QGraphicsSimpleTextItem(str(int(i / 25 / 5 * j)))
                            self.scene.addItem(ytext)
                            if j < 10:
                                ytext.setPos(i + 25 + 1, 0)
                            elif j < 55:
                                ytext.setPos(i + 25 - 1, 0)
                            else:
                                ytext.setPos(i + 25 - 3, 0)
                        i = 0
                        for i in range(0, self.recCountSzond):
                            glub = self.recAllSzond[i][2]
                            qc = self.recAllSzond[i][5]
                            if qc == None:
                                qc = 0
                            self.scene.addLine(30, 20 + glub * 20, round(30 + qc * 25 / j * 5), 20 + glub * 20,
                                               self.penr)
                        break
                    else:
                        j += 5
        # Обновление графика бокового сопротивления
        self.scene_2.clear()
        self.scene_2.addRect(30, 20, 150, 540, self.penblack, self.brushly) # Область построения графика
        i = 0
        for i in range(0, 540, 5):
            self.scene_2.addLine(28, 20 + i, 30, 20 + i, self.penblack)
        i = 0
        for i in range(0, 545, 20):
            self.scene_2.addLine(26, 20 + i, 30, 20 + i, self.penblack)
        i = 20
        for i in range(0, 560, 20):
            self.scene_2.addLine(30, 20 + i, self.scene.width(), 20 + i, self.penblackp)
        h = 0
        for h in range(0, 560, 20):
            ytext = QtWidgets.QGraphicsSimpleTextItem(str(h / 20))
            self.scene_2.addItem(ytext)
            ytext.setPos(0, h + 20 - 8)
        yname = QtWidgets.QGraphicsSimpleTextItem("h м")
        self.scene_2.addItem(yname)
        yname.setPos(6, 566)
        i = 0
        for i in range(0, 180, 5):
            self.scene_2.addLine(30 + i, 18, 30 + i, 20, self.penblack)
        i = 0
        for i in range(0, 180, 25):
            self.scene_2.addLine(30 + i, 16, 30 + i, 20, self.penblack)
        i = 25
        for i in range(0, 180, 25):
            self.scene_2.addLine(30 + i, 20, 30 + i, self.scene.height() - 10, self.penblackp)
        if self.val12 == "II":
            if self.maxfs != None:
                j = 5
                while j < 1000:
                    i = 0
                    if self.maxfs < j:
                        for i in range(0, 150, 25):
                            ytext = QtWidgets.QGraphicsSimpleTextItem(str(int(i / 25 * j / 5)))
                            self.scene_2.addItem(ytext)
                            if j < 10:
                                ytext.setPos(i + 25 + 1, 0)
                            elif j < 55:
                                ytext.setPos(i + 25 - 1, 0)
                            else:
                                ytext.setPos(i + 25 - 3, 0)
                        i = 0
                        for i in range(0, self.recCountSzond):
                            glub = self.recAllSzond[i][2]
                            fs = self.recAllSzond[i][4]
                            if fs == None:
                                fs = 0
                            self.scene_2.addLine(30, 20 + glub * 20, round(30 + fs * 25 / j * 5), 20 + glub * 20,
                                                 self.penbl)
                        break
                    else:
                        j += 5
        else:
            if self.maxqbok != None:
                j = 5
                while j < 1000:
                    i = 0
                    if self.maxqbok < j:
                        for i in range(0, 150, 25):
                            ytext = QtWidgets.QGraphicsSimpleTextItem(str(int(i / 25 * j / 5)))
                            self.scene_2.addItem(ytext)
                            if j < 10:
                                ytext.setPos(i + 25 + 1, 0)
                            elif j < 55:
                                ytext.setPos(i + 25 - 1, 0)
                            else:
                                ytext.setPos(i + 25 - 3, 0)
                        i = 0
                        for i in range(0, self.recCountSzond):
                            glub = self.recAllSzond[i][2]
                            qs = self.recAllSzond[i][6]
                            if qs == None:
                                qs = 0
                            self.scene_2.addLine(30, 20 + glub * 20, round(30 + qs * 25 / j * 5), 20 + glub * 20,
                                                 self.penbl)
                        break
                    else:
                        j += 5

    def refreshTablePointSzond(self) -> set:
        """Обновление таблицы точек статического зондирования"""
        self.recCountPointSzond = len(self.recAll)
        self.recAllOldPointSzond = []
        if self.recCountPointSzond > 0:
            self.modelPointSzond.setRowCount(self.recCountPointSzond)
            self.tablePointSzond.setEnabled(True)
            self.modelPointSzond.removeRows(0, self.modelPointSzond.rowCount())
            item0 = QtWidgets.QTableWidgetItem()
            item0.setData(QtCore.Qt.EditRole, id)
            for i in range(0, self.recCountPointSzond):  # Занесение данных в ячейки таблицы
                self.recOldPointSzond = self.recAll[i][3:26]
                listrow = list(self.recOldPointSzond)  # Список одной строки
                item0 = QtGui.QStandardItem(str(listrow[0]))  # ID PointSzond
                item1 = QtGui.QStandardItem(str(listrow[1]))  # ID Obekt
                zondName = str(listrow[16]) + str(" ") + str(listrow[17])  # Наименование типа зонда
                item2 = QtGui.QStandardItem(str(zondName))  # Занесение наименования Типа зонда в ячейку
                QtGui.QStandardItem.setData(item2, str(listrow[2]), role=QtCore.Qt.UserRole)  # ID зонда
                item3 = QtGui.QStandardItem(str(listrow[3]))  # Номер точки зондирования
                if listrow[18] is None:
                    item4 = QtGui.QStandardItem('-')
                else:
                    item4 = QtGui.QStandardItem(str(listrow[18]))  # Номер скважины
                QtGui.QStandardItem.setData(item4, str(listrow[4]), role=QtCore.Qt.UserRole)  # ID скважины
                item5 = QtGui.QStandardItem(str(listrow[22]))  # Система координат
                QtGui.QStandardItem.setData(item5, str(listrow[5]), role=QtCore.Qt.UserRole)  # ID Системы координат
                if listrow[6] is None:
                    item6 = QtGui.QStandardItem('-')
                else:
                    item6 = QtGui.QStandardItem(str(listrow[6]))  # Координата Х
                if listrow[7] is None:
                    item7 = QtGui.QStandardItem('-')
                else:
                    item7 = QtGui.QStandardItem(str(listrow[7]))  # Координата Y
                if listrow[8] is None:
                    item8 = QtGui.QStandardItem('-')
                else:
                    item8 = QtGui.QStandardItem(str(listrow[8]))  # Абсолютная отметка, м
                if listrow[9] is None:
                    item9 = QtGui.QStandardItem('-')
                else:
                    item9 = QtGui.QStandardItem(str(listrow[9]))  # Начальная глубина, м
                if listrow[10] is None:
                    item10 = QtGui.QStandardItem('-')
                else:
                    item10 = QtGui.QStandardItem(str(listrow[10]))  # Глубина, м
                item11 = QtGui.QStandardItem(str(listrow[11]))  # Шаг, м
                item12 = QtGui.QStandardItem(str(listrow[12]))  # Дата испытаний
                item13 = QtGui.QStandardItem(str(listrow[19]))  # Буровик (ФИО)
                QtGui.QStandardItem.setData(item13, str(listrow[13]), role=QtCore.Qt.UserRole)  # ID буровика
                item14 = QtGui.QStandardItem(str(listrow[20]))  # Геолог (ФИО)
                QtGui.QStandardItem.setData(item14, str(listrow[14]), role=QtCore.Qt.UserRole)  # ID геолога
                item15 = QtGui.QStandardItem(str(listrow[21]))  # Геодезист (ФИО)
                QtGui.QStandardItem.setData(item15, str(listrow[15]), role=QtCore.Qt.UserRole)  # ID геодезиста
                item0.setTextAlignment(QtCore.Qt.AlignCenter)
                item1.setTextAlignment(QtCore.Qt.AlignCenter)
                item2.setTextAlignment(QtCore.Qt.AlignCenter)
                item3.setTextAlignment(QtCore.Qt.AlignCenter)
                item4.setTextAlignment(QtCore.Qt.AlignCenter)
                item5.setTextAlignment(QtCore.Qt.AlignCenter)
                item6.setTextAlignment(QtCore.Qt.AlignCenter)
                item7.setTextAlignment(QtCore.Qt.AlignCenter)
                item8.setTextAlignment(QtCore.Qt.AlignCenter)
                item9.setTextAlignment(QtCore.Qt.AlignCenter)
                item10.setTextAlignment(QtCore.Qt.AlignCenter)
                item11.setTextAlignment(QtCore.Qt.AlignCenter)
                item12.setTextAlignment(QtCore.Qt.AlignCenter)
                item13.setTextAlignment(QtCore.Qt.AlignCenter)
                item14.setTextAlignment(QtCore.Qt.AlignCenter)
                item15.setTextAlignment(QtCore.Qt.AlignCenter)
                self.modelPointSzond.appendRow([item0, item1, item2, item3, item4, item5, item6, item7, item8, item9,
                                                item10, item11, item12, item13, item14, item15])
                oldPointSzondOne = []
                for j in range(0, 16):  # Занесение данных в ячейки таблицы
                    it = listrow[j]
                    oldPointSzondOne.append(it)
                self.recAllOldPointSzond.append(oldPointSzondOne)  # Формирование исходного списка точек зондирования
        else:
            self.tablePointSzond.setEnabled(False)
            self.toolButton_2.setEnabled(False)
            self.toolButton_4.setEnabled(False)
            self.modelPointSzond.removeRows(0, self.modelPointSzond.rowCount())
        self.recAllNewPointSzond = self.recAllOldPointSzond
        self.tablePointSzond.selectRow(self.recNum)

    def refreshToolbar(self) -> set:
        """Обновляет панель инструментов"""
        if self.recNum == 0 and self.recCount > 1:
            form.action_8.setEnabled(False)  # Первая запись
            form.action_9.setEnabled(False)  # Предыдущая запись
            form.action_10.setEnabled(True)  # Следующая запись
            form.action_11.setEnabled(True)  # Последняя запись
        elif self.recNum in range(1, self.recCount - 1):
            form.action_8.setEnabled(True)  # Первая запись
            form.action_9.setEnabled(True)  # Последняя запись
            form.action_10.setEnabled(True)  # Следующая запись
            form.action_11.setEnabled(True)  # Последняя запись
        elif self.recNum == self.recCount - 1 and self.recCount > 1:
            form.action_8.setEnabled(True)  # Первая запись
            form.action_9.setEnabled(True)  # Предыдущая запись
            form.action_10.setEnabled(False)  # Следующая запись
            form.action_11.setEnabled(False)  # Последняя запись
        else:
            form.action_8.setEnabled(False)  # Первая запись
            form.action_9.setEnabled(False)  # Предыдущая запись
            form.action_10.setEnabled(False)  # Следующая запись
            form.action_11.setEnabled(False)  # Последняя запись

    def readPointSzond(self) -> list:
        """Считывание данных и обновление списка согласно значений экранной формы"""
        val0 = self.recOld[0]  # ID объекта
        val1 = self.recOld[1]  # Номер договора
        val2 = self.recOld[2]  # Архивный номер отчета
        val3 = self.recOld[3]  # ID пункта зондирования
        val4 = self.recOld[4]  # ID объекта в файле зондирования
        i = self.comboBox_1.currentIndex()
        val5 = self.comboBox_1.itemData(i, role=QtCore.Qt.UserRole)  # Тип зонда
        self.id_zond = val5
        val6 = self.lineEdit_1.text()  # Номер пункта зондирования
        i = self.comboBox_2.currentIndex()
        val7 = self.comboBox_2.itemData(i, role=QtCore.Qt.UserRole)  # Привязка к скважине
        i = self.comboBox_6.currentIndex()
        val8 = self.comboBox_6.itemData(i, role=QtCore.Qt.UserRole)  # ID системы координат
        val9 = self.doubleSpinBox_1.value()  # Координата Х
        val10 = self.doubleSpinBox_2.value()  # Координата Y
        val11 = self.doubleSpinBox_3.value()  # Абс. отметка
        val12 = self.doubleSpinBox_4.value()  # Начальная глубина
        val13 = self.doubleSpinBox_5.value()  # Конечная глубина
        val14 = self.doubleSpinBox_6.value()  # Шаг зондирования
        val15 = self.dateEdit_1.date().toPyDate()  # Дата работ
        i = self.comboBox_3.currentIndex()
        val16 = self.comboBox_3.itemData(i, role=QtCore.Qt.UserRole)  # ID буровика
        i = self.comboBox_4.currentIndex()
        val17 = self.comboBox_4.itemData(i, role=QtCore.Qt.UserRole)  # ID геолога
        i = self.comboBox_5.currentIndex()
        val18 = self.comboBox_5.itemData(i, role=QtCore.Qt.UserRole)  # ID геодезиста
        self.recOld = [val3, val4, val5, val6, val7, val8, val9, val10, val11, val12, val13,
                       val14, val15, val16, val17, val18]
        return self.recOld

    def readSzond(self) -> list:
        """Формирование списка из таблицы результатов статического зондирования"""
        recAllSzond = []
        for i in range(0, self.recCountSzond):
            rec = []
            for j in range(0, 7):
                el = self.modelSzond.item(i, j).data(QtCore.Qt.EditRole)  # Определение элемента текущей записи
                if j == 0 or j == 1:
                    el = int(el)
                else:
                    if el == 'None' or el == '-':
                        el = None
                    else:
                        el = dc.Decimal(el)
                rec.append(el)  # Формирование текущей записи из элементов
            recAllSzond.append(rec)  # Формирование обновленного списка (записей-кортежей)
        return recAllSzond

    def setRow(self) -> set:
        if self.currentIndex() == 0:
            self.refreshToolbar()
            self.refreshRecord()
        elif self.currentIndex() == 1:
            self.tablePointSzond.selectRow(self.recNum)
        else:
            self.refreshRecord()

    def currentRow(self) -> set:
        """Определение номера записи (строки)  и установка движка на эту запись"""
        if self.currentIndex() == 1:
            recNum = self.recNum
            self.recNum = self.selmodelPointSzond.currentIndex().row()
            if self.recNum < 0:
                self.recNum = recNum
            self.refreshToolbar()

    def showEvent(self, e) -> set:
        """Выполняет действия при выводе окна на экран"""
        form.action_12.setEnabled(False)
        QtWidgets.QTabWidget.showEvent(self, e)

    def hideEvent(self, e) -> set:
        """Выполняет действия при скрытии окна"""
        form.action_12.setEnabled(True)
        form.szondwin = None
        if self.recAll != []:
            self.asktoSave()
        form.refreshMain()
        QtWidgets.QTabWidget.hideEvent(self, e)

    def nextRecord(self) -> set:
        """Становится на следующей записи"""
        self.recNum += 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tablePointSzond.selectRow(self.recNum)

    def priorRecord(self) -> set:
        """Становится на предыдущей записи"""
        self.recNum -= 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tablePointSzond.selectRow(self.recNum)

    def firstRecord(self) -> set:
        """Становится на первой записи"""
        self.recNum = 0
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tablePointSzond.selectRow(self.recNum)

    def lastRecord(self) -> set:
        """Становится на последней записи"""
        if self.recCount > 0:
            self.recNum = self.recCount - 1
            self.refreshToolbar()
            self.asktoSave()
            self.refreshRecord()
            self.tablePointSzond.selectRow(self.recNum)

    def sortRecord(self) -> set:
        """Сортировка записей"""
        #self.recAll.sort(key=lambda tup: tup[4])
        self.recAll.sort(key=itemgetter(4,6))
        form.action_13.setEnabled(False)  # Сортировать
        form.action_14.setEnabled(True)  # Снять сортировку
        self.refreshRecord()

    def desortRecord(self) -> set:
        """Отмена сортировки, что соответствует сортировке по ID"""
        #self.recAll.sort(key=lambda tup: tup[0])
        self.recAll.sort(key=itemgetter(3))
        form.action_13.setEnabled(True)  # Сортировать
        form.action_14.setEnabled(False)  # Снять сортировку
        self.refreshRecord()

    def addRecord(self) -> set:
        """Добавляет новую запись"""
        global idActivObekt
        with UseDatebase(dbconfig) as curs:
            curs.execute("INSERT INTO pointszond (id_obekt) VALUES (%(v3)s);", {'v3': idActivObekt})
        self.requerySelect()
        self.recCount = len(self.recAll)
        if self.recCount == 1:
            self.recNum = 0
            self.recOld = self.recAll[self.recNum]
        self.refreshRecord()
        self.lastRecord()
        self.refreshToolbar()
        self.refreshRecord()

    def addSzond(self) -> set:
        """Добавляет один замер зондирования"""
        val13 = self.doubleSpinBox_4.value()  # Начальная глубина
        val14 = self.doubleSpinBox_6.value()  # Шаг замеров
        with UseDatebase(dbconfig) as curs:
            curs.execute("SELECT max(glub) + %(v14)s, count(glub) FROM statzond WHERE statzond.id_pointszond = %(v1)s;",
                         {'v14': val14, 'v1': self.bhId})
            glubSzond = curs.fetchone()
            glubNewSzond = glubSzond[0]
            numNewSzond = glubSzond[1]
            if glubNewSzond == None:
                glubNewSzond = val13
        with UseDatebase(dbconfig) as curs:
            curs.execute("INSERT INTO statzond (id_pointszond, glub) VALUES (%(v2)s, %(v8)s);",
                         {'v2': self.bhId, 'v8': glubNewSzond})
        self.saveRecordSzond()
        self.refreshTableSzond()
        self.tableSzond.setFocus()
        sel = self.tableSzond.selectionModel()
        ind = self.tableSzond.model().index(numNewSzond, 2)
        sel.setCurrentIndex(ind, QtCore.QItemSelectionModel.NoUpdate)

    def addSzondAll(self) -> set:
        """Добавляет группу замеров интервала:
        начальная глубина-конечная глубина"""
        val13 = self.doubleSpinBox_4.value()  # Начальная глубина
        val14 = self.doubleSpinBox_6.value()  # Шаг замеров
        val8 = self.doubleSpinBox_5.value()  # Конечная глубина
        with UseDatebase(dbconfig) as curs:
            curs.execute("SELECT max(glub) + %(v14)s FROM statzond WHERE statzond.id_pointszond = %(v1)s;",
                         {'v14': val14, 'v1': self.bhId})
            glubSzond = curs.fetchone()
            glubNewSzond = glubSzond[0]
            if glubNewSzond == None:
                glubNewSzond = val13
            else:
                glubNewSzond = float(glubNewSzond)
        valrecall = int((val8 - glubNewSzond + val14) / val14)  # Количество записей для добавления
        for i in range(0, valrecall):
            with UseDatebase(dbconfig) as curs:
                curs.execute("INSERT INTO statzond (id_pointszond, glub) VALUES (%(v2)s, %(v8)s);",
                             {'v2': self.bhId, 'v8': glubNewSzond})
            glubNewSzond += val14
        self.refreshTableSzond()

    def setFile(self) -> set:
        """Назначение файла для импорта данных зондирования"""
        winFile = QtWidgets.QFileDialog(parent=None,
                                caption="Вибір файлу для імпорту",
                                directory=QtCore.QDir.currentPath() + '/csv',
                                filter="CSV (*.csv);;Всі файли (*)")
        winFile.setAcceptMode(0)
        winFile.setLabelText(1, "Ім'я файлу")
        winFile.setLabelText(3, "Відкрити")
        winFile.setLabelText(4, "Відміна")
        result = winFile.exec()
        if result == QtWidgets.QDialog.Accepted:
            ff = winFile.selectedFiles()[0]
        else:
            ff = None
        return ff

    def copySzond(self) -> set:
        """Добавление замеров из файла формата CSV (id_pointszond,glub,lob,bok или
        id_pointszond,glub,qlob,qbok в зависимости от типа зонда)"""
        self.saveRecord(True)
        kk = os.getcwd()  # Рабочий каталог
        file = self.setFile()
        if file is not None:
            try:
                ff = open(file)  # Открытие файла
                str1 = tuple(ff.readlines())
                ss = str1[0].split(',')
                ss = tuple(ss)
                sscount = len(ss)
                if sscount == 4:
                    for j in range(0, sscount):
                        if j == 0:
                            num = str(ss[j])
                        else:
                            num = dc.Decimal(ss[j])
                else:
                    num = int('close')
            except:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Critical, "Статичне зондування",
                                               "Вибраний файл не відповідає параметрам файлу для копіювання результатів статичного зондування."
                                               "\nПотрібен файл формату (*.CSV)")
                btnOK = QtWidgets.QPushButton("&OK")
                btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                result = self.formMassWin.exec()
            else:
                str3 = str()
                for i in range(0, len(str1)):
                    j = str1[i].find(',')
                    str2 = (str(self.bhId) + str1[i][j:len(str1[i])])
                    str3 = str3 + str2
                ff.close()
                kkff = kk + "/csv/stzout.csv"  # Полный путь к файлу
                ff = open(os.path.abspath(r"csv/stzout.csv"), "w")
                ff.writelines(str3)
                ff.close()
                if self.val12 == "I":
                    with UseDatebase(dbconfig) as curs:
                        curs.execute("COPY statzond (id_pointszond, glub, qlob, qbok) FROM %(v1)s WITH CSV;",
                                     {'v1': kkff})
                else:
                    with UseDatebase(dbconfig) as curs:
                        curs.execute("COPY statzond (id_pointszond, glub, lob, bok) FROM %(v1)s WITH CSV;",
                                     {'v1': kkff})
                self.refreshTableSzond()
        else:
            pass

    def clearFieldSzond(self) -> set:
        """Очистка текущей ячейки таблицы результатов статического зондирования"""
        valIndex = self.tableSzond.currentIndex()  # Создание экземпляра класса ModelIndex
        indexCell = self.modelSzond.index(valIndex.row(), valIndex.column())  # Определение индекса выбранной ячейки
        self.modelSzond.setData(indexCell, "None",
                                QtCore.Qt.EditRole)  # Присвоить неопределенное значение выбранной ячейки

    def delRecord(self) -> set:
        """Удаляет текущую запись"""
        self.refreshRecord()
        val10 = self.recOld[0]  # ID виробки
        if val10 is not None:
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                           "Статичне зондування",
                                           "Ви бажаєте видалити поточний запис з порядковим номером - " + str(
                                               self.recNum + 1) +
                                           " та номером точки зондування - " + str(self.recOld[3]) + "?")
            btnYes = QtWidgets.QPushButton("&Так")
            btnNo = QtWidgets.QPushButton("&Ні")
            btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
            self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
            self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
            self.formMassWin.setDefaultButton(btnYes)
            result = self.formMassWin.exec()
            if result == 0:
                try:
                    with UseDatebase(dbconfig) as curs:
                        curs.execute("DELETE FROM pointszond WHERE id = %(v10)s;", {'v10': val10})
                    self.requerySelect()
                    self.recCount = len(self.recAll)
                    if self.recCount > 0:
                        self.firstRecord()
                        self.refreshRecord()
                        self.refreshToolbar()
                    else:
                        self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information, "Статичне зондування",
                                                       "Видалено останній запис")
                        btnOK = QtWidgets.QPushButton("&OK")
                        btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                        self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                        result = self.formMassWin.exec()
                        if result == 0:
                            self.formMassWin.close()
                            self.parent().close()
                except:
                    self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "Статичне зондування",
                                                            "Видалення не можливо. "
                                                            "З поточним записом пов'язані записи у таблиці: "
                                                            "Результати випробування"
                                                            "\nПотрібно виконати попереднє видалення усіх записів "
                                                            "в указаній таблиці")
                    btnOK = QtWidgets.QPushButton("&OK")
                    btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                    self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                    result = self.formMassWin.exec()
                    if result == 0:
                        self.formMassWin.close()
            else:
                pass
        else:
            pass

    def delSzond(self) -> set:
        """Удаляет замер из таблицы статического зондирования"""
        i = self.tableSzond.currentIndex().row()
        if i == None or i == -1:
            pass
        else:
            idSzond = self.modelSzond.item(i, 0).text()
            with UseDatebase(dbconfig) as curs:
                curs.execute("""DELETE FROM statzond 
                                WHERE id = %(v0)s;""",
                             {'v0': idSzond})
        self.refreshTableSzond()

    def delSzondAll(self) -> set:
        """Удаляет все замеры из таблицы статического зондирования текущей точки"""
        with UseDatebase(dbconfig) as curs:
            curs.execute("""DELETE FROM statzond 
                            WHERE id_pointszond = %(v2)s;""",
                         {'v2': self.bhId})
        self.refreshTableSzond()

    def asktoSave(self) -> set:
        """Проверяет наличие изменений в характеристиках статического зондирования"""
        if self.recOld != []:
            # Считывание данных и обновление списка согласно значений экранной формы
            val0 = self.recOld[0]  # ID пункта зондирования
            val1 = self.recOld[1]  # ID объекта в файле зондирования
            i = self.comboBox_1.currentIndex()
            val2 = self.comboBox_1.itemData(i, role=QtCore.Qt.UserRole)  # Тип зонда
            val3 = self.lineEdit_1.text()  # Номер пункта зондирования
            i = self.comboBox_2.currentIndex()
            val4 = self.comboBox_2.itemData(i, role=QtCore.Qt.UserRole)  # Привязка к скважине
            i = self.comboBox_6.currentIndex()
            val5 = self.comboBox_6.itemData(i, role=QtCore.Qt.UserRole)  # ID системы координат
            val6 = self.doubleSpinBox_1.value()  # Координата Х
            val7 = self.doubleSpinBox_2.value()  # Координата Y
            val8 = self.doubleSpinBox_3.value()  # Абс. отметка
            val9 = self.doubleSpinBox_4.value()  # Начальная глубина
            val10 = self.doubleSpinBox_5.value()  # Конечная глубина
            val11 = self.doubleSpinBox_6.value()  # Шаг зондирования
            val12 = self.dateEdit_1.date().toPyDate()  # Дата работ
            i = self.comboBox_3.currentIndex()
            val13 = self.comboBox_3.itemData(i, role=QtCore.Qt.UserRole)  # ID буровика
            i = self.comboBox_4.currentIndex()
            val14 = self.comboBox_4.itemData(i, role=QtCore.Qt.UserRole)  # ID геолога
            i = self.comboBox_5.currentIndex()
            val15 = self.comboBox_5.itemData(i, role=QtCore.Qt.UserRole)  # ID геодезиста
            self.recNew = [val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, val10,
                           val11, val12, val13, val14, val15]
            askSzondpoint = (self.recNew == self.recOld)
            askSzond = self.asktoSaveSzond()
            askTablePointSzond = self.asktoSaveTablePointSzond()
            if askSzondpoint == False or askSzond == False:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                               "Статичне зондування",
                                               "Є незбережені дані характеристики пункту статичного зондування. "
                                               "\nВи бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecord(False)
                else:
                    pass
            elif askTablePointSzond == False:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                               "Статичне зондування",
                                               "Є незбережені дані у таблиці характеристики пунктів статичного зондування. "
                                               "\nВи бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecordTablePointSzond(False)
                else:
                    pass
            else:
                pass

    def asktoSaveSzond(self) -> set:
        """Проверка наличия изменений в таблице Статического зондирования"""
        # Считывание данных и обновление списка замеров согласно значений экранной формы
        self.recAllNewSzond = self.readSzond()
        if self.recAllNewSzond == self.recAllOldSzond:
            ask = True
        else:
            ask = False
        return ask

    def asktoSaveTablePointSzond(self) -> set:
        """Проверка наличия изменений в таблице точек статического зондирования"""
        # Считывание данных и обновление списка согласно значений экранной формы
        self.recAllNewPointSzond = []
        for i in range(0, self.recCountPointSzond):
            rec = []
            for j in range(0, 16):
                if j in range(0, 2):
                    el = int(self.modelPointSzond.item(i, j).data(QtCore.Qt.EditRole))  # ID точки, ID объекта
                elif j == 2:
                    if self.modelPointSzond.item(i, j).data(QtCore.Qt.UserRole) is None \
                            or self.modelPointSzond.item(i, j).data(QtCore.Qt.UserRole) == 'None':
                        el = None
                    else:
                        el = int(self.modelPointSzond.item(i, j).data(QtCore.Qt.UserRole))  # ID типа зонда
                elif j == 3:
                    el = str(self.modelPointSzond.item(i, j).data(QtCore.Qt.EditRole))  # Номер точки зондирования
                elif j in range(4, 6):
                    if self.modelPointSzond.item(i, j).data(QtCore.Qt.UserRole) is None \
                            or self.modelPointSzond.item(i, j).data(QtCore.Qt.UserRole) == 'None':
                        el = None
                    else:
                        el = int(self.modelPointSzond.item(i, j).data(QtCore.Qt.UserRole))  # ID скважины, ID системы координат
                elif j in range(6, 12):
                    if self.modelPointSzond.item(i, j).data(QtCore.Qt.EditRole) == '-' or self.modelPointSzond.item(i, j).data(QtCore.Qt.EditRole) == 'None':
                        el = None
                    else:
                        el = dc.Decimal(self.modelPointSzond.item(i, j).data(QtCore.Qt.EditRole))  # X, Y, Z, Начальная глубина, глубина,  шаг
                elif j == 12:
                    strDate = str(self.modelPointSzond.item(i, j).data(QtCore.Qt.EditRole)) # Дата
                    el = datetime.date(int(strDate.split('-')[0]),
                                        int(strDate.split('-')[1]),
                                        int(strDate.split('-')[2]))
                elif j in range(13, 16):
                    if self.modelPointSzond.item(i, j).data(QtCore.Qt.UserRole) is None \
                            or self.modelPointSzond.item(i, j).data(QtCore.Qt.UserRole) == 'None':
                        el = None
                    else:
                        el = int(self.modelPointSzond.item(i, j).data(QtCore.Qt.UserRole))  # ID буровика, геолога, геодезиста...
                else:
                    pass
                if el == 'None' or el == '-':
                    el = None
                rec.append(el)  # Формирование текущей записи из элементов
            self.recAllNewPointSzond.append(rec)  # Формирование обновленного списка (записей-кортежей)
        if self.recAllNewPointSzond == self.recAllOldPointSzond:
            ask = True
        else:
            ask = False
        return ask

    def saveAll(self) -> set:
        """Сохраняет изменения по нажатию кнопки Сохранить на панели инструментов"""
        if self.currentIndex() == 0:
            self.saveRecord(False)
        if self.currentIndex() == 1:
            self.setCurrentIndex(0)
            self.setCurrentIndex(1)
        else:
            pass

    def saveRecord(self, ask) -> set:
        """Сохраняет изменения в записи и формирует новый курсор"""
        if ask == False:
            # Считывание данных и обновление списка согласно значений экранной формы
            val0 = self.recOld[0]  # ID пункта зондирования
            val1 = self.recOld[1]  # ID объекта в файле зондирования
            i = self.comboBox_1.currentIndex()
            val2 = self.comboBox_1.itemData(i, role=QtCore.Qt.UserRole)  # Тип зонда
            val3 = self.lineEdit_1.text()  # Номер пункта зондирования
            i = self.comboBox_2.currentIndex()
            val4 = self.comboBox_2.itemData(i, role=QtCore.Qt.UserRole)  # Привязка к скважине
            val5 = self.doubleSpinBox_1.value()  # Координата Х
            val6 = self.doubleSpinBox_2.value()  # Координата Y
            val7 = self.doubleSpinBox_3.value()  # Абс. отметка
            val8 = self.doubleSpinBox_4.value()  # Начальная глубина
            val9 = self.doubleSpinBox_5.value()  # Конечная глубина
            val10 = self.doubleSpinBox_6.value()  # Шаг зондирования
            val11 = self.dateEdit_1.date().toPyDate()  # Дата работ
            i = self.comboBox_3.currentIndex()
            val12 = self.comboBox_3.itemData(i, role=QtCore.Qt.UserRole)  # ID буровика
            i = self.comboBox_4.currentIndex()
            val13 = self.comboBox_4.itemData(i, role=QtCore.Qt.UserRole)  # ID геолога
            i = self.comboBox_5.currentIndex()
            val14 = self.comboBox_5.itemData(i, role=QtCore.Qt.UserRole)  # ID геодезиста
            i = self.comboBox_6.currentIndex()
            val15 = self.comboBox_6.itemData(i, role=QtCore.Qt.UserRole)  # ID системы координат
            with UseDatebase(dbconfig) as curs:
                curs.execute("""UPDATE pointszond
                                SET id_zond = %(v2)s, 
                                    num_point = %(v3)s, 
                                    id_burehole = %(v4)s,
                                    koord_x = %(v5)s, 
                                    koord_y = %(v6)s, 
                                    koord_z = %(v7)s, 
                                    glubin = %(v8)s, 
                                    glub = %(v9)s, 
                                    shag = %(v10)s, 
                                    date_finish = %(v11)s, 
                                    id_burman = %(v12)s,
                                    id_geoman = %(v13)s,
                                    id_gdzman = %(v14)s,
                                    id_syskoord = %(v15)s
                                WHERE id = %(v0)s;""",
                             {'v2': val2, 'v3': val3, 'v4': val4, 'v5': val5, 'v6': val6, 'v7': val7,
                              'v8': val8, 'v9': val9, 'v10': val10, 'v11': val11, 'v12': val12,
                              'v13': val13, 'v14': val14, 'v15': val15, 'v0': val0})
            self.requerySelect()
            self.saveRecordSzond()
            self.refreshRecord()
        else:
            pass

    def saveRecordSzond(self) -> set:
        """Сохранение записей таблицы статического зондирования"""
        ask = self.asktoSaveSzond()
        if ask == False:
            for i in range(0, self.recCountSzond):
                recSzond = self.recAllNewSzond[i]
                val0 = int(recSzond[0])
                val1 = int(recSzond[1])
                val2 = dc.Decimal(recSzond[2])
                val3 = recSzond[3]
                val4 = recSzond[4]
                val5 = recSzond[5]
                val6 = recSzond[6]
                if val3 == None:
                    pass
                else:
                    val3 = dc.Decimal(val3)
                if val4 == None:
                    pass
                else:
                    val4 = dc.Decimal(val4)
                if val5 == None:
                    pass
                else:
                    val5 = dc.Decimal(val5)
                if val6 == None:
                    pass
                else:
                    val6 = dc.Decimal(val6)
                if self.val12 == "I":
                    val3 = None
                    val4 = None
                else:
                    val5 = None
                    val6 = None
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE statzond  
                                    SET glub = %(v2)s, 
                                        lob = %(v3)s, 
                                        bok = %(v4)s, 
                                        qlob = %(v5)s, 
                                        qbok = %(v6)s 
                                    WHERE id = %(v0)s;""",
                                 {'v2': val2, 'v3': val3, 'v4': val4, 'v5': val5, 'v6': val6, 'v0': val0})
        else:
            pass

    def saveRecordTablePointSzond(self, ask) -> set:
        """Сохранение записей таблицы точек зондирования"""
        if ask == False:
            for i in range(0, self.recCountPointSzond):
                recTabPointSzond = self.recAllNewPointSzond[i]
                val0 = recTabPointSzond[0]
                val1 = recTabPointSzond[1]
                val2 = recTabPointSzond[2]
                val3 = recTabPointSzond[3]
                val4 = recTabPointSzond[4]
                val5 = recTabPointSzond[5]
                val6 = recTabPointSzond[6]
                val7 = recTabPointSzond[7]
                val8 = recTabPointSzond[8]
                val9 = recTabPointSzond[9]
                val10 = recTabPointSzond[10]
                val11 = recTabPointSzond[11]
                val12 = recTabPointSzond[12]
                val13 = recTabPointSzond[13]
                val14 = recTabPointSzond[14]
                val15 = recTabPointSzond[15]
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE pointszond
                                    SET id_zond = %(v2)s, 
                                        num_point = %(v3)s, 
                                        id_burehole = %(v4)s,
                                        id_syskoord = %(v5)s,
                                        koord_x = %(v6)s, 
                                        koord_y = %(v7)s, 
                                        koord_z = %(v8)s, 
                                        glubin = %(v9)s, 
                                        glub = %(v10)s, 
                                        shag = %(v11)s, 
                                        date_finish = %(v12)s, 
                                        id_burman = %(v13)s,
                                        id_geoman = %(v14)s,
                                        id_gdzman = %(v15)s
                                    WHERE id = %(v0)s;""",
                                 {'v2': val2, 'v3': val3, 'v4': val4,
                                  'v5': val5, 'v6': val6, 'v7': val7, 'v8': val8,
                                  'v9': val9, 'v10': val10, 'v11': val11, 'v12': val12,
                                  'v13': val13, 'v14': val14, 'v15': val15, 'v0': val0})
            self.requerySelect()
            self.refreshRecord()
        else:
            pass


class BureholeWindow(QtWidgets.QTabWidget, egclasswin.Ui_Burehole_win):
    def __init__(self) -> set:
        """Инициализация окна характеристик выработок с отбором образцов"""
        super().__init__()
        self.setupUi(self)
        global idActivObekt
        self.recAllOldBurehole = []
        self.recCountBurehole = 0
        self.comboBox.addItems(["", "Свердловина", "Дудка-свердловина", "Шурф-свердловина", "Дудка", "Шурф", "Канава", "Розчистка", "Пункт відбору води"])
        self.comboBox_2.addItems(["", "Ударно-канатний", "Колонковий", "Шнековий", "Вібраційний", "Ручний", "Комбінований"])
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT id,
                                bur_name
                            FROM public.tipbur 
                            ORDER BY tipbur.bur_name ASC""")
            recAll = curs.fetchall()
        for i in range(0, len(recAll)):
            recOne = recAll[i]
            self.comboBox_6.addItem(recOne[1])
            self.comboBox_6.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT id,
                                fio
                            FROM public.ispol 
                            WHERE ispol.vidrab = 2 OR ispol.vidrab = 0
                            ORDER BY ispol.fio ASC""")
            recAll = curs.fetchall()
        for i in range(0, len(recAll)):
            recOne = recAll[i]
            self.comboBox_3.addItem(recOne[1])
            self.comboBox_3.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT id,
                                fio
                            FROM public.ispol 
                            WHERE ispol.vidrab = 3 OR ispol.vidrab = 0
                            ORDER BY ispol.fio ASC""")
            recAll = curs.fetchall()
        for i in range(0, len(recAll)):
            recOne = recAll[i]
            self.comboBox_4.addItem(recOne[1])
            self.comboBox_4.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT id,
                                fio
                            FROM public.ispol 
                            WHERE ispol.vidrab = 4 OR ispol.vidrab = 0
                            ORDER BY ispol.fio ASC""")
            recAll = curs.fetchall()
        for i in range(0, len(recAll)):
            recOne = recAll[i]
            self.comboBox_5.addItem(recOne[1])
            self.comboBox_5.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT id,
                                sys,
                                region
                            FROM public.syskoord 
                            ORDER BY syskoord.id ASC""")
            recAll = curs.fetchall()
        for i in range(0, len(recAll)):
            recOne = recAll[i]
            self.comboBox_7.addItem(recOne[1])
            self.comboBox_7.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
            self.comboBox_7.setItemData(i, recOne[2], role=QtCore.Qt.UserRole + 1)
        # Подготовка таблицы скважин
        self.modelBurehole = QtGui.QStandardItemModel(30, 16)  # Создание модели скважин
        self.selmodelBurehole = QtCore.QItemSelectionModel(self.modelBurehole)  # Создание модели выделения
        self.modelBurehole.setRowCount(len(self.recAll))
        self.modelBurehole.setHorizontalHeaderLabels(['ID Burehole',
                                                        'ID obekt',
                                                        'Вид виробки',
                                                        'Номер \nвиробки',
                                                        'Бурова установка',
                                                        'Спосіб проходки',
                                                        'Діаметр (мм)',
                                                        'Система координат',
                                                        'Координата X',
                                                        'Координата Y',
                                                        'Абсолютна \nвідмітка (м)',
                                                        'Глибина \nвиробки (м)',
                                                        'Початок \nробіт',
                                                        'Завершення \nробіт',
                                                        'Буровий майстер',
                                                        'Геолог',
                                                        'Геодезіст'])
        self.tableBurehole.setModel(self.modelBurehole)  # Создание представления
        self.tableBurehole.setSelectionModel(self.selmodelBurehole)  # Установить модель выделения в представлении
        self.tableBurehole.setGeometry(QtCore.QRect(10, 10, 1100, 585))
        self.tableBurehole.setColumnWidth(0, 10)  # ID Burehole
        self.tableBurehole.setColumnWidth(1, 10)  # ID obekt
        self.tableBurehole.setColumnWidth(2, 140)  # Вид виробки
        self.tableBurehole.setColumnWidth(3, 90)  # Номер виробки
        self.tableBurehole.setColumnWidth(4, 220)  # Бурова установка
        self.tableBurehole.setColumnWidth(5, 140)  # Спосіб проходки
        self.tableBurehole.setColumnWidth(6, 90)  # Діаметр(мм)
        self.tableBurehole.setColumnWidth(7, 140)  # Система координат
        self.tableBurehole.setColumnWidth(8, 100)  # Координата X
        self.tableBurehole.setColumnWidth(9, 100)  # Координата Y
        self.tableBurehole.setColumnWidth(10, 90)  # Абсолютна відмітка (м)
        self.tableBurehole.setColumnWidth(11, 90)  # Глибина виробки (м)
        self.tableBurehole.setColumnWidth(12, 100)  # Дата початку робіт
        self.tableBurehole.setColumnWidth(13, 100)  # Дата завершення робіт
        self.tableBurehole.setColumnWidth(14, 140)  # Буровий майстер
        self.tableBurehole.setColumnWidth(15, 140)  # Геолог
        self.tableBurehole.setColumnWidth(16, 140)  # Геодезіст
        self.tableBurehole.setColumnHidden(0, True)
        self.tableBurehole.setColumnHidden(1, True)
        # Подготовка таблицы воды
        self.modelVoda = QtGui.QStandardItemModel(30, 10)  # Создание модели воды
        self.selmodelVoda = QtCore.QItemSelectionModel(self.modelVoda)  # Создание модели выделения
        self.modelVoda.setHorizontalHeaderLabels(['ID Voda',
                                                  'ID Burehole',
                                                  'Номер\nгоризонту',
                                                  'Вік\nводоносу',
                                                  'Температура\nводи С',
                                                  "Рівень що\nз'явився (м)",
                                                  'Рівень що\nвстановився (м)',
                                                  'Опис горизонту',
                                                  'Глибина\nводоупору (м)',
                                                  'Лабораторний\nномер проби'])
        self.tableVoda.setModel(self.modelVoda)  # Создание представления Воды
        self.tableVoda.setSelectionModel(self.selmodelVoda)  # Установить модель выделения в представлении
        self.tableVoda.setGeometry(QtCore.QRect(400, 440, 970, 109))
        self.tableVoda.setColumnHidden(0, True)
        self.tableVoda.setColumnHidden(1, True)
        self.tableVoda.setColumnWidth(2, 70)
        self.tableVoda.setColumnWidth(3, 70)
        self.tableVoda.setColumnWidth(4, 90)
        self.tableVoda.setColumnWidth(5, 95)
        self.tableVoda.setColumnWidth(6, 115)
        self.tableVoda.setColumnWidth(7, 302)
        self.tableVoda.setColumnWidth(8, 100)
        self.tableVoda.setColumnWidth(9, 100)
        # Корректировка таблиц TableWidget
        self.tableStrate.setColumnHidden(0, True)
        self.tableStrate.setColumnHidden(1, True)
        self.tableStrate.setColumnWidth(2, 50)
        self.tableStrate.setColumnWidth(3, 40)
        self.tableStrate.setColumnWidth(4, 70)
        self.tableStrate.setColumnWidth(5, 85)
        self.tableStrate.setColumnWidth(6, 85)
        self.tableStrate.setColumnWidth(7, 530)
        self.tableStrate.setColumnWidth(8, 65)
        self.tableObrazec.setColumnHidden(0, True)
        self.tableObrazec.setColumnHidden(1, True)
        self.tableObrazec.setColumnWidth(2, 55)
        self.tableObrazec.setColumnWidth(3, 75)
        self.tableObrazec.setColumnWidth(4, 160)
        self.tableObrazec.setColumnWidth(5, 80)
        self.tableObrazec.setColumnWidth(6, 110)
        self.tableObrazec.setColumnWidth(7, 155)
        self.tableObrazec.setColumnWidth(8, 130)
        self.tableObrazec.setColumnWidth(9, 95)
        self.tableObrazec.setColumnWidth(10, 155)
        self.tableObrazec.setColumnWidth(11, 310)
        self.requerySelect()
        if not self.recAll:
            self.addRecord()
        else:
            self.recCount = len(self.recAll)
            self.recNum = 0
            self.recOld = self.recAll[self.recNum]
            self.bhId = self.recOld[3]
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT *
                            FROM public.strate 
                            WHERE strate.id_burehole = %(v2)s
                            ORDER BY strate.num_strate ASC""", {'v2': self.bhId})
            self.recAllStrate = curs.fetchall()
            self.tableStrate.setRowCount(len(self.recAllStrate))
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT voda.*,
                                obrazec.lab_num
                            FROM voda
                            LEFT JOIN obrazec ON voda.id_obrazec = obrazec.id
                            WHERE voda.id_burehole = %(v2)s
                            ORDER BY voda.num_voda ASC""", {'v2': self.bhId})
            self.recAllVoda = curs.fetchall()
        self.modelVoda.setRowCount(len(self.recAllVoda))
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT id,
                                id_burehole,
                                num_obrazec,
                                glub_otbor,
                                mater_obr,
                                vid_obr,
                                lab_num,
                                cvet,
                                textura,
                                prosloi,
                                vkluc,
                                newvkluc
                            FROM public.obrazec 
                            WHERE obrazec.id_burehole = %(v2)s
                            ORDER BY obrazec.num_obrazec ASC, obrazec.glub_otbor ASC""", {'v2': self.bhId})
            self.recAllObrazec = curs.fetchall()
            self.tableObrazec.setRowCount(len(self.recAllObrazec))
        self.refreshToolbar()
        self.refreshRecord()
        # Назначение делегатов
        self.DelegateNum = egdelegat.SpinBoxDelegate()
        self.DelegatDiametr = egdelegat.SpinBoxDelegate_Diametr()
        self.DelegateSyskoord = egdelegat.ComboBoxDelegateSyskoord()
        self.DelegatKoord = egdelegat.DoubleSpinBoxDelegate10()
        self.DelegatAbsotm = egdelegat.DoubleSpinBoxDelegate_Absotm()
        self.DelegateGlub = egdelegat.DoubleSpinBoxDelegate()
        self.DelegateGlubupor = egdelegat.DoubleSpinBoxDelegate_62()
        self.DelegateLabnumVoda = egdelegat.ComboBoxDelegateLabnumVoda()
        self.DelegateGrad = egdelegat.DoubleSpinBoxDelegate1()
        self.DelegateGrunt = egdelegat.ComboBoxDelegateGrunt()
        self.DelegateObrazec = egdelegat.ComboBoxDelegateObrazec()
        self.DelegateCvet = egdelegat.ComboBoxDelegateCvet()
        self.DelegateTextura = egdelegat.ComboBoxDelegateTextura()
        self.DelegateProsloi = egdelegat.ComboBoxDelegateProsloi()
        self.DelegateVkluch = egdelegat.ComboBoxDelegateVkluch()
        self.DelegateNovo = egdelegat.ComboBoxDelegateNovo()
        self.DelegateTypePoint = egdelegat.ComboBoxDelegateTypePoint()
        self.DelegateTipebur = egdelegat.ComboBoxDelegateTipbur()
        self.DelegateSposobBur = egdelegat.ComboBoxDelegateSposobBur()
        self.DelegateDate = egdelegat.DateDelegate()
        self.DelegateBurman = egdelegat.ComboBoxDelegateBurman()
        self.DelegateGeoman = egdelegat.ComboBoxDelegateGeoman()
        self.DelegateGdzman = egdelegat.ComboBoxDelegateGdzman()
        self.tableStrate.setItemDelegateForColumn(2, self.DelegateNum)
        self.tableStrate.setItemDelegateForColumn(8, self.DelegateNum)
        self.tableStrate.setItemDelegateForColumn(5, self.DelegateGlub)
        self.tableStrate.setItemDelegateForColumn(6, self.DelegateGlub)
        self.tableVoda.setItemDelegateForColumn(2, self.DelegateNum)
        self.tableVoda.setItemDelegateForColumn(4, self.DelegateGrad)
        self.tableVoda.setItemDelegateForColumn(5, self.DelegateGlub)
        self.tableVoda.setItemDelegateForColumn(6, self.DelegateGlub)
        self.tableVoda.setItemDelegateForColumn(8, self.DelegateGlubupor)
        self.tableVoda.setItemDelegateForColumn(9, self.DelegateLabnumVoda)
#        self.tableVoda.setItemDelegateForColumn(8, self.DelegateGlub)
#        self.tableObrazec.setItemDelegateForColumn(2, self.DelegateNum)
        self.tableObrazec.setItemDelegateForColumn(3, self.DelegateGlub)
        self.tableObrazec.setItemDelegateForColumn(4, self.DelegateGrunt)
        self.tableObrazec.setItemDelegateForColumn(5, self.DelegateObrazec)
        self.tableObrazec.setItemDelegateForColumn(7, self.DelegateCvet)
        self.tableObrazec.setItemDelegateForColumn(8, self.DelegateTextura)
        self.tableObrazec.setItemDelegateForColumn(9, self.DelegateProsloi)
        self.tableObrazec.setItemDelegateForColumn(10, self.DelegateVkluch)
        self.tableObrazec.setItemDelegateForColumn(11, self.DelegateNovo)
        self.tableBurehole.setItemDelegateForColumn(2, self.DelegateTypePoint)
        self.tableBurehole.setItemDelegateForColumn(4, self.DelegateTipebur)
        self.tableBurehole.setItemDelegateForColumn(5, self.DelegateSposobBur)
        self.tableBurehole.setItemDelegateForColumn(6, self.DelegatDiametr)
        self.tableBurehole.setItemDelegateForColumn(7, self.DelegateSyskoord)
        self.tableBurehole.setItemDelegateForColumn(8, self.DelegatKoord)
        self.tableBurehole.setItemDelegateForColumn(9, self.DelegatKoord)
        self.tableBurehole.setItemDelegateForColumn(10, self.DelegatAbsotm)
        self.tableBurehole.setItemDelegateForColumn(11, self.DelegateGlub)
        self.tableBurehole.setItemDelegateForColumn(12, self.DelegateDate)
        self.tableBurehole.setItemDelegateForColumn(13, self.DelegateDate)
        self.tableBurehole.setItemDelegateForColumn(14, self.DelegateBurman)
        self.tableBurehole.setItemDelegateForColumn(15, self.DelegateGeoman)
        self.tableBurehole.setItemDelegateForColumn(16, self.DelegateGdzman)
        # Назначение обработчиков сигналов
        self.currentChanged.connect(self.asktoSave)
        self.currentChanged.connect(self.setRow)
        self.toolButton.clicked.connect(self.addStrate)
        self.toolButton_2.clicked.connect(self.delStrate)
        self.toolButton_5.clicked.connect(self.addVoda)
        self.toolButton_6.clicked.connect(self.delVoda)
        self.toolButton_3.clicked.connect(self.addObrazec)
        self.toolButton_4.clicked.connect(self.delObrazec)
#        self.selmodelBurehole.currentChanged.connect(self.currentRow)
        self.selmodelBurehole.selectionChanged['QItemSelection', 'QItemSelection'].connect(self.currentRow)


    def requerySelect(self) -> set:
        """Обновление главного запроса для экранной формы"""
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT obekt.id, 
                                obekt.numdog,
                                obekt.archnum, 
                                burehole.id,
                                burehole.id_obekt,
                                burehole.vidhole,
                                burehole.num_hole,
                                burehole.id_bur,
                                burehole.vidbur,
                                burehole.diametr,
                                burehole.id_syskoord,
                                burehole.koord_x,
                                burehole.koord_y, 
                                burehole.koord_z,
                                burehole.glub, 
                                burehole.date_start,
                                burehole.date_finish, 
                                burehole.id_burman,
                                burehole.id_geoman,
                                burehole.id_gdzman,
                                vburman.fio,
                                vgeoman.fio,
                                vgdzman.fio,
                                tipbur.bur_name,
                                syskoord.sys
                            FROM public.obekt,
                            public.burehole
                            LEFT JOIN vburman ON burehole.id_burman = vburman.id
                            LEFT JOIN vgeoman ON burehole.id_geoman = vgeoman.id
                            LEFT JOIN vgdzman ON burehole.id_gdzman = vgdzman.id
                            LEFT JOIN tipbur ON burehole.id_bur = tipbur.id
                            LEFT JOIN syskoord ON burehole.id_syskoord = syskoord.id
                            WHERE obekt.id = burehole.id_obekt 
                            AND obekt.id = %(v0)s 
                            ORDER BY burehole.id ASC""", {'v0': idActivObekt})
            self.recAll = curs.fetchall()
        return self.recAll

    def refreshRecord(self) -> set:
        """Обновляет экранную форму с отображаемой записью"""
        # Передача значений из списка в экранную форму
        if self.recAll == []:
            self.recOld = []
        else:
            self.recOld = self.recAll[self.recNum]
        if self.recOld:
            self.label.setText("Ідентіфікатор об'єкта - " + str(self.recOld[0]) + "\n" +
                               "Номер договору - " + self.recOld[1] + "\n" +
                               "Архівний номер звіту - " + self.recOld[2])  # ID объекта, Номер договора, Архивный номер отчета
            self.bhId = self.recOld[3]  # ID выработки
            self.obID = self.recOld[4]  # ID объекта
            self.comboBox.setCurrentIndex(self.comboBox.findText(self.recOld[5]))  # Вид выработки
            self.lineEdit.setText(self.recOld[6])  # Номер выработки
            self.comboBox_6.setCurrentIndex(
                self.comboBox_6.findData(self.recOld[7], role=QtCore.Qt.UserRole))  # ID Буровой установки
            self.comboBox_2.setCurrentIndex(self.comboBox_2.findText(self.recOld[8]))  # Способ проходки
            if self.recOld[9] == None:
                self.spinBox.setValue(self.spinBox.minimum())
            else:
                self.spinBox.setValue(self.recOld[9])  # Диаметр
            self.comboBox_7.setCurrentIndex(
                self.comboBox_7.findData(self.recOld[10], role=QtCore.Qt.UserRole))  # ID системы координат
            if self.recOld[11] == None:
                self.doubleSpinBox.setValue(self.doubleSpinBox.minimum())
            else:
                self.doubleSpinBox.setValue(self.recOld[11])  # Координата Х
            if self.recOld[12] == None:
                self.doubleSpinBox_2.setValue(self.doubleSpinBox_2.minimum())
            else:
                self.doubleSpinBox_2.setValue(self.recOld[12])  # Координата Y
            if self.recOld[13] == None:
                self.doubleSpinBox_3.setValue(self.doubleSpinBox_3.minimum())
            else:
                self.doubleSpinBox_3.setValue(self.recOld[13])  # Абс. отметка
            if self.recOld[14] == None:
                self.doubleSpinBox_4.setValue(self.doubleSpinBox_4.minimum())
            else:
                self.doubleSpinBox_4.setValue(self.recOld[14])  # Глубина
            self.dateEdit.setDate(self.recOld[15])  # Начало работ
            self.dateEdit_2.setDate(self.recOld[16])  # Окончание работ
            self.comboBox_3.setCurrentIndex(
                self.comboBox_3.findData(self.recOld[17], role=QtCore.Qt.UserRole)) # ID буровика
            self.comboBox_4.setCurrentIndex(
                self.comboBox_4.findData(self.recOld[18], role=QtCore.Qt.UserRole))  # ID геолога
            self.comboBox_5.setCurrentIndex(
                self.comboBox_5.findData(self.recOld[19], role=QtCore.Qt.UserRole))  # ID геодезиста
            # Считывание данных и обновление списка согласно значений экранной формы
            val0 = self.recOld[0]   # ID объекта
            val1 = self.recOld[1]   # Номер договора
            val2 = self.recOld[2]   # Архивный номер отчета
            val3 = self.recOld[3]   # ID выработки
            val4 = self.recOld[4]   # ID объекта в файле выработок
            val5 = self.comboBox.currentText()  # Вид выработки
            val6 = self.lineEdit.text() # Номер выработки
            val7 = self.comboBox_6.currentData(QtCore.Qt.UserRole)  # ID буровой установки
            val8 = self.comboBox_2.currentText()    # Способ проходки
            if self.spinBox.value() == 0:
                val9 = None
            else:
                val9 = self.spinBox.value()  # Диаметр
            val10 = self.comboBox_7.currentData(QtCore.Qt.UserRole)  # ID системы координат
            if self.doubleSpinBox.value() == 0.00:
                val11 = None
            else:
                val11 = self.doubleSpinBox.value()  # Координата Х
            if self.doubleSpinBox_2.value() == 0.00:
                val12 = None
            else:
                val12 = self.doubleSpinBox_2.value()  # Координата Y
            if self.doubleSpinBox_3.value() == -10000.00:
                val13 = None
            else:
                val13 = self.doubleSpinBox_3.value()  # Абс. отметка
            if self.doubleSpinBox_4.value() == 0.00:
                val14 = None
            else:
                val14 = self.doubleSpinBox_4.value()  # Глубина
            val15 = self.dateEdit.date().toPyDate() # Начало работ
            val16 = self.dateEdit_2.date().toPyDate()   # Окончание работ
            val17 = self.comboBox_3.currentData(QtCore.Qt.UserRole) # ID буровика
            val18 = self.comboBox_4.currentData(QtCore.Qt.UserRole) # ID геолога
            val19 = self.comboBox_5.currentData(QtCore.Qt.UserRole) # ID геодезиста
            self.recOld = [val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, val10, val11, val12, val13,
                           val14, val15, val16, val17, val18, val19]
        else:
            pass
        self.refreshTableStrate()
        self.refreshTableObrazec()
        self.refreshTableVoda()
        self.refreshTableBurehole()

    def refreshTableStrate(self) -> set:
        """Обновление таблицы Описание слоя"""
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT *
                            FROM public.strate 
                            WHERE strate.id_burehole = %(v2)s
                            ORDER BY strate.num_strate ASC""", {'v2': self.bhId})
            self.recAllStrate = curs.fetchall()  # Полный исходный список послойного описания выработки
            self.tableStrate.setRowCount(len(self.recAllStrate))
        self.recCountStrate = len(self.recAllStrate)
        self.recAllOldStrate = []
        if self.recCountStrate > 0:
            self.tableStrate.setEnabled(True)
            self.toolButton_2.setEnabled(True)
            self.tableStrate.clearContents()
            for i in range(0, self.recCountStrate):
                self.recOldStrate = self.recAllStrate[i][0:9]
                oldStrateOne = []
                for j in range(0, 9):  # Занесение данных в ячейки таблицы
                    item = QtWidgets.QTableWidgetItem()
                    if j == 5 or j == 6:
                        item.setTextAlignment(4)    # По правому краю
                        it = str(self.recOldStrate[j])
                    elif j == 7:
                        item.setTextAlignment(1)    # По левому краю
                        it = self.recOldStrate[j]
                    else:
                        item.setTextAlignment(4)    # По центру
                        it = self.recOldStrate[j]
                    item.setData(QtCore.Qt.EditRole, it)
                    self.tableStrate.setItem(i, j, item)
                    self.tableStrate.visualItemRect(item)
                    oldStrateOne.append(it)
                self.recAllOldStrate.append(oldStrateOne)  # Формирование исходного списка послойного описания выработки
        else:
            self.tableStrate.setEnabled(False)
            self.toolButton_2.setEnabled(False)
            self.tableStrate.clearContents()
        self.recAllNewStrate = self.recAllOldStrate
        self.tableStrate.resizeRowsToContents()

    def refreshTableVoda(self) -> set:
        """Обновление таблицы Описание грунтовых вод"""
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT voda.*,
                                obrazec.lab_num
                            FROM voda
                            LEFT JOIN obrazec ON voda.id_obrazec = obrazec.id
                            WHERE voda.id_burehole = %(v2)s
                            ORDER BY voda.num_voda ASC""", {'v2': self.bhId})
            self.recAllVoda = curs.fetchall()  # Полный исходный список описания грунтовых вод
            self.modelVoda.setRowCount(len(self.recAllVoda))
        self.recAllOldVoda = list(self.recAllVoda)
        self.recCountVoda = len(self.recAllVoda)
        if self.recCountVoda > 0:
            self.tableVoda.setEnabled(True)
            self.toolButton_6.setEnabled(True)
            for i in range(0, self.recCountVoda):
                self.recOldVoda = self.recAllVoda[i][0:11]
                for j in range(0, 10):  # Занесение данных в ячейки таблицы
                    item = QtGui.QStandardItem()
                    if j < 7:
                        item.setTextAlignment(QtCore.Qt.AlignCenter)
                        it = str(self.recOldVoda[j])
                    elif j == 7:
                        item.setTextAlignment(QtCore.Qt.AlignCenter)
                        it = str(self.recOldVoda[j])
                    elif j == 8:
                        item.setTextAlignment(QtCore.Qt.AlignCenter)
                        it = str(self.recOldVoda[j])
                        if it == 'None':
                            it = '-'
                    elif j == 9:
                        item.setTextAlignment(QtCore.Qt.AlignCenter)
                        it = self.recOldVoda[j]     # Идентификатор пробы воды
                        it2 = str(self.recOldVoda[j + 1])  # Лабораторный номер пробы воды
                        if it == 0 or it is None:
                            it2 = '-'
                    else:
                        item.setTextAlignment(QtCore.Qt.AlignLeft)
                        it = str(self.recOldVoda[j])
                    if j < 9:
                        item.setData(it, QtCore.Qt.EditRole)
                    elif j == 9:
                        item.setData(it2, QtCore.Qt.EditRole)
                        item.setData(it, QtCore.Qt.UserRole)
                    self.modelVoda.setItem(i, j, item)
        else:
            self.tableVoda.setEnabled(False)
            self.toolButton_6.setEnabled(False)
            self.modelVoda.removeRows(0, self.modelVoda.rowCount())
        self.recAllNewVoda = self.recAllOldVoda

    def refreshTableObrazec(self) -> set:
        """Обновление таблицы Описание образцов грунта"""
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT id,
                                id_burehole,
                                num_obrazec,
                                glub_otbor,
                                mater_obr,
                                vid_obr,
                                lab_num,
                                cvet,
                                textura,
                                prosloi,
                                vkluc,
                                newvkluc
                            FROM public.obrazec
                            WHERE obrazec.id_burehole = %(v2)s
                            ORDER BY obrazec.id ASC""", {'v2': self.bhId})
            self.recAllObrazec = curs.fetchall()  # Полный исходный список образцов
            self.tableObrazec.setRowCount(len(self.recAllObrazec))
        self.recCountObrazec = len(self.recAllObrazec)
        self.recAllOldObrazec = []
        if self.recCountObrazec > 0:
            self.tableObrazec.setEnabled(True)
            self.toolButton_4.setEnabled(True)
            self.tableObrazec.clearContents()
            for i in range(0, self.recCountObrazec):
                self.recOldObrazec = self.recAllObrazec[i][0:12]
                oldObrazecOne = []
                for j in range(0, 12):  # Занесение данных в ячейки таблицы
                    item = QtWidgets.QTableWidgetItem()
                    if j == 3:
                        item.setTextAlignment(QtCore.Qt.AlignCenter)
                        it = str(self.recOldObrazec[j])
                    else:
                        item.setTextAlignment(QtCore.Qt.AlignCenter)    # Выравнивание по центру (4)
                        it = self.recOldObrazec[j]
                    item.setData(QtCore.Qt.EditRole, it)
                    self.tableObrazec.setItem(i, j, item)
                    self.tableObrazec.visualItemRect(item)
                    oldObrazecOne.append(it)
                self.recAllOldObrazec.append(oldObrazecOne)  # Формирование исходного списка образцов
        else:
            self.tableObrazec.setEnabled(False)
            self.toolButton_4.setEnabled(False)
            self.tableObrazec.clearContents()
        self.recAllNewObrazec = self.recAllOldObrazec

    def refreshTableBurehole(self) -> set:
        """Обновление таблицы пунктов отбора проб"""
        self.recCountBurehole = len(self.recAll)
        self.recAllOldBurehole = []
        if self.recCountBurehole > 0:
            self.modelBurehole.setRowCount(self.recCountBurehole)
            self.tableBurehole.setEnabled(True)
            self.modelBurehole.removeRows(0, self.modelBurehole.rowCount())
            item0 = QtWidgets.QTableWidgetItem()
            item0.setData(QtCore.Qt.EditRole, id)
            for i in range(0, self.recCountBurehole):  # Занесение данных в ячейки таблицы
                self.recOldBurehole = self.recAll[i][3:25]
                listrow = list(self.recOldBurehole)  # Список одной строки
                item0 = QtGui.QStandardItem(str(listrow[0]))  # ID PointSzond
                item1 = QtGui.QStandardItem(str(listrow[1]))  # ID Obekt
                item2 = QtGui.QStandardItem(str(listrow[2]))  # Вид выработки
                item3 = QtGui.QStandardItem(str(listrow[3]))  # Номер скважины
                item4 = QtGui.QStandardItem(str(listrow[20]))  # Буровая установка
                QtGui.QStandardItem.setData(item4, str(listrow[4]), role=QtCore.Qt.UserRole)  # ID  буровой установки
                item5 = QtGui.QStandardItem(str(listrow[5]))  # Способ проходки
                item6 = QtGui.QStandardItem(str(listrow[6]))  # Диаметр
                if item6.text() == 'None':
                    item6.setData('-', role=QtCore.Qt.DisplayRole)
                item7 = QtGui.QStandardItem(str(listrow[21]))  # Система координат
                QtGui.QStandardItem.setData(item7, str(listrow[7]), role=QtCore.Qt.UserRole)  # ID системы координат
                item8 = QtGui.QStandardItem(str(listrow[8]))  # Координата Х
                if item8.text() == 'None':
                    item8.setData('-', role=QtCore.Qt.DisplayRole)
                item9 = QtGui.QStandardItem(str(listrow[9]))  # Координата Y
                if item9.text() == 'None':
                    item9.setData('-', role=QtCore.Qt.DisplayRole)
                item10 = QtGui.QStandardItem(str(listrow[10]))  # Абсолютная отметка, 99
                if item10.text() == 'None':
                    item10.setData('-', role=QtCore.Qt.DisplayRole)
                item11 = QtGui.QStandardItem(str(listrow[11]))  # Глубина, м
                if item11.text() == 'None':
                    item11.setData('-', role=QtCore.Qt.DisplayRole)
                item12 = QtGui.QStandardItem(str(listrow[12]))  # Начало работ
                item13 = QtGui.QStandardItem(str(listrow[13]))  # Окончание работ
                item14 = QtGui.QStandardItem(str(listrow[17]))  # Буровик (ФИО)
                QtGui.QStandardItem.setData(item14, str(listrow[14]), role=QtCore.Qt.UserRole)  # ID буровика
                item15 = QtGui.QStandardItem(str(listrow[18]))  # Геолог (ФИО)
                QtGui.QStandardItem.setData(item15, str(listrow[15]), role=QtCore.Qt.UserRole)  # ID геолога
                item16 = QtGui.QStandardItem(str(listrow[19]))  # Геодезист (ФИО)
                QtGui.QStandardItem.setData(item16, str(listrow[16]), role=QtCore.Qt.UserRole)  # ID геодезиста
                item0.setTextAlignment(QtCore.Qt.AlignCenter)
                item1.setTextAlignment(QtCore.Qt.AlignCenter)
                item2.setTextAlignment(QtCore.Qt.AlignCenter)
                item3.setTextAlignment(QtCore.Qt.AlignCenter)
                item4.setTextAlignment(QtCore.Qt.AlignCenter)
                item5.setTextAlignment(QtCore.Qt.AlignCenter)
                item6.setTextAlignment(QtCore.Qt.AlignCenter)
                item7.setTextAlignment(QtCore.Qt.AlignCenter)
                item8.setTextAlignment(QtCore.Qt.AlignCenter)
                item9.setTextAlignment(QtCore.Qt.AlignCenter)
                item10.setTextAlignment(QtCore.Qt.AlignCenter)
                item11.setTextAlignment(QtCore.Qt.AlignCenter)
                item12.setTextAlignment(QtCore.Qt.AlignCenter)
                item13.setTextAlignment(QtCore.Qt.AlignCenter)
                item14.setTextAlignment(QtCore.Qt.AlignCenter)
                item15.setTextAlignment(QtCore.Qt.AlignCenter)
                item16.setTextAlignment(QtCore.Qt.AlignCenter)
                self.modelBurehole.appendRow([item0, item1, item2, item3, item4, item5, item6, item7, item8, item9,
                                                item10, item11, item12, item13, item14, item15, item16])
                oldBureholeOne = []
                for j in range(0, 17):  # Занесение данных в ячейки таблицы
                    it = listrow[j]
                    oldBureholeOne.append(it)
                self.recAllOldBurehole.append(oldBureholeOne)  # Формирование исходного списка пунктов отбора проб
        else:
            self.tableBurehole.setEnabled(False)
            self.toolButton_2.setEnabled(False)
            self.toolButton_4.setEnabled(False)
            self.toolButton_6.setEnabled(False)
            self.modelBurehole.removeRows(0, self.modelBurehole.rowCount())
        self.recAllNewBurehole = self.recAllOldBurehole
        self.tableBurehole.selectRow(self.recNum)

    def refreshToolbar(self) -> set:
        """Обновляет панель инструментов"""
        if self.recNum == 0 and self.recCount > 1:
            form.action_8.setEnabled(False)  # Первая запись
            form.action_9.setEnabled(False)  # Предыдущая запись
            form.action_10.setEnabled(True)  # Следующая запись
            form.action_11.setEnabled(True)  # Последняя запись
        elif self.recNum in range(1, self.recCount - 1):
            form.action_8.setEnabled(True)  # Первая запись
            form.action_9.setEnabled(True)  # Последняя запись
            form.action_10.setEnabled(True)  # Следующая запись
            form.action_11.setEnabled(True)  # Последняя запись
        elif self.recNum == self.recCount - 1 and self.recCount > 1:
            form.action_8.setEnabled(True)  # Первая запись
            form.action_9.setEnabled(True)  # Предыдущая запись
            form.action_10.setEnabled(False)  # Следующая запись
            form.action_11.setEnabled(False)  # Последняя запись
        else:
            form.action_8.setEnabled(False)  # Первая запись
            form.action_9.setEnabled(False)  # Предыдущая запись
            form.action_10.setEnabled(False)  # Следующая запись
            form.action_11.setEnabled(False)  # Последняя запись

    def setRow(self) -> set:
        if self.currentIndex() == 0:
            self.refreshToolbar()
            self.refreshRecord()
        elif self.currentIndex() == 1:
            self.tableBurehole.selectRow(self.recNum)
        else:
            self.refreshRecord()

    def currentRow(self) -> set:
        """Определение номера записи (строки)  и установка движка на эту запись"""
        if self.currentIndex() == 1:
            recNum = self.recNum
            self.recNum = self.selmodelBurehole.currentIndex().row()
            if self.recNum < 0:
                self.recNum = recNum
            self.refreshToolbar()

    def showEvent(self, e) -> set:
        """Выполняет действия при выводе окна на экран"""
        form.action_4.setEnabled(False)
        QtWidgets.QTabWidget.showEvent(self, e)

    def hideEvent(self, e) -> set:
        """Выполняет действия при скрытии окна"""
        form.action_4.setEnabled(True)
        form.bureholewin = None
        if self.recAll != []:
            self.asktoSave()
        form.refreshMain()
        QtWidgets.QTabWidget.hideEvent(self, e)

    def nextRecord(self) -> set:
        """Становится на следующей записи"""
        self.recNum += 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableBurehole.selectRow(self.recNum)

    def priorRecord(self) -> set:
        """Становится на предыдущей записи"""
        self.recNum -= 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableBurehole.selectRow(self.recNum)

    def firstRecord(self) -> set:
        """Становится на первой записи"""
        self.recNum = 0
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableBurehole.selectRow(self.recNum)

    def lastRecord(self) -> set:
        """Становится на последней записи"""
        if self.recCount > 0:
            self.recNum = self.recCount - 1
            self.refreshToolbar()
            self.asktoSave()
            self.refreshRecord()
            self.tableBurehole.selectRow(self.recNum)

    def sortRecord(self) -> set:
        """Сортировка записей"""
        self.recAll.sort(key=itemgetter(0,6))
        form.action_13.setEnabled(False)  # Сортировать
        form.action_14.setEnabled(True)  # Снять сортировку
        self.refreshRecord()

    def desortRecord(self) -> set:
        """Отмена сортировки, что соответствует сортировке по ID"""
        self.recAll.sort(key=itemgetter(3))
        form.action_13.setEnabled(True)  # Сортировать
        form.action_14.setEnabled(False)  # Снять сортировку
        self.refreshRecord()

    def addRecord(self) -> set:
        """Добавляет новую запись"""
        global idActivObekt
        with UseDatebase(dbconfig) as curs:
            curs.execute("INSERT INTO burehole (id_obekt) VALUES (%(v0)s);", {'v0': idActivObekt})
        self.requerySelect()
        self.recCount = len(self.recAll)
        if self.recCount == 1:
            self.recNum = 0
            self.recOld = self.recAll[self.recNum]
        self.refreshRecord()
        self.lastRecord()
        self.refreshToolbar()
        self.refreshRecord()

    def addStrate(self) -> set:
        """Добавляет слой"""
        with UseDatebase(dbconfig) as curs:
            curs.execute("SELECT max(num_strate) + 1 FROM strate WHERE strate.id_burehole = %(v1)s;",
                         {'v1': self.bhId})
            numStrate = curs.fetchone()
            numNewStrate = numStrate[0]
            if numNewStrate == None:
                numNewStrate = 1
        with UseDatebase(dbconfig) as curs:
            curs.execute("INSERT INTO strate (id_burehole, num_strate) VALUES (%(v2)s, %(v3)s);",
                         {'v2': self.bhId, 'v3': numNewStrate})
        self.saveRecordStrate()
        self.refreshTableStrate()
        self.tableStrate.setFocus()
        sel = self.tableStrate.selectionModel()
        ind = self.tableStrate.model().index(numNewStrate-1,2)
        sel.setCurrentIndex(ind,QtCore.QItemSelectionModel.NoUpdate)

    def addVoda(self) -> set:
        """Добавляет горизонт грунтовых вод"""
#        try:
        with UseDatebase(dbconfig) as curs:
            curs.execute("SELECT max(num_voda) + 1 FROM voda WHERE voda.id_burehole = %(v1)s;",
                         {'v1': self.bhId})
            numVoda = curs.fetchone()
            numNewVoda = numVoda[0]
            if numNewVoda == None:
                numNewVoda = 1
        with UseDatebase(dbconfig) as curs:
            curs.execute("INSERT INTO voda (id_burehole, num_voda) VALUES (%(v2)s, %(v3)s);",
                         {'v2': self.bhId, 'v3': numNewVoda})
        self.saveRecordVoda()
        self.refreshTableVoda()
        self.tableVoda.setFocus()
        sel = self.tableVoda.selectionModel()
        ind = self.tableVoda.model().index(numNewVoda - 1, 2)
        sel.setCurrentIndex(ind, QtCore.QItemSelectionModel.NoUpdate)
#        except:
#            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "Пункти відбору проб",
#                                                     "Додавання запису в таблицю Опис водоносних горизонтів не можливо."
#                                                     "\nЗ початку потрібно занести усі зразки в таблицю Опис зразків "
#                                                     "та зберегти їх")
#            btnOK = QtWidgets.QPushButton("&OK")
#            btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
#            self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
#            result = self.formMassWin.exec()

    def addObrazec(self) -> set:
        """Добавляет образец"""
#        with UseDatebase(dbconfig) as curs:
#            curs.execute("SELECT max(num_obrazec) + 1 FROM obrazec WHERE obrazec.id_burehole = %(v1)s;",
#                         {'v1': self.bhId})
#            numObrazec = curs.fetchone()
#            numNewObrazec = numObrazec[0]
#            if numNewObrazec == None:
#                numNewObrazec = 1
        with UseDatebase(dbconfig) as curs:
            curs.execute("INSERT INTO obrazec (id_burehole) VALUES (%(v2)s);",
                         {'v2': self.bhId})
        self.saveRecordObrazec()
        self.refreshTableObrazec()
        numNewObrazec = self.recCountObrazec
        self.tableObrazec.setFocus()
        sel = self.tableObrazec.selectionModel()
        ind = self.tableObrazec.model().index(numNewObrazec - 1, 2)
        sel.setCurrentIndex(ind, QtCore.QItemSelectionModel.NoUpdate)

    def delRecord(self) -> set:
        """Удаляет текущую запись"""
        self.refreshRecord()
        val10 = self.recOld[3]  # ID виробки
        if val10 is not None:
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                           "Характеристика пункту відбору проб",
                                           "Ви бажаєте видалити поточний запис з порядковим номером - " + str(
                                               self.recNum + 1) +
                                           " та номером виробки - " + str(self.recOld[6]) + "?")
            btnYes = QtWidgets.QPushButton("&Так")
            btnNo = QtWidgets.QPushButton("&Ні")
            btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
            self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
            self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
            self.formMassWin.setDefaultButton(btnYes)
            result = self.formMassWin.exec()
            if result == 0:
                try:
                    with UseDatebase(dbconfig) as curs:
                        curs.execute("DELETE FROM burehole WHERE id = %(v10)s;", {'v10': val10})
                    self.requerySelect()
                    self.recCount = len(self.recAll)
                    if self.recCount > 0:
                        self.firstRecord()
                        self.refreshRecord()
                        self.refreshToolbar()
                    else:
                        self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information, "Пункти відбору проб",
                                                       "Видалено останній запис")
                        btnOK = QtWidgets.QPushButton("&OK")
                        btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                        self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                        result = self.formMassWin.exec()
                        if result == 0:
                            self.formMassWin.close()
                            self.parent().close()
                except:
                    self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "Пункти відбору проб",
                                                            "Видалення не можливо. "
                                                            "З поточним записом пов'язані записи в таблицях: "
                                                            "Опис шарів ґрунту та води, "
                                                            "Опис водоносних горизонтів, "
                                                            "Опис зразків."
                                                            "\nПотрібно виконати попереднє видалення усіх записів "
                                                            "в перелічених таблицях")
                    btnOK = QtWidgets.QPushButton("&OK")
                    btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                    self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                    result = self.formMassWin.exec()
                    if result == 0:
                        self.formMassWin.close()
            else:
                pass
        else:
            pass

    def delStrate(self) -> set:
        """Удаляет слой из таблицы послойного описания"""
        i = self.tableStrate.currentIndex().row()
        idStrate = self.tableStrate.item(i, 0).data(QtCore.Qt.EditRole)
        with UseDatebase(dbconfig) as curs:
            curs.execute("DELETE FROM strate WHERE id = %(v0)s;", {'v0': idStrate})
        self.refreshTableStrate()

    def delVoda(self) -> set:
        """Удаляет горизонт из таблицы описания грунтовых вод"""
        i = self.tableVoda.currentIndex().row()
        idVoda = self.modelVoda.item(i, 0).data(QtCore.Qt.EditRole)
        with UseDatebase(dbconfig) as curs:
            curs.execute("DELETE FROM voda WHERE id = %(v0)s;", {'v0': idVoda})
        self.refreshTableVoda()

    def delObrazec(self) -> set:
        """Удаляет образец из таблицы характеристик образцов"""
        try:
            i = self.tableObrazec.currentIndex().row()
            idObrazec = self.tableObrazec.item(i, 0).data(QtCore.Qt.EditRole)
            with UseDatebase(dbconfig) as curs:
                curs.execute("DELETE FROM obrazec WHERE id = %(v0)s;", {'v0': idObrazec})
            self.refreshTableObrazec()
        except:
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "Пункти відбору проб",
                                                     "Видалення не можливо. "
                                                     "З поточним записом пов'язані записи у залежних таблицях "
                                                     "властивостів ґрунтів або результатів лабораторних випробувань"
                                                     " даного зразка."
                                                     "\nПотрібно виконати попереднє видалення усіх записів "
                                                     "в указаних таблицях.")
            btnOK = QtWidgets.QPushButton("&OK")
            btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
            result = self.formMassWin.exec()
            if result == 0:
                self.formMassWin.close()

    def asktoSave(self) -> set:
        """Проверяет наличие изменений в характеристиках выработки"""
        if self.recOld != []:
            # Считывание данных и обновление списка согласно значений экранной формы
            val0 = self.recOld[0]  # ID объекта
            val1 = self.recOld[1]  # Номер договора
            val2 = self.recOld[2]  # Архивный номер отчета
            val3 = self.recOld[3]  # ID выработки
            val4 = self.recOld[4]  # ID объекта в файле выработок
            val5 = self.comboBox.currentText()  # Вид выработки
            val6 = self.lineEdit.text()  # Номер выработки
            val7 = self.comboBox_6.currentData(QtCore.Qt.UserRole)  # ID буровой установки
            val8 = self.comboBox_2.currentText()  # Способ проходки
            if self.spinBox.value() == 0:
                val9 = None
            else:
                val9 = self.spinBox.value()  # Диаметр
            val10 = self.comboBox_7.currentData(QtCore.Qt.UserRole)  # ID системы координат
            if self.doubleSpinBox.value() == 0:
                val11 = None
            else:
                val11 = self.doubleSpinBox.value()  # Координата Х
            if self.doubleSpinBox_2.value() == 0:
                val12 = None
            else:
                val12 = self.doubleSpinBox_2.value()  # Координата Y
            if self.doubleSpinBox_3.value() == -10000.00:
                val13 = None
            else:
                val13 = self.doubleSpinBox_3.value()  # Абс. отметка
            if self.doubleSpinBox_4.value() == 0:
                val14 = None
            else:
                val14 = self.doubleSpinBox_4.value()  # Глубина
            val15 = self.dateEdit.date().toPyDate()  # Начало работ
            val16 = self.dateEdit_2.date().toPyDate()  # Окончание работ
            val17 = self.comboBox_3.currentData(QtCore.Qt.UserRole)  # ID буровика
            val18 = self.comboBox_4.currentData(QtCore.Qt.UserRole)  # ID геолога
            val19 = self.comboBox_5.currentData(QtCore.Qt.UserRole)  # ID геодезиста
            self.recNew = [val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, val10, val11, val12, val13,
                           val14, val15, val16, val17, val18, val19]
            askBurehole = (self.recNew == self.recOld)
            askStrate = self.asktoSaveStrate()
            askVoda = self.asktoSaveVoda()
            askObrazec = self.asktoSaveObrazec()
            askTableBurehole = self.asktoSaveTableBurehole()
            if askBurehole == False or askStrate == False or askVoda == False or askObrazec == False:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                               "Характеристика пункту відбору проб",
                                               "Є незбережені дані характеристики пункту відбору проб. "
                                               "\nВи бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecord(False)
                else:
                    pass
            elif askTableBurehole == False:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                               "Характеристика пункту відбору проб",
                                               "Є незбережені дані у таблиці характеристики пунктів відбору проб. "
                                               "\nВи бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecordTableBurehole(False)
                else:
                    pass

    def asktoSaveStrate(self) -> set:
        """Проверка наличия изменений в таблице Послойное описание выработки"""
        # Считывание данных и обновление списка послойного описания выработки согласно значений экранной формы
        self.recAllNewStrate = []
        for i in range(0, self.recCountStrate):
            rec = []
            for j in range(0, 9):
                el = self.tableStrate.item(i, j).data(QtCore.Qt.EditRole)  # Определение элемента текущей записи
                rec.append(el)  # Формирование текущей записи из элементов
            self.recAllNewStrate.append(
                rec)  # Формирование обновленного списка послойного описания выработки (записей-кортежей)
        if self.recAllNewStrate == self.recAllOldStrate:
            ask = True
        else:
            ask = False
        return ask

    def asktoSaveVoda(self) -> set:
        """Проверка наличия изменений в таблице Описание грунтовых вод"""
        # Считывание данных и обновление списка послойного описания выработки согласно значений экранной формы
        self.recAllNewVoda = []
        for i in range(0, self.recCountVoda):
            rec = []
            for j in range(0, 10):
                if j == 9:
                    el = int(self.modelVoda.item(i, j).data(QtCore.Qt.UserRole))  # Определение элемента текущей записи
                    el2 = str(self.modelVoda.item(i, j).data(QtCore.Qt.EditRole))  # Определение элемента текущей записи
                    if el2 == '-' or el2 == 'None':
                        el2 = None
                elif j != 9:
                    el = self.modelVoda.item(i, j).data(QtCore.Qt.EditRole)  # Определение элемента текущей записи
                    if j == 4 or j == 5 or j == 6:
                        el = dc.Decimal(el)
                    elif j == 8:
                        if el == '-':
                            el = None
                        else:
                            el = dc.Decimal(el)
                    elif j == 0 or j == 1 or j == 2:
                        el = int(el)
                    else:
                        el = str(el)
                rec.append(el)  # Формирование текущей записи из элементов
            rec.append(el2)
            self.recAllNewVoda.append(tuple(rec))  # Формирование обновленного списка описания воды (записей-кортежей)
        if self.recAllNewVoda == self.recAllOldVoda:
            ask = True
        else:
            ask = False
        return ask

    def asktoSaveObrazec(self) -> set:
        """Проверка наличия изменений в таблице Описание образцов"""
        # Считывание данных и обновление списка послойного описания выработки согласно значений экранной формы
        self.recAllNewObrazec = []
        for i in range(0, self.recCountObrazec):
            rec = []
            for j in range(0, 12):
                el = self.tableObrazec.item(i, j).data(QtCore.Qt.EditRole)  # Определение элемента текущей записи
                rec.append(el)  # Формирование текущей записи из элементов
            self.recAllNewObrazec.append(rec)  # Формирование обновленного списка описания образцов (записей-кортежей)
        if self.recAllNewObrazec == self.recAllOldObrazec:
            ask = True
        else:
            ask = False
        return ask

    def asktoSaveTableBurehole(self) -> set:
        """Проверка наличия изменений в таблице точек статического зондирования"""
        # Считывание данных и обновление списка согласно значений экранной формы
        self.recAllNewBurehole = []
        for i in range(0, self.recCountBurehole):
            rec = []
            for j in range(0, 17):
                if j in range(0, 2):
                    el = int(self.modelBurehole.item(i, j).data(QtCore.Qt.EditRole))  # ID точки, ID объекта
                elif j in range(2, 4):
                    el = str(self.modelBurehole.item(i, j).data(QtCore.Qt.EditRole))  # Тип пункта, номер
                elif j == 4:
                    el = int(self.modelBurehole.item(i, j).data(QtCore.Qt.UserRole))  # ID буровой установки
                elif j == 5:
                    el = str(self.modelBurehole.item(i, j).data(QtCore.Qt.EditRole))  # способ проходки
                elif j == 6:
                    if self.modelBurehole.item(i, j).data(QtCore.Qt.EditRole) == 'None':
                        el = None
                    elif self.modelBurehole.item(i, j).data(QtCore.Qt.EditRole) == '-':
                        el = None
                    else:
                        el = int(self.modelBurehole.item(i, j).data(QtCore.Qt.EditRole))  # Диаметр, мм
                elif j == 7:
                    if self.modelBurehole.item(i, j).data(QtCore.Qt.UserRole) is None \
                            or self.modelBurehole.item(i, j).data(QtCore.Qt.UserRole) == 'None' \
                            or self.modelBurehole.item(i, j).data(QtCore.Qt.UserRole) == '-':
                        el = None
                    else:
                        el = int(self.modelBurehole.item(i, j).data(QtCore.Qt.UserRole))  # ID системы коордиат
                elif j in range(8, 12):
                    if self.modelBurehole.item(i, j).data(QtCore.Qt.EditRole) == 'None':
                        el = None
                    elif self.modelBurehole.item(i, j).data(QtCore.Qt.EditRole) == '-':
                        el = None
                    else:
                        el = dc.Decimal(self.modelBurehole.item(i, j).data(QtCore.Qt.EditRole))  # X, Y, Z, глубина
                elif j in range(12, 14):
                    strDate = str(self.modelBurehole.item(i, j).data(QtCore.Qt.EditRole)) # Даты
                    el = datetime.date(int(strDate.split('-')[0]),
                                        int(strDate.split('-')[1]),
                                        int(strDate.split('-')[2]))
                elif j in range(14, 17):
                    if self.modelBurehole.item(i, j).data(QtCore.Qt.UserRole) is None \
                            or self.modelBurehole.item(i, j).data(QtCore.Qt.UserRole) == 'None' \
                            or self.modelBurehole.item(i, j).data(QtCore.Qt.UserRole) == '-':
                        el = None
                    else:
                        el = int(self.modelBurehole.item(i, j).data(QtCore.Qt.UserRole))  # ID буровика, геолога, геодезиста
                else:
                    pass
                if el == 'None':
                    el = None
                rec.append(el)  # Формирование текущей записи из элементов
            self.recAllNewBurehole.append(rec)  # Формирование обновленного списка (записей-кортежей)
        if self.recAllNewBurehole == self.recAllOldBurehole:
            ask = True
        else:
            ask = False
        return ask

    def saveAll(self) -> set:
        """Сохраняет изменения по нажатию кнопки Сохранить на панели инструментов"""
        if self.currentIndex() == 0:
            self.saveRecord(False)
        if self.currentIndex() == 1:
#            self.saveRecordTableBurehole(False)
            self.setCurrentIndex(0)
            self.setCurrentIndex(1)
        else:
            pass

    def saveRecord(self, ask) -> set:
        """Сохраняет изменения в записи и формирует новый курсор"""
        if ask == False:
            val0 = self.recOld[0]  # ID объекта
            val1 = self.recOld[1]  # Номер договора
            val2 = self.recOld[2]  # Архивный номер отчета
            val3 = self.recOld[3]  # ID выработки
            val4 = self.recOld[4]  # ID объекта в файле выработок
            val5 = self.comboBox.currentText()  # Вид выработки
            val6 = self.lineEdit.text()  # Номер выработки
            val7 = self.comboBox_6.currentData(QtCore.Qt.UserRole)  # ID буровой установки
            val8 = self.comboBox_2.currentText()  # Способ проходки
            if self.spinBox.value() == 0:
                val9 = None
            else:
                val9 = self.spinBox.value()  # Диаметр
            val10 = self.comboBox_7.currentData(QtCore.Qt.UserRole)  # ID системы координат
            if self.doubleSpinBox.value() == 0.00:
                val11 = None
            else:
                val11 = self.doubleSpinBox.value()  # Координата Х
            if self.doubleSpinBox_2.value() == 0.00:
                val12 = None
            else:
                val12 = self.doubleSpinBox_2.value()  # Координата Y
            if self.doubleSpinBox_3.value() == -10000.00:
                val13 = None
            else:
                val13 = self.doubleSpinBox_3.value()  # Абс. отметка
            if self.doubleSpinBox_4.value() == 0.00:
                val14 = None
            else:
                val14 = self.doubleSpinBox_4.value()  # Глубина
            val15 = self.dateEdit.date().toPyDate()  # Начало работ
            val16 = self.dateEdit_2.date().toPyDate()  # Окончание работ
            val17 = self.comboBox_3.currentData(QtCore.Qt.UserRole)  # ID буровика
            val18 = self.comboBox_4.currentData(QtCore.Qt.UserRole)  # ID геолога
            val19 = self.comboBox_5.currentData(QtCore.Qt.UserRole)  # ID геодезиста
            with UseDatebase(dbconfig) as curs:
                curs.execute("""UPDATE burehole
                                SET vidhole = %(v5)s,
                                    num_hole = %(v6)s, 
                                    id_bur = %(v7)s,
                                    vidbur = %(v8)s,
                                    diametr = %(v9)s, 
                                    id_syskoord =  %(v10)s,
                                    koord_x = %(v11)s, 
                                    koord_y = %(v12)s, 
                                    koord_z = %(v13)s, 
                                    glub = %(v14)s, 
                                    date_start = %(v15)s, 
                                    date_finish = %(v16)s, 
                                    id_burman = %(v17)s, 
                                    id_geoman = %(v18)s,
                                    id_gdzman = %(v19)s
                                WHERE id = %(v3)s;""",
                             {'v5': val5, 'v6': val6, 'v7': val7,
                              'v8': val8, 'v9': val9, 'v10': val10, 'v11': val11,
                              'v12': val12, 'v13': val13, 'v14': val14, 'v15': val15,
                              'v16': val16, 'v17': val17, 'v18': val18, 'v19': val19, 'v3': val3})
            self.requerySelect()
            self.saveRecordStrate()
            self.saveRecordObrazec()
            self.saveRecordVoda()
            self.refreshRecord()
        else:
            pass

    def saveRecordStrate(self) -> set:
        """Сохранение записей таблицы послойного описания выработки"""
        ask = self.asktoSaveStrate()
        if ask == False:
            for i in range(0, self.recCountStrate):
                recStrate = self.recAllNewStrate[i]
                recStrate = list(recStrate)
                val0 = recStrate[0]
                val1 = recStrate[1]
                val2 = recStrate[2]
                val3 = recStrate[3]
                val4 = recStrate[4]
                val5 = recStrate[5]
                val6 = recStrate[6]
                val7 = recStrate[7]
                val8 = recStrate[8]
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE strate
                                    SET num_strate = %(v2)s, 
                                        ige = %(v3)s, 
                                        vozrast = %(v4)s, 
                                        strate1 = %(v5)s, 
                                        strate2 = %(v6)s, 
                                        name_strate = %(v7)s, 
                                        kategor = %(v8)s
                                    WHERE id = %(v0)s;""",
                                 {'v2': val2, 'v3': val3, 'v4': val4, 'v5': val5,
                                  'v6': val6, 'v7': val7, 'v8': val8, 'v0': val0})
        else:
            pass

    def saveRecordVoda(self) -> set:
        """Сохранение записей таблицы описания воды"""
        ask = self.asktoSaveVoda()
        if ask == False:
            for i in range(0, self.recCountVoda):
                recVoda = self.recAllNewVoda[i]
                recVoda = list(recVoda)
                val0 = recVoda[0]
                val1 = recVoda[1]
                val2 = recVoda[2]
                val3 = recVoda[3]
                val4 = recVoda[4]
                val5 = recVoda[5]
                val6 = recVoda[6]
                val7 = recVoda[7]
                val8 = recVoda[8]
                val9 = recVoda[9]
                if val8 == '-':
                    val8 = None
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE voda 
                                    SET num_voda = %(v2)s, 
                                        vozrast = %(v3)s, 
                                        temper = %(v4)s, 
                                        voda1 = %(v5)s, 
                                        voda2 = %(v6)s, 
                                        name_voda = %(v7)s,
                                        glubupor = %(v8)s,
                                        id_obrazec = %(v9)s
                                    WHERE id = %(v0)s;""",
                                 {'v2': val2, 'v3': val3, 'v4': val4, 'v5': val5,
                                  'v6': val6, 'v7': val7, 'v8': val8, 'v9': val9, 'v0': val0})
        else:
            pass

    def saveRecordObrazec(self) -> set:
        """Сохранение записей таблицы описания образцов"""
        ask = self.asktoSaveObrazec()
        if ask == False:
            for i in range(0, self.recCountObrazec):
                recObrazec = self.recAllNewObrazec[i]
                recObrazec = list(recObrazec)
                val0 = recObrazec[0]
                val1 = recObrazec[1]
                val2 = recObrazec[2]
                val3 = recObrazec[3]
                val4 = recObrazec[4]
                val5 = recObrazec[5]
                val6 = recObrazec[6]
                val7 = recObrazec[7]
                val8 = recObrazec[8]
                val9 = recObrazec[9]
                val10 = recObrazec[10]
                val11 = recObrazec[11]
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE obrazec  
                                    SET num_obrazec = %(v2)s, 
                                        glub_otbor = %(v3)s, 
                                        mater_obr = %(v4)s, 
                                        vid_obr = %(v5)s, 
                                        lab_num = %(v6)s, 
                                        cvet = %(v7)s, 
                                        textura = %(v8)s,
                                        prosloi = %(v9)s, 
                                        vkluc = %(v10)s, 
                                        newvkluc = %(v11)s 
                                    WHERE id = %(v0)s;""",
                                 {'v2': val2, 'v3': val3, 'v4': val4, 'v5': val5, 'v6': val6,
                                  'v7': val7, 'v8': val8, 'v9': val9, 'v10': val10, 'v11': val11, 'v0': val0})
        else:
            pass

    def saveRecordTableBurehole(self, ask) -> set:
        """Сохранение записей таблицы пунктов с отбором проб"""
        if ask == False:
            for i in range(0, self.recCountBurehole):
                recTabBurehole = self.recAllNewBurehole[i]
                val0 = recTabBurehole[0]    # ID выработки
                val1 = recTabBurehole[1]    # ID объекта
                val2 = recTabBurehole[2]    # Вид выработки
                val3 = recTabBurehole[3]    # Номер выработки
                val4 = recTabBurehole[4]    # ID буровой установки
                val5 = recTabBurehole[5]    # Вид бурения
                val6 = recTabBurehole[6]    # Диаметр
                val7 = recTabBurehole[7]    # Система координат
                val8 = recTabBurehole[8]    # Х
                val9 = recTabBurehole[9]    # Y
                val10 = recTabBurehole[10]    # Z
                val11 = recTabBurehole[11]  # Глубина
                val12 = recTabBurehole[12]  # Дата начала работ
                val13 = recTabBurehole[13]  # Дата завершения работ
                val14 = recTabBurehole[14]  # ID бурильщика
                val15 = recTabBurehole[15]  # ID геолога
                val16 = recTabBurehole[16]  # ID геодезиста
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE burehole
                                    SET vidhole =  %(v2)s,
                                        num_hole = %(v3)s,
                                        id_bur = %(v4)s,
                                        vidbur = %(v5)s,
                                        diametr = %(v6)s,
                                        id_syskoord = %(v7)s,
                                        koord_x = %(v8)s, 
                                        koord_y = %(v9)s, 
                                        koord_z = %(v10)s, 
                                        glub = %(v11)s, 
                                        date_start = %(v12)s, 
                                        date_finish = %(v13)s, 
                                        id_burman = %(v14)s,
                                        id_geoman = %(v15)s,
                                        id_gdzman = %(v16)s
                                    WHERE id = %(v0)s;""",
                                 {'v2': val2, 'v3': val3, 'v4': val4,
                                  'v5': val5, 'v6': val6, 'v7': val7, 'v8': val8,
                                  'v9': val9, 'v10': val10, 'v11': val11, 'v12': val12,
                                  'v13': val13, 'v14': val14, 'v15': val15, 'v16': val16, 'v0': val0})
            self.requerySelect()
            self.refreshRecord()
        else:
            pass


class GranWindow(QtWidgets.QTabWidget, egclasswin.Ui_Gran_win):
    def __init__(self) -> set:
        """Инициализация окна Грансостава"""
        super().__init__()
        self.setupUi(self)
        global idActivObekt
        self.recAllOldGran = []
        self.recCountGran = 0
        # Подготовка инструментов для рисования
        self.penblack = QtGui.QPen(QtCore.Qt.black)
        self.penblackp = QtGui.QPen(QtCore.Qt.black, 1, QtCore.Qt.DotLine)
        self.brushr = QtGui.QBrush(QtCore.Qt.red)
        self.brushy = QtGui.QBrush(QtCore.Qt.yellow)
        self.brushg = QtGui.QBrush(QtCore.Qt.green)
        self.brushb = QtGui.QBrush(QtCore.Qt.blue)
        self.penb = QtGui.QPen(self.brushb, 3)
        self.brushw = QtGui.QBrush(QtCore.Qt.white)
        self.brushbl = QtGui.QBrush(QtCore.Qt.black)
        self.brushgr = QtGui.QBrush(QtGui.QColor(245, 245, 245))
        # Оформление сцены графиков
        self.scene = QtWidgets.QGraphicsScene(0, 0, 410, 220, self.graphicsView)
        self.scene_2 = QtWidgets.QGraphicsScene(0, 0, 410, 220, self.graphicsView_2)
        self.graphicsView.setScene(self.scene)
        self.graphicsView_2.setScene(self.scene_2)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT obrazec.id, 
                                obrazec.lab_num
                            FROM obekt,
                                burehole,
                                obrazec
                            WHERE obekt.id = %(v)s 
                                AND obekt.id = burehole.id_obekt 
                                AND burehole.id = obrazec.id_burehole
                                AND obrazec.mater_obr != 'Вода'
                            ORDER BY obrazec.lab_num""", {'v': idActivObekt})
            recAll = curs.fetchall()
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox.addItem(recOne[1])
                self.comboBox.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT ispol.id, 
                                ispol.fio
                            FROM ispol
                            WHERE ispol.vidrab = 7 
                            ORDER BY ispol.fio""")
            recAll = curs.fetchall()
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox_2.addItem(recOne[1])
                self.comboBox_2.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
        self.kpId = 0  # ID грансостава
        self.modelGran = QtGui.QStandardItemModel(30, 21)  # Создание модели грансостава
        self.selmodelGran = QtCore.QItemSelectionModel(self.modelGran)  # Создание модели выделения
        self.modelGran.setRowCount(len(self.recAll))
        self.modelGran.setHorizontalHeaderLabels(['Labnum',
                                                  'ID gran',
                                                  'Лабораторний \nномер',
                                                  'Метод \nвизначення',
                                                  '>200 мм',
                                                  '200-10 мм',
                                                  '10-5 мм',
                                                  '5-2 мм',
                                                  '2-1 мм',
                                                  '1-0.5 мм',
                                                  '0.5-0.25 мм',
                                                  '0.25-0.1 мм',
                                                  '<0.1 мм',
                                                  '0.1-0.05 мм',
                                                  '0.05-0.01 мм',
                                                  '0.01-0.005 мм',
                                                  '<0.005 мм',
                                                  '0.005-0.001 мм',
                                                  '<0.001 мм',
                                                  'Ракуша',
                                                  'Окатан',
                                                  'Лаборант'])
        self.tableGran.setModel(self.modelGran)  # Создание представления
        self.tableGran.setSelectionModel(self.selmodelGran)  # Установить модель выделения в представлении
        self.tableGran.setGeometry(QtCore.QRect(0, 0, 888, 600))
        self.tableGran.setColumnWidth(0, 10)    # Лабораторный номер
        self.tableGran.setColumnWidth(1, 10)    # ID грансостава
        self.tableGran.setColumnWidth(2, 100)   # Лабораторный номер
        self.tableGran.setColumnWidth(3, 125)   # Метода определения грансостава
        self.tableGran.setColumnWidth(4, 60)    # >200
        self.tableGran.setColumnWidth(5, 70)    # 200-10
        self.tableGran.setColumnWidth(6, 60)    # 10-5
        self.tableGran.setColumnWidth(7, 50)    # 5-2
        self.tableGran.setColumnWidth(8, 50)    # 2-1
        self.tableGran.setColumnWidth(9, 60)    # 1-0.5
        self.tableGran.setColumnWidth(10, 80)   # 0.5-0.25
        self.tableGran.setColumnWidth(11, 80)   # 0.25-0.1
        self.tableGran.setColumnWidth(12, 60)   # <0.1
        self.tableGran.setColumnWidth(13, 80)   # 0.1-0.05
        self.tableGran.setColumnWidth(14, 90)   # 0.05-0.01
        self.tableGran.setColumnWidth(15, 90)   # 0.01-0.005
        self.tableGran.setColumnWidth(16, 70)   # <0.005
        self.tableGran.setColumnWidth(17, 100)  # 0.005-0.001
        self.tableGran.setColumnWidth(18, 80)   # <0.001
        self.tableGran.setColumnWidth(19, 60)   # Ракуша
        self.tableGran.setColumnWidth(20, 60)   # Окатаность грунта
        self.tableGran.setColumnWidth(21, 140)  # Лаборант
        self.tableGran.setColumnHidden(0, True)
        self.tableGran.setColumnHidden(1, True)
        self.requerySelect()
        if not self.recAll:
            self.addRecord()
        else:
            self.recCount = len(self.recAll)
            self.recNum = 0
            self.recOld = self.recAll[self.recNum]
            self.kpId = self.recOld[9]  # ID грансостава
        # Назначение делегатов
        self.DelegateGran = egdelegat.DoubleSpinBoxDelegate1()
        self.DelegateGran_ = egdelegat.DoubleSpinBoxDelegate1_()
        self.DelegateLabnumGran = egdelegat.ComboBoxDelegateLabnumGran()
        self.DelegateMetodGran = egdelegat.ComboBoxDelegateMetodGran()
        self.DelegateLabman = egdelegat.ComboBoxDelegateLabman()
        for i in range(4, 13):
            self.tableGran.setItemDelegate(self.DelegateGran)
        for i in range(13, 19):
            self.tableGran.setItemDelegateForColumn(i, self.DelegateGran_)
        self.tableGran.setItemDelegateForColumn(2, self.DelegateLabnumGran)
        self.tableGran.setItemDelegateForColumn(3, self.DelegateMetodGran)
        self.tableGran.setItemDelegateForColumn(21, self.DelegateLabman)
        # Назначение обработчиков сигналов
        self.currentChanged.connect(self.asktoSave)
        self.currentChanged.connect(self.setRow)
        self.radioButton.toggled.connect(self.refreshMetodGran)
        self.radioButton_2.toggled.connect(self.refreshMetodGran)
        self.radioButton_3.toggled.connect(self.refreshMetodGran)
        self.toolButton.clicked.connect(self.calcGran)
        self.modelGran.itemChanged.connect(self.refreshOneGroupGran)
        self.modelGran.itemChanged.connect(self.refreshItem_)
        self.selmodelGran.selectionChanged['QItemSelection', 'QItemSelection'].connect(self.currentRow)
        # Обновление формы и панели инструментов
        self.refreshRecord()
        self.refreshToolbar()
        self.refreshRecord()

    def requerySelect(self) -> set:
        """Обновление главного запроса для экранной формы"""
        global idActivObekt
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT burehole.id_obekt, 
                                obekt.numdog,
                                obekt.archnum,
                                obekt.stadia,
                                burehole.vidhole,
                                burehole.num_hole,
                                obrazec.num_obrazec,
                                obrazec.glub_otbor,
                                burehole.koord_z - obrazec.glub_otbor,
                                obrazec.lab_num,
                                gran.id,
                                gran.id_obrazec,
                                gran.metod,
                                gran.f200,
                                gran.f200_10,
                                gran.f10_5,
                                gran.f5_2,
                                gran.f2_1,
                                gran.f1_05,
                                gran.f05_025,
                                gran.f025_01,
                                gran.f01_,
                                gran.f01_005,
                                gran.f005_001,
                                gran.f001_0005,
                                gran.f0005_,
                                gran.f0005_0001,
                                gran.f0001_,
                                gran.rakusha,
                                gran.okatan,
                                gran.id_labman,
                                vlabman.fio
                            FROM public.obekt, 
                                public.burehole, 
                                public.obrazec, 
                                public.gran 
                                LEFT JOIN public.vlabman ON public.gran.id_labman = public.vlabman.id
                            WHERE obekt.id = burehole.id_obekt 
                            AND burehole.id = obrazec.id_burehole
                            AND obrazec.id = gran.id_obrazec
                            AND obekt.id = %(v0)s
                            ORDER BY gran.id ASC""", {'v0': idActivObekt})
            self.recAll = curs.fetchall()
            return self.recAll

    def refreshRecord(self) -> set:
        """Обновляет экранную форму с отображаемой записью"""
        # Передача значений из списка в экранную форму
        self.recOne = self.recAll[self.recNum]
        if self.recOne:
            self.label.setText("Ідентіфікатор об'єкта - " + str(self.recOne[0]) + "\n" +
                               "Номер договору - " + str(self.recOne[1]) + "\n" +
                               "Архівний номер звіту - " + self.recOne[2] + "\n" +
                               self.recOne[4] + " №" + self.recOne[5] + "\n" +
                               "Зразок №" + str(self.recOne[6]) + "\n" +
                               "Глибина відбору - " + str(self.recOne[7]))
                                                        # ID объекта, номер договора, архивный номер,
                                                        # вид и № выработки, № образца, глубина отбора
            self.obID = self.recOne[0]  # ID объекта
            self.numdog = self.recOne[1]  # Номер договора
            self.archnum = self.recOne[2]  # Архивный номер объекта
            self.stadia = self.recOne[3]  # Стадия проектирования
            self.vidhole = self.recOne[4]  # Вид выработки
            self.numhole = self.recOne[5]  # Номер выработки
            self.numobrazec = self.recOne[6]  # Номер образца
            self.glubotbor = self.recOne[7]  # Глубина отбора
            self.absotm = self.recOne[8]  # Абсолютная отметка отбора
            self.labnum = self.recOne[9]  # Лабораторный номер
            self.granId = self.recOne[10]  # ID грансостава
            self.comboBox.setCurrentIndex(
                self.comboBox.findData(self.recOne[11], role=QtCore.Qt.UserRole))  # ID образца
            self.refreshRadioButton(self.recOne[12])  # Метода определения грансостава
            self.doubleSpinBox.setValue(self.recOne[13])  # >200
            self.doubleSpinBox_2.setValue(self.recOne[14])  # 200-10
            self.doubleSpinBox_3.setValue(self.recOne[15])  # 10-5
            self.doubleSpinBox_4.setValue(self.recOne[16])  # 5-2
            self.doubleSpinBox_5.setValue(self.recOne[17])  # 2-1
            self.doubleSpinBox_6.setValue(self.recOne[18])  # 1-0.5
            self.doubleSpinBox_7.setValue(self.recOne[19])  # 0.5-0.25
            self.doubleSpinBox_8.setValue(self.recOne[20])  # 0.25-0.1
#            self.doubleSpinBox_9.setValue(self.recOne[21])  # <0.1
            f01_ = self.recOne[21]
            if self.recOne[22] is None:
                f01_005 = 0
                self.doubleSpinBox_10.setValue(self.doubleSpinBox_10.minimum())
            else:
                f01_005 = self.recOne[22]
                self.doubleSpinBox_10.setValue(self.recOne[22])  # 0.1-0.05
            if self.recOne[23] is None:
                f005_001 = 0
                self.doubleSpinBox_11.setValue(self.doubleSpinBox_11.minimum())
            else:
                f005_001 = self.recOne[23]
                self.doubleSpinBox_11.setValue(self.recOne[23])  # 0.05-0.01
            if self.recOne[24] is None:
                f001_0005 = 0
                self.doubleSpinBox_12.setValue(self.doubleSpinBox_12.minimum())
            else:
                f001_0005 = self.recOne[24]
                self.doubleSpinBox_12.setValue(self.recOne[24])  # 0.01-0.005
            if self.recOne[25] is None:
                f0005_ = 0
                self.doubleSpinBox_13.setValue(self.doubleSpinBox_13.minimum())
            else:
                f0005_ = self.recOne[25]
                self.doubleSpinBox_13.setValue(self.recOne[25]) # <0.005
            if self.recOne[26] is None:
                f0005_0001 = 0
                self.doubleSpinBox_14.setValue(self.doubleSpinBox_14.minimum())
            else:
                f0005_0001 = self.recOne[26]
                self.doubleSpinBox_14.setValue(self.recOne[26])  # 0.005-0.001
            if self.recOne[27] is None:
                f0001_ = 0
                self.doubleSpinBox_15.setValue(self.doubleSpinBox_15.minimum())
            else:
                f0001_ = self.recOne[27]
                self.doubleSpinBox_15.setValue(self.recOne[27])  # <0.001
            if self.recOne[12] == 3:
                f0005_ = f0005_0001 + f0001_
                f01_ = f01_005 + f005_001 + f001_0005 + f0005_
                self.doubleSpinBox_9.setValue(f01_)     # <0.1
                self.doubleSpinBox_13.setValue(f0005_)   # <0.005
            elif self.recOne[12] == 2:
                f01_ = f01_005 + f005_001 + f001_0005 + f0005_
                self.doubleSpinBox_9.setValue(f01_)     # <0.1
                self.doubleSpinBox_13.setValue(f0005_)  # <0.005
            elif self.recOne[12] == 1:
                self.doubleSpinBox_9.setValue(f01_)  # <0.1
                self.doubleSpinBox_13.setValue(f0005_)  # <0.005
            else:
                pass
            self.doubleSpinBox_16.setValue(self.recOne[28])  # Ракуша
            self.checkBox.setCheckState(self.recOne[29])  # Окатаность грунта
            self.comboBox_2.setCurrentIndex(
                self.comboBox_2.findData(self.recOne[30], role=QtCore.Qt.UserRole))  # ID Лаборанта

            self.label_22.setText(str(self.recOne[13] + self.recOne[14] +
                                      self.recOne[15] + self.recOne[16] +
                                      self.recOne[17] + self.recOne[18] +
                                      self.recOne[19] + self.recOne[20] +
                                      self.recOne[21]))  # Сумма всех фракций
            if self.label_22.text() != '100.0':
                self.label_22.setStyleSheet('background-color: red')
            else:
                self.label_22.setStyleSheet('color: blak')
            self.label_29.setText((str(self.recOne[13])))  # >200
            self.label_30.setText(str(self.recOne[13] + self.recOne[14]))  # >10
            self.label_31.setText(str(self.recOne[13] + self.recOne[14] +
                                      self.recOne[15] + self.recOne[16]))  # >2
            self.label_32.setText(str(self.recOne[13] + self.recOne[14] +
                                      self.recOne[15] + self.recOne[16] +
                                      self.recOne[17] + self.recOne[18]))  # >0.5
            self.label_33.setText(str(self.recOne[13] + self.recOne[14] +
                                      self.recOne[15] + self.recOne[16] +
                                      self.recOne[17] + self.recOne[18] +
                                      self.recOne[19]))  # >0.25
            self.label_34.setText(str(self.recOne[13] + self.recOne[14] +
                                      self.recOne[15] + self.recOne[16] +
                                      self.recOne[17] + self.recOne[18] +
                                      self.recOne[19] + self.recOne[20]))  # >0.1
            if self.recOne[22] is None:
                self.label_38.setText(str(self.recOne[17] + self.recOne[18] +
                                          self.recOne[19] + self.recOne[20] +
                                          self.recOne[21]))
            else:
                self.label_38.setText(str(self.recOne[17] + self.recOne[18] +
                                          self.recOne[19] + self.recOne[20] +
                                          self.recOne[22]))                    # 2-0.05
            stnednorod = stn(self.recOne[13], self.recOne[14],
                             self.recOne[15], self.recOne[16],
                             self.recOne[17], self.recOne[18],
                             self.recOne[19], self.recOne[20],
                             self.recOne[21])
            self.label_37.setText(str(stnednorod))  # Степень неоднородности
            strstn = namestn(stnednorod)  # Наименование неоднородности
            namegrunt = namepesok(self.recOne[13], self.recOne[14],
                                  self.recOne[15], self.recOne[16],
                                  self.recOne[17], self.recOne[18],
                                  self.recOne[19], self.recOne[20],
                                  self.recOne[28], self.recOne[29]) # self.recOne[29] - Окатанность
            if self.label_22.text() != '0.0':
                self.label_18.setText(namegrunt + strstn)  # Наименование грунта
            else:
                self.label_18.setText('-')
            self.recOld = self.readRecord() # Считывание данных и формирование списка одной записи
        else:
            pass
        self.refreshGraph()
        self.refreshTableGran()

    def refreshGraph(self) -> set:
        """Обновление графика-диаграммы"""
        self.scene.clear()
        self.scene.addLine(40, 0, 40, 205, self.penblack)
        self.scene.addLine(35, 200, 400, 200, self.penblack)
        i = 80
        for i in range(80, 440, 40):
            self.scene.addLine(i, 0, i, 200, self.penblackp)
            self.scene.addLine(i, 200, i, 205, self.penblack)
        i = 0
        for i in range(0, 220, 20):
            self.scene.addLine(40, i, 400, i, self.penblackp)
            self.scene.addLine(35, i, 40, i, self.penblack)
            ytext = QtWidgets.QGraphicsSimpleTextItem(str(100 - i / 2))
            self.scene.addItem(ytext)
            ytext.setPos(0, i - 8)
        xtext = QtWidgets.QGraphicsSimpleTextItem("0.1")
        self.scene.addItem(xtext)
        xtext.setPos(70, 205)
        xtext = QtWidgets.QGraphicsSimpleTextItem("0.25")
        self.scene.addItem(xtext)
        xtext.setPos(110, 205)
        xtext = QtWidgets.QGraphicsSimpleTextItem("0.5")
        self.scene.addItem(xtext)
        xtext.setPos(150, 205)
        xtext = QtWidgets.QGraphicsSimpleTextItem("1.0")
        self.scene.addItem(xtext)
        xtext.setPos(190, 205)
        xtext = QtWidgets.QGraphicsSimpleTextItem("2.0")
        self.scene.addItem(xtext)
        xtext.setPos(230, 205)
        xtext = QtWidgets.QGraphicsSimpleTextItem("5.0")
        self.scene.addItem(xtext)
        xtext.setPos(270, 205)
        xtext = QtWidgets.QGraphicsSimpleTextItem("10.0")
        self.scene.addItem(xtext)
        xtext.setPos(310, 205)
        xtext = QtWidgets.QGraphicsSimpleTextItem("200")
        self.scene.addItem(xtext)
        xtext.setPos(350, 205)
        f_01 = self.recOld[21]
        rect01 = QtCore.QRectF(40, 200 - f_01 * 2, 40, f_01 * 2)
        rect025 = QtCore.QRectF(80, 200 - self.recOld[20] * 2, 40, self.recOld[20] * 2)
        rect05 = QtCore.QRectF(120, 200 - self.recOld[19] * 2, 40, self.recOld[19] * 2)
        rect1 = QtCore.QRectF(160, 200 - self.recOld[18] * 2, 40, self.recOld[18] * 2)
        rect2 = QtCore.QRectF(200, 200 - self.recOld[17] * 2, 40, self.recOld[17] * 2)
        rect5 = QtCore.QRectF(240, 200 - self.recOld[16] * 2, 40, self.recOld[16] * 2)
        rect10 = QtCore.QRectF(280, 200 - self.recOld[15] * 2, 40, self.recOld[15] * 2)
        rect200 = QtCore.QRectF(320, 200 - self.recOld[14] * 2, 40, self.recOld[14] * 2)
        rect200_ = QtCore.QRectF(360, 200 - self.recOld[13] * 2, 40, self.recOld[13] * 2)
        self.scene.addRect(rect01, self.penblack, self.brushg)
        self.scene.addRect(rect025, self.penblack, self.brushy)
        self.scene.addRect(rect05, self.penblack, self.brushy)
        self.scene.addRect(rect1, self.penblack, self.brushy)
        self.scene.addRect(rect2, self.penblack, self.brushy)
        self.scene.addRect(rect5, self.penblack, self.brushr)
        self.scene.addRect(rect10, self.penblack, self.brushr)
        self.scene.addRect(rect200, self.penblack, self.brushr)
        self.scene.addRect(rect200_, self.penblack, self.brushr)
        # Обновление кумулятивного графика
        self.scene_2.clear()
        self.scene_2.addLine(40, 0, 40, 205, self.penblack)
        self.scene_2.addLine(35, 200, 400, 200, self.penblack)
        i = 0
        for i in range(0, 220, 20):
            self.scene_2.addLine(40, i, 400, i, self.penblackp)
            self.scene_2.addLine(35, i, 40, i, self.penblack)
            ytext = QtWidgets.QGraphicsSimpleTextItem(str(100 - i / 2))
            self.scene_2.addItem(ytext)
            ytext.setPos(0, i - 8)
        self.scene_2.addLine(80, 0, 80, 200, self.penblackp)
        self.scene_2.addLine(80, 200, 80, 205, self.penblack)
        self.scene_2.addLine((math.log10(0.1) + 1) * 90 + 80, 0, (math.log10(0.1) + 1) * 90 + 80, 200, self.penblackp)
        self.scene_2.addLine((math.log10(0.1) + 1) * 90 + 80, 200, (math.log10(0.1) + 1) * 90 + 80, 205, self.penblack)
        self.scene_2.addLine((math.log10(0.2) + 1) * 90 + 80, 0, (math.log10(0.2) + 1) * 90 + 80, 200, self.penblackp)
        self.scene_2.addLine((math.log10(0.25) + 1) * 90 + 80, 0, (math.log10(0.25) + 1) * 90 + 80, 200, self.penblackp)
        self.scene_2.addLine((math.log10(0.25) + 1) * 90 + 80, 200, (math.log10(0.25) + 1) * 90 + 80, 205,
                             self.penblack)
        self.scene_2.addLine((math.log10(0.3) + 1) * 90 + 80, 0, (math.log10(0.3) + 1) * 90 + 80, 200, self.penblackp)
        self.scene_2.addLine((math.log10(0.4) + 1) * 90 + 80, 0, (math.log10(0.4) + 1) * 90 + 80, 200, self.penblackp)
        self.scene_2.addLine((math.log10(0.5) + 1) * 90 + 80, 0, (math.log10(0.5) + 1) * 90 + 80, 200, self.penblackp)
        self.scene_2.addLine((math.log10(0.5) + 1) * 90 + 80, 200, (math.log10(0.5) + 1) * 90 + 80, 205, self.penblack)
        self.scene_2.addLine((math.log10(0.6) + 1) * 90 + 80, 0, (math.log10(0.6) + 1) * 90 + 80, 200, self.penblackp)
        self.scene_2.addLine((math.log10(0.7) + 1) * 90 + 80, 0, (math.log10(0.7) + 1) * 90 + 80, 200, self.penblackp)
        self.scene_2.addLine((math.log10(0.8) + 1) * 90 + 80, 0, (math.log10(0.8) + 1) * 90 + 80, 200, self.penblackp)
        self.scene_2.addLine((math.log10(0.9) + 1) * 90 + 80, 0, (math.log10(0.9) + 1) * 90 + 80, 200, self.penblackp)
        self.scene_2.addLine((math.log10(1) + 1) * 90 + 80, 0, (math.log10(1) + 1) * 90 + 80, 200, self.penblackp)
        self.scene_2.addLine((math.log10(1) + 1) * 90 + 80, 200, (math.log10(1) + 1) * 90 + 80, 205, self.penblack)
        self.scene_2.addLine((math.log10(2) + 1) * 90 + 80, 0, (math.log10(2) + 1) * 90 + 80, 200, self.penblackp)
        self.scene_2.addLine((math.log10(2) + 1) * 90 + 80, 200, (math.log10(2) + 1) * 90 + 80, 205, self.penblack)
        self.scene_2.addLine((math.log10(3) + 1) * 90 + 80, 0, (math.log10(3) + 1) * 90 + 80, 200, self.penblackp)
        self.scene_2.addLine((math.log10(4) + 1) * 90 + 80, 0, (math.log10(4) + 1) * 90 + 80, 200, self.penblackp)
        self.scene_2.addLine((math.log10(5) + 1) * 90 + 80, 0, (math.log10(5) + 1) * 90 + 80, 200, self.penblackp)
        self.scene_2.addLine((math.log10(5) + 1) * 90 + 80, 200, (math.log10(5) + 1) * 90 + 80, 205, self.penblack)
        self.scene_2.addLine((math.log10(6) + 1) * 90 + 80, 0, (math.log10(6) + 1) * 90 + 80, 200, self.penblackp)
        self.scene_2.addLine((math.log10(7) + 1) * 90 + 80, 0, (math.log10(7) + 1) * 90 + 80, 200, self.penblackp)
        self.scene_2.addLine((math.log10(8) + 1) * 90 + 80, 0, (math.log10(8) + 1) * 90 + 80, 200, self.penblackp)
        self.scene_2.addLine((math.log10(9) + 1) * 90 + 80, 0, (math.log10(9) + 1) * 90 + 80, 200, self.penblackp)
        self.scene_2.addLine((math.log10(10) + 1) * 90 + 80, 0, (math.log10(10) + 1) * 90 + 80, 200, self.penblackp)
        self.scene_2.addLine((math.log10(10) + 1) * 90 + 80, 200, (math.log10(10) + 1) * 90 + 80, 205, self.penblack)
        self.scene_2.addLine((math.log10(20) + 1) * 90 + 80, 0, (math.log10(20) + 1) * 90 + 80, 200, self.penblackp)
        self.scene_2.addLine((math.log10(30) + 1) * 90 + 80, 0, (math.log10(30) + 1) * 90 + 80, 200, self.penblackp)
        self.scene_2.addLine((math.log10(40) + 1) * 90 + 80, 0, (math.log10(40) + 1) * 90 + 80, 200, self.penblackp)
        self.scene_2.addLine((math.log10(50) + 1) * 90 + 80, 0, (math.log10(50) + 1) * 90 + 80, 200, self.penblackp)
        self.scene_2.addLine((math.log10(60) + 1) * 90 + 80, 0, (math.log10(60) + 1) * 90 + 80, 200, self.penblackp)
        self.scene_2.addLine((math.log10(70) + 1) * 90 + 80, 0, (math.log10(70) + 1) * 90 + 80, 200, self.penblackp)
        self.scene_2.addLine((math.log10(80) + 1) * 90 + 80, 0, (math.log10(80) + 1) * 90 + 80, 200, self.penblackp)
        self.scene_2.addLine((math.log10(90) + 1) * 90 + 80, 0, (math.log10(90) + 1) * 90 + 80, 200, self.penblackp)
        self.scene_2.addLine((math.log10(100) + 1) * 90 + 80, 0, (math.log10(100) + 1) * 90 + 80, 200, self.penblackp)
        self.scene_2.addLine((math.log10(100) + 1) * 90 + 80, 200, (math.log10(100) + 1) * 90 + 80, 205, self.penblack)
        self.scene_2.addLine((math.log10(200) + 1) * 90 + 80, 0, (math.log10(200) + 1) * 90 + 80, 200, self.penblackp)
        self.scene_2.addLine((math.log10(200) + 1) * 90 + 80, 200, (math.log10(200) + 1) * 90 + 80, 205, self.penblack)
        self.scene_2.addLine((math.log10(300) + 1) * 90 + 80, 0, (math.log10(300) + 1) * 90 + 80, 200, self.penblackp)
        self.scene_2.addLine((math.log10(300) + 1) * 90 + 80, 200, (math.log10(300) + 1) * 90 + 80, 205, self.penblack)
        xtext = QtWidgets.QGraphicsSimpleTextItem("0.1")
        self.scene_2.addItem(xtext)
        xtext.setPos((math.log10(0.1) + 1) * 90 + 70, 205)
        xtext = QtWidgets.QGraphicsSimpleTextItem("0.25")
        self.scene_2.addItem(xtext)
        xtext.setPos((math.log10(0.25) + 1) * 90 + 70, 205)
        xtext = QtWidgets.QGraphicsSimpleTextItem("0.5")
        self.scene_2.addItem(xtext)
        xtext.setPos((math.log10(0.5) + 1) * 90 + 70, 205)
        xtext = QtWidgets.QGraphicsSimpleTextItem("1.0")
        self.scene_2.addItem(xtext)
        xtext.setPos((math.log10(1) + 1) * 90 + 70, 205)
        xtext = QtWidgets.QGraphicsSimpleTextItem("2.0")
        self.scene_2.addItem(xtext)
        xtext.setPos((math.log10(2) + 1) * 90 + 70, 205)
        xtext = QtWidgets.QGraphicsSimpleTextItem("5.0")
        self.scene_2.addItem(xtext)
        xtext.setPos((math.log10(5) + 1) * 90 + 70, 205)
        xtext = QtWidgets.QGraphicsSimpleTextItem("10.0")
        self.scene_2.addItem(xtext)
        xtext.setPos((math.log10(10) + 1) * 90 + 70, 205)
        xtext = QtWidgets.QGraphicsSimpleTextItem("100")
        self.scene_2.addItem(xtext)
        xtext.setPos((math.log10(100) + 1) * 90 + 70, 205)
        xtext = QtWidgets.QGraphicsSimpleTextItem("200")
        self.scene_2.addItem(xtext)
        xtext.setPos((math.log10(200) + 1) * 90 + 70, 205)
        f_025 = f_01 + self.recOld[20]
        f_05 = f_025 + self.recOld[19]
        f_1 = f_05 + self.recOld[18]
        f_2 = f_1 + self.recOld[17]
        f_5 = f_2 + self.recOld[16]
        f_10 = f_5 + self.recOld[15]
        f_200 = f_10 + self.recOld[14]
        f200_ = f_200 + self.recOld[13]
        self.scene_2.addLine(40, 200, (math.log10(0.1) + 1) * 90 + 80, 200 - f_01 * 2, self.penb)
        self.scene_2.addLine((math.log10(0.1) + 1) * 90 + 80, 200 - f_01 * 2, (math.log10(0.25) + 1) * 90 + 80,
                             200 - f_025 * 2, self.penb)
        self.scene_2.addLine((math.log10(0.25) + 1) * 90 + 80, 200 - f_025 * 2, (math.log10(0.5) + 1) * 90 + 80,
                             200 - f_05 * 2, self.penb)
        self.scene_2.addLine((math.log10(0.5) + 1) * 90 + 80, 200 - f_05 * 2, (math.log10(1) + 1) * 90 + 80,
                             200 - f_1 * 2, self.penb)
        self.scene_2.addLine((math.log10(1) + 1) * 90 + 80, 200 - f_1 * 2, (math.log10(2) + 1) * 90 + 80, 200 - f_2 * 2,
                             self.penb)
        self.scene_2.addLine((math.log10(2) + 1) * 90 + 80, 200 - f_2 * 2, (math.log10(5) + 1) * 90 + 80, 200 - f_5 * 2,
                             self.penb)
        self.scene_2.addLine((math.log10(5) + 1) * 90 + 80, 200 - f_5 * 2, (math.log10(10) + 1) * 90 + 80,
                             200 - f_10 * 2, self.penb)
        self.scene_2.addLine((math.log10(10) + 1) * 90 + 80, 200 - f_10 * 2, (math.log10(200) + 1) * 90 + 80,
                             200 - f_200 * 2, self.penb)
        self.scene_2.addLine((math.log10(200) + 1) * 90 + 80, 200 - f_200 * 2, (math.log10(300) + 1) * 90 + 80,
                             200 - f200_ * 2, self.penb)

    def refreshTableGran(self) -> set:
        """Обновление таблицы гранулометрического состава"""
        self.recCountGran = len(self.recAll)
        self.recAllOldGran = []
        if self.recCountGran > 0:
            self.modelGran.setRowCount(self.recCountGran)
            self.tableGran.setEnabled(True)
            self.modelGran.removeRows(0, self.modelGran.rowCount())
            item11 = QtWidgets.QTableWidgetItem()
            item11.setData(QtCore.Qt.EditRole, id)
            for i in range(0, self.recCountGran):  # Занесение данных в ячейки таблицы
                self.recOldGran = self.recAll[i][9:32]
                listrow = list(self.recOldGran)  # Список одной строки
                item9 = QtGui.QStandardItem(str(listrow[0]))  # Лабораторный номер
                item10 = QtGui.QStandardItem(str(listrow[1]))  # ID грансостава
                item11 = QtGui.QStandardItem(str(listrow[0]))
                QtGui.QStandardItem.setData(item11, str(listrow[2]), role=QtCore.Qt.UserRole)  # ID образца
                if listrow[3] == 1:
                    item12 = QtGui.QStandardItem("Ситовий")  # Метод определения грансостава
                    QtGui.QStandardItem.setData(item12, 1, role=QtCore.Qt.UserRole)
                elif listrow[3] == 2:
                    item12 = QtGui.QStandardItem("Ареометричний")
                    QtGui.QStandardItem.setData(item12, 2, role=QtCore.Qt.UserRole)
                else:
                    item12 = QtGui.QStandardItem("Піпеточний")
                    QtGui.QStandardItem.setData(item12, 3, role=QtCore.Qt.UserRole)
                item13 = QtGui.QStandardItem(str(listrow[4]))  # >200
                item14 = QtGui.QStandardItem(str(listrow[5]))  # 200-10
                item15 = QtGui.QStandardItem(str(listrow[6]))  # 10-5
                item16 = QtGui.QStandardItem(str(listrow[7]))  # 5-2
                item17 = QtGui.QStandardItem(str(listrow[8]))  # 2-1
                item18 = QtGui.QStandardItem(str(listrow[9]))  # 1-0.5
                item19 = QtGui.QStandardItem(str(listrow[10]))  # 0.5-0.25
                item20 = QtGui.QStandardItem(str(listrow[11]))  # 0.25-0.1
                if listrow[3] == 1:
                    item21 = QtGui.QStandardItem(str(listrow[12]))  # <0.1
                    if listrow[16] is None:
                        item25 = QtGui.QStandardItem("-")
                    else:
                        item25 = QtGui.QStandardItem(str(listrow[16]))  # <0.005
                elif listrow[3] == 2:
                    if listrow[13] is None:
                        f01_005 = 0
                    else:
                        f01_005 = listrow[13]
                    if listrow[14] is None:
                        f005_001 = 0
                    else:
                        f005_001 = listrow[14]
                    if listrow[15] is None:
                        f001_0005 = 0
                    else:
                        f001_0005 = listrow[15]
                    if listrow[16] is None:
                        f0005_ = 0
                    else:
                        f0005_= listrow[16]
                    f01_ = f01_005 + f005_001 + f001_0005 + f0005_
                    item21 = QtGui.QStandardItem(str(f01_))           # <0.1
                    if listrow[16] is None:
                        item25 = QtGui.QStandardItem("-")
                    else:
                        item25 = QtGui.QStandardItem(str(listrow[16]))    # <0.005
                elif listrow[3] == 3:
                    if listrow[13] is None:
                        f01_005 = 0
                    else:
                        f01_005 = listrow[13]
                    if listrow[14] is None:
                        f005_001 = 0
                    else:
                        f005_001 = listrow[14]
                    if listrow[15] is None:
                        f001_0005 = 0
                    else:
                        f001_0005= listrow[15]
                    if listrow[17] is None:
                        f0005_0001 = 0
                    else:
                        f0005_0001 = listrow[17]
                    if listrow[18] is None:
                        f0001_ = 0
                    else:
                        f0001_ = listrow[18]
                    f0005_ = f0005_0001 + f0001_
                    f01_ = f01_005 + f005_001 + f001_0005 + f0005_
                    item21 = QtGui.QStandardItem(str(f01_))  # <0.1
                    item25 = QtGui.QStandardItem(str(f0005_))  # <0.005
                else:
                    pass
                if listrow[13] is None:
                    item22 = QtGui.QStandardItem("-")
                else:
                    item22 = QtGui.QStandardItem(str(listrow[13]))  # 0.1-0.05
                if listrow[14] is None:
                    item23 = QtGui.QStandardItem("-")
                else:
                    item23 = QtGui.QStandardItem(str(listrow[14]))  # 0.05-0.01
                if listrow[15] is None:
                    item24 = QtGui.QStandardItem("-")
                else:
                    item24 = QtGui.QStandardItem(str(listrow[15]))  # 0.01-0.005
                if listrow[17] is None:
                    item26 = QtGui.QStandardItem("-")
                else:
                    item26 = QtGui.QStandardItem(str(listrow[17]))  # 0.005-0.001
                if listrow[18] is None:
                    item27 = QtGui.QStandardItem("-")
                else:
                    item27 = QtGui.QStandardItem(str(listrow[18]))  # <0.001
                item28 = QtGui.QStandardItem(str(listrow[19]))  # Ракуша
                item29 = QtGui.QStandardItem()
                QtGui.QStandardItem.setCheckable(item29, True)
                QtGui.QStandardItem.setTristate(item29, False)
                QtGui.QStandardItem.setCheckState(item29, listrow[20])  # Окатан
                if listrow[21] == 0:
                    item30 = QtGui.QStandardItem('-')
                else:
                    item30 = QtGui.QStandardItem(str(listrow[22]))  # Лаборант (ФИО)
                QtGui.QStandardItem.setData(item30, int(listrow[21]), role=QtCore.Qt.UserRole)  # ID лаборанта
                item11.setTextAlignment(QtCore.Qt.AlignCenter)
                item12.setTextAlignment(QtCore.Qt.AlignCenter)
                item13.setTextAlignment(QtCore.Qt.AlignCenter)
                item14.setTextAlignment(QtCore.Qt.AlignCenter)
                item15.setTextAlignment(QtCore.Qt.AlignCenter)
                item16.setTextAlignment(QtCore.Qt.AlignCenter)
                item17.setTextAlignment(QtCore.Qt.AlignCenter)
                item18.setTextAlignment(QtCore.Qt.AlignCenter)
                item19.setTextAlignment(QtCore.Qt.AlignCenter)
                item20.setTextAlignment(QtCore.Qt.AlignCenter)
                item21.setTextAlignment(QtCore.Qt.AlignCenter)
                item22.setTextAlignment(QtCore.Qt.AlignCenter)
                item23.setTextAlignment(QtCore.Qt.AlignCenter)
                item24.setTextAlignment(QtCore.Qt.AlignCenter)
                item25.setTextAlignment(QtCore.Qt.AlignCenter)
                item26.setTextAlignment(QtCore.Qt.AlignCenter)
                item27.setTextAlignment(QtCore.Qt.AlignCenter)
                item28.setTextAlignment(QtCore.Qt.AlignCenter)
                item29.setTextAlignment(QtCore.Qt.AlignCenter)
                item30.setTextAlignment(QtCore.Qt.AlignCenter)
                self.modelGran.appendRow([item9, item10, item11, item12, item13, item14, item15, item16, item17, item18,
                                          item19, item20, item21, item22, item23, item24, item25, item26, item27,
                                          item28, item29, item30])
                oldGranOne = []
                for j in range(0, 22):  # Занесение данных в ячейки таблицы
                    it = listrow[j]
                    oldGranOne.append(it)
                self.recAllOldGran.append(oldGranOne)  # Формирование исходного списка грансостава
        else:
            self.tableGran.setEnabled(False)
#            self.toolButton_2.setEnabled(False)
            self.modelGran.removeRows(0, self.modelGran.rowCount())
        self.recAllNewGran = self.recAllOldGran
        self.tableGran.selectRow(self.recNum)
        self.refreshTableGroupGran()

    def refreshItem(self, lfr) -> list:
        """Подсчет фракций <0.1 мм, <0,005 мм при разных методах гранулометрического анализа
        lfr - список значений float фракций 0,1-0,05 мм, 0,05-0,01 мм, 0,01-0,005 мм, <0,005 мм, 0,005-0,001 мм, <0,001 мм"""
        f01_ = None  # Фракция <0,1 мм
        f0005_ = lfr[3]  # Фракция <0,005 мм
        f01_0001 = []  # Список фракций 0,1-0,05 мм, 0,05-0,01 мм, 0,01-0,005 мм, <0,005 мм, 0,005-0,001 мм, <0,001 мм очищенный
        for i in range(0, 6):
            if lfr[i] is None or lfr[i] < 0:
                pass
            else:
                f01_0001.append(lfr[i])
        if f01_0001 != []:
            f01_ = round(sum(f01_0001), 1)  # Фракция <0,1 мм
        f0005_0001 = []  # Список фракций 0,005-0,001 мм, <0,001 мм очищенный от None
        for i in range(0, 6):
            if i > 3:
                if lfr[i] is None or lfr[i] < 0:
                    pass
                else:
                    f0005_0001.append(lfr[i])
        if f0005_0001 == []:
            f0005_ = lfr[3]
        else:
            f0005_ = round(sum(f0005_0001), 1)  # Фракция <0,005 мм
            if lfr[3] is not None and lfr[3] > 0:
                f01_ = f01_ - lfr[3]
        retval = [f01_, f0005_]
        return retval

    def refreshItem_(self) -> list:
        """Занесение данных в ячейки (<0.1 мм) и (<0,005) мм таблицы гранулометрического состава"""
        row = self.tableGran.currentIndex().row()
        lfr = [self.modelGran.item(row, 13).data(2), self.modelGran.item(row, 14).data(2),
               self.modelGran.item(row, 15).data(2), self.modelGran.item(row, 16).data(2),
               self.modelGran.item(row, 17).data(2), self.modelGran.item(row, 18).data(2)]
        listfr = []
        f01_ = self.modelGran.item(row, 12).data(2)
        f0005_ = self.modelGran.item(row, 16).data(2)
        for i in range(0, 6):
            if lfr[i] == '-' or lfr[i] == 'None':
                val = None
            else:
                val = float(lfr[i])
            listfr.append(val)
        retval = self.refreshItem(listfr)
        if retval[0] is None:
            pass
        else:
            f01_ = round(retval[0], 1)
        self.modelGran.item(row, 12).setText(str(f01_))
        if retval[1] is None:
            f0005_ = '-'
        else:
            f0005_ = round(retval[1], 1)
        self.modelGran.item(row, 16).setText(str(f0005_))
        return retval

    def refreshRadioButton(self, mg) -> set:
        """Отображение метода гранулометрического анализа в блоке переключателей.
        mg - параметр из базы данных"""
        if mg == 1:
            self.radioButton.setChecked(True)
        elif mg == 2:
            self.radioButton_2.setChecked(True)
        else:
            self.radioButton_3.setChecked(True)

    def refreshMetodGran(self) -> set:
        """Обновление формы по методу гранулометрического анализа"""
        if self.radioButton.isChecked() == True:
            mg = 1
            self.doubleSpinBox_9.setEnabled(True)
            self.doubleSpinBox_10.setEnabled(False)
            self.doubleSpinBox_11.setEnabled(False)
            self.doubleSpinBox_12.setEnabled(False)
            self.doubleSpinBox_13.setEnabled(False)
            self.doubleSpinBox_14.setEnabled(False)
            self.doubleSpinBox_15.setEnabled(False)
            self.doubleSpinBox_10.setValue(-0.1)
            self.doubleSpinBox_11.setValue(-0.1)
            self.doubleSpinBox_12.setValue(-0.1)
            self.doubleSpinBox_13.setValue(-0.1)
            self.doubleSpinBox_14.setValue(-0.1)
            self.doubleSpinBox_15.setValue(-0.1)
        elif self.radioButton_2.isChecked() == True:
            mg = 2
            self.doubleSpinBox_9.setEnabled(False)
            self.doubleSpinBox_10.setEnabled(True)
            self.doubleSpinBox_11.setEnabled(True)
            self.doubleSpinBox_12.setEnabled(True)
            self.doubleSpinBox_13.setEnabled(True)
            self.doubleSpinBox_14.setEnabled(False)
            self.doubleSpinBox_15.setEnabled(False)
            self.doubleSpinBox_14.setValue(-0.1)
            self.doubleSpinBox_15.setValue(-0.1)
        else:
            mg = 3
            self.doubleSpinBox_9.setEnabled(False)
            self.doubleSpinBox_10.setEnabled(True)
            self.doubleSpinBox_11.setEnabled(True)
            self.doubleSpinBox_12.setEnabled(True)
            self.doubleSpinBox_13.setEnabled(False)
            self.doubleSpinBox_14.setEnabled(True)
            self.doubleSpinBox_15.setEnabled(True)
        return mg

    def refreshTableGroupGran(self) -> int:
        """Обновление всей таблицы по групперовке свойств гранулометрии грунтов"""
        row = self.recNum
        for row in range(0, self.modelGran.rowCount()):
            if self.modelGran.item(row, 3).text() == "Ситовий":
                for j in range(13, 19):
                    self.modelGran.item(row, j).setEnabled(False)
                    self.modelGran.item(row, j).setBackground(self.brushgr)
                    self.modelGran.item(row, j).setForeground(self.brushbl)
            elif self.modelGran.item(row, 3).text() == "Ареометричний":
                for j in range(12, 19):
                    if j == 12 or j == 17 or j == 18:
                        self.modelGran.item(row, j).setEnabled(False)
                        self.modelGran.item(row, j).setBackground(self.brushgr)
                        self.modelGran.item(row, j).setForeground(self.brushbl)
                    else:
                        self.modelGran.item(row, j).setEnabled(True)
                        self.modelGran.item(row, j).setBackground(self.brushw)
                        self.modelGran.item(row, j).setForeground(self.brushbl)
            else:
                for j in range(12, 19):
                    if j == 12 or j == 16:
                        self.modelGran.item(row, j).setEnabled(False)
                        self.modelGran.item(row, j).setBackground(self.brushgr)
                        self.modelGran.item(row, j).setForeground(self.brushbl)
                    else:
                        self.modelGran.item(row, j).setEnabled(True)
                        self.modelGran.item(row, j).setBackground(self.brushw)
                        self.modelGran.item(row, j).setForeground(self.brushbl)
        return row

    def refreshOneGroupGran(self) -> int:
        """Обновление текущей записи таблицы по групперовке свойств гранулометрии грунтов"""
        row = self.recNum
        if self.modelGran.item(row, 3).text() == "Ситовий":
            for j in range(12, 19):
                if j == 12:
                    self.modelGran.item(row, j).setEnabled(True)
                    self.modelGran.item(row, j).setBackground(self.brushw)
                    self.modelGran.item(row, j).setForeground(self.brushbl)
                else:
                    self.modelGran.item(row, j).setEnabled(False)
                    self.modelGran.item(row, j).setBackground(self.brushgr)
                    self.modelGran.item(row, j).setForeground(self.brushbl)
        elif self.modelGran.item(row, 3).text() == "Ареометричний":
            for j in range(12, 19):
                if j == 12 or j == 17 or j == 18:
                    self.modelGran.item(row, j).setEnabled(False)
                    self.modelGran.item(row, j).setBackground(self.brushgr)
                    self.modelGran.item(row, j).setForeground(self.brushbl)
                else:
                    self.modelGran.item(row, j).setEnabled(True)
                    self.modelGran.item(row, j).setBackground(self.brushw)
                    self.modelGran.item(row, j).setForeground(self.brushbl)
        else:
            for j in range(12, 19):
                if j == 12 or j == 16:
                    self.modelGran.item(row, j).setEnabled(False)
                    self.modelGran.item(row, j).setBackground(self.brushgr)
                    self.modelGran.item(row, j).setForeground(self.brushbl)
                else:
                    self.modelGran.item(row, j).setEnabled(True)
                    self.modelGran.item(row, j).setBackground(self.brushw)
                    self.modelGran.item(row, j).setForeground(self.brushbl)
        return row

    def refreshToolbar(self) -> set:
        """Обновляет панель инструментов"""
        if self.recNum == 0 and self.recCount > 1:
            form.action_8.setEnabled(False)  # Первая запись
            form.action_9.setEnabled(False)  # Предыдущая запись
            form.action_10.setEnabled(True)  # Следующая запись
            form.action_11.setEnabled(True)  # Последняя запись
        elif self.recNum in range(1, self.recCount - 1):
            form.action_8.setEnabled(True)  # Первая запись
            form.action_9.setEnabled(True)  # Последняя запись
            form.action_10.setEnabled(True)  # Следующая запись
            form.action_11.setEnabled(True)  # Последняя запись
        elif self.recNum == self.recCount - 1 and self.recCount > 1:
            form.action_8.setEnabled(True)  # Первая запись
            form.action_9.setEnabled(True)  # Предыдущая запись
            form.action_10.setEnabled(False)  # Следующая запись
            form.action_11.setEnabled(False)  # Последняя запись
        else:
            form.action_8.setEnabled(False)  # Первая запись
            form.action_9.setEnabled(False)  # Предыдущая запись
            form.action_10.setEnabled(False)  # Следующая запись
            form.action_11.setEnabled(False)  # Последняя запись

    def readRecord(self) -> list:
        """Считывание и формирование списка текущей записи"""
        val0 = self.recOne[0]  # ID объекта
        val1 = self.recOne[1]  # Номер договора
        val2 = self.recOne[2]  # Архивный номер объекта
        val3 = self.recOne[3]  # Стадия проектирования
        val4 = self.recOne[4]  # Вид выработки
        val5 = self.recOne[5]  # Номер выработки
        val6 = self.recOne[6]  # Номер образца
        val7 = self.recOne[7]  # Глубина отбора
        val8 = self.recOne[8]  # Абсолютная отметка отбора
        val9 = self.recOne[9]  # Лабораторный номер
        val10 = self.recOne[10]  # ID грансостава
        val11 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole)  # ID образца
        val12 = self.refreshMetodGran()  # Метод определения грансостава
        val13 = self.doubleSpinBox.value()  # >200
        val14 = self.doubleSpinBox_2.value()  # 200-10
        val15 = self.doubleSpinBox_3.value()  # 10-5
        val16 = self.doubleSpinBox_4.value()  # 5-2
        val17 = self.doubleSpinBox_5.value()  # 2-1
        val18 = self.doubleSpinBox_6.value()  # 1-0.5
        val19 = self.doubleSpinBox_7.value()  # 0.5-0.25
        val20 = self.doubleSpinBox_8.value()  # 0.25-0.1
        val21 = self.doubleSpinBox_9.value()  # <0.1
        val22 = self.doubleSpinBox_10.value()  # 0.1-0.05
        val23 = self.doubleSpinBox_11.value()  # 0.05-0.01
        val24 = self.doubleSpinBox_12.value()  # 0.01-0.005
        val25 = self.doubleSpinBox_13.value()  # <0.005
        val26 = self.doubleSpinBox_14.value()  # 0.005-0.001
        val27 = self.doubleSpinBox_15.value()  # <0.001
        val28 = self.doubleSpinBox_16.value()  # Ракуша
        val29 = self.checkBox.checkState()  # Окатанность
        val30 = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), role=QtCore.Qt.UserRole)  # ID лаборанта
        recOld = [val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, val10, val11, val12, val13, val14,
                       val15, val16, val17, val18, val19, val20, val21, val22, val23, val24, val25, val26, val27,
                       val28, val29, val30]
        return recOld

    def readTableGran(self) -> list:
        """Считывание всех данных и обновление списка согласно значений таблицы экранной формы"""
        recAllGran = []
        for i in range(0, self.recCountGran):
            rec = []
            for j in range(0, 22):
                if j == 0:
                    el = str(self.modelGran.item(i, j).data(QtCore.Qt.EditRole))  # Определение элемента текущей записи
                elif j == 1:
                    el = int(self.modelGran.item(i, j).data(QtCore.Qt.EditRole))
                elif j == 2:
                    el = int(self.modelGran.item(i, j).data(QtCore.Qt.UserRole))
                elif j == 3:
                    el = int(self.modelGran.item(i, j).data(QtCore.Qt.UserRole))
                elif j in range(4, 20):
                    el = self.modelGran.item(i, j).data(QtCore.Qt.EditRole)
                    if el == "-":
                        el = None
                    else:
                        el = dc.Decimal(self.modelGran.item(i, j).data(QtCore.Qt.EditRole))
                elif j == 20:
                    el = self.modelGran.item(i, j).checkState()
                elif j == 21:
                    el = int(self.modelGran.item(i, j).data(QtCore.Qt.UserRole))
                else:
                    pass
                rec.append(el)  # Формирование текущей записи из элементов
            recAllGran.append(rec)  # Формирование обновленного списка (записей-кортежей)
        return recAllGran

    def setRow(self) -> set:
        if self.currentIndex() == 0:
            self.refreshToolbar()
            self.refreshRecord()
        elif self.currentIndex() == 1:
            self.tableGran.selectRow(self.recNum)
        else:
            self.refreshRecord()

    def currentRow(self) -> set:
        """Определение номера записи (строки)  и установка движка на эту запись"""
        if self.currentIndex() == 1:
            recNum = self.recNum
            self.recNum = self.selmodelGran.currentIndex().row()
            if self.recNum < 0:
                self.recNum = recNum
            self.refreshToolbar()

    def showEvent(self, e) -> set:
        """Выполняет действия при выводе окна на экран"""
        form.action_20.setEnabled(False)
        QtWidgets.QTabWidget.showEvent(self, e)

    def hideEvent(self, e) -> set:
        """Выполняет действия при скрытии окна"""
        form.action_20.setEnabled(True)
        form.granwin = None
        if self.recAll != []:
            self.asktoSave()
        form.refreshMain()
        QtWidgets.QTabWidget.hideEvent(self, e)

    def nextRecord(self) -> set:
        """Становится на следующей записи"""
        self.recNum += 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableGran.selectRow(self.recNum)

    def priorRecord(self) -> set:
        """Становится на предыдущей записи"""
        self.recNum -= 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableGran.selectRow(self.recNum)

    def firstRecord(self) -> set:
        """Становится на первой записи"""
        self.recNum = 0
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableGran.selectRow(self.recNum)

    def lastRecord(self) -> set:
        """Становится на последней записи"""
        if self.recCount > 0:
            self.recNum = self.recCount - 1
            self.refreshToolbar()
            self.asktoSave()
            self.refreshRecord()
            self.tableGran.selectRow(self.recNum)

    def sortRecord(self) -> set:
        """Сортировка записей"""
        self.recAll.sort(key=itemgetter(0,5,7))
        form.action_13.setEnabled(False)  # Сортировать
        form.action_14.setEnabled(True)  # Снять сортировку
        self.refreshRecord()

    def desortRecord(self) -> set:
        """Отмена сортировки, что соответствует сортировке по ID"""
        self.recAll.sort(key=itemgetter(10))
        form.action_13.setEnabled(True)  # Сортировать
        form.action_14.setEnabled(False)  # Снять сортировку
        self.refreshRecord()

    def calcGran(self) -> set:
        if self.doubleSpinBox_13.isEnabled() == False:
            if self.doubleSpinBox_14.value() < 0:
                f_0005_0001 = 0
            else:
                f_0005_0001 = self.doubleSpinBox_14.value()
            if self.doubleSpinBox_15.value() < 0:
                f_0001_ = 0
            else:
                f_0001_ = self.doubleSpinBox_15.value()
            f_0005 = f_0005_0001 + f_0001_
            if f_0005 == 0:
                self.doubleSpinBox_13.setValue(-0.1)
            else:
                self.doubleSpinBox_13.setValue(f_0005)
        else:
            f_0005 = self.doubleSpinBox_13.value()  # <0.005
            #self.doubleSpinBox_13.setValue(f_0005)
        if self.doubleSpinBox_9.isEnabled() == False:
            if self.doubleSpinBox_10.value() < 0:
                f_01_005 = 0
            else:
                f_01_005 = self.doubleSpinBox_10.value()
            if self.doubleSpinBox_11.value() < 0:
                f_005_001 = 0
            else:
                f_005_001 = self.doubleSpinBox_11.value()
            if self.doubleSpinBox_12.value() < 0:
                f_001_0005 = 0
            else:
                f_001_0005 = self.doubleSpinBox_12.value()
            if self.doubleSpinBox_13.value() < 0:
                f_0005_ = 0
            else:
                f_0005_ = self.doubleSpinBox_13.value()
            f_01 = f_01_005 + f_005_001 + f_001_0005 + f_0005_
            if f_01 == 0:
                self.doubleSpinBox_9.setValue(-0.1)
            else:
                self.doubleSpinBox_9.setValue(f_01)
        else:
            f_01 = self.doubleSpinBox_9.value() # <0.1
            #self.doubleSpinBox_9.setValue(f_01)
        summa = round(dc.Decimal(self.doubleSpinBox.value()) +
                              dc.Decimal(self.doubleSpinBox_2.value()) +
                              dc.Decimal(self.doubleSpinBox_3.value()) +
                              dc.Decimal(self.doubleSpinBox_4.value()) +
                              dc.Decimal(self.doubleSpinBox_5.value()) +
                              dc.Decimal(self.doubleSpinBox_6.value()) +
                              dc.Decimal(self.doubleSpinBox_7.value()) +
                              dc.Decimal(self.doubleSpinBox_8.value()) +
                              dc.Decimal(self.doubleSpinBox_9.value()), 1)  # Сумма всех фракций
        self.label_22.setText(str(summa))
        if summa != 100.0:
            self.label_22.setStyleSheet('background-color: red')
        else:
            self.label_22.setStyleSheet('color: blak')

    def addRecord(self) -> set:
        """Добавляет новую запись"""
        val11 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole)  # ID последнего образца
        with UseDatebase(dbconfig) as curs:
            curs.execute("INSERT INTO gran (id_obrazec) VALUES (%(v11)s);", {'v11': val11})
            #curs.execute("INSERT INTO gran DEFAULT VALUES")
        self.requerySelect()
        self.recCount = len(self.recAll)
        if self.recCount == 1:
            self.recNum = 0
            self.recOld = self.recAll[self.recNum]
        self.refreshRecord()
        self.lastRecord()
        self.refreshToolbar()

    def delRecord(self) -> set:
        """Удаляет текущую запись"""
        self.refreshRecord()
        val10 = self.recOld[10]  # ID грансостава
        if val10 is not None:
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                           "Гранулометрічний склад",
                                           "Ви бажаєте видалити поточний запис з порядковим номером - " + str(self.recNum + 1) +
                                           " та лабораторним номером - " + str(self.recOld[9]) + "?")
            btnYes = QtWidgets.QPushButton("&Так")
            btnNo = QtWidgets.QPushButton("&Ні")
            btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
            self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
            self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
            self.formMassWin.setDefaultButton(btnYes)
            result = self.formMassWin.exec()
            if result == 0:
                with UseDatebase(dbconfig) as curs:
                    curs.execute("DELETE FROM gran WHERE id = %(v10)s;", {'v10': val10})
                self.requerySelect()
                self.recCount = len(self.recAll)
                if self.recCount > 0:
                    self.firstRecord()
                    self.refreshRecord()
                    self.refreshToolbar()
                else:
                    self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information, "Гранулометрічний склад",
                                                   "Видалено останній запис")
                    btnOK = QtWidgets.QPushButton("&OK")
                    btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                    self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                    result = self.formMassWin.exec()
                    if result == 0:
                        self.formMassWin.close()
                        self.parent().close()
            else:
                pass
        else:
            pass

    def asktoSave(self) -> bool:
        """Проверяет наличие изменений в характеристиках грансостава"""
        if self.recOld:
            # Считывание данных и обновление списка согласно значений экранной формы
            self.recNew = self.readRecord()
            askGran = (self.recNew == self.recOld)
            askTableGran = self.asktoSaveTableGran()
            if askGran == False:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                               "Гранулометрічний склад",
                                               "Є незбережені дані гранулометрічного складу ґрунтів. "
                                               "\nВи бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecord(False)
                else:
                    pass
            elif askTableGran == False:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                               "Гранулометрічний склад",
                                               "Є незбережені дані у таблиці гранулометрічного складу ґрунтів. "
                                               "\nВи бажаєте їх зберегти??")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecordTableGran(False)
                    retval = True
                else:
                    retval = False
            else:
                retval = False
            return retval

    def asktoSaveTableGran(self) -> bool:
        """Проверка наличия изменений в таблице Грансостава"""
        self.recAllNewGran = self.readTableGran()
        if self.recAllNewGran == self.recAllOldGran:
            ask = True
        else:
            ask = False
        return ask

    def saveAll(self) -> bool:
        """Сохраняет изменения по нажатию кнопки Сохранить на панели инструментов"""
        if self.currentIndex() == 0:
            self.saveRecord(False)
            retval = True
        if self.currentIndex() == 1:
#            self.setCurrentIndex(0)
#            self.setCurrentIndex(1)
            self.recAllNewGran = self.readTableGran()
            self.saveRecordTableGran(False)
            retval = True
        else:
            retval = False
        return retval

    def saveRecord(self, ask) -> bool:
        """Сохраняет изменения в записи и формирует новый курсор"""
        self.calcGran()
        if ask == False:
            val10 = self.recOld[10]  # ID грансостава
            val11 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole)  # ID образца
            val12 = self.refreshMetodGran()  # Метод определения грансостава
            val13 = self.doubleSpinBox.value()  # >200
            val14 = self.doubleSpinBox_2.value()  # 200-10
            val15 = self.doubleSpinBox_3.value()  # 10-5
            val16 = self.doubleSpinBox_4.value()  # 5-2
            val17 = self.doubleSpinBox_5.value()  # 2-1
            val18 = self.doubleSpinBox_6.value()  # 1-0.5
            val19 = self.doubleSpinBox_7.value()  # 0.5-0.25
            val20 = self.doubleSpinBox_8.value()  # 0.25-0.1
            val21 = self.doubleSpinBox_9.value()  # <0.1
            if self.doubleSpinBox_10.value() < 0:
                val22 = None
            else:
                val22 = self.doubleSpinBox_10.value()  # 0.1-0.05
            if self.doubleSpinBox_11.value() < 0:
                val23 = None
            else:
                val23 = self.doubleSpinBox_11.value()  # 0.05-0.01
            if self.doubleSpinBox_12.value() < 0:
                val24 = None
            else:
                val24 = self.doubleSpinBox_12.value()  # 0.01-0.005
            if self.doubleSpinBox_13.value() < 0:
                val25 = None
            else:
                val25 = self.doubleSpinBox_13.value()  # <0.005
            if self.doubleSpinBox_14.value() < 0:
                val26 = None
            else:
                val26 = self.doubleSpinBox_14.value()  # 0.005-0.001
            if self.doubleSpinBox_15.value() < 0:
                val27 = None
            else:
                val27 = self.doubleSpinBox_15.value()  # <0.001
            val28 = self.doubleSpinBox_16.value()  # Ракуша
            val29 = self.checkBox.checkState()  # Окатанность
            val30 = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), role=QtCore.Qt.UserRole)  # ID лаборанта
            with UseDatebase(dbconfig) as curs:
                curs.execute("""UPDATE gran
                                SET id_obrazec = %(v11)s, 
                                    metod = %(v12)s, 
                                    f200 = %(v13)s, 
                                    f200_10 = %(v14)s, 
                                    f10_5 = %(v15)s, 
                                    f5_2 = %(v16)s, 
                                    f2_1 = %(v17)s, 
                                    f1_05 = %(v18)s,
                                    f05_025 = %(v19)s,
                                    f025_01 = %(v20)s,
                                    f01_ = %(v21)s,
                                    f01_005 = %(v22)s,
                                    f005_001 = %(v23)s,
                                    f001_0005 = %(v24)s,
                                    f0005_ = %(v25)s,
                                    f0005_0001 = %(v26)s,
                                    f0001_ = %(v27)s,
                                    rakusha =  %(v28)s,
                                    okatan =  %(v29)s,
                                    id_labman = %(v30)s
                                WHERE id = %(v10)s;""",
                             {'v11': val11, 'v12': val12, 'v13': val13,
                              'v14': val14, 'v15': val15, 'v16': val16, 'v17': val17,
                              'v18': val18, 'v19': val19, 'v20': val20, 'v21': val21,
                              'v22': val22, 'v23': val23, 'v24': val24, 'v25': val25,
                              'v26': val26, 'v27': val27, 'v28': val28, 'v29': val29, 'v30': val30, 'v10': val10})
            self.requerySelect()
            self.refreshRecord()
            self.saveRecordTableGran(False)
            retval = True
        else:
            retval = False
        return retval

    def saveRecordTableGran(self, ask) -> bool:
        """Сохранение записей таблицы гранулометрического состава"""
        if ask == False:
            for i in range(0, self.recCountGran):
                recTabGran = self.recAllNewGran[i]
                val10 = recTabGran[1]
                val11 = recTabGran[2]
                val12 = recTabGran[3]
                val13 = recTabGran[4]
                val14 = recTabGran[5]
                val15 = recTabGran[6]
                val16 = recTabGran[7]
                val17 = recTabGran[8]
                val18 = recTabGran[9]
                val19 = recTabGran[10]
                val20 = recTabGran[11]
                val21 = recTabGran[12]
                val22 = recTabGran[13]
                val23 = recTabGran[14]
                val24 = recTabGran[15]
                val25 = recTabGran[16]
                val26 = recTabGran[17]
                val27 = recTabGran[18]
                val28 = recTabGran[19]
                val29 = recTabGran[20]
                val30 = recTabGran[21]
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE gran
                                    SET id_obrazec = %(v11)s,
                                        metod = %(v12)s,
                                        f200 = %(v13)s,
                                        f200_10 = %(v14)s,
                                        f10_5 = %(v15)s,
                                        f5_2 = %(v16)s,
                                        f2_1 = %(v17)s,
                                        f1_05 = %(v18)s,
                                        f05_025 = %(v19)s,
                                        f025_01 = %(v20)s,
                                        f01_ = %(v21)s,
                                        f01_005 = %(v22)s,
                                        f005_001 = %(v23)s,
                                        f001_0005 = %(v24)s,
                                        f0005_ = %(v25)s,
                                        f0005_0001 = %(v26)s,
                                        f0001_ = %(v27)s,
                                        rakusha = %(v28)s,
                                        okatan = %(v29)s,
                                        id_labman = %(v30)s
                                    WHERE id = %(v10)s;""",
                                 {'v11': val11, 'v12': val12, 'v13': val13,
                                  'v14': val14, 'v15': val15, 'v16': val16, 'v17': val17,
                                  'v18': val18, 'v19': val19, 'v20': val20, 'v21': val21,
                                  'v22': val22, 'v23': val23, 'v24': val24, 'v25': val25,
                                  'v26': val26, 'v27': val27, 'v28': val28, 'v29': val29, 'v30': val30, 'v10': val10})
            self.requerySelect()
            self.refreshRecord()
            retval = True
        else:
            retval = False
        return retval


class PesokWindow(QtWidgets.QTabWidget, egclasswin.Ui_Pesok_win):
    def __init__(self) -> set:
        """Инициализация окна Свойств несвязных грунтов"""
        super().__init__()
        self.setupUi(self)
        global idActivObekt
        self.recAllOldPesok = []
        self.recCountPesok = 0
        self.brushw = QtGui.QBrush(QtCore.Qt.white)
        self.brushbl = QtGui.QBrush(QtCore.Qt.black)
        self.brushgr = QtGui.QBrush(QtGui.QColor(245, 245, 245))
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT obrazec.id, 
                                obrazec.lab_num
                            FROM obekt,
                                burehole,
                                obrazec
                            WHERE obekt.id = %(v)s 
                                AND obekt.id = burehole.id_obekt 
                                AND burehole.id = obrazec.id_burehole
                                AND obrazec.mater_obr != 'Вода'
                            ORDER BY obrazec.lab_num""", {'v': idActivObekt})
            recAll = curs.fetchall()
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox.addItem(recOne[1])
                self.comboBox.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT ispol.id, 
                                ispol.fio
                            FROM ispol
                            WHERE ispol.vidrab = 0 OR ispol.vidrab = 7 
                            ORDER BY ispol.fio""")
            recAll = curs.fetchall()
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox_2.addItem(recOne[1])
                self.comboBox_2.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
        self.kpId = 0  # ID свойств несвязных грунтов
        self.modelPesok = QtGui.QStandardItemModel(30, 18)  # Создание модели свойств несвязных грунтов
        self.selmodelPesok = QtCore.QItemSelectionModel(self.modelPesok)  # Создание модели выделения
        self.modelPesok.setRowCount(len(self.recAll))
        self.modelPesok.setHorizontalHeaderLabels(['Labnum',
                                                   'ID pesok',
                                                   'Лабораторний \nномер',
                                                   'Перелік \nвластивостей',
                                                   'Вологість \n%',
                                                   'Щільність \nг/см3',
                                                   'Щільність \nчасток \nг/см3',
                                                   'Щільність \nу пухкому \nстані \nг/см3',
                                                   'Щільність \nу щільному \nстані \nг/см3',
                                                   'Кут природного \nукосу \nсухого ґрунту \nград.',
                                                   'Кут природного \nукосу \nпід водою \nград.',
                                                   'Вiдносний вмiст \nорганiчних \nречовин \nд.о.',
                                                   'Коефiцiєнт \nвивiтрiлостi \nд.о.',
                                                   'Коефіцієнт \nстираності \nд.о.',
                                                   'Коефiцiєнт \nфiльтрацiї \nм/доб.',
                                                   'Ступiнь \nзасоленостi \n%',
                                                   'Вiдносна \nдеформацiя \nздимання \nд.о.',
                                                   'Температура \nґрунту \nград.С',
                                                   'Лаборант'])
        self.tablePesok.setModel(self.modelPesok)  # Создание представления
        self.tablePesok.setSelectionModel(self.selmodelPesok)  # Установить модель выделения в представлении
        self.tablePesok.setGeometry(QtCore.QRect(0, 0, 808, 640))
        self.tablePesok.setColumnWidth(0, 10)
        self.tablePesok.setColumnWidth(1, 10)
        self.tablePesok.setColumnWidth(2, 110)
        self.tablePesok.setColumnWidth(3, 110)
        self.tablePesok.setColumnWidth(4, 80)  # Влажность
        self.tablePesok.setColumnWidth(5, 80)
        self.tablePesok.setColumnWidth(6, 80)
        self.tablePesok.setColumnWidth(7, 90)
        self.tablePesok.setColumnWidth(8, 90)
        self.tablePesok.setColumnWidth(9, 120)
        self.tablePesok.setColumnWidth(10, 120)
        self.tablePesok.setColumnWidth(11, 120)
        self.tablePesok.setColumnWidth(12, 100)
        self.tablePesok.setColumnWidth(13, 90)
        self.tablePesok.setColumnWidth(14, 90)
        self.tablePesok.setColumnWidth(15, 90)
        self.tablePesok.setColumnWidth(16, 90)
        self.tablePesok.setColumnWidth(17, 100)
        self.tablePesok.setColumnWidth(18, 140) # ID лаборанта
        self.tablePesok.setColumnHidden(0, True)
        self.tablePesok.setColumnHidden(1, True)
        self.requerySelect()
        if not self.recAll:
            self.addRecord()
        else:
            self.recCount = len(self.recAll)
            self.recNum = 0
            self.recOld = self.recAll[self.recNum]
            self.kpId = self.recOld[9]  # ID свойств несвязных грунтов
        # Назначение делегатов
        self.DelegatePesok1 = egdelegat.DoubleSpinBoxDelegate1()
        self.DelegatePesok2 = egdelegat.DoubleSpinBoxDelegate()
        self.DelegatePesok3 = egdelegat.DoubleSpinBoxDelegate3()
        self.DelegatePesokT = egdelegat.DoubleSpinBoxDelegate_Temper()
        self.DelegateLabnumPesok = egdelegat.ComboBoxDelegateLabnumGran()
        self.DelegateGroupPesok = egdelegat.ComboBoxDelegateGroupPesok()
        self.DelegateLabman = egdelegat.ComboBoxDelegateLabman()
        self.tablePesok.setItemDelegateForColumn(2, self.DelegateLabnumPesok)
        self.tablePesok.setItemDelegateForColumn(3, self.DelegateGroupPesok)
        self.tablePesok.setItemDelegateForColumn(4, self.DelegatePesok1)
        self.tablePesok.setItemDelegateForColumn(5, self.DelegatePesok2)
        self.tablePesok.setItemDelegateForColumn(6, self.DelegatePesok2)
        self.tablePesok.setItemDelegateForColumn(7, self.DelegatePesok2)
        self.tablePesok.setItemDelegateForColumn(8, self.DelegatePesok2)
        self.tablePesok.setItemDelegateForColumn(9, self.DelegatePesok1)
        self.tablePesok.setItemDelegateForColumn(10, self.DelegatePesok1)
        self.tablePesok.setItemDelegateForColumn(11, self.DelegatePesok2)
        self.tablePesok.setItemDelegateForColumn(12, self.DelegatePesok2)
        self.tablePesok.setItemDelegateForColumn(13, self.DelegatePesok2)
        self.tablePesok.setItemDelegateForColumn(14, self.DelegatePesok2)
        self.tablePesok.setItemDelegateForColumn(15, self.DelegatePesok1)
        self.tablePesok.setItemDelegateForColumn(16, self.DelegatePesok3)
        self.tablePesok.setItemDelegateForColumn(17, self.DelegatePesokT)
        self.tablePesok.setItemDelegateForColumn(18, self.DelegateLabman)
        # Обновление формы и панели инструментов
        self.refreshToolbar()
        self.refreshRecord()
        # Назначение обработчиков сигналов
        self.currentChanged.connect(self.asktoSave)
        self.currentChanged.connect(self.setRow)
        self.radioButton.toggled.connect(self.refreshGroupPesok)
        self.radioButton_2.toggled.connect(self.refreshGroupPesok)
        self.toolButton_6.clicked.connect(self.clearField)
        self.modelPesok.itemChanged.connect(self.refreshOneGroupPesok)
#        self.tablePesok.currentIndex().model().dataChanged.connect(self.refreshOneGroupPesok)
        self.selmodelPesok.selectionChanged['QItemSelection', 'QItemSelection'].connect(self.currentRow)

    def requerySelect(self) -> set:
        """Обновление главного запроса для экранной формы"""
        global idActivObekt
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT burehole.id_obekt,
                                obekt.numdog,
                                obekt.archnum,
                                obekt.stadia,
                                burehole.vidhole,
                                burehole.num_hole,
                                obrazec.num_obrazec,
                                obrazec.glub_otbor,
                                burehole.koord_z - obrazec.glub_otbor,
                                obrazec.lab_num,
                                pesok.id,
                                pesok.id_obrazec,
                                gran.metod,
                                gran.f200,
                                gran.f200_10,
                                gran.f10_5,
                                gran.f5_2,
                                gran.f2_1,
                                gran.f1_05,
                                gran.f05_025,
                                gran.f025_01,
                                gran.f01_,
                                gran.f01_005,
                                gran.f005_001,
                                gran.f001_0005,
                                gran.f0005_,
                                gran.f0005_0001,
                                gran.f0001_,
                                gran.rakusha,
                                gran.okatan,
                                pesok.svgroup,
                                pesok.vlag,
                                pesok.plotn,
                                pesok.plotnchast,
                                pesok.plotnmin,
                                pesok.plotnmax,
                                pesok.ugolsuh,
                                pesok.ugolvod,
                                pesok.organika,
                                pesok.vuvetrel,
                                pesok.isteranie,
                                pesok.filtraciya,
                                pesok.zasol,
                                pesok.puchenie,
                                pesok.temper,
                                pesok.id_labman,
                                vlabman.fio
                            FROM obekt,
                                burehole,
                                obrazec,
                                pesok
                                 LEFT JOIN gran ON pesok.id_obrazec = gran.id_obrazec
                                 LEFT JOIN vlabman ON pesok.id_labman = vlabman.id
                            WHERE obekt.id = %(v0)s 
                            AND obekt.id = burehole.id_obekt 
                            AND burehole.id = obrazec.id_burehole 
                            AND obrazec.id = pesok.id_obrazec
                            ORDER BY pesok.id""", {'v0': idActivObekt})
            self.recAll = curs.fetchall()
        return self.recAll

    def refreshRecord(self) -> set:
        """Обновляет экранную форму с отображаемой записью"""
        # Передача значений из списка в экранную форму
        self.recOld = self.recAll[self.recNum]
        if self.recOld:
            self.label.setText("Ідентіфікатор об'єкта - " + str(self.recOld[0]) + "\n" +
                               "Номер договору - " + str(self.recOld[1]) + "\n" +
                               "Архівний номер звіту - " + self.recOld[2] + "\n" +
                               self.recOld[4] + " №" + self.recOld[5] + "\n" +
                               "Зразок №" + str(self.recOld[6]) + "\n" +
                               "Глибина відбору - " + str(self.recOld[7]))  #ID объекта, номер договора, архивный номер,
                                                                        # вид и № выработки, № образца, глубина отбора
            self.obID = self.recOld[0]  # ID объекта
            self.numdog = self.recOld[1]  # Номер договора
            self.archnum = self.recOld[2]  # Архивный номер объекта
            self.stadia = self.recOld[3]  # Стадия проектирования
            self.vidhole = self.recOld[4]  # Вид выработки
            self.numhole = self.recOld[5]  # Номер выработки
            self.numobrazec = self.recOld[6]  # Номер образца
            self.glubotbor = self.recOld[7]  # Глубина отбора
            self.absotm = self.recOld[8]  # Абсолютная отметка отбора
            self.labnum = self.recOld[9]  # Лабораторный номер
            self.granId = self.recOld[10]  # ID свойств несвязных грунтов
            self.comboBox.setCurrentIndex(
                self.comboBox.findData(self.recOld[11], role=QtCore.Qt.UserRole))  # ID образца
            self.refreshRadioButton(self.recOld[30])  # Группа свойств несвязных грунтов
            if self.recOld[31] == None:
                self.doubleSpinBox.setValue(0)
            else:
                self.doubleSpinBox.setValue(self.recOld[31])  # Влажность
            if self.recOld[32] == None:
                self.doubleSpinBox_2.setValue(0)
            else:
                self.doubleSpinBox_2.setValue(self.recOld[32])  # Плотность
            if self.recOld[33] == None:
                self.doubleSpinBox_3.setValue(0)
            else:
                self.doubleSpinBox_3.setValue(self.recOld[33])  # Плотность частиц
            if self.recOld[34] == None:
                self.doubleSpinBox_4.setValue(0)
            else:
                self.doubleSpinBox_4.setValue(self.recOld[34])  # Плотность в рыхлом состоянии
            if self.recOld[35] == None:
                self.doubleSpinBox_5.setValue(0)
            else:
                self.doubleSpinBox_5.setValue(self.recOld[35])  # Плотность в плотном состоянии
            if self.recOld[36] == None:
                self.doubleSpinBox_6.setValue(0)
            else:
                self.doubleSpinBox_6.setValue(self.recOld[36])  # Угол откоса сухой
            if self.recOld[37] == None:
                self.doubleSpinBox_7.setValue(0)
            else:
                self.doubleSpinBox_7.setValue(self.recOld[37])  # Угол откоса под водой
            if self.recOld[38] == None:
                self.doubleSpinBox_8.setValue(0)
            else:
                self.doubleSpinBox_8.setValue(self.recOld[38])  # Органика
            if self.recOld[39] == None:
                self.doubleSpinBox_9.setValue(0)
            else:
                self.doubleSpinBox_9.setValue(self.recOld[39])  # Кф выветрелости
            if self.recOld[40] == None:
                self.doubleSpinBox_10.setValue(0)
            else:
                self.doubleSpinBox_10.setValue(self.recOld[40])  # Кф истирания
            if self.recOld[41] == None:
                self.doubleSpinBox_11.setValue(0)
            else:
                self.doubleSpinBox_11.setValue(self.recOld[41])  # Кф фильтрации
            if self.recOld[42] == None:
                self.doubleSpinBox_12.setValue(0)
            else:
                self.doubleSpinBox_12.setValue(self.recOld[42])  # Степень засоленности
            if self.recOld[43] == None:
                self.doubleSpinBox_13.setValue(0)
            else:
                self.doubleSpinBox_13.setValue(self.recOld[43])  # Отностительная деформация вздымания
            if self.recOld[44] == None:
                self.doubleSpinBox_14.setValue(-99)
            else:
                self.doubleSpinBox_14.setValue(self.recOld[44])  # Температура
            self.comboBox_2.setCurrentIndex(
                self.comboBox_2.findData(self.recOld[45], role=QtCore.Qt.UserRole))  # Лаборант
            # Подготовка и отображение расчетных показателей
            self.e = kfPorw(self.recOld[31], self.recOld[32], self.recOld[33])
            if self.e != None:
                self.label_29.setText(str(self.e))  # Кф пористости
            else:
                self.label_29.setText("-")
            self.pdr = kfPorpd(self.recOld[34], self.recOld[33])
            if self.pdr != None:
                self.label_30.setText(str(self.pdr))  # Кф пористости в рыхлом состоянии
            else:
                self.label_30.setText("-")
            self.pdp = kfPorpd(self.recOld[35], self.recOld[33])
            if self.pdp != None:
                self.label_31.setText(str(self.pdp))  # Кф пористости в плотном состоянии
            else:
                self.label_31.setText("-")
            self.Sr = kfVodonas(self.recOld[31], self.recOld[32], self.recOld[33])
            if self.Sr != None:
                if self.Sr < 1:
                    self.label_32.setText(str(self.Sr))  # Кф водонасыщения
                else:
                    self.label_32.setText("1.00")
            else:
                self.label_32.setText("-")
            self.Wsatr = vlagAll(self.recOld[34], self.recOld[33])
            if self.Wsatr != None:
                self.label_33.setText(str(self.Wsatr))  # Повна вологоємність в пухкому стані, %
            else:
                self.label_33.setText("-")
            self.Wsatp = vlagAll(self.recOld[35], self.recOld[33])
            if self.Wsatp != None:
                self.label_34.setText(str(self.Wsatp))  # Повна вологоємність в щільному стані, %
            else:
                self.label_34.setText("-")
            self.Id = stepPlotn(self.recOld[31], self.recOld[32], self.recOld[33], self.recOld[34], self.recOld[35])
            if self.Id != None:
                self.label_38.setText(str(self.Id))  # Ступінь щільності, д.о.
            else:
                self.label_38.setText("-")
            self.pWsatr = plotnAllpd(self.recOld[33], self.recOld[34])
            if self.pWsatr != None:
                self.label_37.setText(str(self.pWsatr))  # Щільність при водонасиченні в пухкому стані, г/см3
            else:
                self.label_37.setText("-")
            self.pWsatp = plotnAllpd(self.recOld[33], self.recOld[35])
            if self.pWsatp != None:
                self.label_41.setText(str(self.pWsatp))  # Щільність при водонасиченні в щільному стані, г/см3
            else:
                self.label_41.setText("-")
            self.q = udelVesps(self.recOld[33])
            if self.q != None:
                self.label_42.setText(str(self.q))  # Удельный вес частиц грунта
            else:
                self.label_42.setText("-")
            self.qwr = udelVesW(self.recOld[33], self.recOld[34])
            if self.qwr != None:
                self.label_45.setText(str(self.qwr))  # Удельный вес рухлого грунта с учетом взвешивающего действия воды
            else:
                self.label_45.setText("-")
            self.qwp = udelVesW(self.recOld[33], self.recOld[35])
            if self.qwp != None:
                self.label_47.setText(
                    str(self.qwp))  # Удельный вес плотного грунта с учетом взвешивающего действия воды
            else:
                self.label_47.setText("-")
            if self.recOld[12] == None:  # Если есть грансостав то определяется Кф неоднородности
                stnednorod = 0
            else:
                stnednorod = stn(self.recOld[13], self.recOld[14],
                                 self.recOld[15], self.recOld[16],
                                 self.recOld[17], self.recOld[18],
                                 self.recOld[19], self.recOld[20],
                                 self.recOld[21])
            strstn = namestn(stnednorod)  # Наименование неоднородности
            namegrunt = namepesok(self.recOld[13], self.recOld[14],
                                  self.recOld[15], self.recOld[16],
                                  self.recOld[17], self.recOld[18],
                                  self.recOld[19], self.recOld[20],
                                  self.recOld[28], self.recOld[29])
            self.label_18.setText(namegrunt + strstn)  # Наименование грунта
            self.recOld = self.readPesok()
        else:
            pass
        self.refreshTablePesok()

    def refreshTablePesok(self) -> set:
        """Обновление таблицы свойств несвязных грунтов"""
        self.recCountPesok = len(self.recAll)
        self.recAllOldPesok = []
        if self.recCountPesok > 0:
            self.modelPesok.setRowCount(self.recCountPesok)
            self.tablePesok.setEnabled(True)
            self.modelPesok.removeRows(0, self.modelPesok.rowCount())
            item11 = QtWidgets.QTableWidgetItem()
            item11.setData(QtCore.Qt.EditRole, id)
            for i in range(0, self.recCountPesok):  # Занесение данных в ячейки таблицы
                self.recOldPesok = self.recAll[i][9:47]
                listrow = list(self.recOldPesok)  # Список одной строки
                item9 = QtGui.QStandardItem(str(listrow[0]))  # Лабораторный номер
                item10 = QtGui.QStandardItem(str(listrow[1]))  # ID песка
                item11 = QtGui.QStandardItem(str(listrow[0]))
                QtGui.QStandardItem.setData(item11, str(listrow[2]), role=QtCore.Qt.UserRole)  # ID образца
                if listrow[21] == 1:
                    item30 = QtGui.QStandardItem("Скорочений")  # Список свойств песков
                    QtGui.QStandardItem.setData(item30, 1, role=QtCore.Qt.UserRole)
                elif listrow[21] == 2:
                    item30 = QtGui.QStandardItem("Повний")
                    QtGui.QStandardItem.setData(item30, 2, role=QtCore.Qt.UserRole)
                if listrow[22] is None:
                    item31 = QtGui.QStandardItem("-")
                else:
                    item31 = QtGui.QStandardItem(str(listrow[22]))  # Влажность
                if listrow[23] is None:
                    item32 = QtGui.QStandardItem("-")
                else:
                    item32 = QtGui.QStandardItem(str(listrow[23]))  # Плотность
                if listrow[24] is None:
                    item33 = QtGui.QStandardItem("-")
                else:
                    item33 = QtGui.QStandardItem(str(listrow[24]))  # Плотность частиц
                if listrow[25] is None:
                    item34 = QtGui.QStandardItem("-")
                else:
                    item34 = QtGui.QStandardItem(str(listrow[25]))  # Плотность в рыхлом состоянии
                if listrow[26] is None:
                    item35 = QtGui.QStandardItem("-")
                else:
                    item35 = QtGui.QStandardItem(str(listrow[26]))  # Плотность в плотном состоянии
                if listrow[27] is None:
                    item36 = QtGui.QStandardItem("-")
                else:
                    item36 = QtGui.QStandardItem(str(listrow[27]))  # Угол откоса сухой
                if listrow[28] is None:
                    item37 = QtGui.QStandardItem("-")
                else:
                    item37 = QtGui.QStandardItem(str(listrow[28]))  # Угол откоса под водой
                if listrow[29] is None:
                    item38 = QtGui.QStandardItem("-")
                else:
                    item38 = QtGui.QStandardItem(str(listrow[29]))  # Органика
                if listrow[30] is None:
                    item39 = QtGui.QStandardItem("-")
                else:
                    item39 = QtGui.QStandardItem(str(listrow[30]))  # Кф выветривания
                if listrow[31] is None:
                    item40 = QtGui.QStandardItem("-")
                else:
                    item40 = QtGui.QStandardItem(str(listrow[31]))  # Кф истирания
                if listrow[32] is None:
                    item41 = QtGui.QStandardItem("-")
                else:
                    item41 = QtGui.QStandardItem(str(listrow[32]))  # Кф фильтрации
                if listrow[33] is None:
                    item42 = QtGui.QStandardItem("-")
                else:
                    item42 = QtGui.QStandardItem(str(listrow[33]))  # Степень засоления
                if listrow[34] is None:
                    item43 = QtGui.QStandardItem("-")
                else:
                    item43 = QtGui.QStandardItem(str(listrow[34]))  # Пучение
                if listrow[35] is None:
                    item44 = QtGui.QStandardItem("-")
                else:
                    item44 = QtGui.QStandardItem(str(listrow[35]))  # Температура
                item45 = QtGui.QStandardItem(str(listrow[37]))  # ФИО лаборанта
                QtGui.QStandardItem.setData(item45, str(listrow[36]), role=QtCore.Qt.UserRole)  # ID лаборанта
                item11.setTextAlignment(QtCore.Qt.AlignCenter)
                item30.setTextAlignment(QtCore.Qt.AlignCenter)
                item31.setTextAlignment(QtCore.Qt.AlignCenter)
                item32.setTextAlignment(QtCore.Qt.AlignCenter)
                item33.setTextAlignment(QtCore.Qt.AlignCenter)
                item34.setTextAlignment(QtCore.Qt.AlignCenter)
                item35.setTextAlignment(QtCore.Qt.AlignCenter)
                item36.setTextAlignment(QtCore.Qt.AlignCenter)
                item37.setTextAlignment(QtCore.Qt.AlignCenter)
                item38.setTextAlignment(QtCore.Qt.AlignCenter)
                item39.setTextAlignment(QtCore.Qt.AlignCenter)
                item40.setTextAlignment(QtCore.Qt.AlignCenter)
                item41.setTextAlignment(QtCore.Qt.AlignCenter)
                item42.setTextAlignment(QtCore.Qt.AlignCenter)
                item43.setTextAlignment(QtCore.Qt.AlignCenter)
                item44.setTextAlignment(QtCore.Qt.AlignCenter)
                item45.setTextAlignment(QtCore.Qt.AlignCenter)
                self.modelPesok.appendRow(
                    [item9, item10, item11, item30, item31, item32, item33, item34, item35, item36,
                     item37, item38, item39, item40, item41, item42, item43, item44, item45])
                oldPesokOne = []
                for j in range(0, 37):  # Занесение данных в ячейки таблицы
                    it = listrow[j]
                    if j in range(0, 3) or j in range(21, 37):
                        oldPesokOne.append(it)
                self.recAllOldPesok.append(oldPesokOne)  # Формирование исходного списка свойств несвязных грунтов
        else:
            self.tablePesok.setEnabled(False)
#            self.toolButton_2.setEnabled(False)
            self.modelPesok.removeRows(0, self.modelPesok.rowCount())
        self.recAllNewPesok = self.recAllOldPesok
        self.tablePesok.selectRow(self.recNum)
        self.refreshTableGroupPesok()

    def refreshRadioButton(self, mg) -> set:
        """Отображение группы свойств несвязных грунтов в блоке переключателей.
        mg - параметр из базы данных"""
        if mg == 1:
            self.radioButton.setChecked(True)
        else:
            self.radioButton_2.setChecked(True)

    def refreshGroupPesok(self) -> set:
        """Обновление формы по групперовке свойств несвязных грунтов"""
        if self.radioButton.isChecked() == True:
            mg = 1
            self.doubleSpinBox_9.setEnabled(False)
            self.doubleSpinBox_10.setEnabled(False)
            self.doubleSpinBox_11.setEnabled(False)
            self.doubleSpinBox_12.setEnabled(False)
            self.doubleSpinBox_13.setEnabled(False)
            self.doubleSpinBox_14.setEnabled(False)
        elif self.radioButton_2.isChecked() == True:
            mg = 2
            self.doubleSpinBox_9.setEnabled(True)
            self.doubleSpinBox_10.setEnabled(True)
            self.doubleSpinBox_11.setEnabled(True)
            self.doubleSpinBox_12.setEnabled(True)
            self.doubleSpinBox_13.setEnabled(True)
            self.doubleSpinBox_14.setEnabled(True)
        return mg

    def refreshTableGroupPesok(self) -> int:
        """Обновление всей таблицы по групперовке свойств несвязных грунтов"""
        row = self.recNum
        for row in range(0, self.modelPesok.rowCount()):
            if self.modelPesok.item(row, 3).text() == "Скорочений":
                for j in range(12, 18):
                    self.modelPesok.item(row, j).setEnabled(False)
                    self.modelPesok.item(row, j).setBackground(self.brushgr)
                    self.modelPesok.item(row, j).setForeground(self.brushbl)
            else:
                for j in range(12, 18):
                    self.modelPesok.item(row, j).setEnabled(True)
                    self.modelPesok.item(row, j).setBackground(self.brushw)
                    self.modelPesok.item(row, j).setForeground(self.brushbl)
        return row

    def refreshOneGroupPesok(self) -> int:
        """Обновление текущей записи таблицы по групперовке свойств несвязных грунтов"""
        row = self.recNum
        if self.modelPesok.item(row, 3).text() == "Скорочений":
            for j in range(12, 18):
                self.modelPesok.item(row, j).setEnabled(False)
                self.modelPesok.item(row, j).setBackground(self.brushgr)
                self.modelPesok.item(row, j).setForeground(self.brushbl)
        else:
            for j in range(12, 18):
                self.modelPesok.item(row, j).setEnabled(True)
                self.modelPesok.item(row, j).setBackground(self.brushw)
                self.modelPesok.item(row, j).setForeground(self.brushbl)
        return row

    def refreshToolbar(self) -> set:
        """Обновляет панель инструментов"""
        if self.recNum == 0 and self.recCount > 1:
            form.action_8.setEnabled(False)  # Первая запись
            form.action_9.setEnabled(False)  # Предыдущая запись
            form.action_10.setEnabled(True)  # Следующая запись
            form.action_11.setEnabled(True)  # Последняя запись
        elif self.recNum in range(1, self.recCount - 1):
            form.action_8.setEnabled(True)  # Первая запись
            form.action_9.setEnabled(True)  # Последняя запись
            form.action_10.setEnabled(True)  # Следующая запись
            form.action_11.setEnabled(True)  # Последняя запись
        elif self.recNum == self.recCount - 1 and self.recCount > 1:
            form.action_8.setEnabled(True)  # Первая запись
            form.action_9.setEnabled(True)  # Предыдущая запись
            form.action_10.setEnabled(False)  # Следующая запись
            form.action_11.setEnabled(False)  # Последняя запись
        else:
            form.action_8.setEnabled(False)  # Первая запись
            form.action_9.setEnabled(False)  # Предыдущая запись
            form.action_10.setEnabled(False)  # Следующая запись
            form.action_11.setEnabled(False)  # Последняя запись

    def readPesok(self) -> list:
        """Считывание данных и обновление списка согласно значений экранной формы"""
        val0 = self.recOld[0]  # ID объекта
        val1 = self.recOld[1]  # Архивный номер объекта
        val2 = self.recOld[2]  # Наименование объекта
        val3 = self.recOld[3]  # Стадия проектирования
        val4 = self.recOld[4]  # Вид выработки
        val5 = self.recOld[5]  # Номер выработки
        val6 = self.recOld[6]  # Номер образца
        val7 = self.recOld[7]  # Глубина отбора
        val8 = self.recOld[8]  # Абсолютная отметка отбора
        val9 = self.recOld[9]  # Лабораторный номер
        val10 = self.recOld[10]  # ID песка (свойств несвязных грунтов)
        val11 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole)  # ID образца
        val12 = self.recOld[12]  # Метод определения грансостава
        val13 = self.recOld[13]  # >200
        val14 = self.recOld[14]  # 200-10
        val15 = self.recOld[15]  # 10-5
        val16 = self.recOld[16]  # 5-2
        val17 = self.recOld[17]  # 2-1
        val18 = self.recOld[18]  # 1-0.5
        val19 = self.recOld[19]  # 0.5-0.25
        val20 = self.recOld[20]  # 0.25-0.1
        val21 = self.recOld[21]  # <0.1
        val22 = self.recOld[22]  # 0.1-0.05
        val23 = self.recOld[23]  # 0.05-0.01
        val24 = self.recOld[24]  # 0.01-0.005
        val25 = self.recOld[25]  # <0.005
        val26 = self.recOld[26]  # 0.005-0.001
        val27 = self.recOld[27]  # <0.001
        val28 = self.recOld[28]  # Ракуша
        val29 = self.recOld[29]  # Окатанность
        val30 = self.refreshGroupPesok()  # Группа свойств несвязных грунтов
        val31 = self.doubleSpinBox.value()  # Влажность
        val32 = self.doubleSpinBox_2.value()  # Плотность
        val33 = self.doubleSpinBox_3.value()  # Плотность частиц
        val34 = self.doubleSpinBox_4.value()  # Плотность в рыхлом состоянии
        val35 = self.doubleSpinBox_5.value()  # Плотность в плотном состоянии
        val36 = self.doubleSpinBox_6.value()  # Угол откоса сухой
        val37 = self.doubleSpinBox_7.value()  # Угол откоса под водой
        val38 = self.doubleSpinBox_8.value()  # Органика
        val39 = self.doubleSpinBox_9.value()  # Кф выветривания
        val40 = self.doubleSpinBox_10.value()  # Кф истирания
        val41 = self.doubleSpinBox_11.value()  # Кф фильтрации
        val42 = self.doubleSpinBox_12.value()  # Степень засоления
        val43 = self.doubleSpinBox_13.value()  # Пучение
        val44 = self.doubleSpinBox_14.value()  # Температура
        val45 = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), role=QtCore.Qt.UserRole)  # ID лаборанта
        recOne = [val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, val10, val11, val12, val13,
                       val14, val15, val16, val17, val18, val19, val20, val21, val22, val23, val24, val25, val26,
                       val27, val28, val29, val30, val31, val32, val33, val34, val35, val36, val37, val38, val39,
                       val40, val41, val42, val43, val44, val45]
        return recOne

    def readTablePesok(self) -> list:
        """Считывание данных из таблицы построчно и обновление списка согласно значений экранной формы"""
        recAllPesok = []
        for i in range(0, self.recCountPesok):
            rec = []
            for j in range(0, 19):
                if j == 0:
                    el = str(self.modelPesok.item(i, j).data(QtCore.Qt.EditRole))  # Определение элемента текущей записи
                elif j == 1:
                    el = int(self.modelPesok.item(i, j).data(QtCore.Qt.EditRole))
                elif j == 2:
                    el = int(self.modelPesok.item(i, j).data(QtCore.Qt.UserRole))
                elif j == 3:
                    el = int(self.modelPesok.item(i, j).data(QtCore.Qt.UserRole))
                elif j in range(4, 18):
                    if self.modelPesok.item(i, j).data(QtCore.Qt.EditRole) == '-':
                        el = None
                    else:
                        el = dc.Decimal(self.modelPesok.item(i, j).data(QtCore.Qt.EditRole))
                elif j == 18:
                    el = int(self.modelPesok.item(i, j).data(QtCore.Qt.UserRole))
                else:
                    pass
                rec.append(el)  # Формирование текущей записи из элементов
            recAllPesok.append(rec)  # Формирование обновленного списка (записей-кортежей)
        return recAllPesok

    def setRow(self) -> set:
        if self.currentIndex() == 0:
            self.refreshToolbar()
            self.refreshRecord()
        elif self.currentIndex() == 1:
            self.tablePesok.selectRow(self.recNum)
        else:
            self.refreshRecord()

    def currentRow(self) -> set:
        """Определение номера записи (строки)  и установка движка на эту запись"""
        if self.currentIndex() == 1:
            recNum = self.recNum
            self.recNum = self.selmodelPesok.currentIndex().row()
            if self.recNum < 0:
                self.recNum = recNum
            self.refreshToolbar()

    def showEvent(self, e) -> set:
        """Выполняет действия при выводе окна на экран"""
        form.action_22.setEnabled(False)
        QtWidgets.QTabWidget.showEvent(self, e)

    def hideEvent(self, e) -> set:
        """Выполняет действия при скрытии окна"""
        form.action_22.setEnabled(True)
        form.pesokwin = None
        if self.recAll != []:
            self.asktoSave()
        form.refreshMain()
        QtWidgets.QTabWidget.hideEvent(self, e)

    def nextRecord(self) -> set:
        """Становится на следующей записи"""
        self.recNum += 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tablePesok.selectRow(self.recNum)

    def priorRecord(self) -> set:
        """Становится на предыдущей записи"""
        self.recNum -= 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tablePesok.selectRow(self.recNum)

    def firstRecord(self) -> set:
        """Становится на первой записи"""
        self.recNum = 0
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tablePesok.selectRow(self.recNum)

    def lastRecord(self) -> set:
        """Становится на последней записи"""
        if self.recCount > 0:
            self.recNum = self.recCount - 1
            self.refreshToolbar()
            self.asktoSave()
            self.refreshRecord()
            self.tablePesok.selectRow(self.recNum)

    def sortRecord(self) -> set:
        """Сортировка записей"""
        self.recAll.sort(key=itemgetter(0,5,7))
        form.action_13.setEnabled(False)  # Сортировать
        form.action_14.setEnabled(True)  # Снять сортировку
        self.refreshRecord()

    def desortRecord(self) -> set:
        """Отмена сортировки, что соответствует сортировке по ID"""
        self.recAll.sort(key=itemgetter(10))
        form.action_13.setEnabled(True)  # Сортировать
        form.action_14.setEnabled(False)  # Снять сортировку
        self.refreshRecord()

    def addRecord(self) -> set:
        """Добавляет новую запись"""
        val11 = self.comboBox.itemData(self.comboBox.currentIndex(),
                                       role=QtCore.Qt.UserRole)  # ID последнего образца
        with UseDatebase(dbconfig) as curs:
            curs.execute("INSERT INTO pesok (id_obrazec) VALUES (%(v11)s);", {'v11': val11})
        self.requerySelect()
        self.recCount = len(self.recAll)
        if self.recCount == 1:
            self.recNum = 0
            self.recOld = self.recAll[self.recNum]
        self.refreshRecord()
        self.lastRecord()
        self.refreshToolbar()

    def clearField(self) -> set:
        """Очищает текущее поле DoubleSpinbox
         (присваевает NULL) на вкладке Одна запись"""
        valIndex = QtWidgets.QApplication.focusWidget()
        if type(valIndex) == QtWidgets.QDoubleSpinBox:
            if valIndex.objectName() == 'doubleSpinBox_14':
                valIndex.setValue(-99)
            else:
                valIndex.setValue(0)

    def delRecord(self) -> set:
        """Удаляет текущую запись"""
        self.refreshRecord()
        val10 = self.recOld[10]  # ID
        if val10 is not None:
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                           "Властивості незв'язних ґрунтів",
                                           "Ви бажаєте видалити поточний запис з порядковим номером - " + str(self.recNum + 1) +
                                           " та лабораторним номером - " + str(self.recOld[9]) + "?")
            btnYes = QtWidgets.QPushButton("&Так")
            btnNo = QtWidgets.QPushButton("&Ні")
            btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
            self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
            self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
            self.formMassWin.setDefaultButton(btnYes)
            result = self.formMassWin.exec()
            if result == 0:
                with UseDatebase(dbconfig) as curs:
                    curs.execute("DELETE FROM pesok WHERE id = %(v10)s;", {'v10': val10})
                self.requerySelect()
                self.recCount = len(self.recAll)
                if self.recCount > 0:
                    self.firstRecord()
                    self.refreshRecord()
                    self.refreshToolbar()
                else:
                    self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information, "Незв'язні ґрунти",
                                                   "Видалено останній запис")
                    btnOK = QtWidgets.QPushButton("&OK")
                    btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                    self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                    result = self.formMassWin.exec()
                    if result == 0:
                        self.formMassWin.close()
                        self.parent().close()
            else:
                pass
        else:
            pass

    def asktoSave(self) -> set:
        """Проверяет наличие изменений в свойствах несвязных грунтов"""
        if self.recOld:
            # Считывание данных и обновление списка согласно значений экранной формы
            self.recNew = self.readPesok()
            askPesok = (self.recNew == self.recOld)
            askTablePesok = self.asktoSaveTablePesok()
            if askPesok == False:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                               "Властивості незв'язних ґрунтів",
                                               "Є незбережені дані властивостей незв'язних ґрунтів. "
                                               "\nВи бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecord(False)
                else:
                    pass
            elif askTablePesok == False:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                               "Властивості незв'язних ґрунтів",
                                               "Є незбережені дані у таблиці властивостей незв'язних ґрунтів. "
                                               "\nВи бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecordTablePesok(False)
                else:
                    pass
            else:
                pass
        else:
            pass

    def asktoSaveTablePesok(self) -> set:
        """Проверка наличия изменений в таблице Свойств несвязных грунтов"""
        self.recAllNewPesok = self.readTablePesok()
        if self.recAllNewPesok == self.recAllOldPesok:
            ask = True
        else:
            ask = False
        return ask

    def saveAll(self) -> set:
        """Сохраняет изменения по нажатию кнопки Сохранить на панели инструментов"""
        if self.currentIndex() == 0:
            self.saveRecord(False)
        if self.currentIndex() == 1:
            self.setCurrentIndex(0)
            self.setCurrentIndex(1)
        else:
            pass

    def saveRecord(self, ask) -> set:
        """Сохраняет изменения в записи и формирует новый курсор"""
        if ask == False:
            val10 = self.recOld[10]  # ID песка (свойств несвязных грунтов)
            val11 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole)  # ID образца
            val30 = self.refreshGroupPesok()  # Группа свойств несвязных грунтов
            if self.doubleSpinBox.value() == 0:
                val31 = None
            else:
                val31 = self.doubleSpinBox.value()  # Влажность
            if self.doubleSpinBox_2.value() == 0:
                val32 = None
            else:
                val32 = self.doubleSpinBox_2.value()  # Плотность
            if self.doubleSpinBox_3.value() == 0:
                val33 = None
            else:
                val33 = self.doubleSpinBox_3.value()  # Плотность частиц
            if self.doubleSpinBox_4.value() == 0:
                val34 = None
            else:
                val34 = self.doubleSpinBox_4.value()  # Плотность в рыхлом состоянии
            if self.doubleSpinBox_5.value() == 0:
                val35 = None
            else:
                val35 = self.doubleSpinBox_5.value()  # Плотность в плотном состоянии
            if self.doubleSpinBox_6.value() == 0:
                val36 = None
            else:
                val36 = self.doubleSpinBox_6.value()  # Угол откоса сухой
            if self.doubleSpinBox_7.value() == 0:
                val37 = None
            else:
                val37 = self.doubleSpinBox_7.value()  # Угол откоса под водой
            if self.doubleSpinBox_8.value() == 0:
                val38 = None
            else:
                val38 = self.doubleSpinBox_8.value()  # Органика
            if self.doubleSpinBox_9.value() == 0:
                val39 = None
            else:
                val39 = self.doubleSpinBox_9.value()  # Кф выветривания
            if self.doubleSpinBox_10.value() == 0:
                val40 = None
            else:
                val40 = self.doubleSpinBox_10.value()  # Кф истирания
            if self.doubleSpinBox_11.value() == 0:
                val41 = None
            else:
                val41 = self.doubleSpinBox_11.value()  # Кф фильтрации
            if self.doubleSpinBox_12.value() == 0:
                val42 = None
            else:
                val42 = self.doubleSpinBox_12.value()  # Степень засоления
            if self.doubleSpinBox_13.value() == 0:
                val43 = None
            else:
                val43 = self.doubleSpinBox_13.value()  # Пучение
            if self.doubleSpinBox_14.value() == -99:
                val44 = None
            else:
                val44 = self.doubleSpinBox_14.value()  # Температура
            val45 = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), role=QtCore.Qt.UserRole)  # ID лаборанта
            with UseDatebase(dbconfig) as curs:
                curs.execute("""UPDATE pesok
                                SET id_obrazec = %(v11)s, 
                                    svgroup = %(v30)s, 
                                    vlag = %(v31)s, 
                                    plotn = %(v32)s, 
                                    plotnchast = %(v33)s, 
                                    plotnmin = %(v34)s, 
                                    plotnmax = %(v35)s, 
                                    ugolsuh = %(v36)s,
                                    ugolvod = %(v37)s,
                                    organika = %(v38)s,
                                    vuvetrel = %(v39)s,
                                    isteranie = %(v40)s,
                                    filtraciya = %(v41)s,
                                    zasol = %(v42)s,
                                    puchenie = %(v43)s,
                                    temper = %(v44)s,
                                    id_labman = %(v45)s
                                WHERE id = %(v10)s;""",
                             {'v11': val11, 'v30': val30, 'v31': val31,
                              'v32': val32, 'v33': val33, 'v34': val34, 'v35': val35,
                              'v36': val36, 'v37': val37, 'v38': val38, 'v39': val39,
                              'v40': val40, 'v41': val41, 'v42': val42, 'v43': val43,
                              'v44': val44, 'v45': val45, 'v10': val10})
            self.requerySelect()
            self.refreshRecord()
            self.saveRecordTablePesok(False)
        else:
            pass

    def saveRecordTablePesok(self, ask) -> set:
        """Сохранение записей таблицы свойств несвязных грунтов"""
        if ask == False:
            for i in range(0, self.recCountPesok):
                recTabPesok = self.recAllNewPesok[i]
                val10 = recTabPesok[1]
                val11 = recTabPesok[2]
                val30 = recTabPesok[3]
                val31 = recTabPesok[4]
                val32 = recTabPesok[5]
                val33 = recTabPesok[6]
                val34 = recTabPesok[7]
                val35 = recTabPesok[8]
                val36 = recTabPesok[9]
                val37 = recTabPesok[10]
                val38 = recTabPesok[11]
                val39 = recTabPesok[12]
                val40 = recTabPesok[13]
                val41 = recTabPesok[14]
                val42 = recTabPesok[15]
                val43 = recTabPesok[16]
                val44 = recTabPesok[17]
                val45 = recTabPesok[18]
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE pesok
                                SET id_obrazec = %(v11)s, 
                                    svgroup = %(v30)s, 
                                    vlag = %(v31)s, 
                                    plotn = %(v32)s, 
                                    plotnchast = %(v33)s, 
                                    plotnmin = %(v34)s, 
                                    plotnmax = %(v35)s, 
                                    ugolsuh = %(v36)s,
                                    ugolvod = %(v37)s,
                                    organika = %(v38)s,
                                    vuvetrel = %(v39)s,
                                    isteranie = %(v40)s,
                                    filtraciya = %(v41)s,
                                    zasol = %(v42)s,
                                    puchenie = %(v43)s,
                                    temper = %(v44)s,
                                    id_labman = %(v45)s
                                WHERE id = %(v10)s;""",
                                 {'v11': val11, 'v30': val30, 'v31': val31,
                                  'v32': val32, 'v33': val33, 'v34': val34, 'v35': val35,
                                  'v36': val36, 'v37': val37, 'v38': val38, 'v39': val39,
                                  'v40': val40, 'v41': val41, 'v42': val42, 'v43': val43,
                                  'v44': val44, 'v45': val45, 'v10': val10})
            self.requerySelect()
            self.refreshRecord()
        else:
            pass


class GlinaWindow(QtWidgets.QTabWidget, egclasswin.Ui_Glina_win):
    def __init__(self) -> set:
        """Инициализация окна Свойств связных грунтов"""
        super().__init__()
        self.setupUi(self)
        global idActivObekt
        self.recAllOldGlina = []
        self.recCountGlina = 0
        self.brushw = QtGui.QBrush(QtCore.Qt.white)
        self.brushbl = QtGui.QBrush(QtCore.Qt.black)
        self.brushgr = QtGui.QBrush(QtGui.QColor(245,245,245))
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT obrazec.id, 
                                obrazec.lab_num
                            FROM obekt,
                                burehole,
                                obrazec
                            WHERE obekt.id = %(v)s 
                                AND obekt.id = burehole.id_obekt 
                                AND burehole.id = obrazec.id_burehole
                                AND obrazec.mater_obr != 'Вода'
                            ORDER BY obrazec.lab_num""", {'v': idActivObekt})
            recAll = curs.fetchall()
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox.addItem(recOne[1])
                self.comboBox.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT ispol.id, 
                                ispol.fio
                            FROM ispol
                            WHERE ispol.vidrab = 0 OR ispol.vidrab = 7 
                            ORDER BY ispol.fio""")
            recAll = curs.fetchall()
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox_2.addItem(recOne[1])
                self.comboBox_2.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
        self.kpId = 0  # ID свойств связных грунтов
        self.modelGlina = QtGui.QStandardItemModel(30, 18)  # Создание модели свойств несвязных грунтов
        self.selmodelGlina = QtCore.QItemSelectionModel(self.modelGlina)  # Создание модели выделения
        self.modelGlina.setRowCount(len(self.recAll))
        self.modelGlina.setHorizontalHeaderLabels(['Labnum',
                                                   'ID Glina',
                                                   'Лабораторний \nномер',
                                                   'Перелік \nвластивостей',
                                                   'Вологість \n%',
                                                   'Вологість \nна границi \nтекучостi \n%',
                                                   'Вологість \nна границi \nрозкочування \n%',
                                                   'Щільність \nг/см3',
                                                   'Щільність \nчасток \nг/см3',
                                                   'Вiдносна \nдеформацiя \nнабухання без \nнавантаження \nд.о.',
                                                   'Вiдносна \nдеформацiя \nпросiдання \nд.о.',
                                                   'Питоме зусилля \nвідриву штампа \nвід грунту \n(липкість) \nг/см2',
                                                   'Вiдносний вмiст \nорганiчних \nречовин \nд.о.',
                                                   'Ступiнь \nрозкладення \nторфу \n%',
                                                   'Ступiнь \nзольностi \nторфу \nд.о.',
                                                   'Ступiнь \nзасоленостi \n%',
                                                   'Вiдносна \nдеформацiя \nздимання \nд.о.',
                                                   'Температура \nґрунту \nград.С',
                                                   'Лаборант'])
        self.tableGlina.setModel(self.modelGlina)  # Создание представления
        self.tableGlina.setSelectionModel(self.selmodelGlina)  # Установить модель выделения в представлении
        self.tableGlina.setGeometry(QtCore.QRect(0, 0, 808, 640))
        self.tableGlina.setColumnWidth(0, 10)  # Labnum
        self.tableGlina.setColumnWidth(1, 10)  # ID Glina
        self.tableGlina.setColumnWidth(2, 110)  # Лабораторний номер
        self.tableGlina.setColumnWidth(3, 110)  # Перелік властивостей
        self.tableGlina.setColumnWidth(4, 80)  # Вологість, %
        self.tableGlina.setColumnWidth(5, 90)  # Вологість на границi текучостi, %
        self.tableGlina.setColumnWidth(6, 110)  # Вологість на границi розкочування, %
        self.tableGlina.setColumnWidth(7, 80)  # Щільність г/см3
        self.tableGlina.setColumnWidth(8, 80)  # Щільність часток г/см3
        self.tableGlina.setColumnWidth(9, 120)  # Вiдносна деформацiя набухання без навантаження, д.о.
        self.tableGlina.setColumnWidth(10, 100)  # Вiдносна деформацiя просiдання, д.о.
        self.tableGlina.setColumnWidth(11, 120)  # Питоме зусилля відриву штампа від грунту (липкість), г/см2
        self.tableGlina.setColumnWidth(12, 120)  # Вiдносний вмiст органiчних речовин д.о.
        self.tableGlina.setColumnWidth(13, 100)  # Ступiнь розкладення торфу, %
        self.tableGlina.setColumnWidth(14, 80)  # Ступiнь зольностi торфу, д.о.
        self.tableGlina.setColumnWidth(15, 90)  # Ступiнь засоленостi %
        self.tableGlina.setColumnWidth(16, 100)  # Вiдносна деформацiя здимання д.о.
        self.tableGlina.setColumnWidth(17, 100)  # Температура ґрунту град.С
        self.tableGlina.setColumnWidth(18, 140)  #  Лаборант (ID)
        self.tableGlina.setColumnHidden(0, True)
        self.tableGlina.setColumnHidden(1, True)
        self.requerySelect()
        if not self.recAll:
            self.addRecord()
        else:
            self.recCount = len(self.recAll)
            self.recNum = 0
            self.recOld = self.recAll[self.recNum]
            self.kpId = self.recOld[9]  # ID свойств связных грунтов
        # Назначение делегатов
        self.DelegateGlina1 = egdelegat.DoubleSpinBoxDelegate1()
        self.DelegateGlina42 = egdelegat.DoubleSpinBoxDelegate_42()
        self.DelegateGlina3 = egdelegat.DoubleSpinBoxDelegate3()
        self.DelegateGlina41 = egdelegat.DoubleSpinBoxDelegate_41()
        self.DelegateGlina51 = egdelegat.DoubleSpinBoxDelegate_51()
        self.DelegateGlina53 = egdelegat.DoubleSpinBoxDelegate_53()
        self.DelegateGlinaT = egdelegat.DoubleSpinBoxDelegate_Temper()
        self.DelegateLabnumGlina = egdelegat.ComboBoxDelegateLabnumGran()
        self.DelegateGroupGlina = egdelegat.ComboBoxDelegateGroupPesok()
        self.DelegateLabman = egdelegat.ComboBoxDelegateLabman()
        self.tableGlina.setItemDelegateForColumn(2, self.DelegateLabnumGlina)
        self.tableGlina.setItemDelegateForColumn(3, self.DelegateGroupGlina)
        self.tableGlina.setItemDelegateForColumn(4, self.DelegateGlina1)
        self.tableGlina.setItemDelegateForColumn(5, self.DelegateGlina1)
        self.tableGlina.setItemDelegateForColumn(6, self.DelegateGlina1)
        self.tableGlina.setItemDelegateForColumn(7, self.DelegateGlina42)
        self.tableGlina.setItemDelegateForColumn(8, self.DelegateGlina42)
        self.tableGlina.setItemDelegateForColumn(9, self.DelegateGlina42)
        self.tableGlina.setItemDelegateForColumn(10, self.DelegateGlina42)
        self.tableGlina.setItemDelegateForColumn(11, self.DelegateGlina41)
        self.tableGlina.setItemDelegateForColumn(12, self.DelegateGlina42)
        self.tableGlina.setItemDelegateForColumn(13, self.DelegateGlina41)
        self.tableGlina.setItemDelegateForColumn(14, self.DelegateGlina41)
        self.tableGlina.setItemDelegateForColumn(15, self.DelegateGlina51)
        self.tableGlina.setItemDelegateForColumn(16, self.DelegateGlina53)
        self.tableGlina.setItemDelegateForColumn(17, self.DelegateGlinaT)
        self.tableGlina.setItemDelegateForColumn(18, self.DelegateLabman)
        # Обновление формы и панели инструментов
        self.refreshToolbar()
        self.refreshRecord()
        # Назначение обработчиков сигналов
        self.currentChanged.connect(self.asktoSave)
        self.currentChanged.connect(self.setRow)
        self.radioButton.toggled.connect(self.refreshGroupGlina)
        self.radioButton_2.toggled.connect(self.refreshGroupGlina)
        self.toolButton_6.clicked.connect(self.clearField)
        self.selmodelGlina.currentChanged.connect(self.currentRow)
        self.modelGlina.itemChanged.connect(self.refreshOneGroupGlina)
#        self.tableGlina.currentIndex().model().dataChanged.connect(self.refreshOneGroupGlina)
        self.selmodelGlina.selectionChanged['QItemSelection', 'QItemSelection'].connect(self.currentRow)

    def requerySelect(self) -> set:
        """Обновляет главный запрос для экранной формы"""
        global idActivObekt
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT burehole.id_obekt,
                                obekt.numdog,
                                obekt.archnum,
                                obekt.stadia,
                                burehole.vidhole,
                                burehole.num_hole,
                                obrazec.num_obrazec,
                                obrazec.glub_otbor,
                                burehole.koord_z - obrazec.glub_otbor,
                                obrazec.lab_num,
                                glina.id,
                                glina.id_obrazec,
                                gran.metod,
                                gran.f200,
                                gran.f200_10,
                                gran.f10_5,
                                gran.f5_2,
                                gran.f2_1,
                                gran.f1_05,
                                gran.f05_025,
                                gran.f025_01,
                                gran.f01_,
                                gran.f01_005,
                                gran.f005_001,
                                gran.f001_0005,
                                gran.f0005_,
                                gran.f0005_0001,
                                gran.f0001_,
                                gran.rakusha,
                                gran.okatan,
                                glina.svgroup,
                                glina.vlag,
                                glina.vlagtek,
                                glina.vlagrask,
                                glina.plotn,
                                glina.plotnchast,
                                glina.otnnabuh,
                                glina.otnprosad,
                                glina.lipkost,
                                glina.organika,
                                glina.steprazl,
                                glina.stepzol,
                                glina.zasol,
                                glina.puchenie,
                                glina.temper,
                                glina.id_labman,
                                vlabman.fio
                            FROM obekt,
                                burehole,
                                obrazec,
                                glina
                                 LEFT JOIN gran ON glina.id_obrazec = gran.id_obrazec
                                 LEFT JOIN vlabman ON glina.id_labman = vlabman.id
                            WHERE obekt.id = %(v0)s 
                            AND obekt.id = burehole.id_obekt 
                            AND burehole.id = obrazec.id_burehole 
                            AND obrazec.id = glina.id_obrazec
                            ORDER BY glina.id""", {'v0': idActivObekt})
            self.recAll = curs.fetchall()
            return self.recAll

    def refreshRecord(self) -> set:
        """Обновляет экранную форму с отображаемой записью"""
        # Передача значений из списка в экранную форму
        self.recOld = self.recAll[self.recNum]
        if self.recOld:
            self.label.setText("Ідентіфікатор об'єкта - " + str(self.recOld[0]) + "\n" +
                               "Номер договору - " + self.recOld[1] + "\n" +
                               "Архівний номер звіту - " + self.recOld[2] + "\n" +
                               self.recOld[4] + " №" + self.recOld[5] + "\n" +
                               "Зразок №" + str(self.recOld[6]) + "\n" +
                               "Глибина відбору - " + str(self.recOld[7]))  # ID объекта, номер договора,
                                                                            # архивный номер, вид и № выработки,
                                                                            # № образца, глубина обора
            self.obID = self.recOld[0]  # ID объекта
            self.numdog = self.recOld[1]  # Номер договора
            self.archnum = self.recOld[2]  # Архивный номер объекта
            self.stadia = self.recOld[3]  # Стадия проектирования
            self.vidhole = self.recOld[4]  # Вид выработки
            self.numhole = self.recOld[5]  # Номер выработки
            self.numobrazec = self.recOld[6]  # Номер образца
            self.glubotbor = self.recOld[7]  # Глубина отбора
            self.absotm = self.recOld[8]  # Абсолютная отметка отбора
            self.labnum = self.recOld[9]  # Лабораторный номер
            self.granId = self.recOld[10]  # ID свойств связных грунтов
            self.comboBox.setCurrentIndex(
                self.comboBox.findData(self.recOld[11], role=QtCore.Qt.UserRole))  # ID образца
            self.refreshRadioButton(self.recOld[30])  # Группа свойств связных грунтов
            if self.recOld[31] == None:
                self.doubleSpinBox.setValue(0)
            else:
                self.doubleSpinBox.setValue(self.recOld[31])  # Вологість ґрунту, %
            if self.recOld[32] == None:
                self.doubleSpinBox_2.setValue(0)
            else:
                self.doubleSpinBox_2.setValue(self.recOld[32])  # Вологість на границi текучостi, %
            if self.recOld[33] == None:
                self.doubleSpinBox_3.setValue(0)
            else:
                self.doubleSpinBox_3.setValue(self.recOld[33])  # Вологість на границi розкочування, %
            if self.recOld[34] == None:
                self.doubleSpinBox_4.setValue(0)
            else:
                self.doubleSpinBox_4.setValue(self.recOld[34])  # Щільність ґрунту, г/см3
            if self.recOld[35] == None:
                self.doubleSpinBox_5.setValue(0)
            else:
                self.doubleSpinBox_5.setValue(self.recOld[35])  # Щiльнiсть часток ґрунту, г/см3
            if self.recOld[36] == None:
                self.doubleSpinBox_6.setValue(0)
            else:
                self.doubleSpinBox_6.setValue(self.recOld[36])  # Вiдносна деформацiя набухання без навантаження, д.о.
            if self.recOld[37] == None:
                self.doubleSpinBox_7.setValue(0)
            else:
                self.doubleSpinBox_7.setValue(self.recOld[37])  # Вiдносна деформацiя просiдання, д.о.
            if self.recOld[38] == None:
                self.doubleSpinBox_8.setValue(0)
            else:
                self.doubleSpinBox_8.setValue(
                    self.recOld[38])  # Питоме зусилля відриву штампа від грунту (липкість), г/см2
            if self.recOld[39] == None:
                self.doubleSpinBox_9.setValue(0)
            else:
                self.doubleSpinBox_9.setValue(self.recOld[39])  # Вiдносний вмiст органiчних речовин у ґрунті, д.о.
            if self.recOld[40] == None:
                self.doubleSpinBox_10.setValue(0)
            else:
                self.doubleSpinBox_10.setValue(self.recOld[40])  # Ступiнь розкладення торфу, %
            if self.recOld[41] == None:
                self.doubleSpinBox_11.setValue(0)
            else:
                self.doubleSpinBox_11.setValue(self.recOld[41])  # Ступiнь зольностi торфу, д.о.
            if self.recOld[42] == None:
                self.doubleSpinBox_12.setValue(0)
            else:
                self.doubleSpinBox_12.setValue(self.recOld[42])  # Ступiнь засоленостi ґрунту, %
            if self.recOld[43] == None:
                self.doubleSpinBox_13.setValue(0)
            else:
                self.doubleSpinBox_13.setValue(self.recOld[43])  # Вiдносна деформацiя здимання ґрунту, д.о.
            if self.recOld[44] == None:
                self.doubleSpinBox_14.setValue(-99)
            else:
                self.doubleSpinBox_14.setValue(self.recOld[44])  # Температура ґрунту, град.С
            self.comboBox_2.setCurrentIndex(
                self.comboBox_2.findData(self.recOld[45], role=QtCore.Qt.UserRole))  # ID лаборанта
            # Подготовка и отображение расчетных показателей
            self.ip = plastich(self.recOld[32], self.recOld[33])
            if self.ip != None:
                self.label_29.setText(str(self.ip))  # Число пластичностi, %
            else:
                self.label_29.setText("-")
            self.il = konsist(self.recOld[31], self.recOld[32], self.recOld[33])
            if self.il != None:
                self.label_30.setText(str(self.il))  # Показник текучостi, д.о.
            else:
                self.label_30.setText("-")
            self.pd = plotsk(self.recOld[31], self.recOld[34])
            if self.pd != None:
                self.label_31.setText(str(self.pd))  # Щiльнiсть сухого грунту (скелета), г/см3
            else:
                self.label_31.setText("-")
            self.n = por(self.recOld[31], self.recOld[34], self.recOld[35])
            if self.n != None:
                self.label_32.setText(str(self.n))  # Пористость
            else:
                self.label_32.setText("-")
            self.e = kfPorw(self.recOld[31], self.recOld[34], self.recOld[35])
            if self.e != None:
                self.label_33.setText(str(self.e))  # Кф пористости
            else:
                self.label_33.setText("-")
            self.Sr = kfVodonas(self.recOld[31], self.recOld[34], self.recOld[35])
            if self.Sr != None:
                if self.Sr >= 1:
                    self.label_34.setText("1.00")
                else:
                    self.label_34.setText(str(self.Sr))  # Кф водонасыщения, д.о.
            else:
                self.label_34.setText("-")
            self.Wsat = vlagAllW(self.recOld[31], self.recOld[34], self.recOld[35])
            if self.Wsat != None:
                self.label_38.setText(str(self.Wsat))  # Повна вологоємність, %
            else:
                self.label_38.setText("-")
            self.q = udelVesps(self.recOld[34])
            if self.q != None:
                self.label_37.setText(str(self.q))  # Питома вага, кН/м3
            else:
                self.label_37.setText("-")
            self.qw = udelVesWW(self.recOld[31], self.recOld[34], self.recOld[35])
            if self.qw != None:
                self.label_41.setText(str(self.qw))  # Питома вага з урахуванням зважувальної дії води, кН/м3
            else:
                self.label_41.setText("-")
            if self.recOld[12] == None:  # Если есть грансостав то определяется Кф неоднородности
                stnednorod = 0
            else:
                stnednorod = stn(self.recOld[13], self.recOld[14],
                                 self.recOld[15], self.recOld[16],
                                 self.recOld[17], self.recOld[18],
                                 self.recOld[19], self.recOld[20],
                                 self.recOld[21])
            # self.label_37.setText(str(stnednorod))  # Степень неоднородности
            strstn = namestn(stnednorod)  # Наименование неоднородности
            namegrunt = nameglina(self.e, self.ip, self.il)
            self.label_18.setText(namegrunt + strstn)  # Наименование грунта
            # Считывание данных и обновление списка согласно значений экранной формы
            val0 = self.recOld[0]  # ID объекта
            val1 = self.recOld[1]  # Архивный номер объекта
            val2 = self.recOld[2]  # Наименование объекта
            val3 = self.recOld[3]  # Стадия проектирования
            val4 = self.recOld[4]  # Вид выработки
            val5 = self.recOld[5]  # Номер выработки
            val6 = self.recOld[6]  # Номер образца
            val7 = self.recOld[7]  # Глубина отбора
            val8 = self.recOld[8]  # Абсолютная отметка отбора
            val9 = self.recOld[9]  # Лабораторный номер
            val10 = self.recOld[10]  # ID глинистых грунтов (свойств связных грунтов)
            val11 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole)  # ID образца
            val12 = self.recOld[12]  # Метод определения грансостава
            val13 = self.recOld[13]  # >200
            val14 = self.recOld[14]  # 200-10
            val15 = self.recOld[15]  # 10-5
            val16 = self.recOld[16]  # 5-2
            val17 = self.recOld[17]  # 2-1
            val18 = self.recOld[18]  # 1-0.5
            val19 = self.recOld[19]  # 0.5-0.25
            val20 = self.recOld[20]  # 0.25-0.1
            val21 = self.recOld[21]  # <0.1
            val22 = self.recOld[22]  # 0.1-0.05
            val23 = self.recOld[23]  # 0.05-0.01
            val24 = self.recOld[24]  # 0.01-0.005
            val25 = self.recOld[25]  # <0.005
            val26 = self.recOld[26]  # 0.005-0.001
            val27 = self.recOld[27]  # <0.001
            val28 = self.recOld[28]  # Ракуша
            val29 = self.recOld[29]  # Окатанность
            val30 = self.refreshGroupGlina()  # Группа свойств связных грунтов
            val31 = self.doubleSpinBox.value()  # Вологість ґрунту, %
            val32 = self.doubleSpinBox_2.value()  # Вологість на границi текучостi, %
            val33 = self.doubleSpinBox_3.value()  # Вологість на границi розкочування, %
            val34 = self.doubleSpinBox_4.value()  # Щільність ґрунту, г/см3
            val35 = self.doubleSpinBox_5.value()  # Щiльнiсть часток ґрунту, г/см3
            val36 = self.doubleSpinBox_6.value()  # Вiдносна деформацiя набухання без навантаження, д.о.
            val37 = self.doubleSpinBox_7.value()  # Вiдносна деформацiя просiдання, д.о.
            val38 = self.doubleSpinBox_8.value()  # Питоме зусилля відриву штампа від грунту (липкість), г/см2
            val39 = self.doubleSpinBox_9.value()  # Вiдносний вмiст органiчних речовин у ґрунті, д.о.
            val40 = self.doubleSpinBox_10.value()  # Ступiнь розкладення торфу, %
            val41 = self.doubleSpinBox_11.value()  # Ступiнь зольностi торфу, д.о.
            val42 = self.doubleSpinBox_12.value()  # Ступiнь засоленостi ґрунту, %
            val43 = self.doubleSpinBox_13.value()  # Вiдносна деформацiя здимання ґрунту, д.о.
            val44 = self.doubleSpinBox_14.value()  # Температура ґрунту, град.С
            val45 = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), role=QtCore.Qt.UserRole)  # ID лаборанта
            self.recOld = [val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, val10, val11, val12, val13,
                           val14, val15, val16, val17, val18, val19, val20, val21, val22, val23, val24, val25, val26,
                           val27, val28, val29, val30, val31, val32, val33, val34, val35, val36, val37, val38, val39,
                           val40, val41, val42, val43, val44, val45]
        else:
            pass
        self.refreshTableGlina()

    def refreshTableGlina(self) -> set:
        """Обновление таблицы свойств связных грунтов"""
        self.recCountGlina = len(self.recAll)
        self.recAllOldGlina = []
        if self.recCountGlina > 0:
            self.modelGlina.setRowCount(self.recCountGlina)
            self.tableGlina.setEnabled(True)
            self.modelGlina.removeRows(0, self.modelGlina.rowCount())
            item11 = QtWidgets.QTableWidgetItem()
            item11.setData(QtCore.Qt.EditRole, id)
            self.recAllOldGlina = []
            for i in range(0, self.recCountGlina):  # Занесение данных в ячейки таблицы
                self.recOldGlina = self.recAll[i][9:47]
                listrow = list(self.recOldGlina)  # Список одной строки
                item9 = QtGui.QStandardItem(str(listrow[0]))  # Лабораторный номер
                item10 = QtGui.QStandardItem(str(listrow[1]))  # ID глина
                item11 = QtGui.QStandardItem(str(listrow[0]))
                QtGui.QStandardItem.setData(item11, str(listrow[2]), role=QtCore.Qt.UserRole)  # ID образца
                if listrow[21] == 1:
                    item30 = QtGui.QStandardItem("Скорочений")  # Список свойств глинистых грунтов
                    QtGui.QStandardItem.setData(item30, 1, role=QtCore.Qt.UserRole)
                elif listrow[21] == 2:
                    item30 = QtGui.QStandardItem("Повний")
                    QtGui.QStandardItem.setData(item30, 2, role=QtCore.Qt.UserRole)
                if listrow[22] is None:
                    item31 = QtGui.QStandardItem("-")
                else:
                    item31 = QtGui.QStandardItem(str(listrow[22]))  # Вологість ґрунту, %
                if listrow[23] is None:
                    item32 = QtGui.QStandardItem("-")
                else:
                    item32 = QtGui.QStandardItem(str(listrow[23]))  # Вологість на границi текучостi, %
                if listrow[24] is None:
                    item33 = QtGui.QStandardItem("-")
                else:
                    item33 = QtGui.QStandardItem(str(listrow[24]))  # Вологість на границi розкочування, %
                if listrow[25] is None:
                    item34 = QtGui.QStandardItem("-")
                else:
                    item34 = QtGui.QStandardItem(str(listrow[25]))  # Щільність ґрунту, г/см3
                if listrow[26] is None:
                    item35 = QtGui.QStandardItem("-")
                else:
                    item35 = QtGui.QStandardItem(str(listrow[26]))  # Щiльнiсть часток ґрунту, г/см3
                if listrow[27] is None:
                    item36 = QtGui.QStandardItem("-")
                else:
                    item36 = QtGui.QStandardItem(str(listrow[27]))  # Вiдносна деформацiя набухання без навантаження, д.о.
                if listrow[28] is None:
                    item37 = QtGui.QStandardItem("-")
                else:
                    item37 = QtGui.QStandardItem(str(listrow[28]))  # Вiдносна деформацiя просiдання, д.о.
                if listrow[29] is None:
                    item38 = QtGui.QStandardItem("-")
                else:
                    item38 = QtGui.QStandardItem(str(listrow[29]))  # Питоме зусилля відриву штампа від грунту (липкість), г/см2
                if listrow[30] is None:
                    item39 = QtGui.QStandardItem("-")
                else:
                    item39 = QtGui.QStandardItem(str(listrow[30]))  # Вiдносний вмiст органiчних речовин у ґрунті, д.о.
                if listrow[31] is None:
                    item40 = QtGui.QStandardItem("-")
                else:
                    item40 = QtGui.QStandardItem(str(listrow[31]))  # Ступiнь розкладення торфу, %
                if listrow[32] is None:
                    item41 = QtGui.QStandardItem("-")
                else:
                    item41 = QtGui.QStandardItem(str(listrow[32]))  # Ступiнь зольностi торфу, д.о.
                if listrow[33] is None:
                    item42 = QtGui.QStandardItem("-")
                else:
                    item42 = QtGui.QStandardItem(str(listrow[33]))  # Ступiнь засоленостi ґрунту, %
                if listrow[34] is None:
                    item43 = QtGui.QStandardItem("-")
                else:
                    item43 = QtGui.QStandardItem(str(listrow[34]))  # Вiдносна деформацiя здимання ґрунту, д.о.
                if listrow[35] is None:
                    item44 = QtGui.QStandardItem("-")
                else:
                    item44 = QtGui.QStandardItem(str(listrow[35]))  # Температура ґрунту, град.С
                item45 = QtGui.QStandardItem(str(listrow[37]))
                QtGui.QStandardItem.setData(item45, str(listrow[36]), role=QtCore.Qt.UserRole)  # ID лаборанта
                item11.setTextAlignment(QtCore.Qt.AlignCenter)
                item30.setTextAlignment(QtCore.Qt.AlignCenter)
                item31.setTextAlignment(QtCore.Qt.AlignCenter)
                item32.setTextAlignment(QtCore.Qt.AlignCenter)
                item33.setTextAlignment(QtCore.Qt.AlignCenter)
                item34.setTextAlignment(QtCore.Qt.AlignCenter)
                item35.setTextAlignment(QtCore.Qt.AlignCenter)
                item36.setTextAlignment(QtCore.Qt.AlignCenter)
                item37.setTextAlignment(QtCore.Qt.AlignCenter)
                item38.setTextAlignment(QtCore.Qt.AlignCenter)
                item39.setTextAlignment(QtCore.Qt.AlignCenter)
                item40.setTextAlignment(QtCore.Qt.AlignCenter)
                item41.setTextAlignment(QtCore.Qt.AlignCenter)
                item42.setTextAlignment(QtCore.Qt.AlignCenter)
                item43.setTextAlignment(QtCore.Qt.AlignCenter)
                item44.setTextAlignment(QtCore.Qt.AlignCenter)
                item45.setTextAlignment(QtCore.Qt.AlignCenter)
                self.modelGlina.appendRow(
                    [item9, item10, item11, item30, item31, item32, item33, item34, item35, item36,
                     item37, item38, item39, item40, item41, item42, item43, item44, item45])
                oldGlinaOne = []
                for j in range(0, 37):  # Занесение данных в ячейки таблицы
                    it = listrow[j]
                    if j in range(0, 3) or j in range(21, 37):
                        oldGlinaOne.append(it)
                self.recAllOldGlina.append(oldGlinaOne)  # Формирование исходного списка свойств связных грунтов
        else:
            self.tableGlina.setEnabled(False)
#            self.toolButton_2.setEnabled(False)
            self.modelGlina.removeRows(0, self.modelGlina.rowCount())
        self.recAllNewGlina = self.recAllOldGlina
        self.tableGlina.selectRow(self.recNum)
        self.refreshTableGroupGlina()

    def refreshGroupGlina(self) -> int:
        """Обновление формы по групперовке свойств связных грунтов"""
        if self.radioButton.isChecked() == True:
            mg = 1
            self.doubleSpinBox_10.setEnabled(False)
            self.doubleSpinBox_11.setEnabled(False)
            self.doubleSpinBox_12.setEnabled(False)
            self.doubleSpinBox_13.setEnabled(False)
            self.doubleSpinBox_14.setEnabled(False)
        elif self.radioButton_2.isChecked() == True:
            mg = 2
            self.doubleSpinBox_10.setEnabled(True)
            self.doubleSpinBox_11.setEnabled(True)
            self.doubleSpinBox_12.setEnabled(True)
            self.doubleSpinBox_13.setEnabled(True)
            self.doubleSpinBox_14.setEnabled(True)
        return mg

    def refreshRadioButton(self, mg) -> set:
        """Отображение группы свойств связных грунтов в блоке переключателей.
        mg - параметр из базы данных"""
        if mg == 1:
            self.radioButton.setChecked(True)
        else:
            self.radioButton_2.setChecked(True)

    def refreshTableGroupGlina(self) -> int:
        """Обновление всей таблицы по групперовке свойств связных грунтов"""
        row = self.recNum
        for row in range(0, self.modelGlina.rowCount()):
            if self.modelGlina.item(row, 3).text() == "Скорочений":
                for j in range(13, 18):
                    self.modelGlina.item(row, j).setEnabled(False)
                    self.modelGlina.item(row, j).setBackground(self.brushgr)
                    self.modelGlina.item(row, j).setForeground(self.brushbl)
            else:
                for j in range(13, 18):
                    self.modelGlina.item(row, j).setEnabled(True)
                    self.modelGlina.item(row, j).setBackground(self.brushw)
                    self.modelGlina.item(row, j).setForeground(self.brushbl)
        return row

    def refreshOneGroupGlina(self) -> int:
        """Обновление текущей записи таблицы по групперовке свойств связных грунтов"""
        row = self.recNum
        if self.modelGlina.item(row, 3).text() == "Скорочений":
            for j in range(13, 18):
                self.modelGlina.item(row, j).setEnabled(False)
                self.modelGlina.item(row, j).setBackground(self.brushgr)
                self.modelGlina.item(row, j).setForeground(self.brushbl)
        else:
            for j in range(13, 18):
                self.modelGlina.item(row, j).setEnabled(True)
                self.modelGlina.item(row, j).setBackground(self.brushw)
                self.modelGlina.item(row, j).setForeground(self.brushbl)
        return row

    def refreshToolbar(self) -> set:
        """Обновляет панель инструментов"""
        if self.recNum == 0 and self.recCount > 1:
            form.action_8.setEnabled(False)  # Первая запись
            form.action_9.setEnabled(False)  # Предыдущая запись
            form.action_10.setEnabled(True)  # Следующая запись
            form.action_11.setEnabled(True)  # Последняя запись
        elif self.recNum in range(1, self.recCount - 1):
            form.action_8.setEnabled(True)  # Первая запись
            form.action_9.setEnabled(True)  # Последняя запись
            form.action_10.setEnabled(True)  # Следующая запись
            form.action_11.setEnabled(True)  # Последняя запись
        elif self.recNum == self.recCount - 1 and self.recCount > 1:
            form.action_8.setEnabled(True)  # Первая запись
            form.action_9.setEnabled(True)  # Предыдущая запись
            form.action_10.setEnabled(False)  # Следующая запись
            form.action_11.setEnabled(False)  # Последняя запись
        else:
            form.action_8.setEnabled(False)  # Первая запись
            form.action_9.setEnabled(False)  # Предыдущая запись
            form.action_10.setEnabled(False)  # Следующая запись
            form.action_11.setEnabled(False)  # Последняя запись

    def setRow(self) -> set:
        if self.currentIndex() == 0:
            self.refreshToolbar()
            self.refreshRecord()
        elif self.currentIndex() == 1:
            self.tableGlina.selectRow(self.recNum)
        else:
            self.refreshRecord()

    def currentRow(self) -> set:
        """Определение номера записи (строки)  и установка движка на эту запись"""
        if self.currentIndex() == 1:
            recNum = self.recNum
            self.recNum = self.selmodelGlina.currentIndex().row()
            if self.recNum < 0:
                self.recNum = recNum
            self.refreshToolbar()

    def showEvent(self, e) -> set:
        """Выполняет действия при выводе окна на экран"""
        form.action_21.setEnabled(False)
        QtWidgets.QTabWidget.showEvent(self, e)

    def hideEvent(self, e) -> set:
        """Выполняет действия при скрытии окна"""
        form.action_21.setEnabled(True)
        form.glinawin = None
        if self.recAll != []:
            self.asktoSave()
        form.refreshMain()
        QtWidgets.QTabWidget.hideEvent(self, e)

    def nextRecord(self) -> set:
        """Становится на следующей записи"""
        self.recNum += 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableGlina.selectRow(self.recNum)

    def priorRecord(self) -> set:
        """Становится на предыдущей записи"""
        self.recNum -= 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableGlina.selectRow(self.recNum)

    def firstRecord(self) -> set:
        """Становится на первой записи"""
        self.recNum = 0
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableGlina.selectRow(self.recNum)

    def lastRecord(self) -> set:
        """Становится на последней записи"""
        if self.recCount > 0:
            self.recNum = self.recCount - 1
            self.refreshToolbar()
            self.asktoSave()
            self.refreshRecord()
            self.tableGlina.selectRow(self.recNum)

    def sortRecord(self) -> set:
        """Сортировка записей"""
        self.recAll.sort(key=itemgetter(0,5,7))
        form.action_13.setEnabled(False)  # Сортировать
        form.action_14.setEnabled(True)  # Снять сортировку
        self.refreshRecord()

    def desortRecord(self) -> set:
        """Отмена сортировки, что соответствует сортировке по ID"""
        self.recAll.sort(key=itemgetter(10))
        form.action_13.setEnabled(True)  # Сортировать
        form.action_14.setEnabled(False)  # Снять сортировку
        self.refreshRecord()

    def addRecord(self) -> set:
        """Добавляет новую запись"""
        val11 = self.comboBox.itemData(self.comboBox.currentIndex(),
                                       role=QtCore.Qt.UserRole)  # ID последнего образца
        with UseDatebase(dbconfig) as curs:
            curs.execute("INSERT INTO glina (id_obrazec) VALUES (%(v11)s);", {'v11': val11})
        self.requerySelect()
        self.recCount = len(self.recAll)
        if self.recCount == 1:
            self.recNum = 0
            self.recOld = self.recAll[self.recNum]
        self.refreshRecord()
        self.lastRecord()
        self.refreshToolbar()

    def clearField(self) -> set:
        """Очищает текущее поле (присваевает NULL)"""
        #        valIndex = self.tableSzond.currentIndex()                               # Создание экземпляра класса ModelIndex
        #        indexCell = self.modelSzond.index(valIndex.row(),valIndex.column())     # Определение индекса выбранной ячейки
        #        self.modelSzond.setData(indexCell,"None",QtCore.Qt.EditRole)            # Присвоить неопределенное значение выбранной ячейки
        valIndex = QtWidgets.QApplication.focusWidget()
        if type(valIndex) == QtWidgets.QDoubleSpinBox:
            if valIndex.objectName() == 'doubleSpinBox_14':
                valIndex.setValue(-99)
            else:
                valIndex.setValue(0)

    def delRecord(self) -> set:
        """Удаляет текущую запись"""
        self.refreshRecord()
        val10 = self.recOld[10]  # ID глины
        if val10 is not None:
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                           "Властивості зв'язних ґрунтів",
                                           "Ви бажаєте видалити поточний запис з порядковим номером - " + str(self.recNum + 1) +
                                           " та лабораторним номером - " + str(self.recOld[9]) + "?")
            btnYes = QtWidgets.QPushButton("&Так")
            btnNo = QtWidgets.QPushButton("&Ні")
            btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
            self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
            self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
            self.formMassWin.setDefaultButton(btnYes)
            result = self.formMassWin.exec()
            if result == 0:
                with UseDatebase(dbconfig) as curs:
                    curs.execute("DELETE FROM glina WHERE id = %(v10)s;", {'v10': val10})
                self.requerySelect()
                self.recCount = len(self.recAll)
                if self.recCount > 0:
                    self.firstRecord()
                    self.refreshRecord()
                    self.refreshToolbar()
                else:
                    self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information, "Зв'язні ґрунти",
                                                   "Видалено останній запис")
                    btnOK = QtWidgets.QPushButton("&OK")
                    btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                    self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                    result = self.formMassWin.exec()
                    if result == 0:
                        self.formMassWin.close()
                        self.parent().close()
            else:
                pass
        else:
            pass

    def asktoSave(self) -> set:
        """Проверяет наличие изменений в свойствах связных грунтов"""
        if self.recOld:
            # Считывание данных и обновление списка согласно значений экранной формы
            val0 = self.recOld[0]  # ID объекта
            val1 = self.recOld[1]  # Архивный номер объекта
            val2 = self.recOld[2]  # Наименование объекта
            val3 = self.recOld[3]  # Стадия проектирования
            val4 = self.recOld[4]  # Вид выработки
            val5 = self.recOld[5]  # Номер выработки
            val6 = self.recOld[6]  # Номер образца
            val7 = self.recOld[7]  # Глубина отбора
            val8 = self.recOld[8]  # Абсолютная отметка отбора
            val9 = self.recOld[9]  # Лабораторный номер
            val10 = self.recOld[10]  # ID песка (свойств несвязных грунтов)
            val11 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole)  # ID образца
            val12 = self.recOld[12]  # Метод определения грансостава
            val13 = self.recOld[13]  # >200
            val14 = self.recOld[14]  # 200-10
            val15 = self.recOld[15]  # 10-5
            val16 = self.recOld[16]  # 5-2
            val17 = self.recOld[17]  # 2-1
            val18 = self.recOld[18]  # 1-0.5
            val19 = self.recOld[19]  # 0.5-0.25
            val20 = self.recOld[20]  # 0.25-0.1
            val21 = self.recOld[21]  # <0.1
            val22 = self.recOld[22]  # 0.1-0.05
            val23 = self.recOld[23]  # 0.05-0.01
            val24 = self.recOld[24]  # 0.01-0.005
            val25 = self.recOld[25]  # <0.005
            val26 = self.recOld[26]  # 0.005-0.001
            val27 = self.recOld[27]  # <0.001
            val28 = self.recOld[28]  # Ракуша
            val29 = self.recOld[29]  # Окатанность
            val30 = self.refreshGroupGlina()  # Группа свойств связных грунтов
            val31 = self.doubleSpinBox.value()  # Вологість ґрунту, %
            val32 = self.doubleSpinBox_2.value()  # Вологість на границi текучостi, %
            val33 = self.doubleSpinBox_3.value()  # Вологість на границi розкочування, %
            val34 = self.doubleSpinBox_4.value()  # Щільність ґрунту, г/см3
            val35 = self.doubleSpinBox_5.value()  # Щiльнiсть часток ґрунту, г/см3
            val36 = self.doubleSpinBox_6.value()  # Вiдносна деформацiя набухання без навантаження, д.о.
            val37 = self.doubleSpinBox_7.value()  # Вiдносна деформацiя просiдання, д.о.
            val38 = self.doubleSpinBox_8.value()  # Питоме зусилля відриву штампа від грунту (липкість), г/см2
            val39 = self.doubleSpinBox_9.value()  # Вiдносний вмiст органiчних речовин у ґрунті, д.о.
            val40 = self.doubleSpinBox_10.value()  # Ступiнь розкладення торфу, %
            val41 = self.doubleSpinBox_11.value()  # Ступiнь зольностi торфу, д.о.
            val42 = self.doubleSpinBox_12.value()  # Ступiнь засоленостi ґрунту, %
            val43 = self.doubleSpinBox_13.value()  # Вiдносна деформацiя здимання ґрунту, д.о.
            val44 = self.doubleSpinBox_14.value()  # Температура ґрунту, град.С
            val45 = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), role=QtCore.Qt.UserRole)  # ID лаборанта
            self.recNew = [val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, val10, val11, val12, val13,
                           val14, val15, val16, val17, val18, val19, val20, val21, val22, val23, val24, val25, val26,
                           val27, val28, val29, val30, val31, val32, val33, val34, val35, val36, val37, val38, val39,
                           val40, val41, val42, val43, val44, val45]
            askGlina = (self.recNew == self.recOld)
            askTableGlina = self.asktoSaveTableGlina()
            if askGlina == False:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                               "Властивості зв'язних ґрунтів",
                                               "Є незбережені дані властивостей зв'язних ґрунтів. "
                                               "\nВи бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecord(False)
                else:
                    pass
            elif askTableGlina == False:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                               "Властивості зв'язних ґрунтів",
                                               "Є незбережені дані у таблиці властивостей зв'язних ґрунтів. "
                                               "\nВи бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecordTableGlina(False)
                else:
                    pass
            else:
                pass
        else:
            pass

    def asktoSaveTableGlina(self) -> bool:
        """Проверка наличия изменений в таблице Свойств связных грунтов"""
        # Считывание данных и обновление списка согласно значений экранной формы
        self.recAllNewGlina = []
        for i in range(0, self.recCountGlina):
            rec = []
            for j in range(0, 19):
                if j == 0:
                    el = str(self.modelGlina.item(i, j).data(QtCore.Qt.EditRole))  # Определение элемента текущей записи
                elif j == 1:
                    el = int(self.modelGlina.item(i, j).data(QtCore.Qt.EditRole))
                elif j == 2:
                    el = int(self.modelGlina.item(i, j).data(QtCore.Qt.UserRole))
                elif j == 3:
                    el = int(self.modelGlina.item(i, j).data(QtCore.Qt.UserRole))
                elif j in range(4, 18):
                    if self.modelGlina.item(i, j).data(QtCore.Qt.EditRole) == '-':
                        el = None
                    else:
                        el = dc.Decimal(self.modelGlina.item(i, j).data(QtCore.Qt.EditRole))
                elif j == 18:
                    el = int(self.modelGlina.item(i, j).data(QtCore.Qt.UserRole))
                else:
                    if el == 'None':
                        el = None
                rec.append(el)  # Формирование текущей записи из элементов
            self.recAllNewGlina.append(rec)  # Формирование обновленного списка (записей-кортежей)
        if self.recAllNewGlina == self.recAllOldGlina:
            ask = True
        else:
            ask = False
        return ask

    def saveAll(self) -> set:
        """Сохраняет изменения по нажатию кнопки Сохранить на панели инструментов"""
        if self.currentIndex() == 0:
            self.saveRecord(False)
        if self.currentIndex() == 1:
            self.setCurrentIndex(0)
            self.setCurrentIndex(1)
        else:
            pass

    def saveRecord(self, ask) -> set:
        """Сохраняет изменения в записи и формирует новый курсор"""
        if ask == False:
            val10 = self.recOld[10]  # ID песка (свойств несвязных грунтов)
            val11 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole)  # ID образца
            val30 = self.refreshGroupGlina()  # Группа свойств связных грунтов
            if self.doubleSpinBox.value() == 0:
                val31 = None
            else:
                val31 = self.doubleSpinBox.value()  # Вологість ґрунту, %
            if self.doubleSpinBox_2.value() == 0:
                val32 = None
            else:
                val32 = self.doubleSpinBox_2.value()  # Вологість на границi текучостi, %
            if self.doubleSpinBox_3.value() == 0:
                val33 = None
            else:
                val33 = self.doubleSpinBox_3.value()  # Вологість на границi розкочування, %
            if self.doubleSpinBox_4.value() == 0:
                val34 = None
            else:
                val34 = self.doubleSpinBox_4.value()  # Щільність ґрунту, г/см3
            if self.doubleSpinBox_5.value() == 0:
                val35 = None
            else:
                val35 = self.doubleSpinBox_5.value()  # Щiльнiсть часток ґрунту, г/см3
            if self.doubleSpinBox_6.value() == 0:
                val36 = None
            else:
                val36 = self.doubleSpinBox_6.value()  # Вiдносна деформацiя набухання без навантаження, д.о.
            if self.doubleSpinBox_7.value() == 0:
                val37 = None
            else:
                val37 = self.doubleSpinBox_7.value()  # Вiдносна деформацiя просiдання, д.о.
            if self.doubleSpinBox_8.value() == 0:
                val38 = None
            else:
                val38 = self.doubleSpinBox_8.value()  # Питоме зусилля відриву штампа від грунту (липкість), г/см2
            if self.doubleSpinBox_9.value() == 0:
                val39 = None
            else:
                val39 = self.doubleSpinBox_9.value()  # Вiдносний вмiст органiчних речовин у ґрунті, д.о.
            if self.doubleSpinBox_10.value() == 0:
                val40 = None
            else:
                val40 = self.doubleSpinBox_10.value()  # Ступiнь розкладення торфу, %
            if self.doubleSpinBox_11.value() == 0:
                val41 = None
            else:
                val41 = self.doubleSpinBox_11.value()  # Ступiнь зольностi торфу, д.о.
            if self.doubleSpinBox_12.value() == 0:
                val42 = None
            else:
                val42 = self.doubleSpinBox_12.value()  # Ступiнь засоленостi ґрунту, %
            if self.doubleSpinBox_13.value() == 0:
                val43 = None
            else:
                val43 = self.doubleSpinBox_13.value()  # Вiдносна деформацiя здимання ґрунту, д.о.
            if self.doubleSpinBox_14.value() == -99:
                val44 = None
            else:
                val44 = self.doubleSpinBox_14.value()  # Температура ґрунту, град.С
            val45 = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), role=QtCore.Qt.UserRole)  # ID лаборанта
            with UseDatebase(dbconfig) as curs:
                curs.execute("""UPDATE glina
                                SET id_obrazec = %(v11)s, 
                                    svgroup = %(v30)s, 
                                    vlag = %(v31)s, 
                                    vlagtek = %(v32)s, 
                                    vlagrask = %(v33)s, 
                                    plotn = %(v34)s, 
                                    plotnchast = %(v35)s, 
                                    otnnabuh = %(v36)s,
                                    otnprosad = %(v37)s,
                                    lipkost = %(v38)s,
                                    organika = %(v39)s,
                                    steprazl = %(v40)s,
                                    stepzol = %(v41)s,
                                    zasol = %(v42)s,
                                    puchenie = %(v43)s,
                                    temper = %(v44)s,
                                    id_labman = %(v45)s
                                WHERE id = %(v10)s;""",
                             {'v11': val11, 'v30': val30, 'v31': val31,
                              'v32': val32, 'v33': val33, 'v34': val34, 'v35': val35,
                              'v36': val36, 'v37': val37, 'v38': val38, 'v39': val39,
                              'v40': val40, 'v41': val41, 'v42': val42, 'v43': val43,
                              'v44': val44, 'v45': val45, 'v10': val10})
            self.requerySelect()
            self.refreshRecord()
        else:
            pass

    def saveRecordTableGlina(self, ask) -> set:
        """Сохранение записей таблицы свойств связных грунтов"""
        if ask == False:
            for i in range(0, self.recCountGlina):
                recTabGlina = self.recAllNewGlina[i]
                val10 = recTabGlina[1]
                val11 = recTabGlina[2]
                val30 = recTabGlina[3]
                val31 = recTabGlina[4]
                val32 = recTabGlina[5]
                val33 = recTabGlina[6]
                val34 = recTabGlina[7]
                val35 = recTabGlina[8]
                val36 = recTabGlina[9]
                val37 = recTabGlina[10]
                val38 = recTabGlina[11]
                val39 = recTabGlina[12]
                val40 = recTabGlina[13]
                val41 = recTabGlina[14]
                val42 = recTabGlina[15]
                val43 = recTabGlina[16]
                val44 = recTabGlina[17]
                val45 = recTabGlina[18]
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE glina
                                SET id_obrazec = %(v11)s, 
                                    svgroup = %(v30)s, 
                                    vlag = %(v31)s, 
                                    vlagtek = %(v32)s, 
                                    vlagrask = %(v33)s, 
                                    plotn = %(v34)s, 
                                    plotnchast = %(v35)s, 
                                    otnnabuh = %(v36)s,
                                    otnprosad = %(v37)s,
                                    lipkost = %(v38)s,
                                    organika = %(v39)s,
                                    steprazl = %(v40)s,
                                    stepzol = %(v41)s,
                                    zasol = %(v42)s,
                                    puchenie = %(v43)s,
                                    temper = %(v44)s,
                                    id_labman = %(v45)s
                                WHERE id = %(v10)s;""",
                                 {'v11': val11, 'v30': val30, 'v31': val31,
                                  'v32': val32, 'v33': val33, 'v34': val34, 'v35': val35,
                                  'v36': val36, 'v37': val37, 'v38': val38, 'v39': val39,
                                  'v40': val40, 'v41': val41, 'v42': val42, 'v43': val43,
                                  'v44': val44, 'v45': val45, 'v10': val10})
            self.requerySelect()
            self.refreshRecord()
        else:
            pass


class SkalaWindow(QtWidgets.QTabWidget, egclasswin.Ui_Skala_win):
    def __init__(self):
        """Инициализация окна Свойств скальных грунтов"""
        super().__init__()
        self.setupUi(self)
        global idActivObekt
        self.brushw = QtGui.QBrush(QtCore.Qt.white)
        self.brushbl = QtGui.QBrush(QtCore.Qt.black)
        self.brushgr = QtGui.QBrush(QtGui.QColor(245,245,245))
        self.recAllOldSkala = []
        self.recCountSkala = 0
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT obrazec.id, 
                                obrazec.lab_num
                            FROM obekt,
                                burehole,
                                obrazec
                            WHERE obekt.id = %(v)s 
                                AND obekt.id = burehole.id_obekt 
                                AND burehole.id = obrazec.id_burehole
                                AND obrazec.mater_obr = 'Скельний ґрунт'
                            ORDER BY obrazec.lab_num""", {'v': idActivObekt})
            recAll = curs.fetchall()
#            recAll.append((0, ''))
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox.addItem(recOne[1])
                self.comboBox.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT ispol.id, 
                                ispol.fio
                            FROM ispol
                            WHERE ispol.vidrab = 0 OR ispol.vidrab = 7 
                            ORDER BY ispol.fio""")
            recAll = curs.fetchall()
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox_2.addItem(recOne[1])
                self.comboBox_2.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
        self.kpId = 0  # ID свойств скальных грунтов
        self.modelSkala = QtGui.QStandardItemModel(30, 13)  # Создание модели свойств скальных грунтов
        self.selmodelSkala = QtCore.QItemSelectionModel(self.modelSkala)  # Создание модели выделения
        self.modelSkala.setRowCount(len(self.recAll))
        self.modelSkala.setHorizontalHeaderLabels(['ID Skala',
                                                   'Лабораторний\nномер',
                                                   'Перелік\nвластивостей',
                                                   'Вологість\n%',
                                                   'Щільність\nг/см3',
                                                   'Щільність\nскелету\nґрунту\nг/см3',
                                                   'Границя мiцностi\nна одноосьовий\nстиск\nМПа',
                                                   'Коефіцієнт\nвивітрілості\nд.о.',
                                                   'Коефіцієнт\nрозм`якливості\nу воді\nд.о.',
                                                   'Ступінь\nрозчинності\nг/л',
                                                   'Коефіцієнт\nфільтрації\nм/доб.',
                                                   'Ступiнь\nзасоленостi \n%',
                                                   'Температура \nґрунту \nград.С',
                                                   'Лаборант'])
        self.tableSkala.setModel(self.modelSkala)  # Создание представления
        self.tableSkala.setSelectionModel(self.selmodelSkala)  # Установить модель выделения в представлении
        self.tableSkala.setGeometry(QtCore.QRect(0, 0, 1230, 640))
        self.tableSkala.setColumnWidth(0, 10)  # ID Skala
        self.tableSkala.setColumnWidth(1, 110)  # Лабораторний номер
        self.tableSkala.setColumnWidth(2, 110)  # Перелік властивостей
        self.tableSkala.setColumnWidth(3, 80)  # Вологість, %
        self.tableSkala.setColumnWidth(4, 80)  # Щільність г/см3
        self.tableSkala.setColumnWidth(5, 80)  # Щільність скелету г/см3
        self.tableSkala.setColumnWidth(6, 130)  # Границя мiцностi на одноосьовий стиск МПа
        self.tableSkala.setColumnWidth(7, 100)  # Коефіцієнт вивітрілості д.о.
        self.tableSkala.setColumnWidth(8, 120)  # Коефіцієнт розм`якливості у воді д.о.
        self.tableSkala.setColumnWidth(9, 100)  # Ступінь розчинності г/л
        self.tableSkala.setColumnWidth(10, 100)  # Коефіцієнт фільтрації м/доб.
        self.tableSkala.setColumnWidth(11, 100)  # Ступiнь засоленостi %
        self.tableSkala.setColumnWidth(12, 100)  # Температура ґрунту град.С
        self.tableSkala.setColumnWidth(13, 140)  #  Лаборант (ID)
        self.tableSkala.setColumnHidden(0, True)
        self.requerySelect()
        if not self.recAll:
            self.addRecord()
        else:
            self.recCount = len(self.recAll)
            self.recNum = 0
            self.recOld = self.recAll[self.recNum]
            self.kpId = self.recOld[9]  # ID свойств связных грунтов
        # Назначение делегатов
        self.DelegateSkala51 = egdelegat.DoubleSpinBoxDelegate_51()
        self.DelegateSkala41 = egdelegat.DoubleSpinBoxDelegate_41()
        self.DelegateSkala42 = egdelegat.DoubleSpinBoxDelegate_42()
        self.DelegateSkala52 = egdelegat.DoubleSpinBoxDelegate_52()
        self.DelegateSkala53 = egdelegat.DoubleSpinBoxDelegate_53()
        self.DelegateSkalaT = egdelegat.DoubleSpinBoxDelegate_Temper()
        self.DelegateLabnumSkala = egdelegat.ComboBoxDelegateLabnumSkala()
        self.DelegateGroupSkala = egdelegat.ComboBoxDelegateGroupPesok()
        self.DelegateLabman = egdelegat.ComboBoxDelegateLabman()
        self.tableSkala.setItemDelegateForColumn(1, self.DelegateLabnumSkala)
        self.tableSkala.setItemDelegateForColumn(2, self.DelegateGroupSkala)
        self.tableSkala.setItemDelegateForColumn(3, self.DelegateSkala51)
        self.tableSkala.setItemDelegateForColumn(4, self.DelegateSkala42)
        self.tableSkala.setItemDelegateForColumn(5, self.DelegateSkala42)
        self.tableSkala.setItemDelegateForColumn(6, self.DelegateSkala51)
        self.tableSkala.setItemDelegateForColumn(7, self.DelegateSkala42)
        self.tableSkala.setItemDelegateForColumn(8, self.DelegateSkala42)
        self.tableSkala.setItemDelegateForColumn(9, self.DelegateSkala52)
        self.tableSkala.setItemDelegateForColumn(10, self.DelegateSkala52)
        self.tableSkala.setItemDelegateForColumn(11, self.DelegateSkala51)
        self.tableSkala.setItemDelegateForColumn(12, self.DelegateSkalaT)
        self.tableSkala.setItemDelegateForColumn(13, self.DelegateLabman)
        # Обновление формы и панели инструментов
        self.refreshToolbar()
        self.refreshRecord()
        # Назначение обработчиков сигналов
        self.currentChanged.connect(self.asktoSave)
        self.currentChanged.connect(self.setRow)
        self.radioButton.toggled.connect(self.refreshGroupSkala)
        self.radioButton_2.toggled.connect(self.refreshGroupSkala)
        self.modelSkala.itemChanged.connect(self.refreshOneGroupSkala)
        self.toolButton_6.clicked.connect(self.clearField)
        self.selmodelSkala.currentChanged.connect(self.currentRow)
        self.selmodelSkala.selectionChanged['QItemSelection', 'QItemSelection'].connect(self.currentRow)

    def requerySelect(self) -> tuple:
        """Обновляет главный запрос для экранной формы"""
        global idActivObekt
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT burehole.id_obekt,
                                obekt.numdog,
                                obekt.archnum,
                                obekt.stadia,
                                burehole.vidhole,
                                burehole.num_hole,
                                obrazec.num_obrazec,
                                obrazec.glub_otbor,
                                burehole.koord_z - obrazec.glub_otbor,
                                obrazec.lab_num,
                                skala.id,
                                skala.id_obrazec,
                                skala.svgroup,
                                skala.vlag,
                                skala.plotn,
                                skala.plotnchast,
                                skala.krep,
                                skala.kf_vuvetril,
                                skala.kf_razmag,
                                skala.rastvor,
                                skala.kf_filtr,
                                skala.zasol,
                                skala.temper,
                                skala.id_labman,
                                vlabman.fio,
                                strate.name_strate
                            FROM obekt,
                                burehole,
                                obrazec 
                                    LEFT JOIN strate ON obrazec.id_burehole = strate.id_burehole 
                                    AND numrange(strate.strate1, strate.strate2, '(]'::text) @> obrazec.glub_otbor,
                                skala
                                    LEFT JOIN vlabman ON skala.id_labman = vlabman.id
                            WHERE obekt.id = 72
                            AND obekt.id = burehole.id_obekt 
                            AND burehole.id = obrazec.id_burehole 
                            AND obrazec.id = skala.id_obrazec
                            ORDER BY skala.id""", {'v0': idActivObekt})
            self.recAll = curs.fetchall()
            return self.recAll

    def refreshRecord(self) -> bool:
        """Обновляет экранную форму с отображаемой записью"""
        # Передача значений из списка в экранную форму
        self.recOld = self.recAll[self.recNum]  # Формирование кортежа одной текущей записи из кортежа всех записей
        if self.recOld:
            self.label.setText("Ідентіфікатор об'єкта - " + str(self.recOld[0]) + "\n" +
                               "Номер договору - " + self.recOld[1] + "\n" +
                               "Архівний номер звіту - " + self.recOld[2] + "\n" +
                               self.recOld[4] + " №" + self.recOld[5] + "\n" +
                               "Зразок №" + str(self.recOld[6]) + "\n" +
                               "Глибина відбору - " + str(self.recOld[7]))  # ID объекта, номер договора,
                                                                            # архивный номер, вид и № выработки,
                                                                            # № образца, глубина обора
            self.obID = self.recOld[0]  # ID объекта
            self.numdog = self.recOld[1]  # Номер договора
            self.archnum = self.recOld[2]  # Архивный номер объекта
            self.stadia = self.recOld[3]  # Стадия проектирования
            self.vidhole = self.recOld[4]  # Вид выработки
            self.numhole = self.recOld[5]  # Номер выработки
            self.numobrazec = self.recOld[6]  # Номер образца
            self.glubotbor = self.recOld[7]  # Глубина отбора
            self.absotm = self.recOld[8]  # Абсолютная отметка отбора
            self.labnum = self.recOld[9]  # Лабораторный номер
            self.skalaId = self.recOld[10]  # ID свойств скальных грунтов
            self.comboBox.setCurrentIndex(
                self.comboBox.findData(self.recOld[11], role=QtCore.Qt.UserRole))  # ID образца
            self.refreshRadioButton(self.recOld[12])  # Группа свойств связных грунтов
            if self.recOld[13] is None:
                self.doubleSpinBox.setValue(self.doubleSpinBox.minimum())
            else:
                self.doubleSpinBox.setValue(self.recOld[13])  # Вологість ґрунту, %
            if self.recOld[14] is None:
                self.doubleSpinBox_4.setValue(self.doubleSpinBox_4.minimum())
            else:
                self.doubleSpinBox_4.setValue(self.recOld[14])  # Щільність ґрунту, г/см3
            if self.recOld[15] is None:
                self.doubleSpinBox_5.setValue(self.doubleSpinBox_5.minimum())
            else:
                self.doubleSpinBox_5.setValue(self.recOld[15])  # Щiльнiсть часток ґрунту, г/см3
            if self.recOld[16] is None:
                self.doubleSpinBox_8.setValue(self.doubleSpinBox_8.minimum())
            else:
                self.doubleSpinBox_8.setValue(self.recOld[16])  # Граница крепости на одноосное сжатие, МПа
            if self.recOld[17] is None:
                self.doubleSpinBox_6.setValue(self.doubleSpinBox_6.minimum())
            else:
                self.doubleSpinBox_6.setValue(self.recOld[17])  # Коефіцієнт вивітрілості д.о.
            if self.recOld[18] is None:
                self.doubleSpinBox_7.setValue(self.doubleSpinBox_7.minimum())
            else:
                self.doubleSpinBox_7.setValue(self.recOld[18])  # Коефіцієнт розм`якливості у воді д.о.
            if self.recOld[19] is None:
                self.doubleSpinBox_15.setValue(self.doubleSpinBox_15.minimum())
            else:
                self.doubleSpinBox_15.setValue(self.recOld[19])  # Ступінь розчинності г/л
            if self.recOld[20] is None:
                self.doubleSpinBox_16.setValue(self.doubleSpinBox_16.minimum())
            else:
                self.doubleSpinBox_16.setValue(self.recOld[20])  # Коефіцієнт фільтрації м/доб.
            if self.recOld[21] is None:
                self.doubleSpinBox_12.setValue(self.doubleSpinBox_12.minimum())
            else:
                self.doubleSpinBox_12.setValue(self.recOld[21])  # Ступiнь засоленостi %
            if self.recOld[22] is None:
                self.doubleSpinBox_14.setValue(self.doubleSpinBox_14.minimum())
            else:
                self.doubleSpinBox_14.setValue(self.recOld[22])  # Температура ґрунту, град.С
            self.comboBox_2.setCurrentIndex(
                self.comboBox_2.findData(self.recOld[23], role=QtCore.Qt.UserRole))  # ID лаборанта
            # Подготовка и отображение расчетных показателей
            self.pd = plotsk(self.recOld[13], self.recOld[14])
            if self.pd is not None:
                self.label_45.setText(str(self.pd))  # Щiльнiсть сухого грунту (скелета), г/см3
            else:
                self.label_45.setText("-")
            self.n = por(self.recOld[13], self.recOld[14], self.recOld[15])
            if self.n is not None:
                self.label_32.setText(str(self.n))  # Пористость
            else:
                self.label_32.setText("-")
            self.e = kfPorw(self.recOld[13], self.recOld[14], self.recOld[15])
            if self.e is not None:
                self.label_33.setText(str(self.e))  # Кф пористости
            else:
                self.label_33.setText("-")
            self.Sr = kfVodonas(self.recOld[13], self.recOld[14], self.recOld[15])
            if self.Sr is not None:
                if self.Sr >= 1:
                    self.label_34.setText("1.00")
                else:
                    self.label_34.setText(str(self.Sr))  # Кф водонасыщения, д.о.
            else:
                self.label_34.setText("-")
            self.Wsat = vlagAllW(self.recOld[13], self.recOld[14], self.recOld[15])
            if self.Wsat is not None:
                self.label_38.setText(str(self.Wsat))  # Повна вологоємність, %
            else:
                self.label_38.setText("-")
            self.q = udelVesps(self.recOld[14])
            if self.q is not None:
                self.label_37.setText(str(self.q))  # Питома вага, кН/м3
            else:
                self.label_37.setText("-")
            self.qw = udelVesWW(self.recOld[13], self.recOld[14], self.recOld[15])
            if self.qw is not None:
                self.label_41.setText(str(self.qw))  # Питома вага з урахуванням зважувальної дії води, кН/м3
            else:
                self.label_41.setText("-")
            namegrunt = self.recOld[25].partition(" ")[0]   # Виборка первого слова из названия грунта
            self.label_18.setText(namegrunt + nameskala_pd(self.pd) + nameskala_R(self.recOld[16]) +
                                  nameskala_Kwr(self.recOld[17]) + nameskala_Ksof(self.recOld[18]) +
                                  nameskala_qsr(self.recOld[19]) + nameskala_Kf(self.recOld[20]) +
                                  nameskala_Dsal(self.recOld[21]) + nameskala_t(self.recOld[22])) # Наименование грунта
            self.recOldSkala = self.readSkala() # Формирование списка текущей записи из значений экранной формы
            retval = True
        else:
            retval = False
        self.refreshTableSkala()
        self.refreshGroupSkala()
        return retval

    def refreshTableSkala(self) -> bool:
        """Обновление таблицы свойств скальных грунтов"""
        self.recCountSkala = len(self.recAll)
        self.recAllOldSkala = []
        if self.recCountSkala > 0:
            self.modelSkala.setRowCount(self.recCountSkala)
            self.tableSkala.setEnabled(True)
            self.modelSkala.removeRows(0, self.modelSkala.rowCount())
            item11 = QtWidgets.QTableWidgetItem()
            item11.setData(QtCore.Qt.EditRole, id)
            self.recAllOldSkala = []
            for i in range(0, self.recCountSkala):  # Занесение данных в ячейки таблицы
                self.recOldSkala = self.recAll[i][9:25]
                listrow = list(self.recOldSkala)  # Список одной строки
                item1 = QtGui.QStandardItem(str(listrow[1]))  # ID скала
                item2 = QtGui.QStandardItem(str(listrow[0]))    # ID образца
                QtGui.QStandardItem.setData(item2, str(listrow[2]), role=QtCore.Qt.UserRole)  # ID образца
                if listrow[3] == 1:
                    item3 = QtGui.QStandardItem("Скорочений")  # Список свойств скальных грунтов
                    QtGui.QStandardItem.setData(item3, 1, role=QtCore.Qt.UserRole)
                elif listrow[3] == 2:
                    item3 = QtGui.QStandardItem("Повний")
                    QtGui.QStandardItem.setData(item3, 2, role=QtCore.Qt.UserRole)
                if listrow[4] is None:
                    item4 = QtGui.QStandardItem("-")
                else:
                    item4 = QtGui.QStandardItem(str(listrow[4]))  # Вологість ґрунту, %
                if listrow[5] is None:
                    item5 = QtGui.QStandardItem("-")
                else:
                    item5 = QtGui.QStandardItem(str(listrow[5]))  # Щільність ґрунту, г/см3
                if listrow[6] is None:
                    item6 = QtGui.QStandardItem("-")
                else:
                    item6 = QtGui.QStandardItem(str(listrow[6]))  # Щiльнiсть часток ґрунту, г/см3
                if listrow[7] is None:
                    item7 = QtGui.QStandardItem("-")
                else:
                    item7 = QtGui.QStandardItem(str(listrow[7]))  # Границя мiцностi на одноосьовий стиск, МПа
                if listrow[8] is None:
                    item8 = QtGui.QStandardItem("-")
                else:
                    item8 = QtGui.QStandardItem(str(listrow[8]))  # Коефіцієнт вивітрілості д.о.
                if listrow[9] is None:
                    item9 = QtGui.QStandardItem("-")
                else:
                    item9 = QtGui.QStandardItem(str(listrow[9]))  # Коефіцієнт розм`якливості у воді д.о.
                if listrow[10] is None:
                    item10 = QtGui.QStandardItem("-")
                else:
                    item10 = QtGui.QStandardItem(str(listrow[10]))  # Ступінь розчинності г/л
                if listrow[11] is None:
                    item11 = QtGui.QStandardItem("-")
                else:
                    item11 = QtGui.QStandardItem(str(listrow[11]))  # Коефіцієнт фільтрації м/доб.
                if listrow[12] is None:
                    item12 = QtGui.QStandardItem("-")
                else:
                    item12 = QtGui.QStandardItem(str(listrow[12]))  # Ступiнь засоленостi %
                if listrow[13] is None:
                    item13 = QtGui.QStandardItem("-")
                else:
                    item13 = QtGui.QStandardItem(str(listrow[13]))  # Температура ґрунту, град.С
                if listrow[14] == 0:
                    item14 = QtGui.QStandardItem("-")
                else:
                    item14 = QtGui.QStandardItem(str(listrow[15]))      # ФИО лаборанта
                QtGui.QStandardItem.setData(item14, str(listrow[14]), role=QtCore.Qt.UserRole)  # ID лаборанта
                item2.setTextAlignment(QtCore.Qt.AlignCenter)
                item3.setTextAlignment(QtCore.Qt.AlignCenter)
                item4.setTextAlignment(QtCore.Qt.AlignCenter)
                item5.setTextAlignment(QtCore.Qt.AlignCenter)
                item6.setTextAlignment(QtCore.Qt.AlignCenter)
                item7.setTextAlignment(QtCore.Qt.AlignCenter)
                item8.setTextAlignment(QtCore.Qt.AlignCenter)
                item9.setTextAlignment(QtCore.Qt.AlignCenter)
                item10.setTextAlignment(QtCore.Qt.AlignCenter)
                item11.setTextAlignment(QtCore.Qt.AlignCenter)
                item12.setTextAlignment(QtCore.Qt.AlignCenter)
                item13.setTextAlignment(QtCore.Qt.AlignCenter)
                item14.setTextAlignment(QtCore.Qt.AlignCenter)
                self.modelSkala.appendRow(
                    [item1, item2, item3, item4, item5, item6, item7, item8, item9, item10,
                     item11, item12, item13, item14])
                oldSkalaOne = []
                for j in range(1, 15):  # Считывание данных из списка одной записи
                    it = listrow[j]
                    oldSkalaOne.append(it)
                self.recAllOldSkala.append(oldSkalaOne)  # Формирование исходного списка свойств связных грунтов
            retval = True
        else:
            self.tableSkala.setEnabled(False)
            self.modelSkala.removeRows(0, self.modelSkala.rowCount())
            retval = False
        self.recAllNewSkala = self.recAllOldSkala
        self.tableSkala.selectRow(self.recNum)
        self.refreshTableGroupSkala()
        return retval

    def refreshToolbar(self) -> bool:
        """Обновляет панель инструментов"""
        if self.recNum is None:
            retval = False
        else:
            if self.recNum == 0 and self.recCount > 1:
                form.action_8.setEnabled(False)  # Первая запись
                form.action_9.setEnabled(False)  # Предыдущая запись
                form.action_10.setEnabled(True)  # Следующая запись
                form.action_11.setEnabled(True)  # Последняя запись
            elif self.recNum in range(1, self.recCount - 1):
                form.action_8.setEnabled(True)  # Первая запись
                form.action_9.setEnabled(True)  # Последняя запись
                form.action_10.setEnabled(True)  # Следующая запись
                form.action_11.setEnabled(True)  # Последняя запись
            elif self.recNum == self.recCount - 1 and self.recCount > 1:
                form.action_8.setEnabled(True)  # Первая запись
                form.action_9.setEnabled(True)  # Предыдущая запись
                form.action_10.setEnabled(False)  # Следующая запись
                form.action_11.setEnabled(False)  # Последняя запись
            else:
                form.action_8.setEnabled(False)  # Первая запись
                form.action_9.setEnabled(False)  # Предыдущая запись
                form.action_10.setEnabled(False)  # Следующая запись
                form.action_11.setEnabled(False)  # Последняя запись
            retval = True
        return retval

    def refreshRadioButton(self, mg:int) -> int:
        """Отображение группы свойств скальных грунтов в блоке переключателей.
        mg - параметр из базы данных"""
        if mg == 1:
            self.radioButton.setChecked(True)
        else:
            self.radioButton_2.setChecked(True)
        return mg

    def refreshGroupSkala(self) -> int:
        """Обновление формы по групперовке свойств скальных грунтов"""
        if self.radioButton.isChecked() == True:
            mg = 1
            self.doubleSpinBox_6.setEnabled(False)
            self.doubleSpinBox_7.setEnabled(False)
            self.doubleSpinBox_15.setEnabled(False)
            self.doubleSpinBox_16.setEnabled(False)
            self.doubleSpinBox_12.setEnabled(False)
            self.doubleSpinBox_14.setEnabled(False)
        elif self.radioButton_2.isChecked() == True:
            mg = 2
            self.doubleSpinBox_6.setEnabled(True)
            self.doubleSpinBox_7.setEnabled(True)
            self.doubleSpinBox_15.setEnabled(True)
            self.doubleSpinBox_16.setEnabled(True)
            self.doubleSpinBox_12.setEnabled(True)
            self.doubleSpinBox_14.setEnabled(True)
        return mg

    def refreshTableGroupSkala(self) -> int:
        """Обновление таблицы по групперовке свойств скальных грунтов"""
        row = self.recNum
        for row in range(0, self.modelSkala.rowCount()):
            if self.modelSkala.item(row, 2).text() == "Скорочений":
                for j in range(7, 13):
                    self.modelSkala.item(row, j).setEnabled(False)
                    self.modelSkala.item(row, j).setBackground(self.brushgr)
                    self.modelSkala.item(row, j).setForeground(self.brushbl)
            else:
                for j in range(7, 13):
                    self.modelSkala.item(row, j).setEnabled(True)
                    self.modelSkala.item(row, j).setBackground(self.brushw)
                    self.modelSkala.item(row, j).setForeground(self.brushbl)
        return row

    def refreshOneGroupSkala(self) -> int:
        """Обновление текущей записи таблицы по групперовке свойств скальных грунтов"""
        row = self.recNum
        if self.modelSkala.item(row, 2).text() == "Скорочений":
            for j in range(7, 13):
                self.modelSkala.item(row, j).setEnabled(False)
                self.modelSkala.item(row, j).setBackground(self.brushgr)
                self.modelSkala.item(row, j).setForeground(self.brushbl)
        else:
            for j in range(7, 13):
                self.modelSkala.item(row, j).setEnabled(True)
                self.modelSkala.item(row, j).setBackground(self.brushw)
                self.modelSkala.item(row, j).setForeground(self.brushbl)
        return row

    def setRow(self) -> bool:
        retval = True
        if self.currentIndex() == 0:
            self.refreshToolbar()
            self.refreshRecord()
        elif self.currentIndex() == 1:
            self.tableSkala.selectRow(self.recNum)
        else:
            self.refreshRecord()
        return retval

    def clearField(self) -> bool:
        """Очищает текущее поле (присваевает NULL)"""
        valIndex = QtWidgets.QApplication.focusWidget()
        if type(valIndex) == QtWidgets.QDoubleSpinBox:
            valIndex.setValue(valIndex.minimum())
            retval = True
        else:
            retval = False
        return retval

    def readSkala(self) -> list:
        """Считывание данных и обновление списка согласно значений экранной формы"""
        if self.recOld:
            val0 = self.recOld[10]   # ID свойств скальных грунтов
            val1 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole)  # ID образца
            if self.radioButton.isChecked():
                val2 = 1
            else:
                val2 = 2            # Группа свойств
            if self.doubleSpinBox.value() == self.doubleSpinBox.minimum():
                val3 = None
            else:
                val3 = dc.Decimal(self.doubleSpinBox.text())  # Вологість ґрунту, %
            if self.doubleSpinBox_4.value() == self.doubleSpinBox_4.minimum():
                val4 = None
            else:
                val4 = dc.Decimal(self.doubleSpinBox_4.text())  # Щільність ґрунту, г/см3
            if self.doubleSpinBox_5.value() == self.doubleSpinBox_5.minimum():
                val5 = None
            else:
                val5 = dc.Decimal(self.doubleSpinBox_5.text())  # Щiльнiсть часток ґрунту, г/см3
            if self.doubleSpinBox_8.value() == self.doubleSpinBox_8.minimum():
                val6 = None
            else:
                val6 = dc.Decimal(self.doubleSpinBox_8.text())  # Граница крепости пород на одноосное сжатие, МПа
            if self.doubleSpinBox_6.value() == self.doubleSpinBox_6.minimum():
                val7 = None
            else:
                val7 = dc.Decimal(self.doubleSpinBox_6.text())  # Коефіцієнт вивітрілості, д.о.
            if self.doubleSpinBox_7.value() == self.doubleSpinBox_7.minimum():
                val8 = None
            else:
                val8 = dc.Decimal(self.doubleSpinBox_7.text())  # Коефіцієнт розм'якливості у воді, д.о.
            if self.doubleSpinBox_15.value() == self.doubleSpinBox_15.minimum():
                val9 = None
            else:
                val9 = dc.Decimal(self.doubleSpinBox_15.text())  # Ступень розчинності у воді, г/л
            if self.doubleSpinBox_16.value() == self.doubleSpinBox_16.minimum():
                val10 = None
            else:
                val10 = dc.Decimal(self.doubleSpinBox_16.text())  # Коефіцієнт філтрації, м/доб.
            if self.doubleSpinBox_12.value() == self.doubleSpinBox_12.minimum():
                val11 = None
            else:
                val11 = dc.Decimal(self.doubleSpinBox_12.text())  # Ступiнь засоленостi ґрунту, %
            if self.doubleSpinBox_14.value() == self.doubleSpinBox_14.minimum():
                val12 = None
            else:
                val12 = dc.Decimal(self.doubleSpinBox_14.text())  # Температура ґрунту, град.С
            val13 = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), role=QtCore.Qt.UserRole)  # ID лаборанта
            recOld = [val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, val10, val11, val12, val13]
        else:
            pass
        return recOld

    def readTableSkala(self) -> list:
        """Считывание данных с таблицы свойств скальных грунтов"""
        self.recAllNewSkala = []
        if self.recCountSkala > 0:
            for i in range(0, self.recCountSkala):
                rec = []
                for j in range(0, 14):
                    if j == 0:
                        el = int(self.modelSkala.item(i, j).data(QtCore.Qt.EditRole))
                    elif j == 1:
                        el = int(self.modelSkala.item(i, j).data(QtCore.Qt.UserRole))
                    elif j == 2:
                        el = int(self.modelSkala.item(i, j).data(QtCore.Qt.UserRole))
                    elif j in range(3, 13):
                        if self.modelSkala.item(i, j).data(QtCore.Qt.EditRole) == '-':
                            el = None
                        else:
                            el = dc.Decimal(self.modelSkala.item(i, j).data(QtCore.Qt.EditRole))
                    elif j == 13:
                        el = int(self.modelSkala.item(i, j).data(QtCore.Qt.UserRole))
                    else:
                        pass
                    rec.append(el)  # Формирование текущей записи из элементов
                self.recAllNewSkala.append(rec)  # Формирование обновленного списка (записей-кортежей)
        else:
            self.recAllNewSkala = []
        return self.recAllNewSkala

    def currentRow(self) -> set:
        """Определение номера записи (строки)  и установка движка на эту запись"""
        if self.currentIndex() == 1:
            recNum = self.recNum
            self.recNum = self.selmodelSkala.currentIndex().row()
            if self.recNum < 0:
                self.recNum = recNum
            self.refreshToolbar()

    def showEvent(self, e) -> set:
        """Выполняет действия при выводе окна на экран"""
        form.action_46.setEnabled(False)
        QtWidgets.QTabWidget.showEvent(self, e)

    def hideEvent(self, e) -> set:
        """Выполняет действия при скрытии окна"""
        form.action_46.setEnabled(True)
        form.skalawin = None
        if self.recAll != []:
            self.asktoSave()
        form.refreshMain()
        QtWidgets.QTabWidget.hideEvent(self, e)

    def nextRecord(self) -> int:
        """Становится на следующей записи"""
        self.recNum += 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableSkala.selectRow(self.recNum)
        return self.recNum

    def priorRecord(self) -> int:
        """Становится на предыдущей записи"""
        self.recNum -= 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableSkala.selectRow(self.recNum)
        return self.recNum

    def firstRecord(self) -> int:
        """Становится на первой записи"""
        self.recNum = 0
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableSkala.selectRow(self.recNum)
        return self.recNum

    def lastRecord(self) -> int:
        """Становится на последней записи"""
        if self.recCount > 0:
            self.recNum = self.recCount - 1
            self.refreshToolbar()
            self.asktoSave()
            self.refreshRecord()
            self.tableSkala.selectRow(self.recNum)
            return self.recNum

    def sortRecord(self) -> bool:
        """Сортировка записей"""
        self.recAll.sort(key=itemgetter(0,5,7))
        form.action_13.setEnabled(False)  # Сортировать
        form.action_14.setEnabled(True)  # Снять сортировку
        self.refreshRecord()
        retval = True
        return retval

    def desortRecord(self) -> bool:
        """Отмена сортировки, что соответствует сортировке по ID"""
        self.recAll.sort(key=itemgetter(10))
        form.action_13.setEnabled(True)  # Сортировать
        form.action_14.setEnabled(False)  # Снять сортировку
        self.refreshRecord()
        retval = True
        return retval

    def addRecord(self) -> int:
        """Добавляет новую запись"""
        val1 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole)  # ID последнего образца
        with UseDatebase(dbconfig) as curs:
            curs.execute("INSERT INTO skala (id_obrazec) VALUES (%(v1)s);", {'v1': val1})
        self.requerySelect()
        self.recCount = len(self.recAll)
        if self.recCount == 1:
            self.recNum = 0
            self.recOld = self.recAll[self.recNum]
        #self.refreshRecord()
        self.lastRecord()
        self.refreshToolbar()
        return self.recCount

    def delRecord(self) -> bool:
        """Удаляет текущую запись"""
        self.refreshRecord()
        val10 = self.recOld[10]  # ID скального грунта
        if val10 is not None:
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                           "Властивості скальних ґрунтів",
                                           "Ви бажаєте видалити поточний запис з порядковим номером - " + str(self.recNum + 1) +
                                           " та лабораторним номером - " + str(self.recOld[9]) + "?")
            btnYes = QtWidgets.QPushButton("&Так")
            btnNo = QtWidgets.QPushButton("&Ні")
            btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
            self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
            self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
            self.formMassWin.setDefaultButton(btnYes)
            result = self.formMassWin.exec()
            if result == 0:
                with UseDatebase(dbconfig) as curs:
                    curs.execute("DELETE FROM skala WHERE id = %(v10)s;", {'v10': val10})
                self.requerySelect()
                self.recCount = len(self.recAll)
                if self.recCount > 0:
                    self.firstRecord()
                    self.refreshRecord()
                    self.refreshToolbar()
                else:
                    self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information, "Скальні ґрунти",
                                                   "Видалено останній запис")
                    btnOK = QtWidgets.QPushButton("&OK")
                    btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                    self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                    result = self.formMassWin.exec()
                    if result == 0:
                        self.formMassWin.close()
                        self.parent().close()
                retval = True
            else:
                retval = False
        else:
            pass
        return retval

    def asktoSave(self) -> bool:
        """Проверяет наличие изменений в свойствах скальных грунтов"""
        valS = self.askSkala()
        valT = self.asktoSaveTableSkala()
        retval = valS == valT
        return retval

    def askSkala(self) -> bool:
        """Определяет наличие изменений в текущей записи"""
        retval = True
        if self.recOld:
            # Считывание данных и обновление списка согласно значений экранной формы
            recOld = list(self.recOld[10:24])
            recNew = self.readSkala()
            askbool = (recNew == recOld)
            askSkala = (askbool, recNew)
            if askSkala[0] == False:
                retval = False
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                                         "Властивості скальних ґрунтів",
                                                         "Є незбережені дані властивостей скальних ґрунтів. "
                                                         "\nВи бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecord(askSkala[1])
                else:
                    retval = True
        return retval

    def asktoSaveTableSkala(self) -> bool:
        """Проверка наличия изменений в таблице Свойств скальных грунтов"""
        retval = True
        recAllNewSkala = self.readTableSkala()
        if recAllNewSkala == self.recAllOldSkala:
            ask = True
        else:
            ask = False
        askTableSkala = (ask, recAllNewSkala)
        if askTableSkala[0] == False:
            retval = False
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                           "Властивості скальних ґрунтів",
                                           "Є незбережені дані у таблиці властивостей скальних ґрунтів. "
                                           "\nВи бажаєте їх зберегти?")
            btnYes = QtWidgets.QPushButton("&Так")
            btnNo = QtWidgets.QPushButton("&Ні")
            btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
            self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
            self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
            self.formMassWin.setDefaultButton(btnYes)
            result = self.formMassWin.exec()
            if result == 0:
                self.saveRecordTableSkala(askTableSkala[1])
            else:
                retval = True
        return retval

    def saveAll(self) -> bool:
        """Сохраняет изменения по нажатию кнопки Сохранить на панели инструментов"""
        retval = True
        if self.currentIndex() == 0:
            retval = self.askSkala()
        if self.currentIndex() == 1:
            retval = self.asktoSaveTableSkala()
        return retval

    def saveRecord(self, ask) -> bool:
        """Сохраняет изменения в записи и формирует новый курсор
        возвращает True если запись обновлена и False если запеись не обновлялась
        ask - список для обновления текущей записи таблицы skala"""
        retval = False
        with UseDatebase(dbconfig) as curs:
            curs.execute("""UPDATE skala
                            SET id_obrazec = %(v1)s, 
                                svgroup = %(v2)s, 
                                vlag = %(v3)s, 
                                plotn = %(v4)s, 
                                plotnchast = %(v5)s, 
                                krep = %(v6)s,
                                kf_vuvetril = %(v7)s,
                                kf_razmag = %(v8)s,
                                rastvor = %(v9)s,
                                kf_filtr = %(v10)s,
                                zasol = %(v11)s,
                                temper = %(v12)s,
                                id_labman = %(v13)s
                            WHERE id = %(v0)s;""",
                         {'v1': ask[1], 'v2': ask[2], 'v3': ask[3],
                          'v4': ask[4], 'v5': ask[5], 'v6': ask[6], 'v7': ask[7],
                          'v8': ask[8], 'v9': ask[9], 'v10': ask[10], 'v11': ask[11],
                          'v12': ask[12], 'v13': ask[13], 'v0': ask[0]})
            retval = True
        self.requerySelect()
        self.refreshRecord()
        return retval

    def saveRecordTableSkala(self, ask) -> bool:
        """Сохранение записей таблицы свойств скальных грунтов
        возвращает True если записи таблицы обновлены и False если запеиси не обновлялись
        ask - список для обновления записей таблицы skala"""
        retval = False
        i = 0
        for i in range(0, len(ask)):
            j = 0
            for j in range(0, 13):
                val0 = ask[i] [0]
                val1 = ask[i] [1]
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE skala
                                    SET id_obrazec = %(v1)s, 
                                        svgroup = %(v2)s, 
                                        vlag = %(v3)s, 
                                        plotn = %(v4)s, 
                                        plotnchast = %(v5)s, 
                                        krep = %(v6)s,
                                        kf_vuvetril = %(v7)s,
                                        kf_razmag = %(v8)s,
                                        rastvor = %(v9)s,
                                        kf_filtr = %(v10)s,
                                        zasol = %(v11)s,
                                        temper = %(v12)s,
                                        id_labman = %(v13)s
                                    WHERE id = %(v0)s;""",
                                 {'v0': ask[i] [0], 'v1': ask[i] [1], 'v2': ask[i] [2], 'v3': ask[i] [3],
                                  'v4': ask[i] [4], 'v5': ask[i] [5], 'v6': ask[i] [6], 'v7': ask[i] [7],
                                  'v8': ask[i] [8], 'v9': ask[i] [9], 'v10': ask[i] [10], 'v11': ask[i] [11],
                                  'v12': ask[i] [12], 'v13': ask[i] [13]})
                    retval = True
        self.requerySelect()
        self.refreshRecord()
        return retval


class AgressgruntWindow(QtWidgets.QTabWidget, egclasswin.Ui_Agressgrunt_win):
    def __init__(self) -> set:
        """Инициализация окна агрессивности грунтов"""
        super().__init__()
        self.setupUi(self)
        global idActivObekt
        self.recAllOldAgressgrunt = []
        self.recCountAgressgrunt = 0
        self.recOld = []
        self.recOldOne = []
        self.recNum = 0
        self.brushbl = QtGui.QBrush(QtCore.Qt.black)
        self.brushgr = QtGui.QBrush(QtCore.Qt.lightGray)
        self.brushgr.setColor(QtGui.QColor(245, 245, 245))
        recZona = [("Суха", 1), ("Нормальна", 2), ("Волога", 3)]
        for i in range(0, len(recZona)):
            recOneZona = recZona[i]
            self.comboBox_3.addItem(recOneZona[0])
            self.comboBox_3.setItemData(i, recOneZona[1], role=QtCore.Qt.UserRole)
        self.comboBox_3.insertItem(0, "")
        self.comboBox_3.setItemData(0, 0, role=QtCore.Qt.UserRole)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT obrazec.id, 
                                obrazec.lab_num
                            FROM obekt,
                                burehole,
                                obrazec
                            WHERE obekt.id = %(v)s 
                                AND obekt.id = burehole.id_obekt 
                                AND burehole.id = obrazec.id_burehole
                                AND obrazec.mater_obr != 'Вода'
                                AND obrazec.lab_num != ''
                            ORDER BY obrazec.lab_num""", {'v': idActivObekt})
            recAll = curs.fetchall()
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox.addItem(recOne[1])
                self.comboBox.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT ispol.id, 
                                ispol.fio
                            FROM ispol
                            WHERE ispol.vidrab = 0 OR ispol.vidrab = 7
                            ORDER BY ispol.fio""")
            recAll = curs.fetchall()
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox_2.addItem(recOne[1])
                self.comboBox_2.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
        self.agresId = 0  # ID агрессивности грунтов
        self.modelAgressgrunt = QtGui.QStandardItemModel(30, 15)  # Создание модели агрессивности грунтов
        self.selmodelAgressgrunt = QtCore.QItemSelectionModel(self.modelAgressgrunt)  # Создание модели выделения
        self.modelAgressgrunt.setRowCount(len(self.recAll))
        self.modelAgressgrunt.setHorizontalHeaderLabels(['Labnum',
                                                    'ID Agressgrunt',
                                                    'Зона \nвологості',
                                                    'Лабораторний \nномер',
                                                    'Сульфати \n(SO4) мг/кг',
                                                    'Хлориди \n(Cl) мг/кг',
                                                    'Хлориди та сульфати \n(Cl+0.25*SO4) мг/кг',
                                                    'Питомий електричний \nопір ґрунту \nρ г , Ом·м',
                                                    'Середня густина \nкатодного струму \nj к , А/м2',
                                                    'Водневий \nпоказник рН',
                                                    'Масова частка \nорганічної речовини \n%',
                                                    'Масова частка \nнітрат-іона \nNO3-, %',
                                                    'Масова частка \nхлор-іона \nCl -, %',
                                                    'Масова частка \nіона заліза \nFe3+, %',
                                                    'Лаборант'])
        self.tableAgressgrunt.setModel(self.modelAgressgrunt)  # Создание представления
        self.tableAgressgrunt.setSelectionModel(self.selmodelAgressgrunt) # Установить модель выделения в представлении
        self.tableAgressgrunt.setGeometry(QtCore.QRect(0, 0, 808, 640))
        self.tableAgressgrunt.setColumnWidth(0, 10)  # Labnum
        self.tableAgressgrunt.setColumnWidth(1, 10)  # ID Agressgrunt
        self.tableAgressgrunt.setColumnWidth(2, 100)  # Зона вологості
        self.tableAgressgrunt.setColumnWidth(3, 100)  # Лабораторний номер
        self.tableAgressgrunt.setColumnWidth(4, 100)  # Сульфати (SO4) мг/кг
        self.tableAgressgrunt.setColumnWidth(5, 100)  # Хлориди (Cl) мг/кг
        self.tableAgressgrunt.setColumnWidth(6, 150)  # Хлориди та сульфати (Cl+0.25*SO4) мг/кг
        self.tableAgressgrunt.setColumnWidth(7, 160)  # Питомий електричний опір ґрунту ρ г , Ом·м
        self.tableAgressgrunt.setColumnWidth(8, 140)  # Середня густина катодного струму j к , А/м2
        self.tableAgressgrunt.setColumnWidth(9, 100)  # Значення pH
        self.tableAgressgrunt.setColumnWidth(10, 150)  # Масова частка органічної речовини, %
        self.tableAgressgrunt.setColumnWidth(11, 120)  # Масова частка нітрат-іона NO3-, %
        self.tableAgressgrunt.setColumnWidth(12, 120)  # Масова частка хлор-іона Cl -, %
        self.tableAgressgrunt.setColumnWidth(13, 120)  # Масова частка іона заліза Fe3+, %
        self.tableAgressgrunt.setColumnWidth(14, 140)  #  Лаборант (ID)
        self.tableAgressgrunt.setColumnHidden(0, True)
        self.tableAgressgrunt.setColumnHidden(1, True)
        self.requerySelect()
        if not self.recAll:
            self.addRecord()
            self.recNum = 0
        else:
            self.recCount = len(self.recAll)
            self.recNum = 0
            self.recOld = list(self.recAll[self.recNum])
            self.agresId = self.recOld[10]  # ID агрессивности грунтов
        # Назначение делегатов
        self.DelegateAgressgrunt_71 = egdelegat.DoubleSpinBoxDelegate_71()
        self.DelegateAgressgrunt_52 = egdelegat.DoubleSpinBoxDelegate_52()
        self.DelegateAgressgrunt_pH = egdelegat.DoubleSpinBoxDelegate_pH()
        self.DelegateAgressgrunt_62 = egdelegat.DoubleSpinBoxDelegate_62()
        self.DelegateAgressgrunt_64 = egdelegat.DoubleSpinBoxDelegate_64()
        self.DelegateAgressgrunt_53 = egdelegat.DoubleSpinBoxDelegate_53()
        self.DelegateLabnumAgressgrunt = egdelegat.ComboBoxDelegateLabnumGrunt()
        self.DelegateZonaVlag = egdelegat.ComboBoxDelegateZonaVlag()
        self.DelegateLabman = egdelegat.ComboBoxDelegateLabman()
        self.tableAgressgrunt.setItemDelegateForColumn(2, self.DelegateZonaVlag)
        self.tableAgressgrunt.setItemDelegateForColumn(3, self.DelegateLabnumAgressgrunt)
        self.tableAgressgrunt.setItemDelegateForColumn(4, self.DelegateAgressgrunt_71)
        self.tableAgressgrunt.setItemDelegateForColumn(5, self.DelegateAgressgrunt_71)
        self.tableAgressgrunt.setItemDelegateForColumn(6, self.DelegateAgressgrunt_71)
        self.tableAgressgrunt.setItemDelegateForColumn(7, self.DelegateAgressgrunt_71)
        self.tableAgressgrunt.setItemDelegateForColumn(8, self.DelegateAgressgrunt_52)
        self.tableAgressgrunt.setItemDelegateForColumn(9, self.DelegateAgressgrunt_pH)
        self.tableAgressgrunt.setItemDelegateForColumn(10, self.DelegateAgressgrunt_64)
        self.tableAgressgrunt.setItemDelegateForColumn(11, self.DelegateAgressgrunt_64)
        self.tableAgressgrunt.setItemDelegateForColumn(12, self.DelegateAgressgrunt_64)
        self.tableAgressgrunt.setItemDelegateForColumn(13, self.DelegateAgressgrunt_64)
        self.tableAgressgrunt.setItemDelegateForColumn(14, self.DelegateLabman)
        # Обновление формы и панели инструментов
        self.refreshToolbar()
        self.refreshRecord()
        # Назначение обработчиков сигналов
        self.currentChanged.connect(self.asktoSave)
        self.currentChanged.connect(self.setRow)
        self.toolButton.clicked.connect(self.calcAgress)
        self.toolButton_6.clicked.connect(self.clearField)
#        self.selmodelAgressgrunt.currentChanged.connect(self.currentRow)
        self.selmodelAgressgrunt.selectionChanged['QItemSelection', 'QItemSelection'].connect(self.currentRow)

    def requerySelect(self) -> set:
        """Обновляет главный запрос для экранной формы"""
        global idActivObekt
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT burehole.id_obekt,
                                obekt.numdog,
                                obekt.archnum,
                                obekt.stadia,
                                burehole.vidhole,
                                burehole.num_hole,
                                obrazec.num_obrazec,
                                obrazec.glub_otbor,
                                burehole.koord_z - obrazec.glub_otbor AS absotbor,
                                obrazec.lab_num,
                                aggresgrunt.id,
                                aggresgrunt.zonavlag,
                                aggresgrunt.id_obrazec,
                                aggresgrunt.so4,
                                aggresgrunt.cl,
                                round(aggresgrunt.cl + aggresgrunt.so4 * 0.25, 1) AS clso4,
                                aggresgrunt.udsoprotiv,
                                aggresgrunt.plottok,
                                aggresgrunt.ph,
                                aggresgrunt.organika,
                                aggresgrunt.no3,
                                aggresgrunt.cl_,
                                aggresgrunt.fe3,
                                aggresgrunt.id_labman,
                                vlabman.fio,
                                strate.name_strate
                            FROM obekt,
                                burehole,
                                obrazec,
                                strate,
                                aggresgrunt
                                 LEFT JOIN vlabman ON aggresgrunt.id_labman = vlabman.id
                            WHERE obekt.id = %(v0)s 
                            AND obekt.id = burehole.id_obekt 
                            AND burehole.id = obrazec.id_burehole 
							AND burehole.id = strate.id_burehole
							AND obrazec.glub_otbor > strate.strate1 
							AND obrazec.glub_otbor <= strate.strate2
                            AND obrazec.id = aggresgrunt.id_obrazec
                            ORDER BY aggresgrunt.id""", {'v0': idActivObekt})
            self.recAll = curs.fetchall()
            return self.recAll

    def refreshRecord(self) -> set:
        """Обновляет экранную форму с отображаемой записью"""
        # Передача значений из списка в экранную форму
        if self.recAll == []:
            self.recOld = []
        else:
            self.recOld = list(self.recAll[self.recNum])
        if self.recOld:
            self.label.setText("Ідентіфікатор об'єкта - " + str(self.recOld[0]) + "\n" +
                               "Номер договору - " + self.recOld[1] + "\n" +
                               "Архівний номер звіту - " + self.recOld[2] + "\n" +
                               self.recOld[4] + " №" + self.recOld[5] + "\n" +
                               "Зразок №" + str(self.recOld[6]) + "\n" +
                               "Глибина відбору - " + str(self.recOld[7]))  # ID объекта, номер договора,
                                                                            # архивный номер, вид и № выработки,
                                                                            # № образца, глубина обора
            self.label_18.setText(self.recOld[25])  # Наименование грунта
            self.obID = self.recOld[0]  # ID объекта
            self.numdog = self.recOld[1]  # Номер договора
            self.archnum = self.recOld[2]  # Архивный номер объекта
            self.stadia = self.recOld[3]  # Стадия проектирования
            self.vidhole = self.recOld[4]  # Вид выработки
            self.numhole = self.recOld[5]  # Номер выработки
            self.numobrazec = self.recOld[6]  # Номер образца
            self.glubotbor = self.recOld[7]  # Глубина отбора
            self.absotm = self.recOld[8]  # Абсолютная отметка отбора
            self.labnum = self.recOld[9]  # Лабораторный номер
            self.agresId = self.recOld[10]  # ID агрессивности грунтов
            self.comboBox_3.setCurrentIndex(
                self.comboBox_3.findData(self.recOld[11], role=QtCore.Qt.UserRole))  # Зона влажности
            self.comboBox.setCurrentIndex(self.comboBox.findData(self.recOld[12], role=QtCore.Qt.UserRole)) # ID образца
            if self.recOld[13] == None:
                self.doubleSpinBox.setValue(self.doubleSpinBox.minimum())
            else:
                self.doubleSpinBox.setValue(self.recOld[13])  # Сульфаты, мг/кг
            if self.recOld[14] == None:
                self.doubleSpinBox_2.setValue(self.doubleSpinBox_2.minimum())
            else:
                self.doubleSpinBox_2.setValue(self.recOld[14])  # Хлориды, мг/кг
            if self.recOld[16] == None:
                self.doubleSpinBox_3.setValue(self.doubleSpinBox_3.minimum())
            else:
                self.doubleSpinBox_3.setValue(self.recOld[16])  # Питомий електричний опір ґрунту ρ г , Ом·м
            if self.recOld[17] == None:
                self.doubleSpinBox_4.setValue(self.doubleSpinBox_4.minimum())
            else:
                self.doubleSpinBox_4.setValue(self.recOld[17])  # Середня густина катодного струму j к , А/м2
            if self.recOld[18] == None:
                self.doubleSpinBox_5.setValue(self.doubleSpinBox_5.minimum())
            else:
                self.doubleSpinBox_5.setValue(self.recOld[18])  # Значення pH
            if self.recOld[19] == None:
                self.doubleSpinBox_6.setValue(self.doubleSpinBox_6.minimum())
            else:
                self.doubleSpinBox_6.setValue(self.recOld[19])  # Масова частка органічної речовини, %
            if self.recOld[20] == None:
                self.doubleSpinBox_7.setValue(self.doubleSpinBox_7.minimum())
            else:
                self.doubleSpinBox_7.setValue(self.recOld[20])  # Масова частка нітрат-іона NO3-, %
            if self.recOld[21] == None:
                self.doubleSpinBox_8.setValue(self.doubleSpinBox_8.minimum())
            else:
                self.doubleSpinBox_8.setValue(self.recOld[21])  # Масова частка хлор-іона Cl -, %
            if self.recOld[22] == None:
                self.doubleSpinBox_9.setValue(self.doubleSpinBox_9.minimum())
            else:
                self.doubleSpinBox_9.setValue(self.recOld[22])  # Масова частка іона заліза Fe3+, %
            self.comboBox_2.setCurrentIndex(
                self.comboBox_2.findData(self.recOld[23], role=QtCore.Qt.UserRole))  # ID лаборанта
            # Подготовка и отображение расчетных показателей
            if self.recOld[14] != None and self.recOld[13] != None:
                self.label_29.setText(str(self.recOld[15]))
#                self.clso4 = round(self.recOld[14] + self.recOld[13] * dc.Decimal(0.25), 1)
#                self.label_29.setText(str(self.clso4))
            else:
                self.label_29.setText("-")
            if self.recOld[14] != None and self.recOld[21] == None:
                self.doubleSpinBox_8.setValue(self.recOld[14] / 10000)
            else:
                pass
            # Считывание данных и обновление исходного списка
            try:
                self.recOldOne = list(self.recOld[9:24])
            except:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Critical, "Агресивність ґрунтів",
                                               "Не формується перегляд або запит агресивних властивостей ґрунту. "
                                               "\nМожливо не занесені усі дані пошарового опису свердловини або шурфу в екранній формі - Характеристика виробки.")
                btnOK = QtWidgets.QPushButton("&OK")
                btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                result = self.formMassWin.exec()
        else:
            pass
        self.refreshTableAgressgrunt()
        self.refreshAgressgrunt()

    def refreshTableAgressgrunt(self) -> set:
        """Обновление таблицы агрессивности грунтов"""
        self.recCountAgressgrunt = len(self.recAll)
        self.recAllOldAgressgrunt = []
        if self.recCountAgressgrunt > 0:
            self.modelAgressgrunt.setRowCount(self.recCountAgressgrunt)
            self.tableAgressgrunt.setEnabled(True)
            self.modelAgressgrunt.removeRows(0, self.modelAgressgrunt.rowCount())
            for i in range(0, self.recCountAgressgrunt):  # Занесение данных в ячейки таблицы
                self.recOldAgressgrunt = self.recAll[i][9:25]
                listrow = list(self.recOldAgressgrunt)  # Список одной строки
                item9 = QtGui.QStandardItem(str(listrow[0]))  # Лабораторный номер
                item10 = QtGui.QStandardItem(str(listrow[1]))  # ID агрессивности
                if listrow[2] == 1:
                    item11 = QtGui.QStandardItem("Суха")  # Список зон влажности
                    QtGui.QStandardItem.setData(item11, 1, role=QtCore.Qt.UserRole)
                elif listrow[2] == 2:
                    item11 = QtGui.QStandardItem("Нормальна")
                    QtGui.QStandardItem.setData(item11, 2, role=QtCore.Qt.UserRole)
                elif listrow[2] == 3:
                    item11 = QtGui.QStandardItem("Волога")
                    QtGui.QStandardItem.setData(item11, 3, role=QtCore.Qt.UserRole)
                else:
                    item11 = QtGui.QStandardItem("")
                    QtGui.QStandardItem.setData(item11, 0, role=QtCore.Qt.UserRole)
                item12 = QtGui.QStandardItem(str(listrow[0]))
                QtGui.QStandardItem.setData(item12, str(listrow[3]), role=QtCore.Qt.UserRole)  # ID образца
                item13 = QtGui.QStandardItem(str(listrow[4])) # Сульфаты
                if item13.text() == 'None':
                    item13.setData('-', role=QtCore.Qt.DisplayRole)
                item14 = QtGui.QStandardItem(str(listrow[5])) # Хлориды
                if item14.text() == 'None':
                    item14.setData('-', role=QtCore.Qt.DisplayRole)
                if listrow[6] is None:
                    item15 = QtGui.QStandardItem(str('-'))
                else:
                    item15 = QtGui.QStandardItem(str(round(listrow[6], 1)))  # Хлориды и сульфаты
                item16 = QtGui.QStandardItem(str(listrow[7])) # Питомий електричний опір ґрунту ρ г , Ом·м
                if item16.text() == 'None':
                    item16.setData('-', role=QtCore.Qt.DisplayRole)
                item17 = QtGui.QStandardItem(str(listrow[8])) # Середня густина катодного струму j к , А/м2
                if item17.text() == 'None':
                    item17.setData('-', role=QtCore.Qt.DisplayRole)
                item18 = QtGui.QStandardItem(str(listrow[9])) # Значення pH
                if item18.text() == 'None':
                    item18.setData('-', role=QtCore.Qt.DisplayRole)
                item19 = QtGui.QStandardItem(str(listrow[10])) # Масова частка органічної речовини, %
                if item19.text() == 'None':
                    item19.setData('-', role=QtCore.Qt.DisplayRole)
                item20 = QtGui.QStandardItem(str(listrow[11])) # Масова частка нітрат-іона NO3-, %
                if item20.text() == 'None':
                    item20.setData('-', role=QtCore.Qt.DisplayRole)
                item21 = QtGui.QStandardItem(str(listrow[12])) # Масова частка хлор-іона Cl -, %
                if item21.text() == 'None':
                    item21.setData('-', role=QtCore.Qt.DisplayRole)
                item22 = QtGui.QStandardItem(str(listrow[13])) # Масова частка іонів заліза, %
                if item22.text() == 'None':
                    item22.setData('-', role=QtCore.Qt.DisplayRole)
                item23 = QtGui.QStandardItem(str(listrow[15])) # Лаборант
                if listrow[14] == 0:
                    item23.setData(str('-'), role=QtCore.Qt.EditRole)
                else:
                    item23.setData(item23.text(), role=QtCore.Qt.EditRole)  # ФИО лаборанта
                QtGui.QStandardItem.setData(item23, str(listrow[14]), role=QtCore.Qt.UserRole)  # ID лаборанта
                item11.setTextAlignment(QtCore.Qt.AlignCenter)
                item12.setTextAlignment(QtCore.Qt.AlignCenter)
                item13.setTextAlignment(QtCore.Qt.AlignCenter)
                item14.setTextAlignment(QtCore.Qt.AlignCenter)
                item15.setTextAlignment(QtCore.Qt.AlignCenter)
                item15.setEnabled(False)
                item16.setTextAlignment(QtCore.Qt.AlignCenter)
                item17.setTextAlignment(QtCore.Qt.AlignCenter)
                item18.setTextAlignment(QtCore.Qt.AlignCenter)
                item19.setTextAlignment(QtCore.Qt.AlignCenter)
                item20.setTextAlignment(QtCore.Qt.AlignCenter)
                item21.setTextAlignment(QtCore.Qt.AlignCenter)
                item22.setTextAlignment(QtCore.Qt.AlignCenter)
                item23.setTextAlignment(QtCore.Qt.AlignCenter)
                item15.setBackground(self.brushgr)
                item15.setForeground(self.brushbl)
                self.modelAgressgrunt.appendRow(
                    [item9, item10, item11, item12, item13, item14, item15, item16, item17, item18, item19, item20,
                     item21, item22, item23])
                self.recOldAgressgruntOne = []
                for j in range(0, 15):  # Занесение данных в ячейки таблицы
                    it = listrow[j]
                    if j == 6:
                        if listrow[j] != None:
                            it = round(listrow[j], 1)
                    self.recOldAgressgruntOne.append(it)
                self.recAllOldAgressgrunt.append(self.recOldAgressgruntOne)  # Формирование исходного списка свойств связных грунтов
        else:
            self.tableAgressgrunt.setEnabled(False)
#            self.toolButton_6.setEnabled(False)
            self.modelAgressgrunt.removeRows(0, self.modelAgressgrunt.rowCount())
        self.recAllNewAgressgrunt = self.recAllOldAgressgrunt

        self.tableAgressgrunt.selectRow(self.recNum)

    def refreshAgressgrunt(self) -> set:
        """Обновление показаний агрессивности грунта"""
        ind = self.comboBox_3.currentIndex()
        zon = self.comboBox_3.itemData(ind, role=QtCore.Qt.UserRole)
        concso4 = self.doubleSpinBox.value()
        if self.label_29.text() == '-':
            conccl = 0
        else:
            conccl = float(self.label_29.text())
        sopr = self.doubleSpinBox_3.value()
        tok = self.doubleSpinBox_4.value()
        pH = self.doubleSpinBox_5.value()
        organika = self.doubleSpinBox_6.value()
        no3 = self.doubleSpinBox_7.value()
        cl = self.doubleSpinBox_8.value()
        fe = self.doubleSpinBox_9.value()
        agresszW4p = self.agressgrz(zon, concso4, 500, 1000, 1500, 250, 500, 1000)
        self.label_5.setStyleSheet(agresszW4p[0])
        self.label_5.setText(agresszW4p[1])
        agresszW4sh = self.agressgrz(zon, concso4, 3000, 4000, 5000, 1500, 3000, 4000)
        self.label_36.setStyleSheet(agresszW4sh[0])
        self.label_36.setText(agresszW4sh[1])
        agresszW4s = self.agressgrz(zon, concso4, 6000, 12000, 15000, 3000, 6000, 8000)
        self.label_42.setStyleSheet(agresszW4s[0])
        self.label_42.setText(agresszW4s[1])
        agresszW4W6 = self.agressgrz(zon, conccl, 400, 750, 7500, 250, 500, 5000)
        self.label_24.setStyleSheet(agresszW4W6[0])
        self.label_24.setText(agresszW4W6[1])
        self.label_31.setStyleSheet(agresszW4W6[0])
        self.label_31.setText(agresszW4W6[1])
        self.label_41.setStyleSheet(agresszW4W6[0])
        self.label_41.setText(agresszW4W6[1])
        agressW6p = self.agressgr(concso4, 1000, 1500, 2000)
        self.label_6.setStyleSheet(agressW6p[0])
        self.label_6.setText(agressW6p[1])
        agressW8p = self.agressgr(concso4, 1500, 2000, 3000)
        self.label_16.setStyleSheet(agressW8p[0])
        self.label_16.setText(agressW8p[1])
        agressW10W14p = self.agressgr(concso4, 2000, 3000, 4000)
        self.label_21.setStyleSheet(agressW10W14p[0])
        self.label_21.setText(agressW10W14p[1])
        agressW16W20p = self.agressgr(concso4, 3000, 4000, 5000)
        self.label_22.setStyleSheet(agressW16W20p[0])
        self.label_22.setText(agressW16W20p[1])
        agressW6sh = self.agressgr(concso4, 4000, 5000, 8000)
        self.label_26.setStyleSheet(agressW6sh[0])
        self.label_26.setText(agressW6sh[1])
        agressW8sh = self.agressgr(concso4, 5000, 8000, 10000)
        self.label_27.setStyleSheet(agressW8sh[0])
        self.label_27.setText(agressW8sh[1])
        agressW10W14sh = self.agressgr(concso4, 8000, 10000, 12000)
        self.label_25.setStyleSheet(agressW10W14sh[0])
        self.label_25.setText(agressW10W14sh[1])
        agressW16W20sh = self.agressgr(concso4, 10000, 12000, 15000)
        self.label_37.setStyleSheet(agressW16W20sh[0])
        self.label_37.setText(agressW16W20sh[1])
        agressW6s = self.agressgr(concso4, 8000, 10000, 12000)
        self.label_39.setStyleSheet(agressW6s[0])
        self.label_39.setText(agressW6s[1])
        agressW8s = self.agressgr(concso4, 10000, 12000, 15000)
        self.label_40.setStyleSheet(agressW8s[0])
        self.label_40.setText(agressW8s[1])
        agressW10W14s = self.agressgr(concso4, 12000, 15000, 20000)
        self.label_38.setStyleSheet(agressW10W14s[0])
        self.label_38.setText(agressW10W14s[1])
        agressW16W20s = self.agressgr(concso4, 15000, 20000, 24000)
        self.label_43.setStyleSheet(agressW16W20s[0])
        self.label_43.setText(agressW16W20s[1])
        agressStal = self.agressgr_stal(sopr, tok)
        self.label_59.setStyleSheet(agressStal[0])
        self.label_59.setText(agressStal[1])
        self.label_60.setStyleSheet(agressStal[2])
        self.label_60.setText(agressStal[3])
        agressgrPb = self.agressgr_Pb(pH, organika, no3)
        self.label_66.setStyleSheet(agressgrPb[0])
        self.label_66.setText(agressgrPb[1])
        self.label_65.setStyleSheet(agressgrPb[2])
        self.label_65.setText(agressgrPb[3])
        self.label_68.setStyleSheet(agressgrPb[4])
        self.label_68.setText(agressgrPb[5])
        agressgrAl = self.agressgr_Al(pH, cl, fe)
        self.label_73.setStyleSheet(agressgrAl[0])
        self.label_73.setText(agressgrAl[1])
        self.label_74.setStyleSheet(agressgrAl[2])
        self.label_74.setText(agressgrAl[3])
        self.label_75.setStyleSheet(agressgrAl[4])
        self.label_75.setText(agressgrAl[5])

    def agressgrz(self, zona, par, parmin1, paravg1, parmax1, parmin2, paravg2, parmax2) -> set:
        """Определение агрессивности грунта по отношению к бетону с учетом зоны влажности"""
        agress = []
        if zona == 1:
            if par > parmax1:
                agresscolor = "background-color: red"
                agressname = "ХА3"
            elif par > paravg1:
                agresscolor = "background-color: orange"
                agressname = "ХА2"
            elif par > parmin1:
                agresscolor = "background-color: yellow"
                agressname = "ХА1"
            elif par > 0:
                agresscolor = "background-color: lightgreen"
                agressname = "ХА0"
            else:
                agresscolor = ""
                agressname = ""
        elif zona > 1:
            if par > parmax2:
                agresscolor = "background-color: red"
                agressname = "ХА3"
            elif par > paravg2:
                agresscolor = "background-color: orange"
                agressname = "ХА2"
            elif par > parmin2:
                agresscolor = "background-color: yellow"
                agressname = "ХА1"
            elif par > 0:
                agresscolor = "background-color: lightgreen"
                agressname = "ХА0"
            else:
                agresscolor = ""
                agressname = ""
        else:
            agresscolor = ""
            agressname = ""
        agress.append(agresscolor)
        agress.append(agressname)
        return agress

    def agressgr(self, par, parmin, paravg, parmax) -> set:
        """Определение агрессивности грунта по отношению к бетону без учета зоны влажности"""
        agress = []
        if par > parmax:
            agresscolor = "background-color: red"
            agressname = "ХА3"
        elif par > paravg:
            agresscolor = "background-color: orange"
            agressname = "ХА2"
        elif par > parmin:
            agresscolor = "background-color: yellow"
            agressname = "ХА1"
        elif par > 0:
            agresscolor = "background-color: lightgreen"
            agressname = "ХА0"
        else:
            agresscolor = ""
            agressname = ""
        agress.append(agresscolor)
        agress.append(agressname)
        return agress

    def agressgr_stal(self, parsopr, partok) -> set:
        """Корозійна агресивність ґрунту по відношенню до вуглецевої якісної
        конструкційної сталі згідно з ГОСТ 1050 та звичайної якості згідно з ДСТУ 2651"""
        agress = []
        if parsopr > 1300:
            agresscolor = "background-color: lightgreen"
            agressname = "ХА0"
        elif parsopr > 50:
            agresscolor = "background-color: yellow"
            agressname = "ХА1"
        elif parsopr > 20:
            agresscolor = "background-color: orange"
            agressname = "ХА2"
        elif parsopr >= 0:
            agresscolor = "background-color: red"
            agressname = "ХА3"
        else:
            agresscolor = ""
            agressname = ""
        agress.append(agresscolor)
        agress.append(agressname)
        if partok > 0.2:
            agresscolor = "background-color: red"
            agressname = "ХА3"
        elif partok > 0.05:
            agresscolor = "background-color: orange"
            agressname = "ХА2"
        elif partok > 0.0:
            agresscolor = "background-color: yellow"
            agressname = "ХА1"
        elif partok == 0.0:
            agresscolor = "background-color: lightgreen"
            agressname = "ХА0"
        else:
            agresscolor = ""
            agressname = ""
        agress.append(agresscolor)
        agress.append(agressname)
        return agress

    def agressgr_Pb(self, pH, organika, no3) -> set:
        """Корозійна агресивність грунтів по відношенню до свинцевої оболонці кабелю"""
        agress = []
        if pH > 9.0:
            agresscolor = "background-color: red"
            agressname = "ХА3"
        elif pH > 7.5:
            agresscolor = "background-color: orange"
            agressname = "ХА2"
        elif pH > 6.5:
            agresscolor = "background-color: yellow"
            agressname = "ХА1"
        elif pH > 5.0:
            agresscolor = "background-color: orange"
            agressname = "ХА2"
        elif pH > 0.0:
            agresscolor = "background-color: red"
            agressname = "ХА3"
        else:
            agresscolor = ""
            agressname = ""
        agress.append(agresscolor)
        agress.append(agressname)
        if organika > 0.02:
            agresscolor = "background-color: red"
            agressname = "ХА3"
        elif organika > 0.01:
            agresscolor = "background-color: orange"
            agressname = "ХА2"
        elif organika > 0.00:
            agresscolor = "background-color: yellow"
            agressname = "ХА1"
        elif organika == 0.00:
            agresscolor = "background-color: lightgreen"
            agressname = "ХА0"
        else:
            agresscolor = ""
            agressname = ""
        agress.append(agresscolor)
        agress.append(agressname)
        if no3 > 0.0010:
            agresscolor = "background-color: red"
            agressname = "ХА3"
        elif no3 > 0.0001:
            agresscolor = "background-color: orange"
            agressname = "ХА2"
        elif no3 > 0.00:
            agresscolor = "background-color: yellow"
            agressname = "ХА1"
        elif no3 == 0.00:
            agresscolor = "background-color: lightgreen"
            agressname = "ХА0"
        else:
            agresscolor = ""
            agressname = ""
        agress.append(agresscolor)
        agress.append(agressname)
        return agress

    def agressgr_Al(self, pH, cl, fe) -> set:
        """Корозійна агресивність грунтів по відношенню до алюмінієвої оболонці кабелю"""
        agress = []
        if pH > 8.5:
            agresscolor = "background-color: red"
            agressname = "ХА3"
        elif pH > 7.5:
            agresscolor = "background-color: orange"
            agressname = "ХА2"
        elif pH > 6.0:
            agresscolor = "background-color: yellow"
            agressname = "ХА1"
        elif pH > 4.5:
            agresscolor = "background-color: orange"
            agressname = "ХА2"
        elif pH > 0.0:
            agresscolor = "background-color: red"
            agressname = "ХА3"
        else:
            agresscolor = ""
            agressname = ""
        agress.append(agresscolor)
        agress.append(agressname)
        if cl > 0.005:
            agresscolor = "background-color: red"
            agressname = "ХА3"
        elif cl > 0.001:
            agresscolor = "background-color: orange"
            agressname = "ХА2"
        elif cl > 0.00:
            agresscolor = "background-color: yellow"
            agressname = "ХА1"
        elif cl == 0.00:
            agresscolor = "background-color: lightgreen"
            agressname = "ХА0"
        else:
            agresscolor = ""
            agressname = ""
        agress.append(agresscolor)
        agress.append(agressname)
        if fe > 0.01:
            agresscolor = "background-color: red"
            agressname = "ХА3"
        elif fe > 0.002:
            agresscolor = "background-color: orange"
            agressname = "ХА2"
        elif fe > 0.00:
            agresscolor = "background-color: yellow"
            agressname = "ХА1"
        elif fe == 0.00:
            agresscolor = "background-color: lightgreen"
            agressname = "ХА0"
        else:
            agresscolor = ""
            agressname = ""
        agress.append(agresscolor)
        agress.append(agressname)
        return agress

    def calcAgress(self) -> set:
        """Расчет агрессивности грунтов"""
#        self.clso4 = dc.Decimal(self.doubleSpinBox_2.value() + self.doubleSpinBox.value() * 0.25)
#        self.clso4 = round(self.clso4, 1)
#        self.label_29.setText(str(self.clso4))
        if self.doubleSpinBox_2.value() >= 0:
            self.doubleSpinBox_8.setValue(self.doubleSpinBox_2.value() / 10000)
        else:
            pass
        self.saveRecord(False)
        self.refreshAgressgrunt()

    def refreshToolbar(self) -> set:
        """Обновляет панель инструментов"""
        if self.recNum == 0 and self.recCount > 1:
            form.action_8.setEnabled(False)  # Первая запись
            form.action_9.setEnabled(False)  # Предыдущая запись
            form.action_10.setEnabled(True)  # Следующая запись
            form.action_11.setEnabled(True)  # Последняя запись
        elif self.recNum in range(1, self.recCount - 1):
            form.action_8.setEnabled(True)  # Первая запись
            form.action_9.setEnabled(True)  # Последняя запись
            form.action_10.setEnabled(True)  # Следующая запись
            form.action_11.setEnabled(True)  # Последняя запись
        elif self.recNum == self.recCount - 1 and self.recCount > 1:
            form.action_8.setEnabled(True)  # Первая запись
            form.action_9.setEnabled(True)  # Предыдущая запись
            form.action_10.setEnabled(False)  # Следующая запись
            form.action_11.setEnabled(False)  # Последняя запись
        else:
            form.action_8.setEnabled(False)  # Первая запись
            form.action_9.setEnabled(False)  # Предыдущая запись
            form.action_10.setEnabled(False)  # Следующая запись
            form.action_11.setEnabled(False)  # Последняя запись

    def setRow(self) -> set:
        if self.currentIndex() == 0:
            self.refreshToolbar()
            self.refreshRecord()
        elif self.currentIndex() == 1:
            self.tableAgressgrunt.selectRow(self.recNum)
        else:
            self.refreshRecord()

    def currentRow(self) -> set:
        """Определение номера записи (строки)  и установка движка на эту запись"""
        if self.currentIndex() == 1:
            recNum = self.recNum
            self.recNum = self.selmodelAgressgrunt.currentIndex().row()
            if self.recNum < 0:
                self.recNum = recNum
            self.refreshToolbar()

    def showEvent(self, e) -> set:
        """Выполняет действия при выводе окна на экран"""
        form.action_44.setEnabled(False)
        QtWidgets.QTabWidget.showEvent(self, e)

    def hideEvent(self, e) -> set:
        """Выполняет действия при скрытии окна"""
        form.action_44.setEnabled(True)
        form.agressgruntwin = None
        if self.recAll != []:
            self.asktoSave()
        form.refreshMain()
        QtWidgets.QTabWidget.hideEvent(self, e)

    def nextRecord(self) -> set:
        """Становится на следующей записи"""
        self.recNum += 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableAgressgrunt.selectRow(self.recNum)

    def priorRecord(self) -> set:
        """Становится на предыдущей записи"""
        self.recNum -= 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableAgressgrunt.selectRow(self.recNum)

    def firstRecord(self) -> set:
        """Становится на первой записи"""
        self.recNum = 0
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableAgressgrunt.selectRow(self.recNum)

    def lastRecord(self) -> set:
        """Становится на последней записи"""
        if self.recCount > 0:
            self.recNum = self.recCount - 1
            self.refreshToolbar()
            self.asktoSave()
            self.refreshRecord()
            self.tableAgressgrunt.selectRow(self.recNum)

    def sortRecord(self) -> set:
        """Сортировка записей"""
        self.recAll.sort(key=itemgetter(0,5,7))
        form.action_13.setEnabled(False)  # Сортировать
        form.action_14.setEnabled(True)  # Снять сортировку
        self.refreshRecord()

    def desortRecord(self) -> set:
        """Отмена сортировки, что соответствует сортировке по ID"""
        self.recAll.sort(key=itemgetter(10))
        form.action_13.setEnabled(True)  # Сортировать
        form.action_14.setEnabled(False)  # Снять сортировку
        self.refreshRecord()

    def addRecord(self) -> set:
        """Добавляет новую запись"""
        val12 = self.comboBox.itemData(self.comboBox.currentIndex(),
                                       role=QtCore.Qt.UserRole)  # ID последнего образца
        with UseDatebase(dbconfig) as curs:
            curs.execute("INSERT INTO aggresgrunt (id_obrazec) VALUES (%(v12)s);", {'v12': val12})
        self.requerySelect()
        self.recCount = len(self.recAll)
        if self.recCount == 1:
            self.recNum = 0
            self.recOld = self.recAll[self.recNum]
        self.lastRecord()
        self.refreshRecord()
        self.refreshToolbar()

    def clearField(self) -> set:
        """Очищает текущее поле, присваевает минимальное значение (в последствие NULL)"""
        valIndex = QtWidgets.QApplication.focusWidget()
        if type(valIndex) == QtWidgets.QDoubleSpinBox:
            if valIndex.objectName() == 'doubleSpinBox':
                self.doubleSpinBox.setValue(self.doubleSpinBox.minimum())
            elif valIndex.objectName() == 'doubleSpinBox_2':
                self.doubleSpinBox_2.setValue(self.doubleSpinBox_2.minimum())
            elif valIndex.objectName() == 'doubleSpinBox_3':
                self.doubleSpinBox_3.setValue(self.doubleSpinBox_3.minimum())
            elif valIndex.objectName() == 'doubleSpinBox_4':
                self.doubleSpinBox_4.setValue(self.doubleSpinBox_4.minimum())
            elif valIndex.objectName() == 'doubleSpinBox_5':
                self.doubleSpinBox_5.setValue(self.doubleSpinBox_5.minimum())
            elif valIndex.objectName() == 'doubleSpinBox_6':
                self.doubleSpinBox_6.setValue(self.doubleSpinBox_6.minimum())
            elif valIndex.objectName() == 'doubleSpinBox_7':
                self.doubleSpinBox_7.setValue(self.doubleSpinBox_7.minimum())
            elif valIndex.objectName() == 'doubleSpinBox_8':
                self.doubleSpinBox_8.setValue(self.doubleSpinBox_8.minimum())
            elif valIndex.objectName() == 'doubleSpinBox_9':
                self.doubleSpinBox_9.setValue(self.doubleSpinBox_9.minimum())

    def delRecord(self) -> set:
        """Удаляет текущую запись"""
        self.refreshRecord()
        val10 = self.recOld[10]  # ID
        if val10 is not None:
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                           "Корозійна агресивність ґрунтів",
                                           "Ви бажаєте видалити поточний запис з порядковим номером - " + str(self.recNum + 1) +
                                           " та лабораторним номером - " + str(self.recOld[9]) + "?")
            btnYes = QtWidgets.QPushButton("&Так")
            btnNo = QtWidgets.QPushButton("&Ні")
            btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
            self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
            self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
            self.formMassWin.setDefaultButton(btnYes)
            result = self.formMassWin.exec()
            if result == 0:
                with UseDatebase(dbconfig) as curs:
                    curs.execute("DELETE FROM aggresgrunt WHERE id = %(v10)s;", {'v10': val10})
                self.requerySelect()
                self.recCount = len(self.recAll)
                if self.recCount > 0:
                    self.firstRecord()
                    self.refreshRecord()
                    self.refreshToolbar()
                else:
                    self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information, "Агресивність ґрунтів",
                                                   "Видалено останній запис")
                    btnOK = QtWidgets.QPushButton("&OK")
                    btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                    self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                    result = self.formMassWin.exec()
                    if result == 0:
                        self.formMassWin.close()
                        self.parent().close()
            else:
                pass
        else:
            pass

    def asktoSave(self) -> set:
        """Проверяет наличие изменений в свойствах агрессивности грунтов"""
        if self.recOldOne:
            # Считывание данных и обновление списка согласно значений экранной формы
            val9 = self.recOldOne[0]  # Лабораторный номер
            val10 = self.recOldOne[1]  # ID агрессивности
            val11 = self.comboBox_3.itemData(self.comboBox_3.currentIndex(), role=QtCore.Qt.UserRole)  # Зона влажности
            val12 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole)  # ID образца
            if self.doubleSpinBox.value() < 0:
                val13 = None
            else:
                val13 = round(dc.Decimal(self.doubleSpinBox.value()), 1)     # Сульфаты
            if self.doubleSpinBox_2.value() < 0:
                val14 = None
            else:
                val14 = round(dc.Decimal(self.doubleSpinBox_2.value()), 1)    # Хлориды
            if self.label_29.text() == '-':
                val15 = None
            else:
                val15 = round(dc.Decimal(self.label_29.text()), 1)   # Хлориды и сульфаты
            if self.doubleSpinBox_3.value() < 0:
                val16 = None
            else:
                val16 = round(dc.Decimal(self.doubleSpinBox_3.value()), 1)    # Питомий електричний опір ґрунту ρ г , Ом·м
            if self.doubleSpinBox_4.value() < 0:
                val17 = None
            else:
                val17 = round(dc.Decimal(self.doubleSpinBox_4.value()), 2)    # Середня густина катодного струму j к , А/м2
            if self.doubleSpinBox_5.value() < 0:
                val18 = None
            else:
                val18 = round(dc.Decimal(self.doubleSpinBox_5.value()), 1)    # Значення pH
            if self.doubleSpinBox_6.value() < 0:
                val19 = None
            else:
                val19 = round(dc.Decimal(self.doubleSpinBox_6.value()), 4)    # Масова частка органічної речовини, %
            if self.doubleSpinBox_7.value() < 0:
                val20 = None
            else:
                val20 = round(dc.Decimal(self.doubleSpinBox_7.value()), 4)    # Масова частка нітрат-іона NO3-, %
            if self.doubleSpinBox_8.value() < 0:
                val21 = None
            else:
                val21 = round(dc.Decimal(self.doubleSpinBox_8.value()), 4)    # Масова частка хлор-іона Cl -, %
            if self.doubleSpinBox_9.value() < 0:
                val22 = None
            else:
                val22 = round(dc.Decimal(self.doubleSpinBox_9.value()), 4)    # Масова частка іона заліза Fe3+, %
            val23 = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), role=QtCore.Qt.UserRole)  # ID лаборанта
            self.recNewOne = [val9, val10, val11, val12, val13, val14, val15,
                           val16, val17, val18, val19, val20, val21, val22, val23]
            askAgressgrunt = (self.recNewOne == self.recOldOne)
            askTableAgressgrunt = self.asktoSaveTableAgressgrunt()
            if askAgressgrunt == False:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                               "Корозійна агресивність ґрунтів",
                                               "Є незбережені дані корозійної агресивності ґрунтів. "
                                               "\nВи бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecord(False)
                else:
                    pass
            elif askTableAgressgrunt == False:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                               "Корозійна агресивність ґрунтів",
                                               "Є незбережені дані у таблиці корозійної агресивності ґрунтів. "
                                               "\nВи бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecordTableAgressgrunt(False)
                else:
                    pass
            else:
                pass
        else:
            pass

    def asktoSaveTableAgressgrunt(self) -> set:
        """Проверка наличия изменений в таблице агрессивность грунтов"""
        # Считывание данных и обновление списка согласно значений экранной формы
        self.recAllNewAgressgrunt = []
        for i in range(0, self.recCountAgressgrunt):
            rec = []
            for j in range(0, 15):
                if j == 0:
                    el = str(self.modelAgressgrunt.item(i, j).data(QtCore.Qt.EditRole))  # Labnum
                elif j == 1:
                    el = int(self.modelAgressgrunt.item(i, j).data(QtCore.Qt.EditRole)) # ID Agressgrunt
                elif j == 2:
                    el = int(self.modelAgressgrunt.item(i, j).data(QtCore.Qt.UserRole)) # Зона влажности
                elif j == 3:
                    el = int(self.modelAgressgrunt.item(i, j).data(QtCore.Qt.UserRole)) # ID образца
                elif j in range(4, 14):
                    if self.modelAgressgrunt.item(i, j).data(QtCore.Qt.EditRole) == 'None':
                        el = None
                    elif self.modelAgressgrunt.item(i, j).data(QtCore.Qt.EditRole) == '-':
                        el = None
                    else:
                        el = dc.Decimal(self.modelAgressgrunt.item(i, j).data(QtCore.Qt.EditRole))
                elif j == 14:
                    el = int(self.modelAgressgrunt.item(i, j).data(QtCore.Qt.UserRole)) #  Лаборант (ID)
                else:
                    if el == 'None':
                        el = None
                rec.append(el)
            self.recAllNewAgressgrunt.append(rec)  # Формирование обновленного списка (записей-кортежей)
        if self.recAllNewAgressgrunt == self.recAllOldAgressgrunt:
            ask = True
        else:
            ask = False
        return ask

    def saveAll(self) -> set:
        """Сохраняет изменения по нажатию кнопки Сохранить на панели инструментов"""
        if self.currentIndex() == 0:
            self.saveRecord(False)
        if self.currentIndex() == 1:
            self.setCurrentIndex(0)
            self.setCurrentIndex(1)
        else:
            pass

    def saveRecord(self, ask) -> set:
        """Сохраняет изменения в записи и формирует новый курсор"""
        if ask == False:
            val10 = self.recOldOne[1]  # ID агрессивности
            val11 = self.comboBox_3.itemData(self.comboBox_3.currentIndex(), role=QtCore.Qt.UserRole)  # Зона влажности
            val12 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole)  # ID образца
            if self.doubleSpinBox.value() < 0:
                val13 = None
            else:
                val13 = round(dc.Decimal(self.doubleSpinBox.value()), 1)     # Сульфаты
            if self.doubleSpinBox_2.value() < 0:
                val14 = None
            else:
                val14 = round(dc.Decimal(self.doubleSpinBox_2.value()), 1)    # Хлориды
            if val14 != None and val13 != None:
                self.clso4 = round(val14 + val13 * dc.Decimal(0.25), 1)
                self.label_29.setText(str(self.clso4))
            else:
                self.label_29.setText("-")
            val15 = self.label_29.text()   # Хлориды и сульфаты
            if self.doubleSpinBox_3.value() < 0:
                val16 = None
            else:
                val16 = round(dc.Decimal(self.doubleSpinBox_3.value()), 1)    # Питомий електричний опір ґрунту ρ г , Ом·м
            if self.doubleSpinBox_4.value() < 0:
                val17 = None
            else:
                val17 = round(dc.Decimal(self.doubleSpinBox_4.value()), 2)    # Середня густина катодного струму j к , А/м2
            if self.doubleSpinBox_5.value() < 0:
                val18 = None
            else:
                val18 = round(dc.Decimal(self.doubleSpinBox_5.value()), 1)    # Значення pH
            if self.doubleSpinBox_6.value() < 0:
                val19 = None
            else:
                val19 = round(dc.Decimal(self.doubleSpinBox_6.value()), 4)    # Масова частка органічної речовини, %
            if self.doubleSpinBox_7.value() < 0:
                val20 = None
            else:
                val20 = round(dc.Decimal(self.doubleSpinBox_7.value()), 4)    # Масова частка нітрат-іона NO3-, %
            if self.doubleSpinBox_8.value() < 0:
                val21 = None
            else:
                val21 = round(dc.Decimal(self.doubleSpinBox_8.value()), 4)    # Масова частка хлор-іона Cl -, %
            if self.doubleSpinBox_9.value() < 0:
                val22 = None
            else:
                val22 = round(dc.Decimal(self.doubleSpinBox_9.value()), 4)    # Масова частка іона заліза Fe3+, %
            val23 = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), role=QtCore.Qt.UserRole)  # ID лаборанта
            with UseDatebase(dbconfig) as curs:
                curs.execute("""UPDATE aggresgrunt
                                SET zonavlag = %(v11)s,
                                    id_obrazec = %(v12)s, 
                                    so4 = %(v13)s, 
                                    cl = %(v14)s, 
                                    udsoprotiv = %(v16)s,
                                    plottok = %(v17)s,
                                    ph = %(v18)s,
                                    organika = %(v19)s,
                                    no3 = %(v20)s,
                                    cl_ = %(v21)s,
                                    fe3 = %(v22)s,
                                    id_labman = %(v23)s
                                WHERE id = %(v10)s;""",
                             {'v11': val11, 'v12': val12, 'v13': val13, 'v14': val14, 'v16': val16, 'v17': val17,
                              'v18': val18, 'v19': val19, 'v20': val20, 'v21': val21, 'v22': val22, 'v23': val23,
                              'v10': val10})
            self.requerySelect()
            self.refreshRecord()
        else:
            pass

    def saveRecordTableAgressgrunt(self, ask) -> set:
        """Сохранение записей таблицы свойств агрессивности грунтов"""
        if ask == False:
            for i in range(0, self.recCountAgressgrunt):
                recTabAgressgrunt = self.recAllNewAgressgrunt[i]
                val10 = recTabAgressgrunt[1]    # ID агрессивности
                val11 = recTabAgressgrunt[2]    # Зона влажности
                val12 = recTabAgressgrunt[3]    # ID образца
                val13 = recTabAgressgrunt[4]    # SO4
                val14 = recTabAgressgrunt[5]    # Cl
                val15 = recTabAgressgrunt[6]    # SO4+Cl
                val16 = recTabAgressgrunt[7]    # Питомий електричний опір ґрунту ρ г , Ом·м
                val17 = recTabAgressgrunt[8]    # Середня густина катодного струму j к , А/м2
                val18 = recTabAgressgrunt[9]    # Значення pH
                val19 = recTabAgressgrunt[10]   # Масова частка органічної речовини, %
                val20 = recTabAgressgrunt[11]   # Масова частка нітрат-іона NO3-, %
                val21 = recTabAgressgrunt[12]   # Масова частка хлор-іона Cl -, %
                val22 = recTabAgressgrunt[13]   # Масова частка іона заліза Fe3+, %
                val23 = recTabAgressgrunt[14]   # ID лаборанта
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE aggresgrunt
                                SET zonavlag = %(v11)s,
                                    id_obrazec = %(v12)s, 
                                    so4 = %(v13)s, 
                                    cl = %(v14)s, 
                                    udsoprotiv = %(v16)s,
                                    plottok = %(v17)s,
                                    ph = %(v18)s,
                                    organika = %(v19)s,
                                    no3 = %(v20)s,
                                    cl_ = %(v21)s,
                                    fe3 = %(v22)s,
                                    id_labman = %(v23)s
                                WHERE id = %(v10)s;""",
                                 {'v11': val11, 'v12': val12, 'v13': val13, 'v14': val14, 'v16': val16,
                                  'v17': val17, 'v18': val18, 'v19': val19, 'v20': val20,
                                  'v21': val21, 'v22': val22, 'v23': val23, 'v10': val10})
            self.requerySelect()
            self.refreshRecord()
        else:
            pass


class AgressvodaWindow(QtWidgets.QTabWidget, egclasswin.Ui_Agressvoda_win):
    def __init__(self) -> set:
        """Инициализация окна свойств воды"""
        super().__init__()
        self.setupUi(self)
        global idActivObekt
        self.recAllOldTab = []
        self.recCount = 0
        self.brushbl = QtGui.QBrush(QtCore.Qt.black)
        self.brushgr = QtGui.QBrush(QtCore.Qt.lightGray)
        self.brushgr.setColor(QtGui.QColor(245, 245, 245))
        self.brushw = QtGui.QBrush(QtCore.Qt.white)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT obrazec.id, 
                                obrazec.lab_num
                            FROM obekt,
                                burehole,
                                obrazec
                            WHERE obekt.id = %(v)s 
                                AND obekt.id = burehole.id_obekt 
                                AND burehole.id = obrazec.id_burehole
                                AND obrazec.mater_obr = 'Вода'
                            ORDER BY obrazec.lab_num""", {'v': idActivObekt})
            recAll = curs.fetchall()
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox.addItem(recOne[1])
                self.comboBox.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT ispol.id, 
                                ispol.fio
                            FROM ispol
                            WHERE ispol.vidrab = 0 OR ispol.vidrab = 7 
                            ORDER BY ispol.fio""")
            recAll = curs.fetchall()
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox_2.addItem(recOne[1])
                self.comboBox_2.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
        self.kpId = 0  # ID свойств воды
        self.modelAgressvoda = QtGui.QStandardItemModel(30, 35)  # Создание модели агрессивности грунтов
        self.selmodelAgressvoda = QtCore.QItemSelectionModel(self.modelAgressvoda)  # Создание модели выделения
        self.modelAgressvoda.setRowCount(len(self.recAll))
        self.modelAgressvoda.setHorizontalHeaderLabels(['Labnum',
                                                        'ID Agressvoda',
                                                        'Лабораторний \nномер',
                                                        'Вид аналізу',
                                                        'Запах \nпри температурі 20 °С',
                                                        'Запах \nпри температурі 20 °С \nбали',
                                                        'Запах \nпри температурі 60 °С',
                                                        'Запах \nпри температурі 60 °С \nбали',
                                                        'Смак і присмак \nпри температурі 20 °С',
                                                        'Смак і присмак \nпри температурі 20 °С \nбали',
                                                        'Кольоровість',
                                                        'Кольоровість \nградуси',
                                                        'Завислі \nречовини \nмг/дм3',
                                                        'Водневий \nпоказник \nрН',
                                                        'Сухий \nзалишок \nмг/дм3',
                                                        'Вуглекислота \nвільна \nмг/дм3',
                                                        'Вуглекислота \nагресивна \nмг/дм3',
                                                        'Окислювальність \nперманганатна \nмгО/дм3',
                                                        'Na \nмг/дм3',
                                                        'K \nмг/дм3',
                                                        'Na + K \nмг/дм3',
                                                        'Ca \nмг/дм3',
                                                        'Mg \nмг/дм3',
                                                        'NH4 \nмг/дм3',
                                                        'Fe2 \nмг/дм3',
                                                        'Fe3 \nмг/дм3',
                                                        'Cl \nмг/дм3',
                                                        'SO4 \nмг/дм3',
                                                        'HCO3 \nмг/дм3',
                                                        'CO3 \nмг/дм3',
                                                        'SiO3 \nмг/дм3',
                                                        'NO3 \nмг/дм3',
                                                        'NO2 \nмг/дм3',
                                                        'F \nмг/дм3',
                                                        'Лаборант'])
        self.tableAgressvoda.setModel(self.modelAgressvoda)  # Создание представления
        self.tableAgressvoda.setSelectionModel(self.selmodelAgressvoda)  # Установить модель выделения в представлении
        self.tableAgressvoda.setGeometry(QtCore.QRect(0, 0, 808, 640))
        self.tableAgressvoda.setColumnWidth(0, 10)  # Labnum
        self.tableAgressvoda.setColumnWidth(1, 10)  # ID Agressvoda
        self.tableAgressvoda.setColumnWidth(2, 100)  # Лабораторний номер
        self.tableAgressvoda.setColumnWidth(3, 100)  # Вид аналізу
        self.tableAgressvoda.setColumnWidth(4, 150)  # Запах при температурі 20 °С
        self.tableAgressvoda.setColumnWidth(5, 150)  # Запах при температурі 20 °С в балах
        self.tableAgressvoda.setColumnWidth(6, 150)  # Запах при температурі 60 °С
        self.tableAgressvoda.setColumnWidth(7, 150)  # Запах при температурі 60 °С в балах
        self.tableAgressvoda.setColumnWidth(8, 150)  # Смак і присмак при температурі 20 °С
        self.tableAgressvoda.setColumnWidth(9, 150)  # Смак і присмак при температурі 20 °С в балах
        self.tableAgressvoda.setColumnWidth(10, 150)  # Колір
        self.tableAgressvoda.setColumnWidth(11, 100)  # Колір в балах
        self.tableAgressvoda.setColumnWidth(12, 80)  # Завись, мг/л
        self.tableAgressvoda.setColumnWidth(13, 80)  # Водневий показник рН
        self.tableAgressvoda.setColumnWidth(14, 80)  # Сухий залишок, мг/дм3
        self.tableAgressvoda.setColumnWidth(15, 110)  # Вуглекислота вільна, мг/дм3
        self.tableAgressvoda.setColumnWidth(16, 110)  # Вуглекислота агресивна, мг/дм3
        self.tableAgressvoda.setColumnWidth(17, 120)  # Окислювальність перманганатна, мгО/дм3
        self.tableAgressvoda.setColumnWidth(18, 80)  # Na- мг/дм3
        self.tableAgressvoda.setColumnWidth(19, 80)  # K- мг/дм3
        self.tableAgressvoda.setColumnWidth(20, 80)  # (Na-)+(K-) мг/дм3
        self.tableAgressvoda.setColumnWidth(21, 80)  # Ca2+ мг/дм3
        self.tableAgressvoda.setColumnWidth(22, 80)  # Mg2+ мг/дм3
        self.tableAgressvoda.setColumnWidth(23, 80)  # NH4+ мг/дм3
        self.tableAgressvoda.setColumnWidth(24, 80)  # Fe2+ мг/дм3
        self.tableAgressvoda.setColumnWidth(25, 80)  # Fe3+ мг/дм3
        self.tableAgressvoda.setColumnWidth(26, 80)  # Cl- мг/дм3
        self.tableAgressvoda.setColumnWidth(27, 80)  # SO42-, мг/дм3
        self.tableAgressvoda.setColumnWidth(28, 80)  # HCO3-, мг/дм3
        self.tableAgressvoda.setColumnWidth(29, 80)  # CO32-, мг/дм3
        self.tableAgressvoda.setColumnWidth(30, 80)  # SiO32-, мг/дм3
        self.tableAgressvoda.setColumnWidth(31, 80)  # NO32-, мг/дм3
        self.tableAgressvoda.setColumnWidth(32, 80)  # NO22-, мг/дм3
        self.tableAgressvoda.setColumnWidth(33, 80)  # F-, мг/дм3
        self.tableAgressvoda.setColumnWidth(34, 140)  #  Лаборант (ID)
        self.tableAgressvoda.setColumnHidden(0, True)
        self.tableAgressvoda.setColumnHidden(1, True)
        self.requerySelect()
        if not self.recAll:
            self.addRecord()
        else:
            self.recCount = len(self.recAll)
            self.recNum = 0
            self.recOneOld = list(self.recAll[self.recNum])
            self.kpId = self.recOneOld[10]  # ID свойств воды
        # Назначение делегатов
        self.DelegateMetodVoda = egdelegat.ComboBoxDelegateMetodVoda()
        self.DelegateBal = egdelegat.SpinBoxDelegate_Bal()
        self.DelegateGradus = egdelegat.SpinBoxDelegate_Gradus()
        self.DelegateAgressvoda_71 = egdelegat.DoubleSpinBoxDelegate_71()
        self.DelegateAgressvoda_52 = egdelegat.DoubleSpinBoxDelegate_52()
        self.DelegateAgressvoda_pH = egdelegat.DoubleSpinBoxDelegate_pH()
        self.DelegateAgressvoda_62 = egdelegat.DoubleSpinBoxDelegate_62()
        self.DelegateAgressvoda_64 = egdelegat.DoubleSpinBoxDelegate_64()
        self.DelegateAgressvoda_53 = egdelegat.DoubleSpinBoxDelegate_53()
        self.DelegateLabnumAgressvoda = egdelegat.ComboBoxDelegateLabnumVoda()
        self.DelegateZonaVlag = egdelegat.ComboBoxDelegateZonaVlag()
        self.DelegateLabman = egdelegat.ComboBoxDelegateLabman()
        self.tableAgressvoda.setItemDelegateForColumn(2, self.DelegateLabnumAgressvoda)
        self.tableAgressvoda.setItemDelegateForColumn(3, self.DelegateMetodVoda)
        self.tableAgressvoda.setItemDelegateForColumn(5, self.DelegateBal)
        self.tableAgressvoda.setItemDelegateForColumn(7, self.DelegateBal)
        self.tableAgressvoda.setItemDelegateForColumn(9, self.DelegateBal)
        self.tableAgressvoda.setItemDelegateForColumn(11, self.DelegateGradus)
        self.tableAgressvoda.setItemDelegateForColumn(12, self.DelegateAgressvoda_71)
        self.tableAgressvoda.setItemDelegateForColumn(13, self.DelegateAgressvoda_pH)
        for i in range(14, 34):
            self.tableAgressvoda.setItemDelegateForColumn(i, self.DelegateAgressvoda_71)
        self.tableAgressvoda.setItemDelegateForColumn(34, self.DelegateLabman)
        # Обновление формы и панели инструментов
        self.refreshToolbar()
        self.refreshRecord()
        # Назначение обработчиков сигналов
        self.radioButton.toggled.connect(self.refreshMetod)
        self.radioButton_2.toggled.connect(self.refreshMetod)
        self.radioButton_3.toggled.connect(self.refreshMetod)
        self.currentChanged.connect(self.asktoSave)
        self.currentChanged.connect(self.setRow)
        self.toolButton.clicked.connect(self.saveAll)
        self.toolButton_6.clicked.connect(self.clearField)
        self.modelAgressvoda.itemChanged.connect(self.refreshOneGroupAgressvoda)
        self.selmodelAgressvoda.selectionChanged['QItemSelection', 'QItemSelection'].connect(self.currentRow)

    def requerySelect(self) -> list:
        """Обновляет главный запрос для экранной формы"""
        global idActivObekt
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT burehole.id_obekt,
                                obekt.numdog,
                                obekt.archnum,
                                obekt.stadia,
                                burehole.vidhole,
                                burehole.num_hole,
                                obrazec.num_obrazec,
                                obrazec.glub_otbor,
                                burehole.koord_z - obrazec.glub_otbor AS absotbor,
                                obrazec.lab_num,
                                agressvoda.id,
                                agressvoda.id_obrazec,
                                agressvoda.vid_analiz,
                                agressvoda.zapah20,
                                agressvoda.zapah20bal,
                                agressvoda.zapah60,
                                agressvoda.zapah60bal,
                                agressvoda.vkus20,
                                agressvoda.vkus20bal,
                                agressvoda.cvet,
                                agressvoda.cvetbal,
                                agressvoda.vzves,
                                agressvoda.ph,
                                agressvoda.suhost,
                                agressvoda.co2,
                                agressvoda.co2a,
                                agressvoda.okis_perm,
                                agressvoda.na,
                                agressvoda.k,
                                agressvoda.na_k,
                                agressvoda.ca,
                                agressvoda.mg,
                                agressvoda.nh4,
                                agressvoda.fe2,
                                agressvoda.fe3,
                                agressvoda.cl,
                                agressvoda.so4,
                                agressvoda.hco3,
                                agressvoda.co3,
                                agressvoda.sio3,
                                agressvoda.no3,
                                agressvoda.no2,
                                agressvoda.f,
                                agressvoda.id_labman,
                                vlabman.fio,
                                voda.name_voda
                            FROM obekt,
                                burehole,
                                obrazec,
                                voda,
                                agressvoda
                                 LEFT JOIN vlabman ON agressvoda.id_labman = vlabman.id
                            WHERE obekt.id = %(v0)s 
                            AND obekt.id = burehole.id_obekt 
                            AND burehole.id = obrazec.id_burehole 
                            AND burehole.id = voda.id_burehole
                            AND obrazec.id = agressvoda.id_obrazec
                            AND obrazec.id = voda.id_obrazec
                            ORDER BY agressvoda.id""", {'v0': idActivObekt})
            self.recAll = curs.fetchall()
            recCount = len(self.recAll)
            self.recAllOldTab = []
            for i in range(0, recCount):
                self.recAllOldTab.append(list(self.recAll[i][9:44]))
        return self.recAll

    def refreshRecord(self) -> bool:
        """Обновляет экранную форму с отображаемой записью"""
        # Передача значений из списка в экранную форму
        if self.recAll == []:
            self.recOneOld = []
        else:
            try:
                self.recOneOld = list(self.recAll[self.recNum])
            except:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Critical, "Властивості води",
                                               "Не формується перегляд або запит властивостей води. "
                                               "\nМожливо не занесені усі дані по горизонту підземних вод "
                                               "або по поверхневим водам в екранній формі - Характеристика виробки."
                                               "\nОбов'язково має бути занесений Лабораторний номер проби у таблиці - "
                                               "Опис водоносних горизонтів в екранній формі - Характеристика виробки.")
                btnOK = QtWidgets.QPushButton("&OK")
                btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                retval = False
                result = self.formMassWin.exec()
            else:
                if self.recOneOld:
                    self.label.setText("Ідентіфікатор об'єкта - " + str(self.recOneOld[0]) + "\n" +
                                       "Номер договору - " + self.recOneOld[1] + "\n" +
                                       "Архівний номер звіту - " + self.recOneOld[2] + "\n" +
                                       self.recOneOld[4] + " №" + self.recOneOld[5] + "\n" +
                                       "Зразок №" + str(self.recOneOld[6]) + "\n" +
                                       "Глибина відбору - " + str(self.recOneOld[7]))  # ID объекта, номер договора,
                                                                                    # архивный номер, вид и № выработки,
                                                                                    # № образца, глубина обора
                    self.label_124.setText(self.recOneOld[45])  # Наименование горизонта воды
                    self.obID = self.recOneOld[0]  # ID объекта
                    self.numdog = self.recOneOld[1]  # Номер договора
                    self.archnum = self.recOneOld[2]  # Архивный номер объекта
                    self.stadia = self.recOneOld[3]  # Стадия проектирования
                    self.vidhole = self.recOneOld[4]  # Вид выработки
                    self.numhole = self.recOneOld[5]  # Номер выработки
                    self.numobrazec = self.recOneOld[6]  # Номер образца
                    self.glubotbor = self.recOneOld[7]  # Глубина отбора
                    self.absotm = self.recOneOld[8]  # Абсолютная отметка отбора
                    self.labnum = self.recOneOld[9]  # Лабораторный номер
                    self.agresId = self.recOneOld[10]  # ID агрессивности воды
                    self.comboBox.setCurrentIndex(self.comboBox.findData(self.recOneOld[11], role=QtCore.Qt.UserRole)) # ID образца
                    self.refreshRadioButton(self.recOneOld[12])  # Метода определения свойств воды
                    self.lineEdit.setText(self.recOneOld[13])   # Запах воды при 20 град.
                    if self.recOneOld[14] == None:
                        self.doubleSpinBox.setValue(self.doubleSpinBox.minimum())
                    else:
                        self.doubleSpinBox.setValue(self.recOneOld[14])  # Запах воды в баллах при 20 град.
                    self.lineEdit_2.setText(self.recOneOld[15])   # Запах воды при 60 град.
                    if self.recOneOld[16] == None:
                        self.doubleSpinBox_2.setValue(self.doubleSpinBox_2.minimum())
                    else:
                        self.doubleSpinBox_2.setValue(self.recOneOld[16])  # Запах воды в баллах при 60 град.
                    self.lineEdit_3.setText(self.recOneOld[17])  # Вкус воды при 20 град.
                    if self.recOneOld[18] == None:
                        self.doubleSpinBox_4.setValue(self.doubleSpinBox_4.minimum())
                    else:
                        self.doubleSpinBox_4.setValue(self.recOneOld[18])  # Вкус воды при 20 град в баллах
                    self.lineEdit_4.setText(self.recOneOld[19])  # Цвет воды
                    if self.recOneOld[20] == None:
                        self.doubleSpinBox_5.setValue(self.doubleSpinBox_5.minimum())
                    else:
                        self.doubleSpinBox_5.setValue(self.recOneOld[20])  # Цвет воды в градусах
                    if self.recOneOld[21] == None:
                        self.doubleSpinBox_3.setValue(self.doubleSpinBox_3.minimum())
                    else:
                        self.doubleSpinBox_3.setValue(self.recOneOld[21])   # Завислі речовини, мг / дм3
                    if self.recOneOld[22] == None:
                        self.doubleSpinBox_6.setValue(self.doubleSpinBox_6.minimum())
                    else:
                        self.doubleSpinBox_6.setValue(self.recOneOld[22])  # Значення pH
                    if self.recOneOld[23] == None:
                        self.doubleSpinBox_7.setValue(self.doubleSpinBox_7.minimum())
                    else:
                        self.doubleSpinBox_7.setValue(self.recOneOld[23])  # Сухий залишок, мг/дм3
                    if self.recOneOld[24] == None:
                        self.doubleSpinBox_8.setValue(self.doubleSpinBox_8.minimum())
                    else:
                        self.doubleSpinBox_8.setValue(self.recOneOld[24])  # Вуглекислота вільна, мг/дм3
                    if self.recOneOld[25] == None:
                        self.doubleSpinBox_9.setValue(self.doubleSpinBox_9.minimum())
                    else:
                        self.doubleSpinBox_9.setValue(self.recOneOld[25])  # Вуглекислота агресивна, мг/дм3
                    if self.recOneOld[26] == None:
                        self.doubleSpinBox_10.setValue(self.doubleSpinBox_10.minimum())
                    else:
                        self.doubleSpinBox_10.setValue(self.recOneOld[26])  # Окислювальність перманганатна, мгО/дм3
                    if self.recOneOld[27] == None:
                        mNa = dc.Decimal('0.00')
                        self.doubleSpinBox_19.setValue(self.doubleSpinBox_19.minimum())
                    else:
                        mNa = self.recOneOld[27]
                        self.doubleSpinBox_19.setValue(self.recOneOld[27])  # Na
                    if self.recOneOld[28] == None:
                        mK = dc.Decimal('0.00')
                        self.doubleSpinBox_20.setValue(self.doubleSpinBox_20.minimum())
                    else:
                        mK = self.recOneOld[28]
                        self.doubleSpinBox_20.setValue(self.recOneOld[28])  # K
                    if self.recOneOld[29] == None:
                        mNa_K = dc.Decimal('0.00')
                        self.label_289.setText('-')
                    else:
                        mNa_K = self.recOneOld[29]
                        self.label_289.setText(str(self.recOneOld[29]))  # Na + K
                    if self.recOneOld[30] == None:
                        mCa = dc.Decimal('0.00')
                        self.doubleSpinBox_22.setValue(self.doubleSpinBox_22.minimum())
                    else:
                        mCa = self.recOneOld[30]
                        self.doubleSpinBox_22.setValue(self.recOneOld[30])  # Ca
                    if self.recOneOld[31] == None:
                        mMg = dc.Decimal('0.00')
                        self.doubleSpinBox_23.setValue(self.doubleSpinBox_23.minimum())
                    else:
                        mMg = self.recOneOld[31]
                        self.doubleSpinBox_23.setValue(self.recOneOld[31])  # Mg
                    if self.recOneOld[32] == None:
                        mNH4 = dc.Decimal('0.00')
                        self.doubleSpinBox_24.setValue(self.doubleSpinBox_24.minimum())
                    else:
                        mNH4 = self.recOneOld[32]
                        self.doubleSpinBox_24.setValue(self.recOneOld[32])  # NH4
                    if self.recOneOld[33] == None:
                        mFe2 = dc.Decimal('0.00')
                        self.doubleSpinBox_25.setValue(self.doubleSpinBox_25.minimum())
                    else:
                        mFe2 = self.recOneOld[33]
                        self.doubleSpinBox_25.setValue(self.recOneOld[33])  # Fe2
                    if self.recOneOld[34] == None:
                        mFe3 = dc.Decimal('0.00')
                        self.doubleSpinBox_26.setValue(self.doubleSpinBox_26.minimum())
                    else:
                        mFe3 = self.recOneOld[34]
                        self.doubleSpinBox_26.setValue(self.recOneOld[34])  # Fe3
                    if self.recOneOld[35] == None:
                        mCl = dc.Decimal('0.00')
                        self.doubleSpinBox_11.setValue(self.doubleSpinBox_11.minimum())
                    else:
                        mCl = self.recOneOld[35]
                        self.doubleSpinBox_11.setValue(self.recOneOld[35])  # Cl
                    if self.recOneOld[36] == None:
                        mSO4 = dc.Decimal('0.00')
                        self.doubleSpinBox_12.setValue(self.doubleSpinBox_12.minimum())
                    else:
                        mSO4 = self.recOneOld[36]
                        self.doubleSpinBox_12.setValue(self.recOneOld[36])  # SO4
                    if self.recOneOld[37] == None:
                        mHCO3 = dc.Decimal('0.00')
                        self.doubleSpinBox_13.setValue(self.doubleSpinBox_13.minimum())
                    else:
                        mHCO3 = self.recOneOld[37]
                        self.doubleSpinBox_13.setValue(self.recOneOld[37])  # HCO3
                    if self.recOneOld[38] == None:
                        mCO3 = dc.Decimal('0.00')
                        self.doubleSpinBox_14.setValue(self.doubleSpinBox_14.minimum())
                    else:
                        mCO3 = self.recOneOld[38]
                        self.doubleSpinBox_14.setValue(self.recOneOld[38])  # CO3
                    if self.recOneOld[39] == None:
                        mSiO3 = dc.Decimal('0.00')
                        self.doubleSpinBox_15.setValue(self.doubleSpinBox_15.minimum())
                    else:
                        mSiO3 = self.recOneOld[39]
                        self.doubleSpinBox_15.setValue(self.recOneOld[39])  # SiO3
                    if self.recOneOld[40] == None:
                        mNO3 = dc.Decimal('0.00')
                        self.doubleSpinBox_16.setValue(self.doubleSpinBox_16.minimum())
                    else:
                        mNO3 = self.recOneOld[40]
                        self.doubleSpinBox_16.setValue(self.recOneOld[40])  # NO3
                    if self.recOneOld[41] == None:
                        mNO2 = dc.Decimal('0.00')
                        self.doubleSpinBox_17.setValue(self.doubleSpinBox_17.minimum())
                    else:
                        mNO2 = self.recOneOld[41]
                        self.doubleSpinBox_17.setValue(self.recOneOld[41])  # NO2
                    if self.recOneOld[42] == None:
                        mF = dc.Decimal('0.00')
                        self.doubleSpinBox_18.setValue(self.doubleSpinBox_18.minimum())
                    else:
                        mF = self.recOneOld[42]
                        self.doubleSpinBox_18.setValue(self.recOneOld[42])  # F
                    self.comboBox_2.setCurrentIndex(
                        self.comboBox_2.findData(self.recOneOld[43], role=QtCore.Qt.UserRole))  # ID лаборанта
                    # Подготовка и отображение расчетных показателей мг-екв./дм3
                    if self.recOneOld[27] is None:
                        self.label_104.setText('-')
                        mmNa = dc.Decimal('0.00')
                    else:
                        mmNa = round(self.recOneOld[27] / dc.Decimal('22.98976928'), 2)
                        self.label_104.setText(str(mmNa))   # Na мг-екв
                    if self.recOneOld[28] is None:
                        self.label_100.setText('-')
                        mmK = dc.Decimal('0.00')
                    else:
                        mmK = round(self.recOneOld[28] / dc.Decimal('39.0983'), 2)
                        self.label_100.setText(str(mmK))   #  K мг-екв
                    if self.recOneOld[29] is None:
                        self.label_102.setText('-')
                        mmNa_K = dc.Decimal('0.00')
                    else:
                        mmNa_K = round(self.recOneOld[29] / dc.Decimal('24.00'), 2)
                        self.label_102.setText(str(mmNa_K))  # Na + K мг-екв
                    if self.recOneOld[30] is None:
                        self.label_89.setText('-')
                        mmCa = dc.Decimal('0.00')
                    else:
                        mmCa = round(self.recOneOld[30] / dc.Decimal('40.078') * 2, 2)
                        self.label_89.setText(str(mmCa))   #  Ca мг-екв
                    if self.recOneOld[31] is None:
                        self.label_92.setText('-')
                        mmMg = dc.Decimal('0.00')
                    else:
                        mmMg = round(self.recOneOld[31] / dc.Decimal('24.305') * 2, 2)
                        self.label_92.setText(str(mmMg))   #  Mg мг-екв
                    if self.recOneOld[32] is None:
                        self.label_98.setText('-')
                        mmNH4 = dc.Decimal('0.00')
                    else:
                        mmNH4 = round(self.recOneOld[32] / (dc.Decimal('14.0067') + dc.Decimal('1.00794') * 4), 2)
                        self.label_98.setText(str(mmNH4))   #  NH4 мг-екв
                    if self.recOneOld[33] is None:
                        self.label_95.setText('-')
                        mmFe2 = dc.Decimal('0.00')
                    else:
                        mmFe2 = round(self.recOneOld[33] / dc.Decimal('55.847') * 2, 2)
                        self.label_95.setText(str(mmFe2))   #  Fe2 мг-екв
                    if self.recOneOld[34] is None:
                        self.label_90.setText('-')
                        mmFe3 = dc.Decimal('0.00')
                    else:
                        mmFe3 = round(self.recOneOld[34] / dc.Decimal('55.847') * 3, 2)
                        self.label_90.setText(str(mmFe3))  # Fe3 мг-екв
                    if self.recOneOld[35] is None:
                        self.label_29.setText('-')
                        mmCl = dc.Decimal('0.00')
                    else:
                        mmCl = round(self.recOneOld[35] / dc.Decimal('35.453'), 2)
                        self.label_29.setText(str(mmCl))  # Cl мг-екв
                    if self.recOneOld[36] is None:
                        self.label_74.setText('-')
                        mmSO4 = dc.Decimal('0.00')
                    else:
                        mmSO4 = round(self.recOneOld[36] / (dc.Decimal('32.064') + dc.Decimal('15.9994') * 4) * 2, 2)
                        self.label_74.setText(str(mmSO4))  # SO4 мг-екв
                    if self.recOneOld[37] is None:
                        self.label_75.setText('-')
                        mmHCO3 = dc.Decimal('0.00')
                    else:
                        mmHCO3 = round(self.recOneOld[37] / (dc.Decimal('1.00794') + dc.Decimal('12.0107') + dc.Decimal('15.9994') * 3), 2)
                        self.label_75.setText(str(mmHCO3))  # HCO3 мг-екв
                    if self.recOneOld[38] is None:
                        self.label_76.setText('-')
                        mmCO3 = dc.Decimal('0.00')
                    else:
                        mmCO3 = round(self.recOneOld[38] / (dc.Decimal('12.0107') + dc.Decimal('15.9994') * 3) * 2, 2)
                        self.label_76.setText(str(mmCO3))  # CO3 мг-екв
                    if self.recOneOld[39] is None:
                        self.label_77.setText('-')
                        mmSiO3 = dc.Decimal('0.00')
                    else:
                        mmSiO3 = round(self.recOneOld[39] / (dc.Decimal('28.0855') + dc.Decimal('15.9994') * 3) * 2, 2)
                        self.label_77.setText(str(mmSiO3))  # SiO3 мг-екв
                    if self.recOneOld[40] is None:
                        self.label_78.setText('-')
                        mmNO3 = dc.Decimal('0.00')
                    else:
                        mmNO3 = round(self.recOneOld[40] / (dc.Decimal('14.0067') + dc.Decimal('15.9994') * 3), 2)
                        self.label_78.setText(str(mmNO3))  # NO3 мг-екв
                    if self.recOneOld[41] is None:
                        self.label_79.setText('-')
                        mmNO2 = dc.Decimal('0.00')
                    else:
                        mmNO2 = round(self.recOneOld[41] / (dc.Decimal('14.0067') + dc.Decimal('15.9994') * 2), 2)
                        self.label_79.setText(str(mmNO2))  # NO2 мг-екв
                    if self.recOneOld[42] is None:
                        self.label_80.setText('-')
                        mmF = dc.Decimal('0.00')
                    else:
                        mmF = round(self.recOneOld[42] / dc.Decimal('18.9984032'), 2)
                        self.label_80.setText(str(mmF))  # F мг-екв
                    mNa = self.recOneOld[27]
                    mK = self.recOneOld[28]
                    mSumAnion = round(mCl + mSO4 + mHCO3 + mCO3 + mSiO3 + mNO3 + mNO2 + mF, 1)
                    mmSumAnion = round(mmCl + mmSO4 + mmHCO3 + mmCO3 + mmSiO3 + mmNO3 + mmNO2 + mmF , 2)
                    if mmSumAnion != 0:
                        mmpCl = round(dc.Decimal('100.00') / mmSumAnion * mmCl, 2)
                        mmpSO4 = round(dc.Decimal('100.00') / mmSumAnion * mmSO4, 2)
                        mmpHCO3 = round(dc.Decimal('100.00') / mmSumAnion * mmHCO3, 2)
                        mmpCO3 = round(dc.Decimal('100.00') / mmSumAnion * mmCO3, 2)
                        mmpSiO3 = round(dc.Decimal('100.00') / mmSumAnion * mmSiO3, 2)
                        mmpNO3 = round(dc.Decimal('100.00') / mmSumAnion * mmNO3, 2)
                        mmpNO2 = round(dc.Decimal('100.00') / mmSumAnion * mmNO2, 2)
                        mmpF = round(dc.Decimal('100.00') / mmSumAnion * mmF, 2)
                    else:
                        mmpCl = mmpSO4 = mmpHCO3 = mmpCO3 = mmpSiO3 = mmpNO3 = mmpNO2 = mmpF = dc.Decimal('0.00')
                    mmpSumAnion = round(mmpCl + mmpSO4 + mmpHCO3 + mmpCO3 + mmpSiO3 + mmpNO3 + mmpNO2 + mmpF , 2)
                    mmSumKation = mmSumAnion
                    if mmSumKation != 0:
                        mmpCa = round(dc.Decimal('100.00') / mmSumKation * mmCa, 2)
                        mmpMg = round(dc.Decimal('100.00') / mmSumKation * mmMg, 2)
                        mmpNH4 = round(dc.Decimal('100.00') / mmSumKation * mmNH4, 2)
                        mmpFe2 = round(dc.Decimal('100.00') / mmSumKation * mmFe2, 2)
                        mmpFe3 = round(dc.Decimal('100.00') / mmSumKation * mmFe3, 2)
                        mmpSumKationOut = mmpCa + mmpMg + mmpNH4 + mmpFe2 + mmpFe3
                    else:
                        mmpNa_K = mmpCa = mmpMg = mmpNH4 = mmpFe2 = mmpFe3 = dc.Decimal('0.00')
                        mmpSumKationOut = dc.Decimal('0.00')
                    recNa_K = self.calcNa_K(mNa, mK, mmpSumAnion, mmSumAnion, mmpSumKationOut)
                    mmpNa_K = recNa_K[4]
                    mmpSumKation = round(mmpNa_K + mmpCa + mmpMg + mmpNH4 + mmpFe2 + mmpFe3, 2)
                    mNa_K = recNa_K[2]
                    mSumKation = round(mNa_K + mCa + mMg + mNH4 + mFe2 + mFe3, 1)
                    if recNa_K[0] is None:
                        self.label_97.setText('-')
                    else:
                        self.label_97.setText(str(recNa_K[0]))
                    if recNa_K[1] is None:
                        self.label_96.setText('-')
                    else:
                        self.label_96.setText(str(mmpNa_K))
                    if mmpNa_K > 0:
                        self.label_93.setText(str(mmpNa_K))
                    else:
                        self.label_93.setText('-')
                    if mmpCa > 0:
                        self.label_99.setText(str(mmpCa))
                    else:
                        self.label_99.setText('-')
                    if mmpMg > 0:
                        self.label_103.setText(str(mmpMg))
                    else:
                        self.label_103.setText('-')
                    if mmpNH4 > 0:
                        self.label_91.setText(str(mmpNH4))
                    else:
                        self.label_91.setText('-')
                    if mmpFe2 > 0:
                        self.label_101.setText(str(mmpFe2))
                    else:
                        self.label_101.setText('-')
                    if mmpFe3 > 0:
                        self.label_94.setText(str(mmpFe3))
                    else:
                        self.label_94.setText('-')
                    if mmpCl > 0:
                        self.label_88.setText(str(mmpCl))
                    else:
                        self.label_88.setText('-')
                    if mmpSO4 > 0:
                        self.label_86.setText(str(mmpSO4))
                    else:
                        self.label_86.setText('-')
                    if mmpHCO3 > 0:
                        self.label_87.setText(str(mmpHCO3))
                    else:
                        self.label_87.setText('-')
                    if mmpCO3 > 0:
                        self.label_81.setText(str(mmpCO3))
                    else:
                        self.label_81.setText('-')
                    if mmpSiO3 > 0:
                        self.label_83.setText(str(mmpSiO3))
                    else:
                        self.label_83.setText('-')
                    if mmpNO3 > 0:
                        self.label_85.setText(str(mmpNO3))
                    else:
                        self.label_85.setText('-')
                    if mmpNO2 > 0:
                        self.label_84.setText(str(mmpNO2))
                    else:
                        self.label_84.setText('-')
                    if mmpF > 0:
                        self.label_82.setText(str(mmpF))
                    else:
                        self.label_82.setText('-')
                    if mSumAnion > 0.00:
                        self.label_284.setText(str(mSumAnion))
                    else:
                        self.label_284.setText('-')
                    if mmSumAnion > 0.00:
                        self.label_285.setText(str(mmSumAnion))
                    else:
                        self.label_285.setText('-')
                    if mmpSumKation > 0.00:
                        self.label_283.setText(str(mmpSumKation))
                    else:
                        self.label_283.setText('-')
                    if mmpSumAnion > 0.00:
                        self.label_286.setText(str(mmpSumAnion))
                    else:
                        self.label_286.setText('-')
                    if mSumKation + mSumAnion > 0.00:
                        self.label_17.setText(str(mSumKation + mSumAnion))
                    else:
                        self.label_17.setText('-')
                    if recNa_K[3] > 0.00:
                        self.label_102.setText(str(recNa_K[3]))
                    else:
                        self.label_102.setText('-')
                    if recNa_K[2] > 0.00:
                        self.label_289.setText(str(recNa_K[2]))
                    else:
                        self.label_289.setText('-')
                    if mSumKation > 0.00:
                        self.label_281.setText(str(mSumKation))
                    else:
                        self.label_281.setText('-')
                    if mmSumKation > 0.00:
                        self.label_282.setText(str(mmSumKation))
                    else:
                        self.label_282.setText('-')
                    # Расчет жесткости воды
                    if mmCa + mmMg > 0.00:
                        self.label_119.setText(str(mmCa + mmMg))
                        self.label_115.setText(str(round((mmCa + mmMg) / dc.Decimal('0.3566'), 2)))
                    else:
                        self.label_119.setText('-')
                        self.label_115.setText('-')
                    if mmHCO3 > (mmCa + mmMg) > 0.00:
                        self.label_117.setText(str(mmCa + mmMg))
                        self.label_116.setText(str(round((mmCa + mmMg) / dc.Decimal('0.3566'), 2)))
                    elif mmHCO3 < (mmCa + mmMg) > 0.00:
                        self.label_117.setText(str(mmHCO3))
                        self.label_116.setText(str(round(mmHCO3 / dc.Decimal('0.3566'), 2)))
                    else:
                        self.label_117.setText('-')
                        self.label_116.setText('-')
                    if mmHCO3 > (mmCa + mmMg) > 0.00:
                        self.label_118.setText('0.00')
                        self.label_114.setText('0.00')
                    elif mmHCO3 < (mmCa + mmMg) > 0.00:
                        self.label_118.setText(str((mmCa + mmMg) - mmHCO3))
                        self.label_114.setText(str(round((mmCa + mmMg - mmHCO3) / dc.Decimal('0.3566'), 2)))
                    else:
                        self.label_118.setText('-')
                        self.label_114.setText('-')
                    # Формула Курлова
                    if (mSumKation + mSumAnion) > 0.00:
                        self.label_122.setText('М' + str(round((mSumKation + mSumAnion) / 1000, 1)))
                    else:
                        self.label_122.setText(None)
                    # Расчет анионов для формулы и названия воды
                    anionList = [['(Cl)', mmpCl], ['(SO4)', mmpSO4], ['(HCO3)', mmpHCO3], ['(CO3)', mmpCO3],
                                 ['(NO3)', mmpNO3], ['(NO2)', mmpNO2], ['(F)', mmpF]]
                    anionListSort = sorted(anionList, key = lambda k : k[1], reverse = True)
                    anionStr = str()
                    anionList5 = []
                    anionList25 = []
                    for i in range(0, 7):
                        rec = []
                        for j in range(0, 2):
                            if j == 0:
                                el0 = anionListSort[i][j]
                            if j == 1:
                                el1 = round(anionListSort[i][j], 1)
                        rec = [el0, el1]
                        if el1 > 5.00:
                            anionList5.append(rec)
                            anionStr += ' ' + str(el0) + str(el1)
                        if el1 > 25.00:
                            anionList25.append(rec)
                    anionList25.sort(key = lambda k : k[1], reverse = False)
                    nameAnion = str()
                    nameA = str()
                    for i in range(0, len(anionList25)):
                        if anionList25[i][0] == '(Cl)':
                            if i < len(anionList25) - 1:
                                nameA = 'хлоридно-'
                            else:
                                nameA = 'хлоридна'
                        elif anionList25[i][0] == '(SO4)':
                            if i < len(anionList25) - 1:
                                nameA = 'сульфатно-'
                            else:
                                nameA = 'сульфатна'
                        elif anionList25[i][0] == '(HCO3)':
                            if i < len(anionList25) - 1:
                                nameA = 'гідрокарбонано-'
                            else:
                                nameA = 'гідрокарбонатна'
                        elif anionList25[i][0] == '(CO3)':
                            if i < len(anionList25) - 1:
                                nameA = 'карбонатно-'
                            else:
                                nameA = 'карбонатна'
                        nameAnion += nameA
                    self.label_120.setText(anionStr)
                    # Расчет катионов для формулы и названия воды
                    kationList = [['(Na+K)', mmpNa_K], ['(Ca)', mmpCa], ['(Mg)', mmpMg], ['(NH4)', mmpNH4],
                                 ['(Fe2)', mmpFe2], ['(Fe3)', mmpFe3]]
                    kationListSort = sorted(kationList, key=lambda k: k[1], reverse=True)
                    kationStr = str()
                    kationList5 = []
                    kationList25 = []
                    for i in range(0, 6):
                        rec = []
                        for j in range(0, 2):
                            if j == 0:
                                el0 = kationListSort[i][j]
                            if j == 1:
                                el1 = round(kationListSort[i][j], 1)
                        rec = [el0, el1]
                        if el1 > 5.00:
                            kationList5.append(rec)
                            kationStr += ' ' + str(el0) + str(el1)
                        if el1 > 25.00:
                            kationList25.append(rec)
                    kationList25.sort(key=lambda k: k[1], reverse=False)
                    nameKation = str()
                    nameK = str()
                    for i in range(0, len(kationList25)):
                        if kationList25[i][0] == '(Na+K)':
                            if i < len(kationList25) - 1:
                                nameK = 'натрієво-'
                            else:
                                nameK = 'натрієва'
                        elif kationList25[i][0] == '(Ca)':
                            if i < len(kationList25) - 1:
                                nameK = 'кальцієво-'
                            else:
                                nameK = 'кальцієва'
                        elif kationList25[i][0] == '(Mg)':
                            if i < len(kationList25) - 1:
                                nameK = 'магнієво-'
                            else:
                                nameK = 'магнієва'
                        elif kationList25[i][0] == '(NH4)':
                            if i < len(kationList25) - 1:
                                nameK = 'аміачно-'
                            else:
                                nameK = 'аміачна'
                        nameKation += nameK
                    if (mSumKation + mSumAnion) > 0.00:
                        nameVoda = '\nВода ' + nameAnion + ', ' + nameKation
                    else:
                        nameVoda = ''
                    self.label_124.setText(self.label_124.text() + nameVoda)
                    self.label_124.text()
                    self.label_121.setText(kationStr)
                    # Расчет длины линии в формуле Курлова и добавление параметров pH и др.
                    lineF = str('')
                    width120 = self.label_120.fontMetrics().boundingRect(self.label_120.text()).width()
                    width121 = self.label_121.fontMetrics().boundingRect(self.label_121.text()).width()
                    self.label_123.setText(lineF)
                    width123 = self.label_123.fontMetrics().boundingRect(self.label_123.text()).width()
                    if len(anionStr) > len(kationStr):
                        while width123 < width120:
                            lineF += '─'
                            self.label_123.setText(lineF)
                            width123 = self.label_123.fontMetrics().boundingRect(self.label_123.text()).width()
                    else:
                        while width123 < width121:
                            lineF += '─'
                            self.label_123.setText(lineF)
                            width123 = self.label_123.fontMetrics().boundingRect(self.label_123.text()).width()
                    lineF = lineF + '─'
                    if self.doubleSpinBox_6.value() > 0.00:
                        pH = str(self.doubleSpinBox_6.value())
                        self.label_123.setText(lineF + ' pH' + pH)
                    else:
                        pH = ''
                        self.label_123.setText(lineF + pH)
                    # Считывание данных и обновление исходного списка с сокращением первых восьми полей и последнего поля
                    self.recOneOldTab = list(self.recOneOld[9:44])
                    self.refreshMetod()
                    self.refreshTableAgressvoda()
                    self.refreshAgressvoda()
                    retval = True
                else:
                    self.recOneOldTab = []
                    retval = False
            return retval

    def refreshTableAgressvoda(self) -> bool:
        """Обновление таблицы агрессивности грунтов"""
        recCount = len(self.recAll)
        listrowAll = []
        for i in range(0, recCount):
            listrowAll.append(list(self.recAll[i][9:45]))
        if recCount > 0:
            self.modelAgressvoda.setRowCount(0) # Обнуление количество строк в моделе перед заполнением (обновлением)
            self.tableAgressvoda.setEnabled(True)
            for i in range(0, self.recCount):  # Занесение данных в ячейки таблицы
                listrow = list(listrowAll[i])  # Список одной строки
                item9 = QtGui.QStandardItem(str(listrow[0]))  # Лабораторный номер
                item10 = QtGui.QStandardItem(str(listrow[1]))  # ID агрессивности
                item11 = QtGui.QStandardItem(str(listrow[0]))
                QtGui.QStandardItem.setData(item11, str(listrow[2]), role=QtCore.Qt.UserRole)  # ID образца
                if listrow[3] == 1:
                    item12 = QtGui.QStandardItem("Скорочений")  # Список видов анализа
                    QtGui.QStandardItem.setData(item12, 1, role=QtCore.Qt.UserRole)
                elif listrow[3] == 2:
                    item12 = QtGui.QStandardItem("Стандартний")
                    QtGui.QStandardItem.setData(item12, 2, role=QtCore.Qt.UserRole)
                elif listrow[3] == 3:
                    item12 = QtGui.QStandardItem("Повний")
                    QtGui.QStandardItem.setData(item12, 3, role=QtCore.Qt.UserRole)
                else:
                    item12 = QtGui.QStandardItem("")
                    QtGui.QStandardItem.setData(item12, 0, role=QtCore.Qt.UserRole)
                item13 = QtGui.QStandardItem(str(listrow[4]))  # Запах воды при 20 град.
                if item13.text() == 'None':
                    item13.setData('-', role=QtCore.Qt.DisplayRole)
                item14 = QtGui.QStandardItem(str(listrow[5])) # Запах воды при 20 град. в баллах
                if item14.text() == 'None':
                    item14.setData('-', role=QtCore.Qt.DisplayRole)
                item15 = QtGui.QStandardItem(str(listrow[6]))  # Запах воды при 60 град.
                if item15.text() == 'None':
                    item15.setData('-', role=QtCore.Qt.DisplayRole)
                item16 = QtGui.QStandardItem(str(listrow[7])) # Запах воды при 60 град. в баллах
                if item16.text() == 'None':
                    item16.setData('-', role=QtCore.Qt.DisplayRole)
                item17 = QtGui.QStandardItem(str(listrow[8]))  # Смак і присмак при температурі 20 °С
                if item17.text() == 'None':
                    item17.setData('-', role=QtCore.Qt.DisplayRole)
                item18 = QtGui.QStandardItem(str(listrow[9]))  # Смак і присмак при температурі 20 °С в баллах
                if item18.text() == 'None':
                    item18.setData('-', role=QtCore.Qt.DisplayRole)
                item19 = QtGui.QStandardItem(str(listrow[10]))  # Колір
                if item19.text() == 'None':
                    item19.setData('-', role=QtCore.Qt.DisplayRole)
                item20 = QtGui.QStandardItem(str(listrow[11]))  # Колір в градусах
                if item20.text() == 'None':
                    item20.setData('-', role=QtCore.Qt.DisplayRole)
                item21 = QtGui.QStandardItem(str(listrow[12]))  # Завись, мг/л
                if item21.text() == 'None':
                    item21.setData('-', role=QtCore.Qt.DisplayRole)
                item22 = QtGui.QStandardItem(str(listrow[13]))  # Водневий показник рН
                if item22.text() == 'None':
                    item22.setData('-', role=QtCore.Qt.DisplayRole)
                item23 = QtGui.QStandardItem(str(listrow[14]))  # Сухий залишок, мг/дм3
                if item23.text() == 'None':
                    item23.setData('-', role=QtCore.Qt.DisplayRole)
                item24 = QtGui.QStandardItem(str(listrow[15]))  # Вуглекислота вільна, мг/дм3
                if item24.text() == 'None':
                    item24.setData('-', role=QtCore.Qt.DisplayRole)
                item25 = QtGui.QStandardItem(str(listrow[16]))  # Вуглекислота агресивна, мг/дм3
                if item25.text() == 'None':
                    item25.setData('-', role=QtCore.Qt.DisplayRole)
                item26 = QtGui.QStandardItem(str(listrow[17]))  # Окислювальність перманганатна, мгО/дм3
                if item26.text() == 'None':
                    item26.setData('-', role=QtCore.Qt.DisplayRole)
                item27 = QtGui.QStandardItem(str(listrow[18]))  # Na мг/дм3
                if item27.text() == 'None':
                    item27.setData('-', role=QtCore.Qt.DisplayRole)
                item28 = QtGui.QStandardItem(str(listrow[19]))  # K мг/дм3
                if item28.text() == 'None':
                    item28.setData('-', role=QtCore.Qt.DisplayRole)
                item29 = QtGui.QStandardItem(str(listrow[20]))  # Na + K мг/дм3
                if item29.text() == 'None':
                    item29.setData('-', role=QtCore.Qt.DisplayRole)
                item30 = QtGui.QStandardItem(str(listrow[21]))  # Ca мг/дм3
                if item30.text() == 'None':
                    item30.setData('-', role=QtCore.Qt.DisplayRole)
                item31 = QtGui.QStandardItem(str(listrow[22]))  # Mg мг/дм3
                if item31.text() == 'None':
                    item31.setData('-', role=QtCore.Qt.DisplayRole)
                item32 = QtGui.QStandardItem(str(listrow[23]))  # NH4 мг/дм3
                if item32.text() == 'None':
                    item32.setData('-', role=QtCore.Qt.DisplayRole)
                item33 = QtGui.QStandardItem(str(listrow[24]))  # Fe2 мг/дм3
                if item33.text() == 'None':
                    item33.setData('-', role=QtCore.Qt.DisplayRole)
                item34 = QtGui.QStandardItem(str(listrow[25]))  # Fe3 мг/дм3
                if item34.text() == 'None':
                    item34.setData('-', role=QtCore.Qt.DisplayRole)
                item35 = QtGui.QStandardItem(str(listrow[26]))  # Cl мг/дм3
                if item35.text() == 'None':
                    item35.setData('-', role=QtCore.Qt.DisplayRole)
                item36 = QtGui.QStandardItem(str(listrow[27]))  # SO4 мг/дм3
                if item36.text() == 'None':
                    item36.setData('-', role=QtCore.Qt.DisplayRole)
                item37 = QtGui.QStandardItem(str(listrow[28]))  # HCO3 мг/дм3
                if item37.text() == 'None':
                    item37.setData('-', role=QtCore.Qt.DisplayRole)
                item38 = QtGui.QStandardItem(str(listrow[29]))  # CO3 мг/дм3
                if item38.text() == 'None':
                    item38.setData('-', role=QtCore.Qt.DisplayRole)
                item39 = QtGui.QStandardItem(str(listrow[30]))  # SiO3 мг/дм3
                if item39.text() == 'None':
                    item39.setData('-', role=QtCore.Qt.DisplayRole)
                item40 = QtGui.QStandardItem(str(listrow[31]))  # NO3 мг/дм3
                if item40.text() == 'None':
                    item40.setData('-', role=QtCore.Qt.DisplayRole)
                item41 = QtGui.QStandardItem(str(listrow[32]))  # NO2 мг/дм3
                if item41.text() == 'None':
                    item41.setData('-', role=QtCore.Qt.DisplayRole)
                item42 = QtGui.QStandardItem(str(listrow[33]))  # F мг/дм3
                if item42.text() == 'None':
                    item42.setData('-', role=QtCore.Qt.DisplayRole)
                item43 = QtGui.QStandardItem(str(listrow[35])) # Лаборант
                if listrow[34] == 0:
                    item43.setData(str('-'), role=QtCore.Qt.EditRole)
                else:
                    item43.setData(item43.text(), role=QtCore.Qt.DisplayRole)  # ФИО лаборанта
                QtGui.QStandardItem.setData(item43, str(listrow[34]), role=QtCore.Qt.UserRole)  # ID лаборанта
                item11.setTextAlignment(QtCore.Qt.AlignCenter)
                item12.setTextAlignment(QtCore.Qt.AlignCenter)
                item13.setTextAlignment(QtCore.Qt.AlignCenter)
                item14.setTextAlignment(QtCore.Qt.AlignCenter)
                item15.setTextAlignment(QtCore.Qt.AlignCenter)
                item16.setTextAlignment(QtCore.Qt.AlignCenter)
                item17.setTextAlignment(QtCore.Qt.AlignCenter)
                item18.setTextAlignment(QtCore.Qt.AlignCenter)
                item19.setTextAlignment(QtCore.Qt.AlignCenter)
                item20.setTextAlignment(QtCore.Qt.AlignCenter)
                item21.setTextAlignment(QtCore.Qt.AlignCenter)
                item22.setTextAlignment(QtCore.Qt.AlignCenter)
                item23.setTextAlignment(QtCore.Qt.AlignCenter)
                item24.setTextAlignment(QtCore.Qt.AlignCenter)
                item25.setTextAlignment(QtCore.Qt.AlignCenter)
                item26.setTextAlignment(QtCore.Qt.AlignCenter)
                item27.setTextAlignment(QtCore.Qt.AlignCenter)
                item28.setTextAlignment(QtCore.Qt.AlignCenter)
                item29.setTextAlignment(QtCore.Qt.AlignCenter)
                item30.setTextAlignment(QtCore.Qt.AlignCenter)
                item31.setTextAlignment(QtCore.Qt.AlignCenter)
                item32.setTextAlignment(QtCore.Qt.AlignCenter)
                item33.setTextAlignment(QtCore.Qt.AlignCenter)
                item34.setTextAlignment(QtCore.Qt.AlignCenter)
                item35.setTextAlignment(QtCore.Qt.AlignCenter)
                item36.setTextAlignment(QtCore.Qt.AlignCenter)
                item37.setTextAlignment(QtCore.Qt.AlignCenter)
                item38.setTextAlignment(QtCore.Qt.AlignCenter)
                item39.setTextAlignment(QtCore.Qt.AlignCenter)
                item40.setTextAlignment(QtCore.Qt.AlignCenter)
                item41.setTextAlignment(QtCore.Qt.AlignCenter)
                item42.setTextAlignment(QtCore.Qt.AlignCenter)
                item43.setTextAlignment(QtCore.Qt.AlignCenter)
                self.modelAgressvoda.appendRow(
                    [item9, item10, item11, item12, item13, item14, item15, item16, item17, item18, item19, item20,
                     item21, item22, item23, item24, item25, item26, item27, item28, item29, item30, item31,
                     item32, item33, item34, item35, item36, item37, item38, item39, item40, item41, item42, item43])
            retval = True
        else:
            self.tableAgressvoda.setEnabled(False)
            self.modelAgressvoda.removeRows(0, self.modelAgressvoda.rowCount())
            retval = False
        self.tableAgressvoda.selectRow(self.recNum)
        self.refreshTableGroupAgressvoda()
        del listrowAll
        return retval

    def refreshRadioButton(self, mg) -> set:
        """Отображение метода анализа в блоке переключателей.
        mg - параметр из базы данных"""
        if mg == 1:
            self.radioButton.setChecked(True)
        elif mg == 2:
            self.radioButton_2.setChecked(True)
        else:
            self.radioButton_3.setChecked(True)

    def refreshMetod(self) -> set:
        """Обновление формы по методу анализа воды"""
        if self.radioButton.isChecked() == True:
            metod = 1
            self.lineEdit.setEnabled(False)
            self.doubleSpinBox.setEnabled(False)
            self.lineEdit_2.setEnabled(False)
            self.doubleSpinBox_2.setEnabled(False)
            self.lineEdit_3.setEnabled(False)
            self.doubleSpinBox_4.setEnabled(False)
            self.lineEdit_4.setEnabled(False)
            self.doubleSpinBox_5.setEnabled(False)
            self.doubleSpinBox_3.setEnabled(False)
            self.doubleSpinBox_6.setEnabled(True)
            self.doubleSpinBox_7.setEnabled(True)
            self.doubleSpinBox_8.setEnabled(True)
            self.doubleSpinBox_9.setEnabled(True)
            self.doubleSpinBox_10.setEnabled(False)
            self.doubleSpinBox_19.setEnabled(False)
            self.doubleSpinBox_20.setEnabled(False)
            self.doubleSpinBox_22.setEnabled(True)
            self.doubleSpinBox_23.setEnabled(True)
            self.doubleSpinBox_24.setEnabled(False)
            self.doubleSpinBox_25.setEnabled(False)
            self.doubleSpinBox_26.setEnabled(False)
            self.doubleSpinBox_11.setEnabled(True)
            self.doubleSpinBox_12.setEnabled(True)
            self.doubleSpinBox_13.setEnabled(True)
            self.doubleSpinBox_14.setEnabled(True)
            self.doubleSpinBox_15.setEnabled(False)
            self.doubleSpinBox_16.setEnabled(False)
            self.doubleSpinBox_17.setEnabled(False)
            self.doubleSpinBox_18.setEnabled(False)
        elif self.radioButton_2.isChecked() == True:
            metod = 2
            self.lineEdit.setEnabled(False)
            self.doubleSpinBox.setEnabled(False)
            self.lineEdit_2.setEnabled(False)
            self.doubleSpinBox_2.setEnabled(False)
            self.lineEdit_3.setEnabled(False)
            self.doubleSpinBox_4.setEnabled(False)
            self.lineEdit_4.setEnabled(False)
            self.doubleSpinBox_5.setEnabled(False)
            self.doubleSpinBox_3.setEnabled(False)
            self.doubleSpinBox_6.setEnabled(True)
            self.doubleSpinBox_7.setEnabled(True)
            self.doubleSpinBox_8.setEnabled(True)
            self.doubleSpinBox_9.setEnabled(True)
            self.doubleSpinBox_10.setEnabled(True)
            self.doubleSpinBox_19.setEnabled(False)
            self.doubleSpinBox_20.setEnabled(False)
            self.doubleSpinBox_22.setEnabled(True)
            self.doubleSpinBox_23.setEnabled(True)
            self.doubleSpinBox_24.setEnabled(True)
            self.doubleSpinBox_25.setEnabled(True)
            self.doubleSpinBox_26.setEnabled(True)
            self.doubleSpinBox_11.setEnabled(True)
            self.doubleSpinBox_12.setEnabled(True)
            self.doubleSpinBox_13.setEnabled(True)
            self.doubleSpinBox_14.setEnabled(True)
            self.doubleSpinBox_15.setEnabled(True)
            self.doubleSpinBox_16.setEnabled(True)
            self.doubleSpinBox_17.setEnabled(True)
            self.doubleSpinBox_18.setEnabled(True)
        else:
            metod = 3
            self.lineEdit.setEnabled(True)
            self.doubleSpinBox.setEnabled(True)
            self.lineEdit_2.setEnabled(True)
            self.doubleSpinBox_2.setEnabled(True)
            self.lineEdit_3.setEnabled(True)
            self.doubleSpinBox_4.setEnabled(True)
            self.lineEdit_4.setEnabled(True)
            self.doubleSpinBox_5.setEnabled(True)
            self.doubleSpinBox_3.setEnabled(True)
            self.doubleSpinBox_6.setEnabled(True)
            self.doubleSpinBox_7.setEnabled(True)
            self.doubleSpinBox_8.setEnabled(True)
            self.doubleSpinBox_9.setEnabled(True)
            self.doubleSpinBox_10.setEnabled(True)
            self.doubleSpinBox_19.setEnabled(True)
            self.doubleSpinBox_20.setEnabled(True)
            self.doubleSpinBox_22.setEnabled(True)
            self.doubleSpinBox_23.setEnabled(True)
            self.doubleSpinBox_24.setEnabled(True)
            self.doubleSpinBox_25.setEnabled(True)
            self.doubleSpinBox_26.setEnabled(True)
            self.doubleSpinBox_11.setEnabled(True)
            self.doubleSpinBox_12.setEnabled(True)
            self.doubleSpinBox_13.setEnabled(True)
            self.doubleSpinBox_14.setEnabled(True)
            self.doubleSpinBox_15.setEnabled(True)
            self.doubleSpinBox_16.setEnabled(True)
            self.doubleSpinBox_17.setEnabled(True)
            self.doubleSpinBox_18.setEnabled(True)
        return metod

    def refreshTableGroupAgressvoda(self) -> int:
        """Обновление таблицы по видам анализов"""
        row = self.recNum
        for row in range(0, self.modelAgressvoda.rowCount()):
            if self.modelAgressvoda.item(row, 3).text() == "Скорочений":
                for j in range(4, 13):
                    self.modelAgressvoda.item(row, j).setEnabled(False)
                    self.modelAgressvoda.item(row, j).setBackground(self.brushgr)
                    self.modelAgressvoda.item(row, j).setForeground(self.brushbl)
                for j in range(13, 17):
                    self.modelAgressvoda.item(row, j).setEnabled(True)
                    self.modelAgressvoda.item(row, j).setBackground(self.brushw)
                    self.modelAgressvoda.item(row, j).setForeground(self.brushbl)
                for j in range(17, 21):
                    self.modelAgressvoda.item(row, j).setEnabled(False)
                    self.modelAgressvoda.item(row, j).setBackground(self.brushgr)
                    self.modelAgressvoda.item(row, j).setForeground(self.brushbl)
                for j in range(21, 23):
                    self.modelAgressvoda.item(row, j).setEnabled(True)
                    self.modelAgressvoda.item(row, j).setBackground(self.brushw)
                    self.modelAgressvoda.item(row, j).setForeground(self.brushbl)
                for j in range(23, 26):
                    self.modelAgressvoda.item(row, j).setEnabled(False)
                    self.modelAgressvoda.item(row, j).setBackground(self.brushgr)
                    self.modelAgressvoda.item(row, j).setForeground(self.brushbl)
                for j in range(26, 30):
                    self.modelAgressvoda.item(row, j).setEnabled(True)
                    self.modelAgressvoda.item(row, j).setBackground(self.brushw)
                    self.modelAgressvoda.item(row, j).setForeground(self.brushbl)
                for j in range(30, 34):
                    self.modelAgressvoda.item(row, j).setEnabled(False)
                    self.modelAgressvoda.item(row, j).setBackground(self.brushgr)
                    self.modelAgressvoda.item(row, j).setForeground(self.brushbl)
            elif self.modelAgressvoda.item(row, 3).text() == "Стандартний":
                for j in range(4, 13):
                    self.modelAgressvoda.item(row, j).setEnabled(False)
                    self.modelAgressvoda.item(row, j).setBackground(self.brushgr)
                    self.modelAgressvoda.item(row, j).setForeground(self.brushbl)
                for j in range(13, 18):
                    self.modelAgressvoda.item(row, j).setEnabled(True)
                    self.modelAgressvoda.item(row, j).setBackground(self.brushw)
                    self.modelAgressvoda.item(row, j).setForeground(self.brushbl)
                for j in range(18, 21):
                    self.modelAgressvoda.item(row, j).setEnabled(False)
                    self.modelAgressvoda.item(row, j).setBackground(self.brushgr)
                    self.modelAgressvoda.item(row, j).setForeground(self.brushbl)
                for j in range(21, 34):
                    self.modelAgressvoda.item(row, j).setEnabled(True)
                    self.modelAgressvoda.item(row, j).setBackground(self.brushw)
                    self.modelAgressvoda.item(row, j).setForeground(self.brushbl)
            else:
                for j in range(4, 34):
                    self.modelAgressvoda.item(row, j).setEnabled(True)
                    self.modelAgressvoda.item(row, j).setBackground(self.brushw)
                    self.modelAgressvoda.item(row, j).setForeground(self.brushbl)
        return row

    def refreshOneGroupAgressvoda(self) -> int:
        """Обновление текущей записи таблицы по виду анализа"""
        row = self.recNum
        if self.modelAgressvoda.item(row, 3).text() == "Скорочений":
            for j in range(4, 13):
                self.modelAgressvoda.item(row, j).setEnabled(False)
                self.modelAgressvoda.item(row, j).setBackground(self.brushgr)
                self.modelAgressvoda.item(row, j).setForeground(self.brushbl)
            for j in range(13, 17):
                self.modelAgressvoda.item(row, j).setEnabled(True)
                self.modelAgressvoda.item(row, j).setBackground(self.brushw)
                self.modelAgressvoda.item(row, j).setForeground(self.brushbl)
            for j in range(17, 21):
                self.modelAgressvoda.item(row, j).setEnabled(False)
                self.modelAgressvoda.item(row, j).setBackground(self.brushgr)
                self.modelAgressvoda.item(row, j).setForeground(self.brushbl)
            for j in range(21, 23):
                self.modelAgressvoda.item(row, j).setEnabled(True)
                self.modelAgressvoda.item(row, j).setBackground(self.brushw)
                self.modelAgressvoda.item(row, j).setForeground(self.brushbl)
            for j in range(23, 26):
                self.modelAgressvoda.item(row, j).setEnabled(False)
                self.modelAgressvoda.item(row, j).setBackground(self.brushgr)
                self.modelAgressvoda.item(row, j).setForeground(self.brushbl)
            for j in range(26, 30):
                self.modelAgressvoda.item(row, j).setEnabled(True)
                self.modelAgressvoda.item(row, j).setBackground(self.brushw)
                self.modelAgressvoda.item(row, j).setForeground(self.brushbl)
            for j in range(30, 34):
                self.modelAgressvoda.item(row, j).setEnabled(False)
                self.modelAgressvoda.item(row, j).setBackground(self.brushgr)
                self.modelAgressvoda.item(row, j).setForeground(self.brushbl)
        elif self.modelAgressvoda.item(row, 3).text() == "Стандартний":
            for j in range(4, 13):
                self.modelAgressvoda.item(row, j).setEnabled(False)
                self.modelAgressvoda.item(row, j).setBackground(self.brushgr)
                self.modelAgressvoda.item(row, j).setForeground(self.brushbl)
            for j in range(13, 18):
                self.modelAgressvoda.item(row, j).setEnabled(True)
                self.modelAgressvoda.item(row, j).setBackground(self.brushw)
                self.modelAgressvoda.item(row, j).setForeground(self.brushbl)
            for j in range(18, 21):
                self.modelAgressvoda.item(row, j).setEnabled(False)
                self.modelAgressvoda.item(row, j).setBackground(self.brushgr)
                self.modelAgressvoda.item(row, j).setForeground(self.brushbl)
            for j in range(21, 34):
                self.modelAgressvoda.item(row, j).setEnabled(True)
                self.modelAgressvoda.item(row, j).setBackground(self.brushw)
                self.modelAgressvoda.item(row, j).setForeground(self.brushbl)
        else:
            for j in range(4, 34):
                self.modelAgressvoda.item(row, j).setEnabled(True)
                self.modelAgressvoda.item(row, j).setBackground(self.brushw)
                self.modelAgressvoda.item(row, j).setForeground(self.brushbl)
        return row

    def refreshAgressvoda(self) -> set:
        """Обновление показаний агрессивности воды"""
        if self.label_75.text() == '-':
            hco3 = None
        else:
            hco3 = dc.Decimal(self.label_75.text())
        ph = self.doubleSpinBox_6.value()
        co2a = self.doubleSpinBox_9.value()
        mg = self.doubleSpinBox_23.value()
        nh4 = self.doubleSpinBox_24.value()
        if self.label_289.text() == '-':
            na_k = None
        else:
            na_k = dc.Decimal(self.label_289.text())
        if self.label_17.text() == '-':
            sumM = None
        else:
            sumM = dc.Decimal(self.label_17.text())    # Общая минерализауия
        so4 = self.doubleSpinBox_12.value()
        cl = self.doubleSpinBox_11.value()
        organika = self.doubleSpinBox_10.value()
        if self.label_119.text() == '-':
            gestkost = None
        else:
            gestkost = dc.Decimal(self.label_119.text())
        no3 = self.doubleSpinBox_16.value()
        if self.doubleSpinBox_25.value() > 0.0 and self.doubleSpinBox_26.value() > 0.0:
            fe = self.doubleSpinBox_25.value() + self.doubleSpinBox_26.value()
        else:
            fe = -0.1
        agressW4hco3 = self.agressHCO3(hco3, 0, 1.05)
        self.label_5.setStyleSheet(agressW4hco3[0])
        self.label_5.setText(agressW4hco3[1])
        self.label_6.setStyleSheet("background-color: lightgreen")
        self.label_6.setText("ХА0")
        self.label_16.setStyleSheet("background-color: lightgreen")
        self.label_16.setText("ХА0")
        self.label_21.setStyleSheet("background-color: lightgreen")
        self.label_21.setText("ХА0")
#        self.label_36.setStyleSheet(agressW4hco3[2])
#        self.label_36.setText(agressW4hco3[3])
        self.label_36.setStyleSheet("background-color: lightgreen")
        self.label_36.setText("ХА0")
        self.label_26.setStyleSheet("background-color: lightgreen")
        self.label_26.setText("ХА0")
        self.label_27.setStyleSheet("background-color: lightgreen")
        self.label_27.setText("ХА0")
        self.label_25.setStyleSheet("background-color: lightgreen")
        self.label_25.setText("ХА0")
        agressW4ph = self.agressvodR(ph, 4.0, 5.0, 6.5)
        self.label_42.setStyleSheet(agressW4ph[0])
        self.label_42.setText(agressW4ph[1])
        self.label_41.setStyleSheet(agressW4ph[2])
        self.label_41.setText(agressW4ph[3])
        agressW6ph = self.agressvodR(ph, 3.5, 4.0, 5.0)
        self.label_39.setStyleSheet(agressW6ph[0])
        self.label_39.setText(agressW6ph[1])
        self.label_43.setStyleSheet(agressW6ph[2])
        self.label_43.setText(agressW6ph[3])
        agressW8ph = self.agressvodR(ph, 3.0, 3.5, 4.0)
        self.label_40.setStyleSheet(agressW8ph[0])
        self.label_40.setText(agressW8ph[1])
        self.label_106.setStyleSheet(agressW8ph[2])
        self.label_106.setText(agressW8ph[3])
        agressW10ph = self.agressvodR(ph, 2.5, 3.0, 3.5)
        self.label_38.setStyleSheet(agressW10ph[0])
        self.label_38.setText(agressW10ph[1])
        self.label_108.setStyleSheet(agressW10ph[2])
        self.label_108.setText(agressW10ph[3])
        agressW4co2a = self.agressvod(co2a, 10.0, 40.0, 100000.0)
        self.label_126.setStyleSheet(agressW4co2a[0])
        self.label_126.setText(agressW4co2a[1])
        self.label_125.setStyleSheet(agressW4co2a[2])
        self.label_125.setText(agressW4co2a[3])
        agressW6co2a = self.agressvod(co2a, 40.0, 400000.0, 1000000.0)
        self.label_128.setStyleSheet(agressW6co2a[0])
        self.label_128.setText(agressW6co2a[1])
        self.label_132.setStyleSheet(agressW6co2a[2])
        self.label_132.setText(agressW6co2a[3])
        self.label_129.setStyleSheet("background-color: lightgreen")
        self.label_129.setText("ХА0")
        self.label_130.setStyleSheet("background-color: lightgreen")
        self.label_130.setText("ХА0")
        self.label_127.setStyleSheet("background-color: lightgreen")
        self.label_127.setText("ХА0")
        self.label_131.setStyleSheet("background-color: lightgreen")
        self.label_131.setText("ХА0")
        agressW4mg = self.agressvod(mg, 1000.0, 2000.0, 3000.0)
        self.label_134.setStyleSheet(agressW4mg[0])
        self.label_134.setText(agressW4mg[1])
        self.label_133.setStyleSheet(agressW4mg[2])
        self.label_133.setText(agressW4mg[3])
        agressW6mg = self.agressvod(mg, 2000.0, 3000.0, 4000.0)
        self.label_139.setStyleSheet(agressW6mg[0])
        self.label_139.setText(agressW6mg[1])
        self.label_140.setStyleSheet(agressW6mg[2])
        self.label_140.setText(agressW6mg[3])
        agressW8mg = self.agressvod(mg, 3000.0, 4000.0, 5000.0)
        self.label_135.setStyleSheet(agressW8mg[0])
        self.label_135.setText(agressW8mg[1])
        self.label_138.setStyleSheet(agressW8mg[2])
        self.label_138.setText(agressW8mg[3])
        agressW10mg = self.agressvod(mg, 4000.0, 5000.0, 6000.0)
        self.label_137.setStyleSheet(agressW10mg[0])
        self.label_137.setText(agressW10mg[1])
        self.label_136.setStyleSheet(agressW10mg[2])
        self.label_136.setText(agressW10mg[3])
        agressW4nh4 = self.agressvod(nh4, 100.0, 500.0, 800.0)
        self.label_142.setStyleSheet(agressW4nh4[0])
        self.label_142.setText(agressW4nh4[1])
        self.label_147.setStyleSheet(agressW4nh4[2])
        self.label_147.setText(agressW4nh4[3])
        agressW6nh4 = self.agressvod(nh4, 500.0, 800.0, 1000.0)
        self.label_144.setStyleSheet(agressW6nh4[0])
        self.label_144.setText(agressW6nh4[1])
        self.label_143.setStyleSheet(agressW6nh4[2])
        self.label_143.setText(agressW6nh4[3])
        agressW8nh4 = self.agressvod(nh4, 800.0, 1000.0, 1500.0)
        self.label_148.setStyleSheet(agressW8nh4[0])
        self.label_148.setText(agressW8nh4[1])
        self.label_149.setStyleSheet(agressW8nh4[2])
        self.label_149.setText(agressW8nh4[3])
        agressW4na_k = self.agressvod(na_k, 50000.0, 60000.0, 80000.0)
        self.label_151.setStyleSheet(agressW4na_k[0])
        self.label_151.setText(agressW4na_k[1])
        self.label_156.setStyleSheet(agressW4na_k[2])
        self.label_156.setText(agressW4na_k[3])
        agressW6na_k = self.agressvod(na_k, 60000.0, 80000.0, 100000.0)
        self.label_157.setStyleSheet(agressW6na_k[0])
        self.label_157.setText(agressW6na_k[1])
        self.label_152.setStyleSheet(agressW6na_k[2])
        self.label_152.setText(agressW6na_k[3])
        agressW8na_k = self.agressvod(na_k, 80000.0, 100000.0, 150000.0)
        self.label_154.setStyleSheet(agressW8na_k[0])
        self.label_154.setText(agressW8na_k[1])
        self.label_155.setStyleSheet(agressW8na_k[2])
        self.label_155.setText(agressW8na_k[3])
        agressW4sumM = self.agressvod(sumM, 10000.0, 20000.0, 50000.0)
        self.label_164.setStyleSheet(agressW4sumM[0])
        self.label_164.setText(agressW4sumM[1])
        self.label_165.setStyleSheet(agressW4sumM[2])
        self.label_165.setText(agressW4sumM[3])
        agressW6sumM = self.agressvod(sumM, 20000.0, 50000.0, 60000.0)
        self.label_166.setStyleSheet(agressW6sumM[0])
        self.label_166.setText(agressW6sumM[1])
        self.label_167.setStyleSheet(agressW6sumM[2])
        self.label_167.setText(agressW6sumM[3])
        agressW8sumM = self.agressvod(sumM, 50000.0, 60000.0, 70000.0)
        self.label_161.setStyleSheet(agressW8sumM[0])
        self.label_161.setText(agressW8sumM[1])
        self.label_162.setStyleSheet(agressW8sumM[2])
        self.label_162.setText(agressW8sumM[3])
        agressW8so4p = self.agressvod(so4, 425.0, 850.0, 1700.0)
        self.label_186.setStyleSheet(agressW8so4p[0])
        self.label_186.setText(agressW8so4p[1])
        self.label_192.setStyleSheet(agressW8so4p[2])
        self.label_192.setText(agressW8so4p[3])
        agressW10so4p = self.agressvod(so4, 850.0, 1250.0, 2500.0)
        self.label_187.setStyleSheet(agressW10so4p[0])
        self.label_187.setText(agressW10so4p[1])
        self.label_193.setStyleSheet(agressW10so4p[2])
        self.label_193.setText(agressW10so4p[3])
        agressW16so4p = self.agressvod(so4, 1250.0, 2500.0, 5000.0)
        self.label_188.setStyleSheet(agressW16so4p[0])
        self.label_188.setText(agressW16so4p[1])
        self.label_194.setStyleSheet(agressW16so4p[2])
        self.label_194.setText(agressW16so4p[3])
        agressW8so4sh = self.agressvod(so4, 2550.0, 5100.0, 6800.0)
        self.label_209.setStyleSheet(agressW8so4sh[0])
        self.label_209.setText(agressW8so4sh[1])
        self.label_207.setStyleSheet(agressW8so4sh[2])
        self.label_207.setText(agressW8so4sh[3])
        agressW10so4sh = self.agressvod(so4, 5100.0, 8000.0, 9000.0)
        self.label_198.setStyleSheet(agressW10so4sh[0])
        self.label_198.setText(agressW10so4sh[1])
        self.label_202.setStyleSheet(agressW10so4sh[2])
        self.label_202.setText(agressW10so4sh[3])
        agressW16so4sh = self.agressvod(so4, 8000.0, 9000.0, 10000.0)
        self.label_199.setStyleSheet(agressW16so4sh[0])
        self.label_199.setText(agressW16so4sh[1])
        self.label_205.setStyleSheet(agressW16so4sh[2])
        self.label_205.setText(agressW16so4sh[3])
        agressW8so4s = self.agressvod(so4, 5100.0, 10200.0, 13600.0)
        self.label_221.setStyleSheet(agressW8so4s[0])
        self.label_221.setText(agressW8so4s[1])
        self.label_219.setStyleSheet(agressW8so4s[2])
        self.label_219.setText(agressW8so4s[3])
        agressW10so4s = self.agressvod(so4, 10200.0, 12000.0, 15000.0)
        self.label_210.setStyleSheet(agressW10so4s[0])
        self.label_210.setText(agressW10so4s[1])
        self.label_214.setStyleSheet(agressW10so4s[2])
        self.label_214.setText(agressW10so4s[3])
        agressW16so4s = self.agressvod(so4, 12000.0, 15000.0, 20000.0)
        self.label_211.setStyleSheet(agressW16so4s[0])
        self.label_211.setText(agressW16so4s[1])
        self.label_217.setStyleSheet(agressW16so4s[2])
        self.label_217.setText(agressW16so4s[3])
        agressW4so4pb = self.agressW4SO4bp(so4, hco3)
        self.label_189.setStyleSheet(agressW4so4pb[0])
        self.label_189.setText(agressW4so4pb[1])
        self.label_195.setStyleSheet(agressW4so4pb[2])
        self.label_195.setText(agressW4so4pb[3])
        agressW6so4pb = self.agressW6SO4bp(so4, hco3)
        self.label_190.setStyleSheet(agressW6so4pb[0])
        self.label_190.setText(agressW6so4pb[1])
        self.label_196.setStyleSheet(agressW6so4pb[2])
        self.label_196.setText(agressW6so4pb[3])
        agressW8so4pb = self.agressW8SO4bp(so4, hco3)
        self.label_191.setStyleSheet(agressW8so4pb[0])
        self.label_191.setText(agressW8so4pb[1])
        self.label_197.setStyleSheet(agressW8so4pb[2])
        self.label_197.setText(agressW8so4pb[3])
        agressW4SO4shb = self.agressW4SO4bsh(so4, hco3)
        self.label_204.setStyleSheet(agressW4SO4shb[0])
        self.label_204.setText(agressW4SO4shb[1])
        self.label_200.setStyleSheet(agressW4SO4shb[2])
        self.label_200.setText(agressW4SO4shb[3])
        agressW6SO4shb = self.agressW6SO4bsh(so4, hco3)
        self.label_203.setStyleSheet(agressW6SO4shb[0])
        self.label_203.setText(agressW6SO4shb[1])
        self.label_208.setStyleSheet(agressW6SO4shb[2])
        self.label_208.setText(agressW6SO4shb[3])
        agressW8SO4shb = self.agressW8SO4bsh(so4, hco3)
        self.label_201.setStyleSheet(agressW8SO4shb[0])
        self.label_201.setText(agressW8SO4shb[1])
        self.label_206.setStyleSheet(agressW8SO4shb[2])
        self.label_206.setText(agressW8SO4shb[3])
        agressW4SO4sb = self.agressW4SO4bs(so4, hco3)
        self.label_216.setStyleSheet(agressW4SO4sb[0])
        self.label_216.setText(agressW4SO4sb[1])
        self.label_212.setStyleSheet(agressW4SO4sb[2])
        self.label_212.setText(agressW4SO4sb[3])
        agressW6SO4sb = self.agressW6SO4bs(so4, hco3)
        self.label_215.setStyleSheet(agressW6SO4sb[0])
        self.label_215.setText(agressW6SO4sb[1])
        self.label_220.setStyleSheet(agressW6SO4sb[2])
        self.label_220.setText(agressW6SO4sb[3])
        agressW8SO4sb = self.agressW8SO4bs(so4, hco3)
        self.label_213.setStyleSheet(agressW8SO4sb[0])
        self.label_213.setText(agressW8SO4sb[1])
        self.label_218.setStyleSheet(agressW8SO4sb[2])
        self.label_218.setText(agressW8SO4sb[3])
        agressArmatur = self.agressArm(cl, so4, 500, 5000)
        self.label_226.setStyleSheet(agressArmatur[0])
        self.label_226.setText(agressArmatur[1])
        self.label_227.setStyleSheet(agressArmatur[2])
        self.label_227.setText(agressArmatur[3])
        agressMetal = self.agressMet(ph, cl+so4, sumM)
        self.label_238.setStyleSheet(agressMetal[0])
        self.label_238.setText(agressMetal[1])
        if self.label_238.text() == "ХА0":
            self.label_239.setStyleSheet("background-color: yellow")
            self.label_239.setText("ХА1")
            self.label_240.setStyleSheet("background-color: lightgreen")
            self.label_240.setText("ХА0")
            self.label_241.setStyleSheet("background-color: yellow")
            self.label_241.setText("ХА1")
            self.label_242.setStyleSheet("background-color: yellow")
            self.label_242.setText("ХА1")
            self.label_243.setStyleSheet("background-color: yellow")
            self.label_243.setText("ХА1")
        elif self.label_238.text() == "ХА1":
            self.label_239.setStyleSheet("background-color: orange")
            self.label_239.setText("ХА2")
            self.label_240.setStyleSheet("background-color: lightgreen")
            self.label_240.setText("ХА0")
            self.label_241.setStyleSheet("background-color: orange")
            self.label_241.setText("ХА2")
            self.label_242.setStyleSheet("background-color: orange")
            self.label_242.setText("ХА2")
            self.label_243.setStyleSheet("background-color: orange")
            self.label_243.setText("ХА2")
        elif self.label_238.text() == "ХА2":
            self.label_239.setStyleSheet("background-color: red")
            self.label_239.setText("ХА3")
            self.label_240.setStyleSheet("background-color: yellow")
            self.label_240.setText("ХА1")
            self.label_241.setStyleSheet("background-color: red")
            self.label_241.setText("ХА3")
            self.label_242.setStyleSheet("background-color: red")
            self.label_242.setText("ХА3")
            self.label_243.setStyleSheet("background-color: red")
            self.label_243.setText("ХА3")
        elif self.label_238.text() == "ХА3":
            self.label_239.setStyleSheet("background-color: red")
            self.label_239.setText("ХА3")
            self.label_240.setStyleSheet("background-color: orange")
            self.label_240.setText("ХА2")
            self.label_241.setStyleSheet("background-color: red")
            self.label_241.setText("ХА3")
            self.label_242.setStyleSheet("background-color: red")
            self.label_242.setText("ХА3")
            self.label_243.setStyleSheet("background-color: red")
            self.label_243.setText("ХА3")
        else:
            self.label_239.setStyleSheet("")
            self.label_239.setText("")
            self.label_240.setStyleSheet("")
            self.label_240.setText("")
            self.label_241.setStyleSheet("")
            self.label_241.setText("")
            self.label_242.setStyleSheet("")
            self.label_242.setText("")
            self.label_243.setStyleSheet("")
            self.label_243.setText("")
        agressvodPb = self.agressvod_Pb(ph, gestkost, organika, no3)
        self.label_268.setStyleSheet(agressvodPb[0])
        self.label_268.setText(agressvodPb[1])
        self.label_269.setStyleSheet(agressvodPb[2])
        self.label_269.setText(agressvodPb[3])
        self.label_270.setStyleSheet(agressvodPb[4])
        self.label_270.setText(agressvodPb[5])
        self.label_271.setStyleSheet(agressvodPb[6])
        self.label_271.setText(agressvodPb[7])
        agressvodAl = self.agressvod_Al(ph, cl, fe)
        self.label_272.setStyleSheet(agressvodAl[0])
        self.label_272.setText(agressvodAl[1])
        self.label_273.setStyleSheet(agressvodAl[2])
        self.label_273.setText(agressvodAl[3])
        self.label_274.setStyleSheet(agressvodAl[4])
        self.label_274.setText(agressvodAl[5])

    def agressvod(self, par, parmin, paravg, parmax) -> set:
        """Определение агрессивности воды по отношению к бетону (с возрастанием)"""
        agress = []
        if par is None:
            agresscolor = ""
            agressname = ""
        else:
            if par > parmax:
                agresscolor = "background-color: red"
                agressname = "ХА3"
            elif par > paravg:
                agresscolor = "background-color: orange"
                agressname = "ХА2"
            elif par > parmin:
                agresscolor = "background-color: yellow"
                agressname = "ХА1"
            elif par > 0:
                agresscolor = "background-color: lightgreen"
                agressname = "ХА0"
            else:
                agresscolor = ""
                agressname = ""
        if par is None:
            agresscolor2 = ""
            agressname2 = ""
        else:
            if par > parmax * 1.3:
                agresscolor2 = "background-color: red"
                agressname2 = "ХА3"
            elif par > paravg * 1.3:
                agresscolor2 = "background-color: orange"
                agressname2 = "ХА2"
            elif par > parmin * 1.3:
                agresscolor2 = "background-color: yellow"
                agressname2 = "ХА1"
            elif par > 0:
                agresscolor2 = "background-color: lightgreen"
                agressname2 = "ХА0"
            else:
                agresscolor2 = ""
                agressname2 = ""
        agress.append(agresscolor)
        agress.append(agressname)
        agress.append(agresscolor2)
        agress.append(agressname2)
        return agress

    def agressvodR(self, par, parmin, paravg, parmax) -> set:
        """Определение агрессивности воды по отношению к бетону. Обратный порядок"""
        agress = []
        if par > parmax:
            agresscolor = "background-color: lightgreen"
            agressname = "ХА0"
        elif par > paravg:
            agresscolor = "background-color: yellow"
            agressname = "ХА1"
        elif par > parmin:
            agresscolor = "background-color: orange"
            agressname = "ХА2"
        elif par > 0:
            agresscolor = "background-color: red"
            agressname = "ХА3"
        else:
            agresscolor = ""
            agressname = ""
        if par > parmax / 1.3:
            agresscolor2 = "background-color: lightgreen"
            agressname2 = "ХА0"
        elif par > paravg / 1.3:
            agresscolor2 = "background-color: yellow"
            agressname2 = "ХА1"
        elif par > parmin / 1.3:
            agresscolor2 = "background-color: orange"
            agressname2 = "ХА2"
        elif par > 0:
            agresscolor2 = "background-color: red"
            agressname2 = "ХА3"
        else:
            agresscolor2 = ""
            agressname2 = ""
        agress.append(agresscolor)
        agress.append(agressname)
        agress.append(agresscolor2)
        agress.append(agressname2)
        return agress

    def agressW4SO4bp(self, par, parhco3) -> set:
        """Определеие агрессивности жидкой среды, содержащей бикарбонаты к бетону W4 по показателю SO4"""
        agressb = []
        if parhco3 is None:
            for i in range(0, 4):
                agressb.append("")
        else:
            if parhco3 > 6.0:
                agressb = self.agressvod(par, 1000, 1200, 1500)
            elif parhco3 > 3.0:
                agressb = self.agressvod(par, 500, 1000, 1200)
            else:
                agressb = self.agressvod(par, 250, 500, 1000)
        return agressb

    def agressW6SO4bp(self, par, parhco3) -> set:
        """Определеие агрессивности жидкой среды, содержащей бикарбонаты к бетону W6 по показателю SO4"""
        agressb = []
        if parhco3 is None:
            for i in range(0, 4):
                agressb.append("")
        else:
            if parhco3 > 6.0:
                agressb = self.agressvod(par, 1300, 1560, 1950)
            elif parhco3 > 3.0:
                agressb = self.agressvod(par, 650, 1300, 1560)
            else:
                agressb = self.agressvod(par, 325, 650, 1300)
        return agressb

    def agressW8SO4bp(self, par, parhco3) -> set:
        """Определеие агрессивности жидкой среды, содержащей бикарбонаты к бетону W8 по показателю SO4"""
        agressb = []
        if parhco3 is None:
            for i in range(0, 4):
                agressb.append("")
        else:
            if parhco3 > 6.0:
                agressb = self.agressvod(par, 1700, 2040, 2550)
            elif parhco3 > 3.0:
                agressb = self.agressvod(par, 850, 1700, 2040)
            else:
                agressb = self.agressvod(par, 425, 850, 1700)
        return agressb

    def agressW4SO4bsh(self, par, parhco3) -> set:
        """Определеие агрессивности жидкой среды, содержащей бикарбонаты к шлакобетону W4 по показателю SO4"""
        agressb = []
        if parhco3 is None:
            for i in range(0, 4):
                agressb.append("")
        else:
            if parhco3 > 6.0:
                agressb = self.agressvod(par, 4000, 5000, 6000)
            elif parhco3 > 3.0:
                agressb = self.agressvod(par, 3000, 4000, 5000)
            else:
                agressb = self.agressvod(par, 1500, 3000, 4000)
        return agressb

    def agressW6SO4bsh(self, par, parhco3) -> set:
        """Определеие агрессивности жидкой среды, содержащей бикарбонаты к шлакобетону W6 по показателю SO4"""
        agressb = []
        if parhco3 is None:
            for i in range(0, 4):
                agressb.append("")
        else:
            if parhco3 > 6.0:
                agressb = self.agressvod(par, 5200, 6500, 7800)
            elif parhco3 > 3.0:
                agressb = self.agressvod(par, 3900, 5200, 6500)
            else:
                agressb = self.agressvod(par, 1950, 3900, 5200)
        return agressb

    def agressW8SO4bsh(self, par, parhco3) -> set:
        """Определеие агрессивности жидкой среды, содержащей бикарбонаты к шлакобетону W8 по показателю SO4"""
        agressb = []
        if parhco3 is None:
            for i in range(0, 4):
                agressb.append("")
        else:
            if parhco3 > 6.0:
                agressb = self.agressvod(par, 6800, 8500, 10200)
            elif parhco3 > 3.0:
                agressb = self.agressvod(par, 5100, 6800, 8500)
            else:
                agressb = self.agressvod(par, 2550, 5100, 6800)
        return agressb

    def agressW4SO4bs(self, par, parhco3) -> set:
        """Определеие агрессивности жидкой среды, содержащей бикарбонаты к сульфатостойкому бетону W4 по показателю SO4"""
        agressb = []
        if parhco3 is None:
            for i in range(0, 4):
                agressb.append("")
        else:
            if parhco3 > 6.0:
                agressb = self.agressvod(par, 8000, 12000, 15000)
            elif parhco3 > 3.0:
                agressb = self.agressvod(par, 6000, 8000, 12000)
            else:
                agressb = self.agressvod(par, 3000, 6000, 8000)
        return agressb

    def agressW6SO4bs(self, par, parhco3) -> set:
        """Определеие агрессивности жидкой среды, содержащей бикарбонаты к сульфатостойкому бетону W4 по показателю SO4"""
        agressb = []
        if parhco3 is None:
            for i in range(0, 4):
                agressb.append("")
        else:
            if parhco3 > 6.0:
                agressb = self.agressvod(par, 10400, 15600, 19500)
            elif parhco3 > 3.0:
                agressb = self.agressvod(par, 7800, 10400, 15600)
            else:
                agressb = self.agressvod(par, 3900, 7800, 10400)
        return agressb

    def agressW8SO4bs(self, par, parhco3) -> set:
        """Определеие агрессивности жидкой среды, содержащей бикарбонаты к сульфатостойкому бетону W4 по показателю SO4"""
        agressb = []
        if parhco3 is None:
            for i in range(0, 4):
                agressb.append("")
        else:
            if parhco3 > 6.0:
                agressb = self.agressvod(par, 13600, 20400, 25500)
            elif parhco3 > 3.0:
                agressb = self.agressvod(par, 10200, 13600, 20400)
            else:
                agressb = self.agressvod(par, 5100, 10200, 13600)
        return agressb

    def agressHCO3(self, par, parmin, parmax) -> set:
        """Определение агрессивности воды к бетону по показателю HCO3"""
        agress = []
        if par is None:
            agresscolor = ""
            agressname = ""
        else:
            if par >= parmax:
                agresscolor = "background-color: lightgreen"
                agressname = "ХА0"
            elif par > parmin:
                agresscolor = "background-color: yellow"
                agressname = "ХА1"
            else:
                agresscolor = "background-color: lightgreen"
                agressname = "ХА0"
        if par is None:
            agresscolor2 = ""
            agressname2 = ""
        else:
            if par >= parmax * 1.3:
                agresscolor2 = "background-color: lightgreen"
                agressname2 = "ХА0"
            elif par > parmin * 1.3:
                agresscolor2 = "background-color: yellow"
                agressname2 = "ХА1"
            else:
                agresscolor2 = "background-color: lightgreen"
                agressname2 = "ХА0"
        agress.append(agresscolor)
        agress.append(agressname)
        agress.append(agresscolor2)
        agress.append(agressname2)
        return agress

    def agressArm(self, parcl, parso4, parmin, parmax) -> set:
        """Определение степени агрессивности воды на арматуру ж/б конструкций (показатели агрессивности Cl + SO4)"""
        agress = []
        if parcl < 0 or parso4 < 0:
            par = None
        else:
            par = parcl + parso4 * 0.25
        if par is None:
            agresscolor = ""
            agressname = ""
        else:
            if par > parmax:
                agresscolor = "background-color: yellow"
                agressname = "ХА1"
            elif par > parmin:
                agresscolor = "background-color: lightgreen"
                agressname = "ХА0"
            elif par > 0:
                agresscolor = "background-color: lightgreen"
                agressname = "ХА0"
            else:
                agresscolor = ""
                agressname = ""
        if par is None:
            agresscolor2 = ""
            agressname2 = ""
        else:
            if par > parmax:
                agresscolor2 = "background-color: red"
                agressname2 = "ХА3"
            elif par > parmin:
                agresscolor2 = "background-color: orange"
                agressname2 = "ХА2"
            elif par > 0:
                agresscolor2 = "background-color: yellow"
                agressname2 = "ХА1"
            else:
                agresscolor2 = ""
                agressname2 = ""
        agress.append(agresscolor)
        agress.append(agressname)
        agress.append(agresscolor2)
        agress.append(agressname2)
        return agress

    def agressMet(self, parph, parcl_so4, parmin) -> set:
        """Определение агрессивности воды к металлу (показатели агрессивности pH и Cl+SO4)"""
        agress = []
        if parph < 0.0 or parcl_so4 < 0.0:
            agresscolor = ""
            agressname = ""
        else:
            if parph > 11.0:
                agresscolor = "background-color: orange"
                agressname = "ХА2"
            elif parph > 3.0:
                if parcl_so4 > 5000.0:
                    agresscolor = "background-color: red"
                    agressname = "ХА3"
                elif parcl_so4 >= 0.0:
                    agresscolor = "background-color: orange"
                    agressname = "ХА2"
            elif parph > 0.0:
                agresscolor = "background-color: red"
                agressname = "ХА3"
            if 6.0 < parph < 8.5 and 2000.0 < parcl_so4 < 5000.0:
                agresscolor = "background-color: orange"
                agressname = "ХА2"
            if 3.0 < parph < 11.0 and parmin > 50000.0:
                agresscolor = "background-color: red"
                agressname = "ХА3"
        agress.append(agresscolor)
        agress.append(agressname)
        return agress

    def agressMetMor(self, parph, parcl_so4) -> set:
        """Определение агрессивности морской воды к металлу (показатели агрессивности pH и Cl+SO4)"""
        agress = []
        if parph < 0.0 or parcl_so4 < 0.0:
            agresscolor = ""
            agressname = ""
        else:
            if 6.0 < parph < 8.5 and 2000.0 < parcl_so4 < 5000.0:
                agresscolor = "background-color: orange"
                agressname = "ХА2"
            else:
                agresscolor = ""
                agressname = ""
        agress.append(agresscolor)
        agress.append(agressname)
        return agress

    def agressMin(self, parph, parmin) -> set:
        """Определение агрессивности раствора солей"""
        agress = []
        if parph < 0.0 or parmin < 0.0:
            agresscolor = ""
            agressname = ""
        else:
            if 3.0 < parph < 11.0 and parmin > 50000.0:
                agresscolor = "background-color: red"
                agressname = "ХА3"
            else:
                agresscolor = ""
                agressname = ""
        agress.append(agresscolor)
        agress.append(agressname)
        return agress

    def agressvod_Pb(self, pH, gestkost, organika, no3) -> set:
        """Корозійна агресивність воды по відношенню до свинцевої оболонці кабелю"""
        agress = []
        if pH is None:
            agresscolor = ""
            agressname = ""
        else:
            if pH > 9.0:
                agresscolor = "background-color: red"
                agressname = "ХА3"
            elif pH > 7.5:
                agresscolor = "background-color: orange"
                agressname = "ХА2"
            elif pH > 6.5:
                agresscolor = "background-color: yellow"
                agressname = "ХА1"
            elif pH > 5.0:
                agresscolor = "background-color: orange"
                agressname = "ХА2"
            elif pH > 0.0:
                agresscolor = "background-color: red"
                agressname = "ХА3"
            else:
                agresscolor = ""
                agressname = ""
        agress.append(agresscolor)
        agress.append(agressname)
        if gestkost is None:
            agresscolor = ""
            agressname = ""
        else:
            if gestkost > 5.3:
                agresscolor = "background-color: yellow"
                agressname = "ХА1"
            elif gestkost >= 3.0:
                agresscolor = "background-color: orange"
                agressname = "ХА2"
            elif gestkost > 0.0:
                agresscolor = "background-color: red"
                agressname = "ХА3"
            else:
                agresscolor = ""
                agressname = ""
        agress.append(agresscolor)
        agress.append(agressname)
        if organika is None:
            agresscolor = ""
            agressname = ""
        else:
            if organika > 40.0:
                agresscolor = "background-color: red"
                agressname = "ХА3"
            elif organika > 20.0:
                agresscolor = "background-color: orange"
                agressname = "ХА2"
            elif organika > 0.00:
                agresscolor = "background-color: yellow"
                agressname = "ХА1"
            elif organika == 0.00:
                agresscolor = "background-color: lightgreen"
                agressname = "ХА0"
            else:
                agresscolor = ""
                agressname = ""
        agress.append(agresscolor)
        agress.append(agressname)
        if no3 is None:
            agresscolor = ""
            agressname = ""
        else:
            if no3 > 20.0:
                agresscolor = "background-color: red"
                agressname = "ХА3"
            elif no3 > 10.0:
                agresscolor = "background-color: orange"
                agressname = "ХА2"
            elif no3 > 0.0:
                agresscolor = "background-color: yellow"
                agressname = "ХА1"
            elif no3 == 0.0:
                agresscolor = "background-color: lightgreen"
                agressname = "ХА0"
            else:
                agresscolor = ""
                agressname = ""
        agress.append(agresscolor)
        agress.append(agressname)
        return agress

    def agressvod_Al(self, pH, cl, fe) -> set:
        """Корозійна агресивність воды по відношенню до алюмінієвої оболонці кабелю"""
        agress = []
        if pH is None:
            agresscolor = ""
            agressname = ""
        else:
            if pH > 8.5:
                agresscolor = "background-color: red"
                agressname = "ХА3"
            elif pH > 7.5:
                agresscolor = "background-color: orange"
                agressname = "ХА2"
            elif pH > 6.0:
                agresscolor = "background-color: yellow"
                agressname = "ХА1"
            elif pH > 4.5:
                agresscolor = "background-color: orange"
                agressname = "ХА2"
            elif pH > 0.0:
                agresscolor = "background-color: red"
                agressname = "ХА3"
            else:
                agresscolor = ""
                agressname = ""
        agress.append(agresscolor)
        agress.append(agressname)
        if cl is None:
            agresscolor = ""
            agressname = ""
        else:
            if cl > 50.0:
                agresscolor = "background-color: red"
                agressname = "ХА3"
            elif cl > 5.0:
                agresscolor = "background-color: orange"
                agressname = "ХА2"
            elif cl > 0.0:
                agresscolor = "background-color: yellow"
                agressname = "ХА1"
            elif cl == 0.0:
                agresscolor = "background-color: lightgreen"
                agressname = "ХА0"
            else:
                agresscolor = ""
                agressname = ""
        agress.append(agresscolor)
        agress.append(agressname)
        if fe is None:
            agresscolor = ""
            agressname = ""
        else:
            if fe > 10.0:
                agresscolor = "background-color: red"
                agressname = "ХА3"
            elif fe > 1.0:
                agresscolor = "background-color: orange"
                agressname = "ХА2"
            elif fe > 0.0:
                agresscolor = "background-color: yellow"
                agressname = "ХА1"
            elif fe == 0.0:
                agresscolor = "background-color: lightgreen"
                agressname = "ХА0"
            else:
                agresscolor = ""
                agressname = ""
        agress.append(agresscolor)
        agress.append(agressname)
        return agress

    def calcNa_K(self, mNa, mK, mmpSumAnion, mmSumAnion, mmpSumKationOut) -> set:
        """Расчет содержания Na + K"""
        if mNa and mK is not None:
            mNa = round(dc.Decimal(mNa), 1)
            mK = round(dc.Decimal(mK), 1)
            mNa_K = round(mNa + mK, 1)
            mmNa = round(mNa / dc.Decimal('22.98976928'), 2)
            mmK = round(mK / dc.Decimal('39.0983'), 2)
            mmNa_K = round(mmNa + mmK, 2)
            mmpNa = round(dc.Decimal('100.00') / mmSumAnion * mmNa, 2)
            mmpK = round(dc.Decimal('100.00') / mmSumAnion * mmK, 2)
            mmpNa_K = mmpNa + mmpK
        else:
            mmpNa_K = mmpSumAnion - mmpSumKationOut
            mmNa_K = round(mmSumAnion / dc.Decimal('100.00') * mmpNa_K, 2)
            mNa_K = round(mmNa_K * dc.Decimal('24.00'), 1)
        recNa_K = [mNa, mK, mNa_K, mmNa_K, mmpNa_K]
        return recNa_K

    def calcAgress(self) -> set:
        """Расчет агрессивности воды"""
        self.clso4 = round(self.doubleSpinBox_2.value() + self.doubleSpinBox.value() * 0.25,1)
        self.label_29.setText(str(self.clso4))
        if self.doubleSpinBox_2.value() >= 0: #and self.doubleSpinBox_8.value() < 0:
            self.doubleSpinBox_8.setValue(self.doubleSpinBox_2.value() / 10000)
        else:
            pass
        self.refreshAgressvoda()

    def refreshToolbar(self) -> set:
        """Обновляет панель инструментов"""
        if self.recNum == 0 and self.recCount > 1:
            form.action_8.setEnabled(False)  # Первая запись
            form.action_9.setEnabled(False)  # Предыдущая запись
            form.action_10.setEnabled(True)  # Следующая запись
            form.action_11.setEnabled(True)  # Последняя запись
        elif self.recNum in range(1, self.recCount - 1):
            form.action_8.setEnabled(True)  # Первая запись
            form.action_9.setEnabled(True)  # Последняя запись
            form.action_10.setEnabled(True)  # Следующая запись
            form.action_11.setEnabled(True)  # Последняя запись
        elif self.recNum == self.recCount - 1 and self.recCount > 1:
            form.action_8.setEnabled(True)  # Первая запись
            form.action_9.setEnabled(True)  # Предыдущая запись
            form.action_10.setEnabled(False)  # Следующая запись
            form.action_11.setEnabled(False)  # Последняя запись
        else:
            form.action_8.setEnabled(False)  # Первая запись
            form.action_9.setEnabled(False)  # Предыдущая запись
            form.action_10.setEnabled(False)  # Следующая запись
            form.action_11.setEnabled(False)  # Последняя запись

    def setRow(self) -> set:
        if self.currentIndex() == 0:
            self.refreshToolbar()
            self.refreshRecord()
        elif self.currentIndex() == 1:
            self.tableAgressvoda.selectRow(self.recNum)
        else:
            self.refreshRecord()

    def currentRow(self) -> set:
        """Определение номера записи (строки)  и установка движка на эту запись"""
        if self.currentIndex() == 1:
            recNum = self.recNum
            self.recNum = self.selmodelAgressvoda.currentIndex().row()
            if self.recNum < 0:
                self.recNum = recNum
            self.refreshToolbar()

    def showEvent(self, e) -> set:
        """Выполняет действия при выводе окна на экран"""
        form.action_45.setEnabled(False)
        QtWidgets.QTabWidget.showEvent(self, e)

    def hideEvent(self, e) -> set:
        """Выполняет действия при скрытии окна"""
        form.action_45.setEnabled(True)
        form.agressvodawin = None
        if self.recAll != []:
            self.asktoSave()
        form.refreshMain()
        QtWidgets.QTabWidget.hideEvent(self, e)

    def nextRecord(self) -> set:
        """Становится на следующей записи"""
        self.recNum += 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableAgressvoda.selectRow(self.recNum)

    def priorRecord(self) -> set:
        """Становится на предыдущей записи"""
        self.recNum -= 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableAgressvoda.selectRow(self.recNum)

    def firstRecord(self) -> set:
        """Становится на первой записи"""
        self.recNum = 0
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableAgressvoda.selectRow(self.recNum)

    def lastRecord(self) -> set:
        """Становится на последней записи"""
        if self.recCount > 0:
            self.recNum = self.recCount - 1
            self.refreshToolbar()
            self.asktoSave()
            self.refreshRecord()
            self.tableAgressvoda.selectRow(self.recNum)

    def sortRecord(self) -> set:
        """Сортировка записей"""
        self.recAll.sort(key=itemgetter(0,5,7))
        form.action_13.setEnabled(False)  # Сортировать
        form.action_14.setEnabled(True)  # Снять сортировку
        self.refreshRecord()

    def desortRecord(self) -> set:
        """Отмена сортировки, что соответствует сортировке по ID"""
        self.recAll.sort(key=itemgetter(10))
        form.action_13.setEnabled(True)  # Сортировать
        form.action_14.setEnabled(False)  # Снять сортировку
        self.refreshRecord()

    def addRecord(self) -> bool:
        """Добавляет новую запись"""
        idObrazec = self.comboBox.itemData(self.comboBox.currentIndex(),
                                       role=QtCore.Qt.UserRole)  # ID последнего образца
        with UseDatebase(dbconfig) as curs:
            curs.execute("INSERT INTO agressvoda (id_obrazec) VALUES (%(v0)s);", {'v0': idObrazec})
        self.requerySelect()
        self.recCount = len(self.recAll)
        self.recNum = self.recCount - 1
        self.tableAgressvoda.selectRow(self.recNum)
        self.recOneOld = self.recAll[self.recNum]
        self.refreshRecord()
        self.refreshToolbar()
        retval = True
        return retval

    def delRecord(self) -> set:
        """Удаляет текущую запись"""
        self.refreshRecord()
        val10 = self.recOneOld[10]  # ID свойств воды
        if val10 is not None:
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                           "Властивості води",
                                           "Ви бажаєте видалити поточний запис з порядковим номером - " + str(self.recNum + 1) +
                                           " та лабораторним номером - " + str(self.recOneOld[9]) + "?")
            btnYes = QtWidgets.QPushButton("&Так")
            btnNo = QtWidgets.QPushButton("&Ні")
            btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
            self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
            self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
            self.formMassWin.setDefaultButton(btnYes)
            result = self.formMassWin.exec()
            if result == 0:
                with UseDatebase(dbconfig) as curs:
                    curs.execute("DELETE FROM agressvoda WHERE id = %(v10)s;", {'v10': val10})
                self.requerySelect()
                self.recCount = len(self.recAll)
                if self.recCount > 0:
                    self.firstRecord()
                    self.refreshRecord()
                    self.refreshToolbar()
                else:
                    self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information, "Властивості води",
                                                   "Видалено останній запис")
                    btnOK = QtWidgets.QPushButton("&OK")
                    btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                    self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                    result = self.formMassWin.exec()
                    if result == QtWidgets.QDialog.Accepted:
                        self.formMassWin.close()
                        self.parent().close()
            else:
                pass
        else:
            pass

    def clearField(self) -> set:
        """Очищает текущее поле, присваевает минимальное значение (в последствие NULL)"""
        valIndex = QtWidgets.QApplication.focusWidget()
        if type(valIndex) == QtWidgets.QDoubleSpinBox:
            if valIndex.objectName() == 'doubleSpinBox':
                self.doubleSpinBox.setValue(self.doubleSpinBox.minimum())
            elif valIndex.objectName() == 'doubleSpinBox_2':
                self.doubleSpinBox_2.setValue(self.doubleSpinBox_2.minimum())
            elif valIndex.objectName() == 'doubleSpinBox_3':
                self.doubleSpinBox_3.setValue(self.doubleSpinBox_3.minimum())
            elif valIndex.objectName() == 'doubleSpinBox_4':
                self.doubleSpinBox_4.setValue(self.doubleSpinBox_4.minimum())
            elif valIndex.objectName() == 'doubleSpinBox_5':
                self.doubleSpinBox_5.setValue(self.doubleSpinBox_5.minimum())
            elif valIndex.objectName() == 'doubleSpinBox_6':
                self.doubleSpinBox_6.setValue(self.doubleSpinBox_6.minimum())
            elif valIndex.objectName() == 'doubleSpinBox_7':
                self.doubleSpinBox_7.setValue(self.doubleSpinBox_7.minimum())
            elif valIndex.objectName() == 'doubleSpinBox_8':
                self.doubleSpinBox_8.setValue(self.doubleSpinBox_8.minimum())
            elif valIndex.objectName() == 'doubleSpinBox_9':
                self.doubleSpinBox_9.setValue(self.doubleSpinBox_9.minimum())
            elif valIndex.objectName() == 'doubleSpinBox_10':
                self.doubleSpinBox_10.setValue(self.doubleSpinBox_10.minimum())
            elif valIndex.objectName() == 'doubleSpinBox_11':
                self.doubleSpinBox_11.setValue(self.doubleSpinBox_11.minimum())
            elif valIndex.objectName() == 'doubleSpinBox_12':
                self.doubleSpinBox_12.setValue(self.doubleSpinBox_12.minimum())
            elif valIndex.objectName() == 'doubleSpinBox_13':
                self.doubleSpinBox_13.setValue(self.doubleSpinBox_13.minimum())
            elif valIndex.objectName() == 'doubleSpinBox_14':
                self.doubleSpinBox_14.setValue(self.doubleSpinBox_14.minimum())
            elif valIndex.objectName() == 'doubleSpinBox_15':
                self.doubleSpinBox_15.setValue(self.doubleSpinBox_15.minimum())
            elif valIndex.objectName() == 'doubleSpinBox_16':
                self.doubleSpinBox_16.setValue(self.doubleSpinBox_16.minimum())
            elif valIndex.objectName() == 'doubleSpinBox_17':
                self.doubleSpinBox_17.setValue(self.doubleSpinBox_17.minimum())
            elif valIndex.objectName() == 'doubleSpinBox_18':
                self.doubleSpinBox_18.setValue(self.doubleSpinBox_18.minimum())
            elif valIndex.objectName() == 'doubleSpinBox_19':
                self.doubleSpinBox_19.setValue(self.doubleSpinBox_19.minimum())
            elif valIndex.objectName() == 'doubleSpinBox_20':
                self.doubleSpinBox_20.setValue(self.doubleSpinBox_20.minimum())
            elif valIndex.objectName() == 'doubleSpinBox_22':
                self.doubleSpinBox_22.setValue(self.doubleSpinBox_22.minimum())
            elif valIndex.objectName() == 'doubleSpinBox_23':
                self.doubleSpinBox_23.setValue(self.doubleSpinBox_23.minimum())
            elif valIndex.objectName() == 'doubleSpinBox_24':
                self.doubleSpinBox_24.setValue(self.doubleSpinBox_24.minimum())
            elif valIndex.objectName() == 'doubleSpinBox_25':
                self.doubleSpinBox_25.setValue(self.doubleSpinBox_25.minimum())
            elif valIndex.objectName() == 'doubleSpinBox_26':
                self.doubleSpinBox_26.setValue(self.doubleSpinBox_26.minimum())

    def readRec(self) -> set:
        """Считывание данных и обновление списка текущей записи согласно значений экранной формы"""
        if self.recOneOldTab:
            val9 = self.recOneOldTab[0]  # Лабораторный номер
            val10 = self.recOneOldTab[1]  # ID агрессивности
            val11 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole)  # ID образца
            val12 = self.refreshMetod()  # Метода определения свойств воды
            if self.lineEdit.text() == '':
                val13 = None
            else:
                val13 = self.lineEdit.text()  # Запах воды при 20 град.
            if self.doubleSpinBox.value() < 0:
                val14 = None
            else:
                val14 = round(dc.Decimal(self.doubleSpinBox.value()), 1)  # Запах воды в баллах при 20 град.
            if self.lineEdit_2.text() == '':
                val15 = None
            else:
                val15 = self.lineEdit_2.text()  # Запах воды при 60 град.
            if self.doubleSpinBox_2.value() < 0:
                val16 = None
            else:
                val16 = round(dc.Decimal(self.doubleSpinBox_2.value()), 1)  # Запах воды в баллах при 60 град.
            if self.lineEdit_3.text() == '':
                val17 = None
            else:
                val17 = self.lineEdit_3.text()  # Вкус воды при 20 град.
            if self.doubleSpinBox_4.value() < 0:
                val18 = None
            else:
                val18 = round(dc.Decimal(self.doubleSpinBox_4.value()), 1)  # Вкус воды при 20 град в баллах
            if self.lineEdit_4.text() == '':
                val19 = None
            else:
                val19 = self.lineEdit_4.text()  # Цвет воды
            if self.doubleSpinBox_5.value() < 0:
                val20 = None
            else:
                val20 = round(dc.Decimal(self.doubleSpinBox_5.value()), 1)  # Цвет воды в градусах
            if self.doubleSpinBox_3.value() < 0:
                val21 = None
            else:
                val21 = round(dc.Decimal(self.doubleSpinBox_3.value()), 1)  # Завислі речовини, мг / дм3
            if self.doubleSpinBox_6.value() < 0:
                val22 = None
            else:
                val22 = round(dc.Decimal(self.doubleSpinBox_6.value()), 1)  # Значення pH
            if self.doubleSpinBox_7.value() < 0:
                val23 = None
            else:
                val23 = round(dc.Decimal(self.doubleSpinBox_7.value()), 1)  # Сухий залишок, мг/дм3
            if self.doubleSpinBox_8.value() < 0:
                val24 = None
            else:
                val24 = round(dc.Decimal(self.doubleSpinBox_8.value()), 1)  # Вуглекислота вільна, мг/дм3
            if self.doubleSpinBox_9.value() < 0:
                val25 = None
            else:
                val25 = round(dc.Decimal(self.doubleSpinBox_9.value()), 1)  # Вуглекислота агресивна, мг/дм3
            if self.doubleSpinBox_10.value() < 0:
                val26 = None
            else:
                val26 = round(dc.Decimal(self.doubleSpinBox_10.value()), 1)  # Окислювальність перманганатна, мгО/дм3
            if self.doubleSpinBox_19.value() < 0:
                val27 = None
            else:
                val27 = round(dc.Decimal(self.doubleSpinBox_19.value()), 1)  # Na
            if self.doubleSpinBox_20.value() < 0:
                val28 = None
            else:
                val28 = round(dc.Decimal(self.doubleSpinBox_20.value()), 1)  # K
            if self.label_289.text() == '-':
                val29 = None
            else:
                val29 = dc.Decimal(self.label_289.text())  # Na + K
            if self.doubleSpinBox_22.value() < 0:
                val30 = None
            else:
                val30 = round(dc.Decimal(self.doubleSpinBox_22.value()), 1)  # Ca
            if self.doubleSpinBox_23.value() < 0:
                val31 = None
            else:
                val31 = round(dc.Decimal(self.doubleSpinBox_23.value()), 1)  # Mg
            if self.doubleSpinBox_24.value() < 0:
                val32 = None
            else:
                val32 = round(dc.Decimal(self.doubleSpinBox_24.value()), 1)  # NH4
            if self.doubleSpinBox_25.value() < 0:
                val33 = None
            else:
                val33 = round(dc.Decimal(self.doubleSpinBox_25.value()), 1)  # Fe2
            if self.doubleSpinBox_26.value() < 0:
                val34 = None
            else:
                val34 = round(dc.Decimal(self.doubleSpinBox_26.value()), 1)  # Fe3
            if self.doubleSpinBox_11.value() < 0:
                val35 = None
            else:
                val35 = round(dc.Decimal(self.doubleSpinBox_11.value()), 1)  # Cl
            if self.doubleSpinBox_12.value() < 0:
                val36 = None
            else:
                val36 = round(dc.Decimal(self.doubleSpinBox_12.value()), 1)  # SO4
            if self.doubleSpinBox_13.value() < 0:
                val37 = None
            else:
                val37 = round(dc.Decimal(self.doubleSpinBox_13.value()), 1)  # HCO3
            if self.doubleSpinBox_14.value() < 0:
                val38 = None
            else:
                val38 = round(dc.Decimal(self.doubleSpinBox_14.value()), 1)  # CO3
            if self.doubleSpinBox_15.value() < 0:
                val39 = None
            else:
                val39 = round(dc.Decimal(self.doubleSpinBox_15.value()), 1)  # SiO3
            if self.doubleSpinBox_16.value() < 0:
                val40 = None
            else:
                val40 = round(dc.Decimal(self.doubleSpinBox_16.value()), 1)  # NO3
            if self.doubleSpinBox_17.value() < 0:
                val41 = None
            else:
                val41 = round(dc.Decimal(self.doubleSpinBox_17.value()), 1)  # NO2
            if self.doubleSpinBox_18.value() < 0:
                val42 = None
            else:
                val42 = round(dc.Decimal(self.doubleSpinBox_18.value()), 1)  # F
            val43 = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), role=QtCore.Qt.UserRole)  # ID лаборанта
            self.recOneNewTab = [val9, val10, val11, val12, val13, val14, val15, val16, val17, val18, val19, val20,
                                 val21, val22, val23, val24, val25, val26, val27, val28, val29, val30, val31, val32,
                                 val33, val34, val35, val36, val37, val38, val39, val40, val41, val42, val43]
        else:
            self.recOneNewTab = []

    def asktoSave(self) -> set:
        """Проверяет наличие изменений в свойствах воды"""
        if self.recOneOldTab:
            self.readRec()
            askAgressvoda = (self.recOneNewTab == self.recOneOldTab)
            askTableAgressvoda = self.asktoSaveTableAgressvoda()
            if askAgressvoda == False:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                               "Властивості води",
                                               "Є незбережені дані властивостей води. "
                                               "\nВи бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecord(False)
                else:
                    pass
            elif askTableAgressvoda == False:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                               "Властивості води",
                                               "Є незбережені дані у таблиці властивостей води. "
                                               "\nВи бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecordTableAgressvoda(False)
                else:
                    pass
            else:
                pass
        else:
            pass

    def asktoSaveTableAgressvoda(self) -> set:
        """Проверка наличия изменений в таблице свойств воды"""
        # Считывание данных и обновление списка согласно значений таблицы экранной формы
        self.recAllNewTab = []
        recCount = len(self.recAllOldTab)
        for i in range(0, recCount):
            rec = []
            for j in range(0, 35):
                if j == 0:
                    el = str(self.modelAgressvoda.item(i, j).data(QtCore.Qt.EditRole))  # Лабораторный номер
                elif j == 1:
                    el = int(self.modelAgressvoda.item(i, j).data(QtCore.Qt.EditRole))  # ID Agressvoda
                elif j == 2:
                    el = int(self.modelAgressvoda.item(i, j).data(QtCore.Qt.UserRole))  # ID Лабораторного номера
                elif j == 3:
                    el = int(self.modelAgressvoda.item(i, j).data(QtCore.Qt.UserRole)) # Вид анализа
                elif j in range(4, 11, 2):
                    el = str(self.modelAgressvoda.item(i, j).data(QtCore.Qt.EditRole))  # Запах, вкус, цвет
                elif j in range(5, 12, 2):
                    if self.modelAgressvoda.item(i, j).data(QtCore.Qt.EditRole) == 'None' \
                            or self.modelAgressvoda.item(i, j).data(QtCore.Qt.EditRole) == '-':
                        el = None
                    else:
                        el = int(self.modelAgressvoda.item(i, j).data(QtCore.Qt.EditRole))  # Баллы
                elif j in range(12, 34):
                    if self.modelAgressvoda.item(i, j).data(QtCore.Qt.EditRole) == 'None' \
                            or self.modelAgressvoda.item(i, j).data(QtCore.Qt.EditRole) == '-':
                        el = None
                    else:
                        el = dc.Decimal(self.modelAgressvoda.item(i, j).data(QtCore.Qt.EditRole))  # Катионы и анионы
                elif j == 34:
#                    if self.modelAgressvoda.item(i, j) is None:
#                        el = None
#                    elif self.modelAgressvoda.item(i, j).data(QtCore.Qt.UserRole) == 'None' \
#                            or self.modelAgressvoda.item(i, j).data(QtCore.Qt.UserRole) == '-':
#                        el = None
#                    else:
                    el = int(self.modelAgressvoda.item(i, j).data(QtCore.Qt.UserRole)) #  Лаборант (ID)
                else:
                    if el == 'None':
                        el = None
                rec.append(el)
            self.recAllNewTab.append(rec)  # Формирование обновленного списка (записей-кортежей)
        if self.recAllNewTab == self.recAllOldTab:
            ask = True
        else:
            ask = False
        return ask

    def saveAll(self) -> bool:
        """Сохраняет изменения по нажатию кнопки Сохранить на панели инструментов"""
        if self.currentIndex() == 0:
            self.saveRecord(False)
            retval = True
        if self.currentIndex() == 1:
            self.saveRecordTableAgressvoda(self.asktoSaveTableAgressvoda())
            retval = True
        else:
            retval = False
        return retval

    def saveRecord(self, ask) -> bool:
        """Сохраняет изменения в записи и формирует новый курсор"""
        if ask == False:
            self.readRec()
            with UseDatebase(dbconfig) as curs:
                curs.execute("""UPDATE agressvoda
                                SET id_obrazec = %(v11)s,
                                    vid_analiz = %(v12)s,
                                    zapah20 = %(v13)s,
                                    zapah20bal = %(v14)s,
                                    zapah60 = %(v15)s,
                                    zapah60bal = %(v16)s,
                                    vkus20 = %(v17)s,
                                    vkus20bal = %(v18)s,
                                    cvet = %(v19)s,
                                    cvetbal = %(v20)s,
                                    vzves = %(v21)s,
                                    ph = %(v22)s,
                                    suhost = %(v23)s,
                                    co2 = %(v24)s,
                                    co2a = %(v25)s,
                                    okis_perm = %(v26)s,
                                    na = %(v27)s,
                                    k = %(v28)s,
                                    na_k = %(v29)s,
                                    ca = %(v30)s,
                                    mg = %(v31)s,
                                    nh4 = %(v32)s,
                                    fe2 = %(v33)s,
                                    fe3 = %(v34)s,
                                    cl = %(v35)s,
                                    so4 = %(v36)s,
                                    hco3 = %(v37)s,
                                    co3 = %(v38)s,
                                    sio3 = %(v39)s,
                                    no3 = %(v40)s,
                                    no2 = %(v41)s,
                                    f = %(v42)s,
                                    id_labman = %(v43)s
                                WHERE id = %(v10)s;""",
                             {'v11': self.recOneNewTab[2], 'v12': self.recOneNewTab[3], 'v13': self.recOneNewTab[4],
                              'v14': self.recOneNewTab[5], 'v15': self.recOneNewTab[6], 'v16': self.recOneNewTab[7],
                              'v17': self.recOneNewTab[8], 'v18': self.recOneNewTab[9], 'v19': self.recOneNewTab[10],
                              'v20': self.recOneNewTab[11], 'v21': self.recOneNewTab[12], 'v22': self.recOneNewTab[13],
                              'v23': self.recOneNewTab[14], 'v24': self.recOneNewTab[15], 'v25': self.recOneNewTab[16],
                              'v26': self.recOneNewTab[17], 'v27': self.recOneNewTab[18], 'v28': self.recOneNewTab[19],
                              'v29': self.recOneNewTab[20], 'v30': self.recOneNewTab[21], 'v31': self.recOneNewTab[22],
                              'v32': self.recOneNewTab[23], 'v33': self.recOneNewTab[24], 'v34': self.recOneNewTab[25],
                              'v35': self.recOneNewTab[26], 'v36': self.recOneNewTab[27], 'v37': self.recOneNewTab[28],
                              'v38': self.recOneNewTab[29], 'v39': self.recOneNewTab[30], 'v40': self.recOneNewTab[31],
                              'v41': self.recOneNewTab[32], 'v42': self.recOneNewTab[33], 'v43': self.recOneNewTab[34],
                              'v10': self.recOneNewTab[1]})
            self.recAll = self.requerySelect()
            self.refreshRecord()
            retval = True
        else:
            retval = False
        return retval

    def saveRecordTableAgressvoda(self, ask) -> bool:
        """Сохранение записей таблицы свойств воды"""
        self.recCount = len(self.recAllNewTab)
        if ask == False:
            for i in range(0, self.recCount):
                recOneNewTab = self.recAllNewTab[i]
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE agressvoda
                                SET id_obrazec = %(v11)s,
                                    vid_analiz = %(v12)s,
                                    zapah20 = %(v13)s,
                                    zapah20bal = %(v14)s,
                                    zapah60 = %(v15)s,
                                    zapah60bal = %(v16)s,
                                    vkus20 = %(v17)s,
                                    vkus20bal = %(v18)s,
                                    cvet = %(v19)s,
                                    cvetbal = %(v20)s,
                                    vzves = %(v21)s,
                                    ph = %(v22)s,
                                    suhost = %(v23)s,
                                    co2 = %(v24)s,
                                    co2a = %(v25)s,
                                    okis_perm = %(v26)s,
                                    na = %(v27)s,
                                    k = %(v28)s,
                                    na_k = %(v29)s,
                                    ca = %(v30)s,
                                    mg = %(v31)s,
                                    nh4 = %(v32)s,
                                    fe2 = %(v33)s,
                                    fe3 = %(v34)s,
                                    cl = %(v35)s,
                                    so4 = %(v36)s,
                                    hco3 = %(v37)s,
                                    co3 = %(v38)s,
                                    sio3 = %(v39)s,
                                    no3 = %(v40)s,
                                    no2 = %(v41)s,
                                    f = %(v42)s,
                                    id_labman = %(v43)s
                                WHERE id = %(v10)s;""",
                             {'v11': recOneNewTab[2], 'v12': recOneNewTab[3], 'v13': recOneNewTab[4],
                              'v14': recOneNewTab[5], 'v15': recOneNewTab[6], 'v16': recOneNewTab[7],
                              'v17': recOneNewTab[8], 'v18': recOneNewTab[9], 'v19': recOneNewTab[10],
                              'v20': recOneNewTab[11], 'v21': recOneNewTab[12], 'v22': recOneNewTab[13],
                              'v23': recOneNewTab[14], 'v24': recOneNewTab[15], 'v25': recOneNewTab[16],
                              'v26': recOneNewTab[17], 'v27': recOneNewTab[18], 'v28': recOneNewTab[19],
                              'v29': recOneNewTab[20], 'v30': recOneNewTab[21], 'v31': recOneNewTab[22],
                              'v32': recOneNewTab[23], 'v33': recOneNewTab[24], 'v34': recOneNewTab[25],
                              'v35': recOneNewTab[26], 'v36': recOneNewTab[27], 'v37': recOneNewTab[28],
                              'v38': recOneNewTab[29], 'v39': recOneNewTab[30], 'v40': recOneNewTab[31],
                              'v41': recOneNewTab[32], 'v42': recOneNewTab[33], 'v43': recOneNewTab[34],
                              'v10': recOneNewTab[1]})
            self.requerySelect()
            self.refreshRecord()
            retval = True
        else:
            retval = False
        return retval


class SrezWindow(QtWidgets.QTabWidget, egclasswin.Ui_Srez_win):
    def __init__(self) -> set:
        """Инициализация окна Результатов срезных испытаний"""
        super().__init__()
        self.setupUi(self)
        global idActivObekt
        self.recAllOldSrez = []
        self.recCountSrez = 0
        # Подготовка инструментов для рисования
        self.penblack = QtGui.QPen(QtCore.Qt.black)
        self.penred = QtGui.QPen(QtCore.Qt.red)
        self.penblackp = QtGui.QPen(QtCore.Qt.black, 1, QtCore.Qt.DotLine)
        self.brushr = QtGui.QBrush(QtCore.Qt.red)
        self.brushy = QtGui.QBrush(QtCore.Qt.yellow)
        self.brushly = QtGui.QBrush(QtGui.QColor(255, 255, 0, 30))  # Светло-желтый
        self.brushg = QtGui.QBrush(QtCore.Qt.green)
        self.brushb = QtGui.QBrush(QtCore.Qt.blue)
        self.brushbl = QtGui.QBrush(QtCore.Qt.black)
        self.brushdgr = QtGui.QBrush(QtCore.Qt.darkGray)     # Серый
        self.brushgr = QtGui.QBrush(QtGui.QColor(245, 245, 245))   # Светло-серый
        self.penb = QtGui.QPen(self.brushb, 2)
        # Оформление сцены графиков
        self.scene = QtWidgets.QGraphicsScene(0, 0, 300, 280, self.graphicsView)
        self.graphicsView.setScene(self.scene)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT obrazec.id, 
                                obrazec.lab_num
                            FROM obekt,
                                burehole,
                                obrazec
                            WHERE obekt.id = %(v)s 
                                AND obekt.id = burehole.id_obekt 
                                AND burehole.id = obrazec.id_burehole
                                AND obrazec.mater_obr != 'Вода'
                            ORDER BY obrazec.lab_num""", {'v': idActivObekt})
            recAll = curs.fetchall()
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox.addItem(recOne[1])
                self.comboBox.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT id, 
                                name_pribor,
                                visota,
                                diametr,
                                plosch 
                            FROM pribor 
                            WHERE isput = 'Одноплощинний зріз'""")
            recAll = curs.fetchall()
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox_2.addItem(recOne[1])
                self.comboBox_2.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
                self.comboBox_2.setItemData(i, recOne[2], role=QtCore.Qt.UserRole + 1)
                self.comboBox_2.setItemData(i, recOne[3], role=QtCore.Qt.UserRole + 2)
                self.comboBox_2.setItemData(i, recOne[4], role=QtCore.Qt.UserRole + 3)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT id, metod, shema 
                            FROM harakter 
                            WHERE metod = 'Одноплощинний зріз'
                            ORDER BY shema""")
            recAll = curs.fetchall()
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox_3.addItem(recOne[2])
                self.comboBox_3.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT ispol.id, 
                                ispol.fio
                            FROM ispol
                            WHERE ispol.vidrab = 0 OR ispol.vidrab = 7
                            ORDER BY ispol.fio""")
            recAll = curs.fetchall()
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox_4.addItem(recOne[1])
                self.comboBox_4.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
        self.srezId = 0  # ID свойств одноплоскостного среза
        self.modelSrez = QtGui.QStandardItemModel(30, 7)  # Создание модели характеристики срезных испытаний
        self.selmodelSrez = QtCore.QItemSelectionModel(self.modelSrez)  # Создание модели выделения
        self.modelSrez.setRowCount(len(self.recAll))
        self.modelSrez.setHorizontalHeaderLabels(['Labnum',
                                                  'ID Srez',
                                                  'Лабораторний \nномер',
                                                  'Прилад',
                                                  'Схема випробувань',
                                                  'Кут внутрішнього \nтертя',
                                                  'Питоме зчеплення \nМПа',
                                                  'Лаборант'])
        self.tableSrez.setModel(self.modelSrez)  # Создание представления
        self.tableSrez.setSelectionModel(self.selmodelSrez)  # Установить модель выделения в представлении
        self.tableSrez.setColumnWidth(0, 10)  # Labnum
        self.tableSrez.setColumnWidth(1, 10)  # ID Srez
        self.tableSrez.setColumnWidth(2, 110)  # Лабораторний номер
        self.tableSrez.setColumnWidth(3, 90)  # Прилад
        self.tableSrez.setColumnWidth(4, 500)  # Схема випробувань
        self.tableSrez.setColumnWidth(5, 120)  # Угол внутреннего трения
        self.tableSrez.setColumnWidth(6, 130)  # Удельное сцепление, МПа
        self.tableSrez.setColumnWidth(7, 140)  # Лаборант (ID)
        self.tableSrez.setColumnHidden(0, True)
        self.tableSrez.setColumnHidden(1, True)
        self.tableSrez.setEnabled(True)
        self.modelRezultSrez = QtGui.QStandardItemModel(10, 8)  # Создание модели результатов срезных испытаний
        self.selmodelRezultSrez = QtCore.QItemSelectionModel(self.modelRezultSrez)  # Создание модели выделения
        self.modelRezultSrez.setHorizontalHeaderLabels(['ID',
                                                        'ID Srez',
                                                        'Нормальний \nтиски \nσ МПа',
                                                        'Вологість \nдо випробування \nW %',
                                                        'Вологість \nпісля випробування \nW %',
                                                        'Коефіцієнт пористості \nдо випробування \ne д.о.',
                                                        'Коефіцієнт пористості \nпісля випробування \ne д.о.',
                                                        'Опір грунту \nзрізу \nτ МПа'])
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT *
                            FROM public.srezi 
                            WHERE srezi.id_srez = %(v2)s
                            ORDER BY srezi.id ASC""", {'v2': self.srezId})
            self.recAllRezultSrez = curs.fetchall()
        self.modelRezultSrez.setRowCount(len(self.recAllRezultSrez))
        self.tableRezultSrez.setModel(self.modelRezultSrez)  # Создание представления
        self.tableRezultSrez.setSelectionModel(self.selmodelRezultSrez)  # Установить модель выделения в представлении
        self.tableRezultSrez.setColumnWidth(0, 10)  # ID
        self.tableRezultSrez.setColumnWidth(1, 10)  # ID Srez
        self.tableRezultSrez.setColumnWidth(2, 100)  # Нормальний тиски МПа
        self.tableRezultSrez.setColumnWidth(3, 130)  # Вологість до випробування %
        self.tableRezultSrez.setColumnWidth(4, 140)  # Вологість після випробування %
        self.tableRezultSrez.setColumnWidth(5, 150)  # Коефіцієнт пористості до випробування д.о.
        self.tableRezultSrez.setColumnWidth(6, 150)  # Коефіцієнт пористості після випробування д.о.
        self.tableRezultSrez.setColumnWidth(7, 102)  # Опір грунту зрізу МПа
        self.tableRezultSrez.setColumnHidden(0, True)
        self.tableRezultSrez.setColumnHidden(1, True)
        self.requerySelect()  # Главный запрос для формирования экранной формы
        if not self.recAll:
            self.addRecord()
        else:
            self.recCount = len(self.recAll)
            self.recNum = 0
            self.recOld = self.recAll[self.recNum]
            self.srezId = self.recOld[10]  # ID свойств одноплоскостного среза
        # Назначение делегатов
        self.DelegateSrez1 = egdelegat.DoubleSpinBoxDelegate1()
        self.DelegateSrez3 = egdelegat.DoubleSpinBoxDelegate53()
        self.DelegateSrez4 = egdelegat.DoubleSpinBoxDelegate4()
        self.DelegateLabnumSrez = egdelegat.ComboBoxDelegateLabnumGran()
        self.DelegatePriborSrez = egdelegat.ComboBoxDelegatePriborSrez()
        self.DelegateShemaSrez = egdelegat.ComboBoxDelegateShemaSrez()
        self.DelegateLabman = egdelegat.ComboBoxDelegateLabman()
        self.tableSrez.setItemDelegateForColumn(2, self.DelegateLabnumSrez)
        self.tableSrez.setItemDelegateForColumn(3, self.DelegatePriborSrez)
        self.tableSrez.setItemDelegateForColumn(4, self.DelegateShemaSrez)
        self.tableSrez.setItemDelegateForColumn(7, self.DelegateLabman)
        self.tableRezultSrez.setItemDelegateForColumn(3, self.DelegateSrez1)
        self.tableRezultSrez.setItemDelegateForColumn(4, self.DelegateSrez1)
        self.tableRezultSrez.setItemDelegateForColumn(2, self.DelegateSrez3)
        self.tableRezultSrez.setItemDelegateForColumn(5, self.DelegateSrez3)
        self.tableRezultSrez.setItemDelegateForColumn(6, self.DelegateSrez3)
        self.tableRezultSrez.setItemDelegateForColumn(7, self.DelegateSrez4)
        # Обновление формы и панели инструментов
        self.refreshToolbar()
        self.refreshRecord()
        # Назначение обработчиков сигналов
        self.currentChanged.connect(self.asktoSave)
        self.currentChanged.connect(self.setRow)
        self.comboBox.activated.connect(self.requeryFiz)
        self.comboBox_2.activated.connect(self.requeryPribor)
        self.toolButton_6.clicked.connect(self.clearFieldRezultSrez)
        self.toolButton_1.clicked.connect(self.addRezultSrez)
        self.toolButton_2.clicked.connect(self.delRezultSrez)
        self.toolButton.clicked.connect(self.calcFiC)
        self.selmodelSrez.selectionChanged['QItemSelection', 'QItemSelection'].connect(self.currentRow)

    def requerySelect(self) -> set:
        """Обновление главного запроса для экранной формы"""
        global idActivObekt
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT burehole.id_obekt,
                                obekt.numdog,
                                obekt.archnum,
                                obekt.stadia,
                                burehole.vidhole,
                                burehole.num_hole,
                                obrazec.num_obrazec,
                                obrazec.glub_otbor,
                                burehole.koord_z - obrazec.glub_otbor AS abs_otm,
                                obrazec.lab_num,
                                srez.id,
                                srez.id_obrazec,
                                srez.id_pribor,
                                srez.id_harakter,
                                glina.vlag,
                                glina.vlagtek,
                                glina.vlagrask,
                                glina.plotn,
                                glina.plotnchast,
                                pribor.name_pribor,
                                harakter.shema,
                                srez.tgfi,
                                srez.sceplen,
                                pesok.vlag AS vlag_pesok,
                                pesok.plotn AS plotn_pesok,
                                pesok.plotnchast AS plotnchast_pesok,
                                glina.svgroup,
                                srez.id_labman,
                                vlabman.fio
                            FROM obekt,
                                burehole,
                                obrazec,
                                srez LEFT JOIN glina ON srez.id_obrazec = glina.id_obrazec
                                     LEFT JOIN pesok ON srez.id_obrazec = pesok.id_obrazec
                                     LEFT JOIN vlabman ON srez.id_labman = vlabman.id
                                     LEFT JOIN pribor ON srez.id_pribor = pribor.id,
                                harakter
                            WHERE obekt.id = %(v0)s 
                            AND obekt.id = burehole.id_obekt 
                            AND burehole.id = obrazec.id_burehole 
                            AND obrazec.id = srez.id_obrazec 
                            AND srez.id_harakter = harakter.id
                            ORDER BY srez.id""", {'v0': idActivObekt})
            self.recAll = curs.fetchall()
            return self.recAll

    def requeryFiz(self) -> set:
        """Обновление физ параметров при изменении образца"""
        ind = self.comboBox.currentIndex()
        idObr = self.comboBox.itemData(ind, role=QtCore.Qt.UserRole)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT vlag_glina,
                                vlagtek,
                                vlagrask,
                                plotn_glina,
                                plotnchast_glina,
                                vlag_pesok,
                                plotn_pesok,
                                plotnchast_pesok,
                                svgroup
                            FROM vfizall
                            WHERE id_obrazec = %(v)s""",
                         {'v': idObr})
            self.recFiz = curs.fetchone()
            if self.recFiz is None:
                self.doubleSpinBox.clear()
                self.doubleSpinBox_2.clear()
                self.doubleSpinBox_3.clear()
                self.doubleSpinBox_4.clear()
                self.doubleSpinBox_5.clear()
                self.label_9.setText("-")
                self.label_10.setText("-")
                self.label_11.setText("-")
                self.label_12.setText("-")
            else:
                if self.recFiz[8] == 1:
                    if self.recFiz[0] == None:
                        self.doubleSpinBox.clear()
                    else:
                        self.doubleSpinBox.setValue(self.recFiz[0])  # Вологість ґрунту, %
                    if self.recFiz[1] == None:
                        self.doubleSpinBox_2.clear()
                    else:
                        self.doubleSpinBox_2.setValue(self.recFiz[1])  # Вологість на границi текучостi, %
                    if self.recFiz[2] == None:
                        self.doubleSpinBox_3.clear()
                    else:
                        self.doubleSpinBox_3.setValue(self.recFiz[2])  # Вологість на границi розкочування, %
                    if self.recFiz[3] == None:
                        self.doubleSpinBox_4.clear()
                    else:
                        self.doubleSpinBox_4.setValue(self.recFiz[3])  # Щільність ґрунту, г/см3
                    if self.recFiz[4] == None:
                        self.doubleSpinBox_5.clear()
                    else:
                        self.doubleSpinBox_5.setValue(self.recFiz[4])  # Щiльнiсть часток ґрунту, г/см3
                    # Подготовка и отображение расчетных показателей
                    self.ip = plastich(self.recFiz[1], self.recFiz[2])
                    if self.ip != None:
                        self.label_9.setText(str(self.ip))  # Число пластичностi, %
                    else:
                        self.label_9.setText("-")
                    self.il = konsist(self.recFiz[0], self.recFiz[1], self.recFiz[2])
                    if self.il != None:
                        self.label_10.setText(str(self.il))  # Показник текучостi, д.о.
                    else:
                        self.label_10.setText("-")
                    self.pd = plotsk(self.recFiz[0], self.recFiz[3])
                    if self.pd != None:
                        self.label_11.setText(str(self.pd))  # Щiльнiсть сухого грунту (скелета), г/см3
                    else:
                        self.label_11.setText("-")
                    self.e = kfPorw(self.recFiz[0], self.recFiz[3], self.recFiz[4])
                    if self.e != None:
                        self.label_12.setText(str(self.e))  # Кф пористости
                    else:
                        self.label_12.setText("-")
                else:
                    if self.recFiz[5] == None:
                        self.doubleSpinBox.clear()
                    else:
                        self.doubleSpinBox.setValue(self.recFiz[5])  # Вологість ґрунту, %
                    self.doubleSpinBox_2.clear()
                    self.doubleSpinBox_3.clear()
                    if self.recFiz[6] == None:
                        self.doubleSpinBox_4.clear()
                    else:
                        self.doubleSpinBox_4.setValue(self.recFiz[6])  # Щільність ґрунту, г/см3
                    if self.recFiz[7] == None:
                        self.doubleSpinBox_5.clear()
                    else:
                        self.doubleSpinBox_5.setValue(self.recFiz[7])  # Щiльнiсть часток ґрунту, г/см3
                    # Подготовка и отображение расчетных показателей
                    self.label_9.setText("-")
                    self.label_10.setText("-")
                    self.pd = plotsk(self.recFiz[5], self.recFiz[6])
                    if self.pd != None:
                        self.label_11.setText(str(self.pd))  # Щiльнiсть сухого грунту (скелета), г/см3
                    else:
                        self.label_11.setText("-")
                    self.e = kfPorw(self.recFiz[5], self.recFiz[6], self.recFiz[7])
                    if self.e != None:
                        self.label_12.setText(str(self.e))  # Кф пористости
                    else:
                        self.label_12.setText("-")

    def requeryPribor(self) -> set:
        """Обновление свойств прибора"""
        visota = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), QtCore.Qt.UserRole + 1)
        self.label_26.setText(str(visota))  # Висота зразка, мм
        diametr = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), QtCore.Qt.UserRole + 2)
        self.label_16.setText(str(diametr))  # Діаметр зразка, мм

    def refreshRecord(self) -> set:
        """Обновляет экранную форму с отображаемой записью"""
        # Передача значений из списка в экранную форму
        self.recOld = self.recAll[self.recNum]
        if self.recOld:
            self.label.setText("Ідентіфікатор об'єкта - " + str(self.recOld[0]) + "\n" +
                               "Номер договору - " + self.recOld[1] + "\n" +
                               "Архівний номер звіту - " + self.recOld[2] + "\n" +
                               self.recOld[4] + " №" + self.recOld[5] + "\n" +
                               "Зразок №" + str(self.recOld[6]) + "\n" +
                               "Глибина відбору - " + str(self.recOld[7]))  # ID объекта, номер договора,
                                                                            # архивный номер отчета, вид и № выработки,
                                                                            # № образца, глубина отбора
            self.obID = self.recOld[0]  # ID объекта
            self.numdog = self.recOld[1]  # Номер договора
            self.archnum = self.recOld[2]  # Архивный номер объекта
            self.stadia = self.recOld[3]  # Стадия проектирования
            self.vidhole = self.recOld[4]  # Вид выработки
            self.numhole = self.recOld[5]  # Номер выработки
            self.numobrazec = self.recOld[6]  # Номер образца
            self.glubotbor = self.recOld[7]  # Глубина отбора
            self.absotm = self.recOld[8]  # Абсолютная отметка отбора
            self.labnum = self.recOld[9]  # Лабораторный номер
            self.srezId = self.recOld[10]  # ID срезных испытаний
            self.comboBox.setCurrentIndex(
                self.comboBox.findData(self.recOld[11], role=QtCore.Qt.UserRole))  # ID образца
            self.comboBox_2.setCurrentIndex(
                self.comboBox_2.findData(self.recOld[12], role=QtCore.Qt.UserRole))  # Прилад
            visota = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), QtCore.Qt.UserRole + 1)
            if visota is None or visota == 'None':
                visota = '-'
            self.label_26.setText(str(visota))  # Висота зразка, мм
            diametr = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), QtCore.Qt.UserRole + 2)
            if diametr is None or diametr == 'None':
                diametr = '-'
            self.label_16.setText(str(diametr))  # Діаметр зразка, мм
            self.comboBox_3.setCurrentIndex(
                self.comboBox_3.findData(self.recOld[13], role=QtCore.Qt.UserRole))  # Схема випробувань
            self.comboBox_4.setCurrentIndex(
                self.comboBox_4.findData(self.recOld[27], role=QtCore.Qt.UserRole))  # ID лаборанта
            if self.recOld[26] == 1:
                if self.recOld[14] == None:
                    self.doubleSpinBox.clear()
                else:
                    self.doubleSpinBox.setValue(self.recOld[14])  # Вологість ґрунту (глини), %
            else:
                if self.recOld[23] == None:
                    self.doubleSpinBox.clear()
                else:
                    self.doubleSpinBox.setValue(self.recOld[23])  # Вологість ґрунту (піску), %
            if self.recOld[15] == None:
                self.doubleSpinBox_2.clear()
            else:
                self.doubleSpinBox_2.setValue(self.recOld[15])  # Вологість на границi текучостi, %
            if self.recOld[16] == None:
                self.doubleSpinBox_3.clear()
            else:
                self.doubleSpinBox_3.setValue(self.recOld[16])  # Вологість на границi розкочування, %
            if self.recOld[26] == 1:
                if self.recOld[17] == None:
                    self.doubleSpinBox_4.clear()
                else:
                    self.doubleSpinBox_4.setValue(self.recOld[17])  # Щільність ґрунту (глини), г/см3
                if self.recOld[28] == None:
                    self.doubleSpinBox_5.clear()
                else:
                    self.doubleSpinBox_5.setValue(self.recOld[18])  # Щiльнiсть часток ґрунту (глини), г/см3
            else:
                if self.recOld[24] == None:
                    self.doubleSpinBox_4.clear()
                else:
                    self.doubleSpinBox_4.setValue(self.recOld[24])  # Щільність ґрунту (піску), г/см3
                if self.recOld[25] == None:
                    self.doubleSpinBox_5.clear()
                else:
                    self.doubleSpinBox_5.setValue(self.recOld[25])  # Щiльнiсть часток ґрунту (піску), г/см3
            # Подготовка и отображение расчетных показателей
            self.ip = plastich(self.recOld[15], self.recOld[16])
            if self.ip != None:
                self.label_9.setText(str(self.ip))  # Число пластичностi, %
            else:
                self.label_9.setText("-")
            self.il = konsist(self.recOld[14], self.recOld[15], self.recOld[16])
            if self.il != None:
                self.label_10.setText(str(self.il))  # Показник текучостi, д.о.
            else:
                self.label_10.setText("-")
            if self.recOld[26] == 1:
                self.pd = plotsk(self.recOld[14], self.recOld[17])
                self.e = kfPorw(self.recOld[14], self.recOld[17], self.recOld[18])
            else:
                self.pd = plotsk(self.recOld[23], self.recOld[24])
                self.e = kfPorw(self.recOld[23], self.recOld[24], self.recOld[25])
            if self.pd != None:
                self.label_11.setText(str(self.pd))  # Щiльнiсть сухого грунту (скелета), г/см3
            else:
                self.label_11.setText("-")
            if self.e != None:
                self.label_12.setText(str(self.e))  # Кф пористости
            else:
                self.label_12.setText("-")
            self.tgFi = self.recOld[21]
            self.scepC = self.recOld[22]
            self.label_15.setText(str(self.recOld[21]))  # Тангенс угла внутреннего трения
            self.label_13.setText(tgtodegrestr(self.recOld[21]))  # Угол внутреннего трения (текст градусы-минуты)
            self.label_14.setText(str(self.recOld[22]))  # Удельное сцепление, МПа
            if self.recOld[26] == 1:
                namegrunt = nameglina(self.e, self.ip, self.il)
            else:
                namegrunt = "Пісок"
            self.label_18.setText(namegrunt)  # Наименование грунта
            # Считывание данных и обновление списка согласно значений экранной формы
            val0 = self.recOld[0]  # ID объекта
            val1 = self.recOld[1]  # Архивный номер объекта
            val2 = self.recOld[2]  # Наименование объекта
            val3 = self.recOld[3]  # Стадия проектирования
            val4 = self.recOld[4]  # Вид выработки
            val5 = self.recOld[5]  # Номер выработки
            val6 = self.recOld[6]  # Номер образца
            val7 = self.recOld[7]  # Глубина отбора
            val8 = self.recOld[8]  # Абсолютная отметка отбора
            val9 = self.recOld[9]  # Лабораторный номер
            val10 = self.recOld[10]  # ID срезных испытаний
            val11 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole)  # ID образца
            val14 = self.comboBox_2.itemData(self.comboBox_2.currentIndex(),
                                             role=QtCore.Qt.UserRole)  # Идентификатор прибора
            val15 = self.comboBox_3.itemData(self.comboBox_3.currentIndex(),
                                             role=QtCore.Qt.UserRole)  # Идентификатор схемы испытаний
            val16 = self.comboBox_4.itemData(self.comboBox_4.currentIndex(),
                                             role=QtCore.Qt.UserRole)  # Идентификатор лаборанта
            val31 = self.doubleSpinBox.value()  # Вологість ґрунту, %
            val32 = self.doubleSpinBox_2.value()  # Вологість на границi текучостi, %
            val33 = self.doubleSpinBox_3.value()  # Вологість на границi розкочування, %
            val34 = self.doubleSpinBox_4.value()  # Щільність ґрунту, г/см3
            val35 = self.doubleSpinBox_5.value()  # Щiльнiсть часток ґрунту, г/см3
            val36 = dc.Decimal(self.label_15.text())  # Тангенс угла внутреннего трения
            val37 = dc.Decimal(self.label_14.text())  # Удельное сцепление, МПа
            val38 = self.recOld[26]             # Код физсвойств = 1 для глин
            self.recOld = [val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, val10, val11,
                           val14, val15, val16, val31, val32, val33, val34, val35, val36, val37, val38]
        else:
            pass
        self.refreshTableSrez()
        self.refreshTableRezultSrez()
        self.refreshGraph()

    def refreshGraph(self) -> set:
        """Обновление графика-диаграммы"""
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT MIN(nagruzka),
                                    MAX(nagruzka)
                            FROM public.srezi 
                            GROUP BY id_srez
                            HAVING id_srez = %(v2)s""",
                         {'v2': self.srezId})
            self.recGroupRezultSrez = curs.fetchone()  # Исходный список минимальных и максимальных нагрузок срезных испытаний выбранного образца
        if self.recGroupRezultSrez != None:
            self.minx = self.recGroupRezultSrez[0]
            self.maxx = self.recGroupRezultSrez[1]
            if self.minx > 0.00:
                xcount = int(self.maxx / self.minx)  # Количество значений для подписи осей
                self.schet = True
                self.scene.clear()
                self.scene.addRect(40, 10, 240, 240, self.penblack, self.brushly)     # Область построения графика
                i = int(240 / (xcount + 1))  # Шаг сетки
                for i in range(40, 290, i):
                    self.scene.addLine(i, 10, i, 250, self.penblackp)  # Вертикальная сетка
                    self.scene.addLine(i, 250, i, 255, self.penblack)  # Вертикальные штрихи
                    self.scene.addLine(40, 290 - i, 280, 290 - i, self.penblackp)  # Горизонтальная сетка
                    self.scene.addLine(35, 290 - i, 40, 290 - i, self.penblack)  # Горизонтальные штрихи
                y1 = 250 - int(round(240 / (self.minx + self.maxx) * self.scepC, 0))
                tmax = (self.minx + self.maxx) * self.tgFi + self.scepC
                y2 = 250 - int(round(240 / (self.minx + self.maxx) * tmax, 0))
                self.scene.addLine(40, y1, 280, y1, self.penred)     # График сцепления
                self.scene.addLine(40, y1, 280, y2, self.penb)  # Построение графика
                i = int(240 / (xcount + 1))  # Шаг сетки для подписей осей
                for j in range(0, xcount + 2):
                    if j < xcount + 1:
                        xtext = QtWidgets.QGraphicsSimpleTextItem(str(self.minx * j))
                        ytext = QtWidgets.QGraphicsSimpleTextItem(str(self.minx * j))
                        self.scene.addItem(xtext)
                        xtext.setPos(17 + i * j, 260)
                        self.scene.addItem(ytext)
                        ytext.setPos(0, 250 - i * (j + 1) + i - 10)
                    else:
                        xtext = QtWidgets.QGraphicsSimpleTextItem("σМПа")
                        ytext = QtWidgets.QGraphicsSimpleTextItem("τМПа")
                        ctext = QtWidgets.QGraphicsSimpleTextItem("c")
                        self.scene.addItem(xtext)
                        xtext.setPos(25 + i * j, 260)
                        self.scene.addItem(ytext)
                        ytext.setPos(0, 250 - i * (j + 1) + i - 10)
                        self.scene.addItem(ctext)
                        ctext.setPos(285, y1 - 10)
                for j in range(0, self.recCountRezultSrez):  # Построение точек
                    self.recOldRezultSrez = self.recAllRezultSrez[j][0:8]
                    listrow = list(self.recOldRezultSrez)  # Список одной строки
                    nagruzka = listrow[2]
                    soprotiv = listrow[7]
                    if nagruzka is None or nagruzka == 0.00 or soprotiv is None or soprotiv == 0.00:
                        self.schet = False
                        break
                    else:
                        self.schet = True
                        xpoint = 40 + int(round(240 / (self.minx + self.maxx) * nagruzka, 0))
                        ypoint = 250 - int(round(240 / (self.minx + self.maxx) * soprotiv, 0))
                        self.scene.addEllipse(xpoint - 4, ypoint - 4, 8, 8, self.penblack, self.brushr)
            else:
                self.schet = False
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Critical,
                                               "Випробування методом одноплощинного зрізу",
                                               "У таблиці результатів випробувань одне або кілька значень "
                                               "нормального тиску (σ) не визначені або мають значення 0.00. "
                                               "\nРозрахунок провести немає можливості. "
                                               "Необхідно виправити значення нормального тиску.")
                btnOK = QtWidgets.QPushButton("&OK")
                btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                result = self.formMassWin.exec()
                self.scene.clear()
        else:
            self.scene.clear()

    def refreshTableSrez(self) -> set:
        """Обновление таблицы характеристики срезных испытаний"""
        self.recCountSrez = len(self.recAll)
        self.recAllOldSrez = []
        if self.recCountSrez > 0:
            self.modelSrez.setRowCount(self.recCountSrez)
            self.tableSrez.setEnabled(True)
            self.modelSrez.removeRows(0, self.modelSrez.rowCount())
            item11 = QtWidgets.QTableWidgetItem()
            item11.setData(QtCore.Qt.EditRole, id)
            for i in range(0, self.recCountSrez):  # Занесение данных в ячейки таблицы
                self.recOldSrez = self.recAll[i][9:31]
                listrow = list(self.recOldSrez)  # Список одной строки
                item9 = QtGui.QStandardItem(str(listrow[0]))  # Лабораторный номер
                item10 = QtGui.QStandardItem(str(listrow[1]))  # ID срез
                item11 = QtGui.QStandardItem(str(listrow[0])) # Лабораторный номер
                item11.setData(listrow[2],role=QtCore.Qt.UserRole)
                if listrow[10] is None:
                    item14 = QtGui.QStandardItem('-')
                else:
                    item14 = QtGui.QStandardItem(str(listrow[10]))  # Прибор
                item14.setData(listrow[3], role=QtCore.Qt.UserRole)    # Идентификатор прибора
                item15 = QtGui.QStandardItem(str(listrow[11]))  # Схема испытаний
                item15.setData(listrow[4], role=QtCore.Qt.UserRole)    # ID схемы испытаний
                item16 = QtGui.QStandardItem(str(tgtodegrestr(listrow[12])))  # Угол внутреннего трения
                item16.setData(listrow[12], role=QtCore.Qt.UserRole)    # Тангенс угла внутреннего трения
                item17 = QtGui.QStandardItem(str(listrow[13]))  # Удельное сцепление, МПа
                if listrow[19] == '':
                    item18 = QtGui.QStandardItem('-')
                else:
                    item18 = QtGui.QStandardItem(str(listrow[19]))  # Лаборант
                item18.setData(str(listrow[18]), role = QtCore.Qt.UserRole)
                item11.setTextAlignment(QtCore.Qt.AlignCenter)
                item14.setTextAlignment(QtCore.Qt.AlignCenter)
                item15.setTextAlignment(QtCore.Qt.AlignVCenter)
                item16.setTextAlignment(QtCore.Qt.AlignCenter)
                item17.setTextAlignment(QtCore.Qt.AlignCenter)
                item18.setTextAlignment(QtCore.Qt.AlignCenter)
                item16.setEnabled(False)
                item17.setEnabled(False)
                item16.setBackground(self.brushgr)
                item17.setBackground(self.brushgr)
                item16.setForeground(self.brushbl)
                item17.setForeground(self.brushbl)
                self.modelSrez.appendRow([item9, item10, item11, item14, item15, item16, item17, item18])
                oldSrezOne = []
                for j in range(0, 19):  # Занесение данных в ячейки таблицы
                    it = listrow[j]
                    if j in range(0, 5) or j == 12 or j == 13 or j == 18:
                        oldSrezOne.append(it)
                    else:
                        pass
                self.recAllOldSrez.append(oldSrezOne)  # Формирование исходного списка срезных испытаний
        else:
            self.tableSrez.setEnabled(False)
            self.toolButton_2.setEnabled(False)
            self.modelSrez.removeRows(0, self.modelSrez.rowCount())
        self.recAllNewSrez = self.recAllOldSrez
        self.tableSrez.selectRow(self.recNum)

    def refreshTableRezultSrez(self) -> set:
        """Обновление таблицы Результатов срезных испытаний"""
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT *
                            FROM public.srezi 
                            WHERE srezi.id_srez = %(v2)s
                            ORDER BY srezi.id ASC""", {'v2': self.srezId})
            self.recAllRezultSrez = curs.fetchall()  # Полный исходный список результатов срезных испытаний выбранного образца
        self.recCountRezultSrez = len(self.recAllRezultSrez)
        self.recAllOldRezultSrez = []
        if self.recCountRezultSrez > 0:
            self.modelRezultSrez.setRowCount(self.recCountRezultSrez)
            self.tableRezultSrez.setEnabled(True)
            self.toolButton_2.setEnabled(True)
            self.toolButton_6.setEnabled(True)
            self.toolButton.setEnabled(True)
            self.modelRezultSrez.removeRows(0, self.modelRezultSrez.rowCount())
            for i in range(0, self.recCountRezultSrez):  # Занесение данных в ячейки таблицы
                self.recOldRezultSrez = self.recAllRezultSrez[i][0:8]
                listrow = list(self.recOldRezultSrez)  # Список одной строки
                itemrow = []
                for j in range(0, 8):
                    if listrow[j] is None:
                        item = QtGui.QStandardItem('-')
                    else:
                        item = QtGui.QStandardItem(str(listrow[j]))
                    item.setTextAlignment(QtCore.Qt.AlignCenter)
                    itemrow.append(item)
                self.modelRezultSrez.appendRow(itemrow)
            self.recAllOldRezultSrez = self.recAllRezultSrez  # Формирование исходного списка результатов срезов
        else:
            self.tableRezultSrez.setEnabled(False)
            self.toolButton_2.setEnabled(False)
            self.toolButton_6.setEnabled(False)
            self.toolButton.setEnabled(False)
            self.modelRezultSrez.removeRows(0, self.modelRezultSrez.rowCount())
        self.recAllNewRezultSrez = self.recAllOldRezultSrez

    def refreshToolbar(self) -> set:
        """Обновляет панель инструментов"""
        if self.recNum == 0 and self.recCount > 1:
            form.action_8.setEnabled(False)  # Первая запись
            form.action_9.setEnabled(False)  # Предыдущая запись
            form.action_10.setEnabled(True)  # Следующая запись
            form.action_11.setEnabled(True)  # Последняя запись
        elif self.recNum in range(1, self.recCount - 1):
            form.action_8.setEnabled(True)  # Первая запись
            form.action_9.setEnabled(True)  # Последняя запись
            form.action_10.setEnabled(True)  # Следующая запись
            form.action_11.setEnabled(True)  # Последняя запись
        elif self.recNum == self.recCount - 1 and self.recCount > 1:
            form.action_8.setEnabled(True)  # Первая запись
            form.action_9.setEnabled(True)  # Предыдущая запись
            form.action_10.setEnabled(False)  # Следующая запись
            form.action_11.setEnabled(False)  # Последняя запись
        else:
            form.action_8.setEnabled(False)  # Первая запись
            form.action_9.setEnabled(False)  # Предыдущая запись
            form.action_10.setEnabled(False)  # Следующая запись
            form.action_11.setEnabled(False)  # Последняя запись

    def setRow(self) -> set:
        if self.currentIndex() == 0:
            self.refreshToolbar()
            self.refreshRecord()
        elif self.currentIndex() == 1:
            self.tableSrez.selectRow(self.recNum)
        else:
            self.refreshRecord()

    def currentRow(self) -> set:
        """Определение номера записи (строки)  и установка движка на эту запись"""
        if self.currentIndex() == 1:
            recNum = self.recNum
            self.recNum = self.selmodelSrez.currentIndex().row()
            if self.recNum < 0:
                self.recNum = recNum
            self.refreshToolbar()

    def showEvent(self, e) -> set:
        """Выполняет действия при выводе окна на экран"""
        form.action_24.setEnabled(False)
        QtWidgets.QTabWidget.showEvent(self, e)

    def hideEvent(self, e) -> set:
        """Выполняет действия при скрытии окна"""
        form.action_24.setEnabled(True)
        form.srezwin = None
        if self.recAll != []:
            self.asktoSave()
        form.refreshMain()
        QtWidgets.QTabWidget.hideEvent(self, e)

    def nextRecord(self) -> set:
        """Становится на следующей записи"""
        self.recNum += 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableSrez.selectRow(self.recNum)

    def priorRecord(self) -> set:
        """Становится на предыдущей записи"""
        self.recNum -= 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableSrez.selectRow(self.recNum)

    def firstRecord(self) -> set:
        """Становится на первой записи"""
        self.recNum = 0
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableSrez.selectRow(self.recNum)

    def lastRecord(self) -> set:
        """Становится на последней записи"""
        if self.recCount > 0:
            self.recNum = self.recCount - 1
            self.refreshToolbar()
            self.asktoSave()
            self.refreshRecord()
            self.tableSrez.selectRow(self.recNum)

    def sortRecord(self) -> set:
        """Сортировка записей"""
        self.recAll.sort(key=itemgetter(0,5,7))
        form.action_13.setEnabled(False)  # Сортировать
        form.action_14.setEnabled(True)  # Снять сортировку
        self.refreshRecord()

    def desortRecord(self) -> set:
        """Отмена сортировки, что соответствует сортировке по ID"""
        self.recAll.sort(key=itemgetter(10))
        form.action_13.setEnabled(True)  # Сортировать
        form.action_14.setEnabled(False)  # Снять сортировку
        self.refreshRecord()

    def calcFiC(self) -> set:
        """Расчет угла внутреннего трения и сцепления"""
        self.asktoSave()
        if self.schet == True:
            raschet = tgFiFiC(self.srezId)
            if raschet == []:
                pass
            else:
                self.label_15.setText(str(raschet[0]))  # Тангенс угла внутреннего трения
                self.label_13.setText(str(raschet[1]))  # Угол внутреннего трения (текст градусы-минуты)
                self.label_14.setText(str(raschet[2]))  # Удельное сцепление, МПа
                self.saveRecord(False)
        else:
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Critical,
                                           "Випробування методом одноплощинного зрізу",
                                           "У таблиці результатів випробувань одне або кілька значень "
                                           "нормального тиску (σ) або опіру грунту зрізу (τ) не визначені "
                                           "або мають значення 0.00. \nРозрахунок провести немає можливості. "
                                           "Необхідно внести в таблицю виправлення.")
            btnOK = QtWidgets.QPushButton("&OK")
            btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
            result = self.formMassWin.exec()

    def addRecord(self) -> set:
        """Добавляет новую запись"""
        val11 = self.comboBox.itemData(self.comboBox.currentIndex(),
                                       role=QtCore.Qt.UserRole)  # ID последнего образца
        with UseDatebase(dbconfig) as curs:
            curs.execute("INSERT INTO srez (id_obrazec) VALUES (%(v11)s);", {'v11': val11})
        self.requerySelect()
        self.recCount = len(self.recAll)
        if self.recCount == 1:
            self.recNum = 0
            self.recOld = self.recAll[self.recNum]
        self.refreshRecord()
        self.lastRecord()
        self.refreshToolbar()

    def addRezultSrez(self) -> set:
        """Добавляет результаты одного среза при заданном давлении"""
        with UseDatebase(dbconfig) as curs:
            curs.execute("SELECT count(id) FROM srezi WHERE srezi.id_srez = %(v2)s;",
                         {'v2': self.srezId})
            countSrezi = curs.fetchone()
            numcount = countSrezi[0]
        with UseDatebase(dbconfig) as curs:
            curs.execute("INSERT INTO srezi (id_srez) VALUES (%(v2)s);",
                         {'v2': self.srezId})
        self.saveRecordRezultSrez()
        self.refreshTableRezultSrez()
        self.tableRezultSrez.setFocus()
        sel = self.tableRezultSrez.selectionModel()
        ind = self.tableRezultSrez.model().index(numcount, 2)
        sel.setCurrentIndex(ind, QtCore.QItemSelectionModel.ClearAndSelect)

    def clearFieldRezultSrez(self) -> set:
        """Очистка текущей ячейки таблицы результатов срезных испытаний"""
        valIndex = self.tableRezultSrez.currentIndex()  # Создание экземпляра класса ModelIndex
        indexCell = self.modelRezultSrez.index(valIndex.row(),
                                               valIndex.column())  # Определение индекса выбранной ячейки
        self.modelRezultSrez.setData(indexCell, "None",
                                     QtCore.Qt.EditRole)  # Присвоить неопределенное значение выбранной ячейке

    def delRecord(self) -> set:
        """Удаляет текущую запись"""
        self.refreshRecord()
        val10 = self.recOld[10]  # ID
        if val10 is not None:
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                           "Одноплощинний зріз",
                                           "Ви бажаєте видалити поточний запис з порядковим номером - " + str(self.recNum + 1) +
                                           " та лабораторним номером - " + str(self.recOld[9]) + "?")
            btnYes = QtWidgets.QPushButton("&Так")
            btnNo = QtWidgets.QPushButton("&Ні")
            btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
            self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
            self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
            self.formMassWin.setDefaultButton(btnYes)
            result = self.formMassWin.exec()
            if result == 0:
                try:
                    with UseDatebase(dbconfig) as curs:
                        curs.execute("DELETE FROM srez WHERE id = %(v10)s;", {'v10': val10})
                    self.requerySelect()
                    self.recCount = len(self.recAll)
                    if self.recCount > 0:
                        self.firstRecord()
                        self.refreshRecord()
                        self.refreshToolbar()
                    else:
                        self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information, "Одноплощинний зріз",
                                                       "Видалено останній запис")
                        btnOK = QtWidgets.QPushButton("&OK")
                        btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                        self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                        result = self.formMassWin.exec()
                        if result == 0:
                            self.formMassWin.close()
                            self.parent().close()
                except:
                    self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "Одноплощинний зріз",
                                                            "Видалення не можливо. "
                                                            "З поточним записом пов'язані записи у таблиці: "
                                                            "Результати випробувань"
                                                            "\nПотрібно виконати попереднє видалення усіх записів "
                                                            "в указаній таблиці")
                    btnOK = QtWidgets.QPushButton("&OK")
                    btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                    self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                    result = self.formMassWin.exec()
                    if result == 0:
                        self.formMassWin.close()
            else:
                pass
        else:
            pass

    def delRezultSrez(self) -> set:
        """Удаляет один результат среза из таблицы результатов испытаний"""
        i = self.tableRezultSrez.currentIndex().row()
        if i == None or i == -1:
            pass
        else:
            idRezultSrez = self.modelRezultSrez.item(i, 0).text()
            with UseDatebase(dbconfig) as curs:
                curs.execute("DELETE FROM srezi WHERE id = %(v0)s;", {'v0': idRezultSrez})
        self.refreshTableRezultSrez()

    def asktoSave(self) -> set:
        """Проверяет наличие изменений в срезных испытаниях"""
        if self.recOld:
            # Считывание данных и обновление списка согласно значений экранной формы
            val0 = self.recOld[0]  # ID объекта
            val1 = self.recOld[1]  # Архивный номер объекта
            val2 = self.recOld[2]  # Наименование объекта
            val3 = self.recOld[3]  # Стадия проектирования
            val4 = self.recOld[4]  # Вид выработки
            val5 = self.recOld[5]  # Номер выработки
            val6 = self.recOld[6]  # Номер образца
            val7 = self.recOld[7]  # Глубина отбора
            val8 = self.recOld[8]  # Абсолютная отметка отбора
            val9 = self.recOld[9]  # Лабораторный номер
            val10 = self.recOld[10]  # ID срезных испытаний
            val11 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole)  # ID образца
            val14 = self.comboBox_2.itemData(self.comboBox_2.currentIndex(),
                                             role=QtCore.Qt.UserRole)  # Идентификатор прибора
            val15 = self.comboBox_3.itemData(self.comboBox_3.currentIndex(),
                                             role=QtCore.Qt.UserRole)  # Идентификатор схемы испытаний
            val16 = self.comboBox_4.itemData(self.comboBox_4.currentIndex(),
                                             role=QtCore.Qt.UserRole)  # Идентификатор лаборанта
            val31 = self.doubleSpinBox.value()  # Вологість ґрунту, %
            val32 = self.doubleSpinBox_2.value()  # Вологість на границi текучостi, %
            val33 = self.doubleSpinBox_3.value()  # Вологість на границi розкочування, %
            val34 = self.doubleSpinBox_4.value()  # Щільність ґрунту, г/см3
            val35 = self.doubleSpinBox_5.value()  # Щiльнiсть часток ґрунту, г/см3
            val36 = dc.Decimal(self.label_15.text())  # Тангенс угла внутреннего трения
            val37 = dc.Decimal(self.label_14.text())  # Удельное сцепление, МПа
            val38 = self.recOld[22]             # Код группы (физсвойства) svgroup=1 для глин
            self.recNew = [val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, val10, val11,
                           val14, val15, val16, val31, val32, val33, val34, val35, val36, val37, val38]
            askSrez = (self.recNew == self.recOld)
            askTableSrez = self.asktoSaveTableSrez()
            askRezultSrez = self.asktoSaveRezultSrez()
            if askSrez == False or askRezultSrez == False:  # В характеристиках срезных испытаний и физических свойствах грунтов есть изменения
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                               "Одноплощинний зріз",
                                               "Є незбережені дані результатів іспитів одноплощинним зрізом. "
                                               "\nВи бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecord(False)
                else:
                    pass
            elif askTableSrez == False:  # В таблице характеристик срезных испытаний есть изменения
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                               "Одноплощинний зріз",
                                               "Є незбережені дані у таблиці результатів іспитів одноплощинним зрізом. "
                                               "\nВи бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecordTableSrez(False)
                else:
                    pass
            else:
                pass
        else:
            pass

    def asktoSaveTableSrez(self) -> set:
        """Проверка наличия изменений в таблице срезных испытаний"""
        # Считывание данных и обновление списка согласно значений экранной формы
        self.recAllNewSrez = []
        for i in range(0, self.recCountSrez):
            rec = []
            j = 0
            for j in range(0, 8):
                if j == 0:
                    el = str(self.modelSrez.item(i, j).data(role=QtCore.Qt.EditRole))  # Определение элемента текущей записи
                elif j == 1:
                    el = int(self.modelSrez.item(i, j).data(role=QtCore.Qt.EditRole))
                elif j == 2 or j == 3 or j == 4:
                    if self.modelSrez.item(i, j).data(role=QtCore.Qt.UserRole) == 'None' \
                            or self.modelSrez.item(i, j).data(role=QtCore.Qt.UserRole) is None:
                        el = None
                    else:
                        el = int(self.modelSrez.item(i, j).data(role=QtCore.Qt.UserRole))
                elif j == 5:
                    el = dc.Decimal(self.modelSrez.item(i, j).data(role=QtCore.Qt.UserRole))
                elif j == 6:
                    el = dc.Decimal(self.modelSrez.item(i, j).data(role=QtCore.Qt.EditRole))
                elif j == 7:
                    el = int(self.modelSrez.item(i, j).data(role=QtCore.Qt.UserRole))
                else:
                    pass
                if el == 'None':
                    el = None
                if j in range(0, 8):
                    rec.append(el)  # Формирование текущей записи из элементов
                else:
                    pass
            self.recAllNewSrez.append(rec)  # Формирование обновленного списка (записей-кортежей)
        if self.recAllNewSrez == self.recAllOldSrez:
            ask = True
        else:
            ask = False
        return ask

    def asktoSaveRezultSrez(self) -> set:
        """Проверка наличия изменений в таблице Результатов срезных испытаний"""
        # Считывание данных и обновление списка результатов срезных испытаний согласно значений экранной формы
        self.recAllNewRezultSrez = []
        for i in range(0, self.recCountRezultSrez):
            rec = []
            for j in range(0, 8):
                el = self.modelRezultSrez.item(i, j).data(QtCore.Qt.EditRole)  # Определение элемента текущей записи
                if j == 0 or j == 1:
                    el = int(el)
                else:
                    if el == '-':
                        el = None
                    else:
                        el = dc.Decimal(el)
                rec.append(el)  # Формирование текущей записи из элементов
            rec = tuple(rec)
            self.recAllNewRezultSrez.append(rec)  # Формирование обновленного списка (записей-кортежей)
        if self.recAllNewRezultSrez == self.recAllOldRezultSrez:
            ask = True
        else:
            ask = False
        return ask

    def saveAll(self) -> bool:
        """Сохраняет изменения по нажатию кнопки Сохранить на панели инструментов"""
        if self.currentIndex() == 0:
            self.saveRecord(False)
        if self.currentIndex() == 1:
            self.setCurrentIndex(0)
            self.setCurrentIndex(1)
        else:
            pass

    def saveRecord(self, ask) -> set:
        """Сохраняет изменения в записи и формирует новый курсор"""
        if ask == False:
            val10 = self.recOld[10]  # ID срезных испытаний
            val11 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole)  # ID образца
            val14 = self.comboBox_2.itemData(self.comboBox_2.currentIndex(),
                                             role=QtCore.Qt.UserRole)  # Идентификатор прибора
            val15 = self.comboBox_3.itemData(self.comboBox_3.currentIndex(),
                                             role=QtCore.Qt.UserRole)  # Идентификатор схемы испытаний
            val16 = self.comboBox_4.itemData(self.comboBox_4.currentIndex(),
                                             role=QtCore.Qt.UserRole)  # Идентификатор лаборанта
            if self.doubleSpinBox.value() == 0:
                val31 = None
            else:
                val31 = self.doubleSpinBox.value()  # Вологість ґрунту, %
            if self.doubleSpinBox_2.value() == 0:
                val32 = None
            else:
                val32 = self.doubleSpinBox_2.value()  # Вологість на границi текучостi, %
            if self.doubleSpinBox_3.value() == 0:
                val33 = None
            else:
                val33 = self.doubleSpinBox_3.value()  # Вологість на границi розкочування, %
            if self.doubleSpinBox_4.value() == 0:
                val34 = None
            else:
                val34 = self.doubleSpinBox_4.value()  # Щільність ґрунту, г/см3
            if self.doubleSpinBox_5.value() == 0:
                val35 = None
            else:
                val35 = self.doubleSpinBox_5.value()  # Щiльнiсть часток ґрунту, г/см3
            val36 = dc.Decimal(self.label_15.text())  # Тангенс угла внутреннего трения
            val37 = dc.Decimal(self.label_14.text())  # Удельное сцепление, МПа
            val38 = self.recOld[22]             # Код физсвойств (=1) для глин в этом запросе
            with UseDatebase(dbconfig) as curs:
                curs.execute("""UPDATE srez
                               SET id_obrazec = %(v11)s,
                                   id_pribor = %(v14)s,
                                   id_harakter = %(v15)s,
                                   id_labman = %(v16)s,
                                   tgfi = %(v36)s,
                                   sceplen = %(v37)s
                               WHERE id = %(v10)s;""",
                             {'v11': val11, 'v14': val14, 'v15': val15, 'v16': val16,
                              'v36': val36, 'v37': val37, 'v10': val10})
            if val38 == 1:
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE glina
                                   SET vlag = %(v31)s,
                                       vlagtek = %(v32)s,
                                       vlagrask = %(v33)s,
                                       plotn = %(v34)s,
                                       plotnchast = %(v35)s
                                   WHERE id_obrazec = %(v11)s;""",
                                 {'v31': val31, 'v32': val32, 'v33': val33,
                                  'v34': val34, 'v35': val35, 'v11': val11})
            else:
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE pesok
                                   SET vlag = %(v31)s,
                                       plotn = %(v34)s,
                                       plotnchast = %(v35)s
                                   WHERE id_obrazec = %(v11)s;""",
                                 {'v31': val31, 'v34': val34, 'v35': val35, 'v11': val11})
            self.requerySelect()
            self.saveRecordRezultSrez()
            self.refreshRecord()
            self.refreshGraph()
        else:
            pass

    def saveRecordRezultSrez(self) -> set:
        """Сохранение записей таблицы результатов срезных испытаний"""
        ask = self.asktoSaveRezultSrez()
        if ask == False:
            for i in range(0, self.recCountRezultSrez):
                recRezultSrez = self.recAllNewRezultSrez[i]
                val0 = int(recRezultSrez[0])  # Идентификатор среза при одной нагрузке
                val1 = int(recRezultSrez[1])  # Идентификатор срезных испытаний
                val2 = recRezultSrez[2]  # Нагрузка, МПа
                val3 = recRezultSrez[3]  # Влажность до среза, %
                val4 = recRezultSrez[4]  # Влажность после среза, %
                val5 = recRezultSrez[5]  # Кф пористости до среза, д.е.
                val6 = recRezultSrez[6]  # Кф пористости после среза, д.е.
                val7 = recRezultSrez[7]  # Сопротивление срезу, МПа
                if val3 == None:
                    pass
                else:
                    val3 = dc.Decimal(val3)
                if val4 == None:
                    pass
                else:
                    val4 = dc.Decimal(val4)
                if val5 == None:
                    pass
                else:
                    val5 = dc.Decimal(val5)
                if val6 == None:
                    pass
                else:
                    val6 = dc.Decimal(val6)
                if val7 == None:
                    pass
                else:
                    val7 = dc.Decimal(val7)
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE srezi  
                                    SET nagruzka = %(v2)s, 
                                        vlag_in = %(v3)s, 
                                        vlag_out = %(v4)s, 
                                        kf_por_in = %(v5)s, 
                                        kf_por_out = %(v6)s,
                                        sopr_srez = %(v7)s 
                                    WHERE id = %(v0)s;""",
                                 {'v2': val2, 'v3': val3, 'v4': val4, 'v5': val5, 'v6': val6, 'v7': val7, 'v0': val0})
        else:
            pass

    def saveRecordTableSrez(self, ask) -> set:
        """Сохранение записей таблицы характеристики срезов"""
        if ask == False:
            for i in range(0, self.recCountSrez):
                recTabSrez = self.recAllNewSrez[i]
                val10 = recTabSrez[1]   # ID среза
                val11 = recTabSrez[2]   # ID образца
                val12 = recTabSrez[3]   # ID прибора
                val13 = recTabSrez[4]   # ID характера среза (вида испытаний)
                val14 = recTabSrez[5]   # tg(fi)
                val15 = recTabSrez[6]   # Сцепление
                val16 = recTabSrez[7]   # ID лаборанта
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE srez
                                  SET id_obrazec = %(v11)s,
                                      id_pribor = %(v12)s,
                                      id_harakter = %(v13)s,
                                      tgfi = %(v14)s,
                                      sceplen = %(v15)s,
                                      id_labman = %(v16)s
                                  WHERE id = %(v10)s;""",
                                 {'v11': val11, 'v12': val12, 'v13': val13, 'v14': val14,
                                  'v15': val15, 'v16': val16, 'v10': val10})
            self.requerySelect()
            self.refreshRecord()
        else:
            pass


class CompresWindow(QtWidgets.QTabWidget, egclasswin.Ui_Compres_win):
    def __init__(self):
        """Инициализация окна Результатов компрессионных испытаний"""
        super().__init__()
        self.setupUi(self)
        global idActivObekt
        self.recAllOldCompres = []
        self.recCountCompres = 0
        # Подготовка инструментов для рисования
        self.penblack = QtGui.QPen(QtCore.Qt.black)
        self.penblackp = QtGui.QPen(QtCore.Qt.black, 1, QtCore.Qt.DotLine)
        self.brushr = QtGui.QBrush(QtCore.Qt.red)
        self.brushy = QtGui.QBrush(QtCore.Qt.yellow)
        self.brushly = QtGui.QBrush(QtGui.QColor(255, 255, 0, 30))  # Светло-желтый
        self.brushg = QtGui.QBrush(QtCore.Qt.green)
        self.brushb = QtGui.QBrush(QtCore.Qt.blue)
        self.brushw = QtGui.QBrush(QtCore.Qt.white)
        self.brushbl = QtGui.QBrush(QtCore.Qt.black)
        self.brushgr = QtGui.QBrush(QtCore.Qt.lightGray)
        self.brushgr.setColor(QtGui.QColor(245,245,245))
        self.penb = QtGui.QPen(self.brushb, 2)
        # Оформление сцены графиков
        self.scene = QtWidgets.QGraphicsScene(0, 0, 310, 310, self.graphicsView)
        self.graphicsView.setScene(self.scene)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT obrazec.id, 
                                obrazec.lab_num
                            FROM obekt,
                                burehole,
                                obrazec
                            WHERE obekt.id = %(v)s 
                                AND obekt.id = burehole.id_obekt 
                                AND burehole.id = obrazec.id_burehole
                                AND obrazec.mater_obr != 'Вода'
                            ORDER BY obrazec.lab_num""", {'v': idActivObekt})
            recAll = curs.fetchall()
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox.addItem(recOne[1])
                self.comboBox.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT id, 
                                name_pribor,
                                visota,
                                diametr,
                                plosch 
                            FROM pribor  
                            WHERE isput = 'Компресійний стиск'""")
            recAll = curs.fetchall()
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox_2.addItem(recOne[1])
                self.comboBox_2.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
                self.comboBox_2.setItemData(i, recOne[2], role=QtCore.Qt.UserRole + 1)
                self.comboBox_2.setItemData(i, recOne[3], role=QtCore.Qt.UserRole + 2)
                self.comboBox_2.setItemData(i, recOne[4], role=QtCore.Qt.UserRole + 3)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT id, metod, shema 
                            FROM harakter 
                            WHERE name_har = 'Модуль деформації'
                            ORDER BY shema""")
            recAll = curs.fetchall()
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox_3.addItem(recOne[2])
                self.comboBox_3.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT ispol.id, 
                                ispol.fio
                            FROM ispol
                            WHERE ispol.vidrab = 0 OR ispol.vidrab = 7 
                            ORDER BY ispol.fio""")
            recAll = curs.fetchall()
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox_4.addItem(recOne[1])
                self.comboBox_4.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
        self.compresId = 0  # ID свойств компрессионного испытания
        self.modelCompres = QtGui.QStandardItemModel(30, 10)  # Создание модели характеристики компрессионных испытаний
        self.selmodelCompres = QtCore.QItemSelectionModel(self.modelCompres)  # Создание модели выделения
        self.modelCompres.setRowCount(len(self.recAll))
        self.modelCompres.setHorizontalHeaderLabels(['Labnum',
                                                     'ID Compres',
                                                     'Лабораторний\nномер',
                                                     'Прилад',
                                                     'Схема випробувань',
                                                     'Коэффициент\nβ',
                                                     'Метод\nрозрахунків',
                                                     'Компресійний\nмодуль\nдеформації\nМПа',
                                                     'Модуль деформації\nз урахуванням\nкоефіцієнта Мк\nМПа',
                                                     'Лаборант'])
        self.tableCompres.setModel(self.modelCompres)  # Создание представления
        self.tableCompres.setSelectionModel(self.selmodelCompres)  # Установить модель выделения в представлении
        self.tableCompres.setColumnWidth(0, 10)  # Labnum
        self.tableCompres.setColumnWidth(1, 10)  # ID Compres
        self.tableCompres.setColumnWidth(2, 110)  # Лабораторний номер
        self.tableCompres.setColumnWidth(3, 80)  # Прилад
        self.tableCompres.setColumnWidth(4, 460)  # Схема випробувань
        self.tableCompres.setColumnWidth(5, 100)  # Коэффициент β
        self.tableCompres.setColumnWidth(6, 100)  # Метод розрахунків
        self.tableCompres.setColumnWidth(7, 130)  # Модуль деформації без урахування коефіцієнта Мк, МПа
        self.tableCompres.setColumnWidth(8, 140)  # Модуль деформації з урахуванням коефіцієнта Мк, МПа
        self.tableCompres.setColumnWidth(9, 140)  # Лаборант
        self.tableCompres.setColumnHidden(0, True)
        self.tableCompres.setColumnHidden(1, True)
        self.tableCompres.setEnabled(True)
        self.modelRezultCompres = QtGui.QStandardItemModel(10, 8)  # Создание модели результатов компрессионных испытаний
        self.selmodelRezultCompres = QtCore.QItemSelectionModel(self.modelRezultCompres)  # Создание модели выделения
        self.modelRezultCompres.setHorizontalHeaderLabels(['ID',
                                                           'ID Compres',
                                                           'Нормальний \nтиски \np МПа',
                                                           'Відносний \nстиск \nε д.о.',
                                                           'Коефіцієнт \nпористості \nе д.о.',
                                                           'Коефіцієнт \nстисливості \nmo МПа-1',
                                                           'Модуль \nдеформації \nЕ МПа',
                                                           'Модуль \nдеформації \nз урахуванням Mk \nЕmk МПа'])
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT *
                            FROM public.compresi 
                            WHERE compresi.id_compres = %(v2)s
                            ORDER BY compresi.id ASC""", {'v2': self.compresId})
            self.recAllRezultCompres = curs.fetchall()
        self.modelRezultCompres.setRowCount(len(self.recAllRezultCompres))
        self.tableRezultCompres.setModel(self.modelRezultCompres)  # Создание представления
        self.tableRezultCompres.setSelectionModel(self.selmodelRezultCompres)  # Установить модель выделения в представлении
        self.tableRezultCompres.setColumnWidth(0, 10)  # ID
        self.tableRezultCompres.setColumnWidth(1, 10)  # ID Compres
        self.tableRezultCompres.setColumnWidth(2, 122)  # Нормальний тиски МПа
        self.tableRezultCompres.setColumnWidth(3, 130)  # Відносний стиск ε д.о.
        self.tableRezultCompres.setColumnWidth(4, 130)  # Коефіцієнти пористості е д.о.
        self.tableRezultCompres.setColumnWidth(5, 130)  # Коефіцієнт стисливості mo МПа-1
        self.tableRezultCompres.setColumnWidth(6, 130)  # Модуль деформації Е, МПа
        self.tableRezultCompres.setColumnWidth(7, 130)  # Модуль деформації з урахуванням Мк Еmk, МПа
        self.tableRezultCompres.setColumnHidden(0, True)
        self.tableRezultCompres.setColumnHidden(1, True)
        self.requerySelect()  # Главный запрос для формирования экранной формы
        if not self.recAll:
            self.addRecord()
        else:
            self.recCount = len(self.recAll)
            self.recNum = 0
            self.recOld = self.recAll[self.recNum]
            self.compresId = self.recOld[10]  # ID свойств компрессионных испытаний
        # Назначение делегатов
        self.DelegateCompres1 = egdelegat.DoubleSpinBoxDelegate1()
        self.DelegateCompres2 = egdelegat.DoubleSpinBoxDelegate()
        self.DelegateCompres3 = egdelegat.DoubleSpinBoxDelegate53()
        self.DelegateCompres4 = egdelegat.DoubleSpinBoxDelegate_64()
        self.DelegateLabnumCompres = egdelegat.ComboBoxDelegateLabnumGran()
        self.DelegatePriborCompres = egdelegat.ComboBoxDelegatePriborCompres()
        self.DelegateShemaCompres = egdelegat.ComboBoxDelegateShemaCompres()
        self.DelegateLabman = egdelegat.ComboBoxDelegateLabman()
        self.tableCompres.setItemDelegateForColumn(2, self.DelegateLabnumCompres)
        self.tableCompres.setItemDelegateForColumn(3, self.DelegatePriborCompres)
        self.tableCompres.setItemDelegateForColumn(4, self.DelegateShemaCompres)
        self.tableCompres.setItemDelegateForColumn(5, self.DelegateCompres4)
        self.tableCompres.setItemDelegateForColumn(9, self.DelegateLabman)
        self.tableRezultCompres.setItemDelegateForColumn(2, self.DelegateCompres4)
        self.tableRezultCompres.setItemDelegateForColumn(3, self.DelegateCompres3)
        self.tableRezultCompres.setItemDelegateForColumn(4, self.DelegateCompres3)
        self.tableRezultCompres.setItemDelegateForColumn(5, self.DelegateCompres3)
        self.tableRezultCompres.setItemDelegateForColumn(6, self.DelegateCompres2)
        self.tableRezultCompres.setItemDelegateForColumn(7, self.DelegateCompres2)
        # Обновление формы и панели инструментов
        self.refreshToolbar()
        self.refreshRecord()
        # Назначение обработчиков сигналов
        self.currentChanged.connect(self.asktoSave)
        self.currentChanged.connect(self.setRow)
        self.comboBox.activated.connect(self.requeryFiz)
        self.comboBox_2.activated.connect(self.requeryPribor)
        self.radioButton_3.toggled.connect(self.refreshMetodRaschet)
        self.radioButton_4.toggled.connect(self.refreshMetodRaschet)
        self.radioButton.toggled.connect(self.refreshMetodMk)
        self.radioButton_2.toggled.connect(self.refreshMetodMk)
        self.toolButton_1.clicked.connect(self.addRezultCompres)
        self.toolButton_2.clicked.connect(self.delRezultCompres)
        self.toolButton_3.clicked.connect(self.setB)
        self.toolButton.clicked.connect(self.calcMoE)
        self.selmodelCompres.selectionChanged['QItemSelection', 'QItemSelection'].connect(self.currentRow)

    def requerySelect(self) -> list:
        """Обновление главного запроса для экранной формы"""
        global idActivObekt
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT burehole.id_obekt,
                                obekt.numdog,
                                obekt.archnum,
                                obekt.stadia,
                                burehole.vidhole,
                                burehole.num_hole,
                                obrazec.num_obrazec,
                                obrazec.glub_otbor,
                                burehole.koord_z - obrazec.glub_otbor AS abs_otm,
                                obrazec.lab_num,
                                compres.id,
                                compres.id_obrazec,
                                compres.id_pribor,
                                compres.id_harakter,
                                glina.vlag,
                                glina.vlagtek,
                                glina.vlagrask,
                                glina.plotn,
                                glina.plotnchast,
                                pribor.name_pribor,
                                harakter.shema,
                                compres.kf_b,
                                compres.metod_mod,
                                compres.mod_def,
                                compres.mod_def_mk,
                                compres.metod_mk,
                                pesok.vlag AS vlag_pesok,
                                pesok.plotn AS plotn_pesok,
                                pesok.plotnchast AS plotnchast_pesok,
                                glina.svgroup,
                                compres.id_labman,
                                vlabman.fio,
                                strate.vozrast
                            FROM obekt,
                                burehole,
                                obrazec,
                                strate,
                                compres LEFT JOIN glina ON compres.id_obrazec = glina.id_obrazec
                                        LEFT JOIN pesok ON compres.id_obrazec = pesok.id_obrazec
                                        LEFT JOIN vlabman ON compres.id_labman = vlabman.id
                                        LEFT JOIN pribor ON compres.id_pribor = pribor.id,
                                harakter
                            WHERE obekt.id = %(v0)s 
                            AND obekt.id = burehole.id_obekt 
                            AND burehole.id = obrazec.id_burehole 
							AND obrazec.id_burehole = strate.id_burehole
							AND numrange(strate.strate1, strate.strate2, '(]'::text) @> obrazec.glub_otbor
                            AND obrazec.id = compres.id_obrazec 
							AND compres.id_harakter = harakter.id
                            ORDER BY compres.id""", {'v0': idActivObekt})
            self.recAll = curs.fetchall()
            return self.recAll

    def requeryFiz(self) -> bool:
        """Обновление физ параметров при изменении образца"""
        ind = self.comboBox.currentIndex()
        idObr = self.comboBox.itemData(ind, role=QtCore.Qt.UserRole)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT vlag_glina,
                                vlagtek,
                                vlagrask,
                                plotn_glina,
                                plotnchast_glina,
                                vlag_pesok,
                                plotn_pesok,
                                plotnchast_pesok,
                                svgroup
                            FROM vfizall
                            WHERE id_obrazec = %(v)s""",
                         {'v': idObr})
            self.recFiz = curs.fetchone()
        if self.recFiz is None:
            self.doubleSpinBox.clear()
            self.doubleSpinBox_2.clear()
            self.doubleSpinBox_3.clear()
            self.doubleSpinBox_4.clear()
            self.doubleSpinBox_5.clear()
            self.label_9.setText("-")
            self.label_10.setText("-")
            self.label_11.setText("-")
            self.label_12.setText("-")
            retval = False
        else:
            if self.recFiz[8] == 1:
                if self.recFiz[0] == None:
                    self.doubleSpinBox.clear()
                else:
                    self.doubleSpinBox.setValue(self.recFiz[0])  # Вологість ґрунту, %
                if self.recFiz[1] == None:
                    self.doubleSpinBox_2.clear()
                else:
                    self.doubleSpinBox_2.setValue(self.recFiz[1])  # Вологість на границi текучостi, %
                if self.recFiz[2] == None:
                    self.doubleSpinBox_3.clear()
                else:
                    self.doubleSpinBox_3.setValue(self.recFiz[2])  # Вологість на границi розкочування, %
                if self.recFiz[3] == None:
                    self.doubleSpinBox_4.clear()
                else:
                    self.doubleSpinBox_4.setValue(self.recFiz[3])  # Щільність ґрунту, г/см3
                if self.recFiz[4] == None:
                    self.doubleSpinBox_5.clear()
                else:
                    self.doubleSpinBox_5.setValue(self.recFiz[4])  # Щiльнiсть часток ґрунту, г/см3
                # Подготовка и отображение расчетных показателей
                self.ip = plastich(self.recFiz[1], self.recFiz[2])
                if self.ip != None:
                    self.label_9.setText(str(self.ip))  # Число пластичностi, %
                else:
                    self.label_9.setText("-")
                self.il = konsist(self.recFiz[0], self.recFiz[1], self.recFiz[2])
                if self.il != None:
                    self.label_10.setText(str(self.il))  # Показник текучостi, д.о.
                else:
                    self.label_10.setText("-")
                self.pd = plotsk(self.recFiz[0], self.recFiz[3])
                if self.pd != None:
                    self.label_11.setText(str(self.pd))  # Щiльнiсть сухого грунту (скелета), г/см3
                else:
                    self.label_11.setText("-")
                self.e = kfPorw(self.recFiz[0], self.recFiz[3], self.recFiz[4])
                if self.e != None:
                    self.label_12.setText(str(self.e))  # Кф пористости
                else:
                    self.label_12.setText("-")
                self.kfSr = kfVodonas(self.recFiz[0], self.recFiz[3], self.recFiz[4])  # Кф водонасыщения
                if self.kfSr != None:
                    self.label_34.setText(str(self.kfSr))  # Кф водонасыщения
                else:
                    self.label_34.setText("-")
            else:
                if self.recFiz[5] == None:
                    self.doubleSpinBox.clear()
                else:
                    self.doubleSpinBox.setValue(self.recFiz[5])  # Вологість ґрунту, %
                self.doubleSpinBox_2.clear()
                self.doubleSpinBox_3.clear()
                if self.recFiz[6] == None:
                    self.doubleSpinBox_4.clear()
                else:
                    self.doubleSpinBox_4.setValue(self.recFiz[6])  # Щільність ґрунту, г/см3
                if self.recFiz[7] == None:
                    self.doubleSpinBox_5.clear()
                else:
                    self.doubleSpinBox_5.setValue(self.recFiz[7])  # Щiльнiсть часток ґрунту, г/см3
                # Подготовка и отображение расчетных показателей
                self.label_9.setText("-")
                self.label_10.setText("-")
                self.pd = plotsk(self.recFiz[5], self.recFiz[6])
                if self.pd != None:
                    self.label_11.setText(str(self.pd))  # Щiльнiсть сухого грунту (скелета), г/см3
                else:
                    self.label_11.setText("-")
                self.e = kfPorw(self.recFiz[5], self.recFiz[6], self.recFiz[7])
                if self.e != None:
                    self.label_12.setText(str(self.e))  # Кф пористости
                else:
                    self.label_12.setText("-")
                self.kfSr = kfVodonas(self.recFiz[0], self.recFiz[3], self.recFiz[4])  # Кф водонасыщения
                if self.kfSr != None:
                    self.label_34.setText(str(self.kfSr))  # Кф водонасыщения
                else:
                    self.label_34.setText("-")
            retval = True
        return retval

    def requeryPribor(self) -> set:
        """Обновление свойств прибора"""
        visota = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), QtCore.Qt.UserRole + 1)
        self.label_16.setText(str(visota))  # Висота зразка, мм
        diametr = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), QtCore.Qt.UserRole + 2)
        self.label_29.setText(str(diametr))  # Діаметр зразка, мм

    def refreshRecord(self) -> set:
        """Обновляет экранную форму с отображаемой записью"""
        # Передача значений из списка в экранную форму
        self.recOld = self.recAll[self.recNum]
        if self.recOld:
            self.label.setText("Ідентіфікатор об'єкта - " + str(self.recOld[0]) + "\n" +
                               "Номер договору - " + self.recOld[1] + "\n" +
                               "Архівний номер звіту - " + self.recOld[2] + "\n" +
                               self.recOld[4] + " №" + self.recOld[5] + "\n" +
                               "Зразок №" + str(self.recOld[6]) + "\n" +
                               "Глибина відбору - " + str(self.recOld[7]))  # ID объекта, номер договора,
                                                                            # архивный номер, вид и № выработки,
                                                                            # № образца, глубина отбора
            self.obID = self.recOld[0]  # ID объекта
            self.numdog = self.recOld[1]  # Номер договора
            self.archnum = self.recOld[2]  # Архивный номер объекта
            self.stadia = self.recOld[3]  # Стадия проектирования
            self.vidhole = self.recOld[4]  # Вид выработки
            self.numhole = self.recOld[5]  # Номер выработки
            self.numobrazec = self.recOld[6]  # Номер образца
            self.glubotbor = self.recOld[7]  # Глубина отбора
            self.absotm = self.recOld[8]  # Абсолютная отметка отбора
            self.labnum = self.recOld[9]  # Лабораторный номер
            self.compresId = self.recOld[10]  # ID компрессионных испытаний
            self.comboBox.setCurrentIndex(
                self.comboBox.findData(self.recOld[11], role=QtCore.Qt.UserRole))  # ID образца
            self.comboBox_2.setCurrentIndex(
                self.comboBox_2.findData(self.recOld[12], role=QtCore.Qt.UserRole))  # Прилад
            visota = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), QtCore.Qt.UserRole + 1)
            self.label_16.setText(str(visota))  # Висота зразка, мм
            diametr = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), QtCore.Qt.UserRole + 2)
            self.label_29.setText(str(diametr))  # Діаметр зразка, мм
            self.comboBox_3.setCurrentIndex(
                self.comboBox_3.findData(self.recOld[13], role=QtCore.Qt.UserRole))  # Схема випробувань
            self.comboBox_4.setCurrentIndex(
                self.comboBox_4.findData(self.recOld[30], role=QtCore.Qt.UserRole))  # ID лаборанта
            self.vozrast = self.recOld[32]  # Стратиграфо-генетический индекс
            if self.recOld[29] == 1:    # Для глин
                if self.recOld[14] == None:
                    self.doubleSpinBox.setValue(self.doubleSpinBox.minimum())
                else:
                    self.doubleSpinBox.setValue(self.recOld[14])  # Вологість ґрунту глини, %
                if self.recOld[15] == None:
                    self.doubleSpinBox_2.setValue(self.doubleSpinBox_2.minimum())
                else:
                    self.doubleSpinBox_2.setValue(self.recOld[15])  # Вологість на границi текучостi, %
                if self.recOld[16] == None:
                    self.doubleSpinBox_3.setValue(self.doubleSpinBox_3.minimum())
                else:
                    self.doubleSpinBox_3.setValue(self.recOld[16])  # Вологість на границi розкочування, %
                self.plotn = self.recOld[17]  # Щільність ґрунту глини, г/см3
                if self.recOld[17] == None:
                    self.doubleSpinBox_4.setValue(self.doubleSpinBox_4.minimum())
                else:
                    self.doubleSpinBox_4.setValue(self.recOld[17])  # Щільність ґрунту глини, г/см3
                if self.recOld[18] == None:
                    self.doubleSpinBox_5.setValue(self.doubleSpinBox_5.minimum())
                else:
                    self.doubleSpinBox_5.setValue(self.recOld[18])  # Щiльнiсть часток ґрунту глини, г/см3
            else:   # Для песка
                if self.recOld[26] == None:
                    self.doubleSpinBox.setValue(self.doubleSpinBox.minimum())
                else:
                    self.doubleSpinBox.setValue(self.recOld[26])  # Вологість ґрунту піску, %
                if self.recOld[15] == None:
                    self.doubleSpinBox_2.setValue(self.doubleSpinBox_2.minimum())
                else:
                    self.doubleSpinBox_2.setValue(self.recOld[15])  # Вологість на границi текучостi, %
                if self.recOld[16] == None:
                    self.doubleSpinBox_3.setValue(self.doubleSpinBox_3.minimum())
                else:
                    self.doubleSpinBox_3.setValue(self.recOld[16])  # Вологість на границi розкочування, %
                self.plotn = self.recOld[27]  # Щільність ґрунту піску, г/см3
                if self.recOld[27] == None:
                    self.doubleSpinBox_4.setValue(self.doubleSpinBox_4.minimum())
                else:
                    self.doubleSpinBox_4.setValue(self.recOld[27])  # Щільність ґрунту піску, г/см3
                if self.recOld[28] == None:
                    self.doubleSpinBox_5.setValue(self.doubleSpinBox_5.minimum())
                else:
                    self.doubleSpinBox_5.setValue(self.recOld[28])  # Щiльнiсть часток ґрунту піску, г/см3
            # Подготовка и отображение расчетных показателей
            self.ip = plastich(self.recOld[15], self.recOld[16])
            if self.ip != None:
                self.label_9.setText(str(self.ip))  # Число пластичностi, %
            else:
                self.label_9.setText("-")
            self.il = konsist(self.recOld[14], self.recOld[15], self.recOld[16])
            if self.il != None:
                self.label_10.setText(str(self.il))  # Показник текучостi, д.о.
            else:
                self.label_10.setText("-")
            if self.recOld[29] == 1:
                self.pd = plotsk(self.recOld[14], self.recOld[17])
                if self.pd != None:
                    self.label_11.setText(str(self.pd))  # Щiльнiсть сухого грунту (скелета), г/см3
                else:
                    self.label_11.setText("-")
                self.e = kfPorw(self.recOld[14], self.recOld[17], self.recOld[18])
                if self.e != None:
                    self.label_12.setText(str(self.e))  # Кф пористости
                else:
                    self.label_12.setText("-")
                self.kfSr = kfVodonas(self.recOld[14], self.recOld[17], self.recOld[18])  # Коэффициент водонасыщения
                if self.kfSr != None:
                    self.label_34.setText(str(self.kfSr))  # Кф водонасыщения
                else:
                    self.label_34.setText("-")
            else:
                self.pd = plotsk(self.recOld[26], self.recOld[27])
                if self.pd != None:
                    self.label_11.setText(str(self.pd))  # Щiльнiсть сухого грунту (скелета), г/см3
                else:
                    self.label_11.setText("-")
                self.e = kfPorw(self.recOld[26], self.recOld[27], self.recOld[28])
                if self.e != None:
                    self.label_12.setText(str(self.e))  # Кф пористости
                else:
                    self.label_12.setText("-")
                self.kfSr = kfVodonas(self.recOld[26], self.recOld[27], self.recOld[28])  # Коэффициент водонасыщения
                if self.kfSr != None:
                    self.label_34.setText(str(self.kfSr))  # Кф водонасыщения
                else:
                    self.label_34.setText("-")
            if self.recOld[21] == None:
                self.spinBox_3.minimum()
            else:
                self.spinBox_3.setValue(self.recOld[21])  # Коэффициент β
            self.metodRasch = self.recOld[22]  # Метод расчета модуля деформации
            if self.metodRasch == 1:
                self.radioButton_3.setChecked(True)
                self.radioButton_4.setChecked(False)
            else:
                self.radioButton_3.setChecked(False)
                self.radioButton_4.setChecked(True)
            self.modDef = self.recOld[23]  # Модуль деформации без учета Кф Мк
            self.modDefMk = self.recOld[24]  # Модуль деформации с учетом Кф Мк
            self.label_13.setText(str(self.recOld[23]))     # Модуль деформации без учета Кф Мк, МПа
            if self.modDefMk is None:
                self.label_14.setText('-')
            else:
                self.label_14.setText(str(self.recOld[24]))     # Модуль деформации с учетом Кф Мк, МПа
            self.metodMk = self.recOld[25]     # Метод расчета Коэффициента Мк
            if self.metodMk == 1:
                self.radioButton.setChecked(True)
                self.radioButton_2.setChecked(False)
            else:
                self.radioButton.setChecked(False)
                self.radioButton_2.setChecked(True)
            self.kfMk = self.setMk(self.metodMk)
            if self.kfMk is None:
                self.label_15.setText("-")  # Коэффициент Мк
            else:
                self.label_15.setText(str(round(dc.Decimal(self.kfMk), 2)))   # Коэффициент Мк
            if self.recOld[29] == 1:
                namegrunt = nameglina(self.e, self.ip, self.il)
            else:
                namegrunt = "Пісок"
            self.label_18.setText(namegrunt)  # Наименование грунта
            self.recOldCompres = self.readCompres() # Считывание данных текущей записи при открытии
        else:
            pass
        self.refreshTableCompres()
        self.refreshTableRezultCompres()
        self.refreshGraph()

    def refreshMetodRaschet(self) -> set:
        """Обновление таблицы результатов испытаний
        в зависимости от метода расчета"""
        i = 0
        if self.radioButton_3.isChecked() == True:
            self.metodRasch = 1
            for i in range(0, self.recCountRezultCompres):
                self.modelRezultCompres.item(i, 3).setEnabled(True)
                self.modelRezultCompres.item(i, 4).setEnabled(False)
                self.modelRezultCompres.item(i, 5).setEnabled(False)
                self.modelRezultCompres.item(i, 6).setEnabled(False)
                self.modelRezultCompres.item(i, 7).setEnabled(False)
                self.modelRezultCompres.item(i, 3).setBackground(self.brushw)
                self.modelRezultCompres.item(i, 4).setBackground(self.brushgr)
                self.modelRezultCompres.item(i, 5).setBackground(self.brushgr)
                self.modelRezultCompres.item(i, 6).setBackground(self.brushgr)
                self.modelRezultCompres.item(i, 7).setBackground(self.brushgr)
                self.modelRezultCompres.item(i, 3).setForeground(self.brushbl)
                self.modelRezultCompres.item(i, 4).setForeground(self.brushbl)
                self.modelRezultCompres.item(i, 5).setForeground(self.brushbl)
                self.modelRezultCompres.item(i, 6).setForeground(self.brushbl)
                self.modelRezultCompres.item(i, 7).setForeground(self.brushbl)
        else:
            self.metodRasch = 2
            for i in range(0, self.recCountRezultCompres):
                self.modelRezultCompres.item(i, 3).setEnabled(False)
                self.modelRezultCompres.item(i, 4).setEnabled(True)
                self.modelRezultCompres.item(i, 5).setEnabled(False)
                self.modelRezultCompres.item(i, 6).setEnabled(False)
                self.modelRezultCompres.item(i, 7).setEnabled(False)
                self.modelRezultCompres.item(i, 3).setBackground(self.brushgr)
                self.modelRezultCompres.item(i, 4).setBackground(self.brushw)
                self.modelRezultCompres.item(i, 5).setBackground(self.brushgr)
                self.modelRezultCompres.item(i, 6).setBackground(self.brushgr)
                self.modelRezultCompres.item(i, 7).setBackground(self.brushgr)
                self.modelRezultCompres.item(i, 3).setForeground(self.brushbl)
                self.modelRezultCompres.item(i, 4).setForeground(self.brushbl)
                self.modelRezultCompres.item(i, 5).setForeground(self.brushbl)
                self.modelRezultCompres.item(i, 6).setForeground(self.brushbl)
                self.modelRezultCompres.item(i, 7).setForeground(self.brushbl)

    def refreshMetodMk(self) -> int:
        """Обновление метода расчета коэффициента Мк"""
        if self.radioButton.isChecked() == True:
            metodMk = 1
        else:
            metodMk = 2
        nMk = self.setMk(metodMk)
        if nMk is not None:
            self.label_15.setText(str(round(dc.Decimal(nMk), 2)))
            nMod = float(self.label_13.text())
            self.label_14.setText(str(round(dc.Decimal(nMk * nMod), 2)))
        else:
            self.label_15.setText("-")
            self.label_14.setText(str('-'))
        return metodMk

    def refreshGraph(self) -> set:
        """Обновление графика-диаграммы"""
        self.schet = False
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT MIN(nagruzka),
                                    MAX(nagruzka),
                                    MIN(otn_sjat),
                                    MAX(otn_sjat)
                            FROM public.compresi 
                            GROUP BY id_compres
                            HAVING id_compres = %(v2)s""",
                         {'v2': self.compresId})
            self.recGroupRezultCompres = curs.fetchone()  # Исходный список минимальных и максимальных нагрузок компрессионных испытаний выбранного образца
        if self.recGroupRezultCompres != None:
            self.minx = self.recGroupRezultCompres[0]
            self.maxx = self.recGroupRezultCompres[1]
            self.miny = self.recGroupRezultCompres[2]
            self.maxy = self.recGroupRezultCompres[3]
            if self.minx > dc.Decimal('0.00') and self.miny > dc.Decimal('0.00'):
                self.shag = dc.Decimal('0.1')    # Шаг нагрузок по сетке
                self.schet = True
                xcount = int(self.maxx / self.shag)  # Количество значений для подписи осей
                self.scene.clear()
                self.scene.addRect(40, 30, 260, 260, self.penblack, self.brushly)     # Область построения графика
                ix = int(round(250 / xcount / 2, 0))    # Шаг сетки по х
                for ix in range(40, 300, ix):
                    self.scene.addLine(ix, 30, ix, 290, self.penblackp)  # Вертикальная сетка
                    self.scene.addLine(ix, 25, ix, 30, self.penblack)  # Вертикальные штрихи
                i = int(250 / xcount)  # Шаг сетки для подписи оси x
                for j in range(0, xcount + 2):
                    xtext = QtWidgets.QGraphicsSimpleTextItem(str(round(0.1 * j, 1)))
                    self.scene.addItem(xtext)
                    xtext.setPos(32 + i * j, 8)
                iy = int(260 / 10)  # Шаг сетки по y
                for iy in range(30, 300, iy):
                    self.scene.addLine(40, iy, 300, iy, self.penblackp)  # Горизонтальная сетка
                    self.scene.addLine(35, iy, 40, iy, self.penblack)  # Горизонтальные штрихи
                j = 0
                i = int(260 / 10)   # Шаг сетки для подписей оси y
                ycount = 10         # Количество значений для подписи оси y
                if self.maxy < dc.Decimal('0.1'):      # Определение шага значений относительного сжатия по шкале y
                    shagy = dc.Decimal('0.01')
                elif self.maxy < dc.Decimal('0.2'):
                    shagy = dc.Decimal('0.02')
                else:
                    shagy = dc.Decimal('0.05')
                for j in range(0, ycount + 1):
                    ytext = QtWidgets.QGraphicsSimpleTextItem(str(round(shagy * j, 2)))
                    self.scene.addItem(ytext)
                    ytext.setPos(5, 22 + i * j)
                xname = QtWidgets.QGraphicsSimpleTextItem("p МПа")
                yname = QtWidgets.QGraphicsSimpleTextItem("ε д.о.")
                self.scene.addItem(xname)
                xname.setPos(8 + i * j, -5)
                self.scene.addItem(yname)
                yname.setPos(0, 295)
                j = 0
                listnagruzka = [dc.Decimal('0.0000')]
                listotnsjat = [dc.Decimal('0.000')]
                for j in range(0, self.recCountRezultCompres):  # Подготовка к построению точек и графика
                    self.recOldRezultCompres = self.recAllRezultCompres[j][0:8]
                    listrow = list(self.recOldRezultCompres)  # Список одной строки
                    listnagruzka.append(listrow[2])
                    listotnsjat.append(listrow[3])
                i = 0
                for i in range(0, self.recCountRezultCompres):      # Проверка для построения графика
                    if listnagruzka[i + 1] is None or listotnsjat[i + 1] is None:
                        self.schet = False
                    else:
                        self.schet = True
                i = 0
                for i in range(0, self.recCountRezultCompres):      # Проверка для построения точек
                    if listnagruzka[i + 1] is None or listotnsjat[i + 1] is None:
                        self.schet = False
                    else:
                        self.schet = True
                if self.schet == False:
                    self.scene.clear()
                else:
                    i = 0
                    for i in range(0, self.recCountRezultCompres):  # Построение графика с природной влажностью
                        x1 = 40 + int(round((ix - 40) / self.maxx * listnagruzka[i], 0))
                        x2 = 40 + int(round((ix - 40) / self.maxx * listnagruzka[i + 1], 0))
                        y1 = 30 + int(round(260 / dc.Decimal(shagy * 10) * listotnsjat[i], 0))
                        y2 = 30 + int(round(260 / dc.Decimal(shagy * 10) * listotnsjat[i + 1], 0))
                        self.scene.addLine(x1, y1, x2, y2, self.penb)
                    i = 0
                    for i in range(0, self.recCountRezultCompres):  # Построение точек с природной влажностью
                        x2 = 40 + int(round((ix - 40) / self.maxx * listnagruzka[i + 1], 0))
                        x2 = 40 + int((ix - 40) / self.maxx * listnagruzka[i + 1])
                        y2 = 30 + int(round(260 / dc.Decimal(shagy * 10) * listotnsjat[i + 1], 0))
                        self.scene.addEllipse(x2 - 4, y2 - 4, 8, 8, self.penblack, self.brushr)
            else:
                self.schet = False
                self.scene.clear()
        else:
            self.scene.clear()
        if self.schet == False:
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Critical,
                                           "Випробування методом компресійного стиску",
                                           "У таблиці результатів випробувань одне або кілька значень "
                                           "нормального тиску (σ) або відносного стиску (ε) "
                                           "або коефіцієнта пористості (e) не визначені "
                                           "або мають значення 0.00. \nРозрахунок провести немає можливості. "
                                           "Необхідно внести в таблицю виправлення.")
            btnOK = QtWidgets.QPushButton("&OK")
            btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
            result = self.formMassWin.exec()

    def refreshTableCompres(self) -> set:
        """Обновление таблицы характеристики компрессионных испытаний"""
        self.recCountCompres = len(self.recAll)
        if self.recCountCompres > 0:
            self.tableCompres.setEnabled(True)
            self.modelCompres.removeRows(0, self.modelCompres.rowCount())
            for i in range(0, self.recCountCompres):  # Занесение данных в ячейки таблицы
                listrow = list(self.recAll[i][9:32])    # Список одной строки
                item9 = QtGui.QStandardItem(str(listrow[0]))  # Лабораторный номер
                item10 = QtGui.QStandardItem(str(listrow[1]))  # ID компрессии
                item11 = QtGui.QStandardItem(str(listrow[0]))
                QtGui.QStandardItem.setData(item11, str(listrow[2]), role=QtCore.Qt.UserRole)  # ID образца
                item14 = QtGui.QStandardItem(str(listrow[10]))  # Прибор
                item14.setData(listrow[3], role=QtCore.Qt.UserRole)  # Идентификатор прибора
                item15 = QtGui.QStandardItem(str(listrow[11]))  # Схема испытаний
                item15.setData(listrow[4], role=QtCore.Qt.UserRole)  # ID схемы испытаний
                item16 = QtGui.QStandardItem(str(listrow[12]))  # Коэфициент В
                item17 = QtGui.QStandardItem(str(listrow[13]))  # Метод расчетов
                item18 = QtGui.QStandardItem(str(listrow[14]))  # Модуль деформации без учета Кф Мк, МПа
                item19 = QtGui.QStandardItem(str(listrow[15]))  # Модуль деформации с учетом Кф Мк, МПа
                item20 = QtGui.QStandardItem(str(listrow[22]))  # Лаборант
                item20.setData(str(listrow[21]), role=QtCore.Qt.UserRole)  # ID лаборанта
                item11.setTextAlignment(QtCore.Qt.AlignCenter)
                item14.setTextAlignment(QtCore.Qt.AlignCenter)
                item15.setTextAlignment(QtCore.Qt.AlignCenter)
                item16.setTextAlignment(QtCore.Qt.AlignCenter)
                item17.setTextAlignment(QtCore.Qt.AlignCenter)
                item18.setTextAlignment(QtCore.Qt.AlignCenter)
                item19.setTextAlignment(QtCore.Qt.AlignCenter)
                item20.setTextAlignment(QtCore.Qt.AlignCenter)
                item17.setEnabled(False)
                item18.setEnabled(False)
                item19.setEnabled(False)
                item17.setForeground(self.brushbl)
                item18.setForeground(self.brushbl)
                item19.setForeground(self.brushbl)
                item17.setBackground(self.brushgr)
                item18.setBackground(self.brushgr)
                item19.setBackground(self.brushgr)
                if item19.text() == 'None':
                    item19.setText('-')
                self.modelCompres.appendRow([item9, item10, item11, item14,
                                             item15, item16, item17, item18, item19, item20])
            # Формирование исходного списка компрессионных испытаний
            self.recAllOldCompres = self.readTabCompres()
        else:
            self.tableCompres.setEnabled(False)
            self.toolButton_2.setEnabled(False)
            self.modelCompres.removeRows(0, self.modelCompres.rowCount())
        self.tableCompres.selectRow(self.recNum)

    def refreshTableRezultCompres(self) -> set:
        """Обновление таблицы Результатов компрессионных испытаний"""
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT *
                            FROM public.compresi 
                            WHERE compresi.id_compres = %(v2)s
                            ORDER BY compresi.id ASC""", {'v2': self.compresId})
            self.recAllRezultCompres = curs.fetchall()  # Полный исходный список результатов компрессионных испытаний выбранного образца
        self.recCountRezultCompres = len(self.recAllRezultCompres)
        self.recAllOldRezultCompres = []
        if self.recCountRezultCompres > 0:
            self.modelRezultCompres.setRowCount(self.recCountRezultCompres)
            self.tableRezultCompres.setEnabled(True)
            self.toolButton_2.setEnabled(True)
            self.toolButton.setEnabled(True)
            self.modelRezultCompres.removeRows(0, self.modelRezultCompres.rowCount())
            for i in range(0, self.recCountRezultCompres):  # Занесение данных в ячейки таблицы
                self.recOldRezultCompres = self.recAllRezultCompres[i][0:8]
                listrow = list(self.recOldRezultCompres)  # Список одной строки
                rowitem = []
                for j in range(0, 8):
                    if listrow[j] is None:
                        item = QtGui.QStandardItem('-')
                    else:
                        item = QtGui.QStandardItem(str(listrow[j]))
                    item.setTextAlignment(QtCore.Qt.AlignCenter)
                    rowitem.append(item)
                self.modelRezultCompres.appendRow(rowitem)
            # Формирование исходного списка результатов компрессии по текущему образцу
            self.recAllOldRezultCompres = self.readTabRezultCompres()
        else:
            self.tableRezultCompres.setEnabled(False)
            self.toolButton_2.setEnabled(False)
            self.toolButton.setEnabled(False)
            self.modelRezultCompres.removeRows(0, self.modelRezultCompres.rowCount())
        self.refreshMetodRaschet()

    def refreshToolbar(self) -> set:
        """Обновляет панель инструментов"""
        if self.recNum == 0 and self.recCount > 1:
            form.action_8.setEnabled(False)  # Первая запись
            form.action_9.setEnabled(False)  # Предыдущая запись
            form.action_10.setEnabled(True)  # Следующая запись
            form.action_11.setEnabled(True)  # Последняя запись
        elif self.recNum in range(1, self.recCount - 1):
            form.action_8.setEnabled(True)  # Первая запись
            form.action_9.setEnabled(True)  # Последняя запись
            form.action_10.setEnabled(True)  # Следующая запись
            form.action_11.setEnabled(True)  # Последняя запись
        elif self.recNum == self.recCount - 1 and self.recCount > 1:
            form.action_8.setEnabled(True)  # Первая запись
            form.action_9.setEnabled(True)  # Предыдущая запись
            form.action_10.setEnabled(False)  # Следующая запись
            form.action_11.setEnabled(False)  # Последняя запись
        else:
            form.action_8.setEnabled(False)  # Первая запись
            form.action_9.setEnabled(False)  # Предыдущая запись
            form.action_10.setEnabled(False)  # Следующая запись
            form.action_11.setEnabled(False)  # Последняя запись

    def readCompres(self) -> list:
        """Считывание данных и формирование списка компрессионных испытаний согласно значений экранной формы"""
        val0 = self.recOld[0]  # ID объекта
        val1 = self.recOld[1]  # Архивный номер объекта
        val2 = self.recOld[2]  # Наименование объекта
        val3 = self.recOld[3]  # Стадия проектирования
        val4 = self.recOld[4]  # Вид выработки
        val5 = self.recOld[5]  # Номер выработки
        val6 = self.recOld[6]  # Номер образца
        val7 = self.recOld[7]  # Глубина отбора
        val8 = self.recOld[8]  # Абсолютная отметка отбора
        val9 = self.recOld[9]  # Лабораторный номер
        val10 = self.recOld[10]  # ID компрессионных испытаний
        val11 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole)  # ID образца
        val14 = self.comboBox_2.itemData(self.comboBox_2.currentIndex(),
                                         role=QtCore.Qt.UserRole)  # Идентификатор прибора
        val15 = self.comboBox_3.itemData(self.comboBox_3.currentIndex(),
                                         role=QtCore.Qt.UserRole)  # Идентификатор схемы испытаний
        if self.doubleSpinBox.value() == self.doubleSpinBox.minimum():
            val16 = None
        else:
            val16 = self.doubleSpinBox.value()  # Вологість ґрунту, %
        if self.doubleSpinBox_2.value() == self.doubleSpinBox_2.minimum():
            val17 = None
        else:
            val17 = self.doubleSpinBox_2.value()  # Вологість на границi текучостi, %
        if self.doubleSpinBox_3.value() == self.doubleSpinBox_3.minimum():
            val18 = None
        else:
            val18 = self.doubleSpinBox_3.value()  # Вологість на границi розкочування, %
        if self.doubleSpinBox_4.value() == self.doubleSpinBox_4.minimum():
            val19 = None
        else:
            val19 = self.doubleSpinBox_4.value()  # Щільність ґрунту, г/см3
        if self.doubleSpinBox_5.value() == self.doubleSpinBox_5.minimum():
            val20 = None
        else:
            val20 = self.doubleSpinBox_5.value()  # Щiльнiсть часток ґрунту, г/см3
        val23 = self.spinBox_3.value()  # Коэффициент β
        val24 = self.metodRasch  # Метод расчета модуля деформации
        val25 = dc.Decimal(self.label_13.text())  # Модуль деформации без учета Кф Мк, МПа
        if self.label_14.text() == '-':
            val26 = None
        else:
            val26 = dc.Decimal(self.label_14.text())  # Модуль деформации с учетом Кф Мк, МПа
        if self.radioButton.isChecked() == True:
            val27 = 1
        else:
            val27 = 2
        val28 = self.recOld[29]  # Код группы физсвойств = 1 для глин
        val29 = self.comboBox_4.itemData(self.comboBox_4.currentIndex(),
                                         role=QtCore.Qt.UserRole)  # ID лаборанта
        val30 = self.recOld[32] # Стратиграфо-генетический индекс
        recCompress = [val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, val10, val11,
                       val14, val15, val16, val17, val18, val19, val20, val23, val24,
                       val25, val26, val27, val28, val29, val30]
        return recCompress

    def readTabCompres(self) -> list:
        """Считывание данных и обновление списка согласно значений таблицы экранной формы"""
        recAllTabCompres = []
        for i in range(0, self.recCountCompres):
            rec = []
            j = 0
            for j in range(0, 10):
                if j == 0:
                    el = str(
                        self.modelCompres.item(i, j).data(QtCore.Qt.EditRole))  # ID Лабораторный номер
                elif j == 1 or j == 6:
                    el = int(self.modelCompres.item(i, j).data(QtCore.Qt.EditRole))
                elif j == 2 or j == 3 or j == 4 or j == 9:
                    if self.modelCompres.item(i, j).data(role=QtCore.Qt.UserRole) == 'None' \
                            or self.modelCompres.item(i, j).data(role=QtCore.Qt.UserRole) == '-':
                        el = None
                    else:
                        el = int(self.modelCompres.item(i, j).data(QtCore.Qt.UserRole))
                elif j == 5 or j == 7 or j == 8:
                    if self.modelCompres.item(i, j).text() == '-' or self.modelCompres.item(i, j).text() == 'None':
                        el = None
                    else:
                        el = dc.Decimal(self.modelCompres.item(i, j).data(QtCore.Qt.EditRole))
                else:
                    pass
                rec.append(el)  # Формирование текущей записи из элементов
            recAllTabCompres.append(rec)  # Формирование обновленного списка (записей-кортежей)
        return recAllTabCompres

    def readTabRezultCompres(self) -> list:
        """Считывание данных с таблицы результатов компрессионных испытаний
        и формирование списка по текущему образцу"""
        tabRezultCompress = []
        for i in range(0, self.recCountRezultCompres):
            rowRezultCompres = []
            for j in range(0, 8):  # Считывание строки таблицы
                if j == 0 or j == 1:
                    it = int(self.modelRezultCompres.item(i, j).text())
                else:
                    if self.modelRezultCompres.item(i, j).text() == '-':
                        it = None
                    else:
                        it = float(self.modelRezultCompres.item(i, j).text())
                rowRezultCompres.append(it)
            tabRezultCompress.append(rowRezultCompres)
        return tabRezultCompress

    def setRow(self) -> set:
        if self.currentIndex() == 0:
            self.refreshToolbar()
            self.refreshRecord()
        elif self.currentIndex() == 1:
            self.tableCompres.selectRow(self.recNum)
        else:
            self.refreshRecord()

    def currentRow(self) -> set:
        """Определение номера записи (строки)  и установка движка на эту запись"""
        if self.currentIndex() == 1:
            recNum = self.recNum
            self.recNum = self.selmodelCompres.currentIndex().row()
            if self.recNum < 0:
                self.recNum = recNum
            self.refreshToolbar()

    def showEvent(self, e) -> set:
        """Выполняет действия при выводе окна на экран"""
        form.action_25.setEnabled(False)
        QtWidgets.QTabWidget.showEvent(self, e)

    def hideEvent(self, e) -> set:
        """Выполняет действия при скрытии окна"""
        form.action_25.setEnabled(True)
        form.compreswin = None
        if self.recAll != []:
            self.asktoSave()
        form.refreshMain()
        QtWidgets.QTabWidget.hideEvent(self, e)

    def nextRecord(self) -> set:
        """Становится на следующей записи"""
        self.recNum += 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableCompres.selectRow(self.recNum)

    def priorRecord(self) -> set:
        """Становится на предыдущей записи"""
        self.recNum -= 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableCompres.selectRow(self.recNum)

    def firstRecord(self) -> set:
        """Становится на первой записи"""
        self.recNum = 0
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableCompres.selectRow(self.recNum)

    def lastRecord(self) -> set:
        """Становится на последней записи"""
        if self.recCount > 0:
            self.recNum = self.recCount - 1
            self.refreshToolbar()
            self.asktoSave()
            self.refreshRecord()
            self.tableCompres.selectRow(self.recNum)

    def sortRecord(self) -> set:
        """Сортировка записей"""
        self.recAll.sort(key=itemgetter(0,5,7))
        form.action_13.setEnabled(False)  # Сортировать
        form.action_14.setEnabled(True)  # Снять сортировку
        self.refreshRecord()

    def desortRecord(self) -> set:
        """Отмена сортировки, что соответствует сортировке по ID"""
        self.recAll.sort(key=itemgetter(10))
        form.action_13.setEnabled(True)  # Сортировать
        form.action_14.setEnabled(False)  # Снять сортировку
        self.refreshRecord()

    def setMk(self, metodMk) -> float:
        """Расчет коэффициента Мк
        metodMk - метод определения Mk
        metodMk = 1 - Определение Мк по СНиП
        metodMk = 2 - Определение Мк по ДБН"""
        if metodMk == 1:
            nkfMk = setMkSNIP(self.e, self.il)
        else:
            nkfMk = setMkDBN(self.vozrast, self.ip, self.e, self.kfSr)
        return nkfMk

    def setB(self) -> set:
        """Расчет коэффициента  β"""
        #kf_b = setBVP(self.plotn, self.ip, self.il)    # Через плотность и консистенцию
        #kf_b = setBV(self.e, self.ip, self.il)     # Через коэффициент пористости и консистенцию
        kf_b = setBIL(self.pd, self.ip, self.il)    # Через консистенцию (для песков через плотность скелета)
        self.spinBox_3.setValue(kf_b)

    def calcMoE(self) -> set:
        """Расчет Кф пористости, Кф сжимаемости и модуля деформации
        для всех нагрузок"""
#        self.saveRecordRezultCompres(False)
#        self.refreshTableRezultCompres()
        if self.label_15.text() == '-':
            mk = 0
        else:
            mk = dc.Decimal(self.label_15.text())          # коэффициент  Mk
        if self.radioButton_3.isChecked() == True:
            self.calcMoE1(mk)
        else:
            self.calcMoE2(mk)
        self.saveRecordRezultCompres(False)
        self.refreshTableRezultCompres()
        self.refreshGraph()

    def calcMoE1(self, mk) -> set:
        """Расчет Кф пористости, Кф сжимаемости и модуля деформации
        для всех нагрузок по относительному сжатию"""
        kf_b = dc.Decimal(self.spinBox_3.value())      # коэффициент  β
        rowAll = self.modelRezultCompres.rowCount()
        if rowAll != 0:
            schet = True  # Расчет проводить
        else:
            schet = False  # Расчет не проводить
        recRezult_p = []
        recRezult_sj = []
        recRezult_e = []
        i = 0
        for i in range(0, rowAll):
            p = dc.Decimal(self.modelRezultCompres.item(i, 2).data(QtCore.Qt.EditRole))
            otn_sjat = dc.Decimal(self.modelRezultCompres.item(i, 3).data(QtCore.Qt.EditRole))
            if p == 0 or otn_sjat == 0:
                self.modelRezultCompres.setData(self.modelRezultCompres.index(i, 4), str('0.000'))
                self.modelRezultCompres.setData(self.modelRezultCompres.index(i, 5), str('0.000'))
                self.modelRezultCompres.setData(self.modelRezultCompres.index(i, 6), str('0.00'))
                self.modelRezultCompres.setData(self.modelRezultCompres.index(i, 7), str('0.00'))
                schet = False
                break
            else:
                schet = True
            e_i = self.e - otn_sjat * (1 + self.e)  # Кф пористости при текущей нагрузке
            if p == dc.Decimal('0.1000'):
                e_1 = self.e - otn_sjat * (1 + self.e)  # Кф пористости при нагрузке 0.1 МПа
            if p == dc.Decimal('0.2000'):
                e_2 = self.e - otn_sjat * (1 + self.e)  # Кф пористости при нагрузке 0.2 МПа
            recRezult_p.append(p)           # Нагрузки
            recRezult_sj.append(otn_sjat)   # Относительное сжатие
            recRezult_e.append(e_i)         # Кф пористости
        i = 0
        if schet == True:
            for i in range(0, rowAll):
                if i == 0:
                    mo = (self.e - recRezult_e[i]) / recRezult_p[i]
                    mod_def = (1 + self.e) / mo * kf_b
                else:
                    mo = (recRezult_e[i - 1] - recRezult_e[i]) / (recRezult_p[i] - recRezult_p[i - 1])
                    mod_def = (1 + self.e) / mo * kf_b
                self.modelRezultCompres.setData(self.modelRezultCompres.index(i, 4), str(round(recRezult_e[i], 3)))
                self.modelRezultCompres.setData(self.modelRezultCompres.index(i, 5), str(round(mo, 3)))
                self.modelRezultCompres.setData(self.modelRezultCompres.index(i, 6), str(round(mod_def, 2)))
                if mk == 0:
                    self.modelRezultCompres.setData(self.modelRezultCompres.index(i, 7), str('-'))
                else:
                    self.modelRezultCompres.setData(self.modelRezultCompres.index(i, 7), str(round(mod_def * mk, 2)))
            mo_2 = (e_1 - e_2) / dc.Decimal('0.1000')
            mod_def_2 = (1 + self.e) / mo_2 * kf_b
            self.label_13.setText(str(round(mod_def_2, 2)))
            if mk == 0:
                self.label_14.setText('-')
            else:
                self.label_14.setText(str(round(mod_def_2 * mk, 2)))
        else:
            self.label_13.setText(str('0.00'))
            self.label_14.setText(str('0.00'))
        self.modelCompres.item(self.tableCompres.currentIndex().row(), 8).setText(self.label_14.text())

    def calcMoE2(self, mk) -> set:
        """Расчет относителгого сжатия, Кф сжимаемости и модуля деформации
        для всех нагрузок по коэффициенту пористости"""
        kf_b = dc.Decimal(self.spinBox_3.value())      # коэффициент  β
        rowAll = self.modelRezultCompres.rowCount()
        if rowAll != 0:
            schet = True  # Расчет проводить
        else:
            schet = False  # Расчет не проводить
        recRezult_p = []
        recRezult_sj = []
        recRezult_e = []
        i = 0
        for i in range(0, rowAll):
            p = dc.Decimal(self.modelRezultCompres.item(i, 2).data(QtCore.Qt.EditRole))
            e_i = dc.Decimal(self.modelRezultCompres.item(i, 4).data(QtCore.Qt.EditRole))  # Кф пористости при текущей нагрузке
            if p == 0 or e_i == 0:
                self.modelRezultCompres.setData(self.modelRezultCompres.index(i, 3), str('0.000'))
                self.modelRezultCompres.setData(self.modelRezultCompres.index(i, 5), str('0.000'))
                self.modelRezultCompres.setData(self.modelRezultCompres.index(i, 6), str('0.00'))
                self.modelRezultCompres.setData(self.modelRezultCompres.index(i, 7), str('0.00'))
                schet = False
                break
            else:
                schet = True
            otn_sjat = (self.e - e_i) / (1 + self.e)    # Относительное сжатие
            if p == dc.Decimal('0.1000'):
                e_1 = dc.Decimal(self.modelRezultCompres.item(i, 4).data(QtCore.Qt.EditRole))  # Кф пористости при нагрузке 0.1 МПа
            if p == dc.Decimal('0.2000'):
                e_2 = dc.Decimal(self.modelRezultCompres.item(i, 4).data(QtCore.Qt.EditRole))  # Кф пористости при нагрузке 0.2 МПа
            recRezult_p.append(p)           # Нагрузки
            recRezult_sj.append(otn_sjat)   # Относительное сжатие
            recRezult_e.append(e_i)         # Кф пористости
        i = 0
        if schet == True:
            for i in range(0, rowAll):
                if i == 0:
                    mo = (self.e - recRezult_e[i]) / recRezult_p[i]
                    mod_def = (1 + self.e) / mo * kf_b
                else:
                    mo = (recRezult_e[i - 1] - recRezult_e[i]) / (recRezult_p[i] - recRezult_p[i - 1])
                    mod_def = (1 + self.e) / mo * kf_b
                self.modelRezultCompres.setData(self.modelRezultCompres.index(i, 3), str(round(recRezult_sj[i], 3)))
                self.modelRezultCompres.setData(self.modelRezultCompres.index(i, 5), str(round(mo, 3)))
                self.modelRezultCompres.setData(self.modelRezultCompres.index(i, 6), str(round(mod_def, 2)))
                if mk == 0:
                    self.modelRezultCompres.setData(self.modelRezultCompres.index(i, 7), str('-'))
                else:
                    self.modelRezultCompres.setData(self.modelRezultCompres.index(i, 7), str(round(mod_def * mk, 2)))
            mo_2 = (e_1 - e_2) / dc.Decimal('0.1000')
            mod_def_2 = (1 + self.e) / mo_2 * kf_b
            self.label_13.setText(str(round(mod_def_2, 2)))
            if mk == 0:
                self.label_14.setText('-')
            else:
                self.label_14.setText(str(round(mod_def_2 * mk, 2)))
        else:
            self.label_13.setText(str('0.00'))
            self.label_14.setText(str('0.00'))
        self.modelCompres.item(self.tableCompres.currentIndex().row(), 8).setText(self.label_14.text())

    def addRecord(self) -> set:
        """Добавляет новую запись"""
        val11 = self.comboBox.itemData(self.comboBox.currentIndex(),
                                       role=QtCore.Qt.UserRole)  # ID последнего образца
        with UseDatebase(dbconfig) as curs:
            curs.execute("INSERT INTO compres (id_obrazec) VALUES (%(v11)s);", {'v11': val11})
        self.requerySelect()
        self.recCount = len(self.recAll)
        if self.recCount == 1:
            self.recNum = 0
            self.recOld = self.recAll[self.recNum]
        self.refreshRecord()
        self.lastRecord()
        self.refreshToolbar()

    def addRezultCompres(self) -> set:
        """Добавляет результаты одного сжатия при заданном давлении"""
        with UseDatebase(dbconfig) as curs:
            curs.execute("SELECT count(id) FROM compresi WHERE compresi.id_compres = %(v2)s;",
                         {'v2': self.compresId})
            countComprei = curs.fetchone()
            numcount = countComprei[0]
        with UseDatebase(dbconfig) as curs:
            curs.execute("INSERT INTO compresi (id_compres) VALUES (%(v2)s);",
                         {'v2': self.compresId})
        self.saveRecordRezultCompres()
        self.refreshTableRezultCompres()
        self.tableRezultCompres.setFocus()
        sel = self.tableRezultCompres.selectionModel()
        ind = self.tableRezultCompres.model().index(numcount, 2)
        sel.setCurrentIndex(ind, QtCore.QItemSelectionModel.ClearAndSelect)

    def delRecord(self) -> set:
        """Удаляет текущую запись"""
        self.refreshRecord()
        val10 = self.recOld[10]  # ID
        if val10 is not None:
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                           "Компресійні іспити",
                                           "Ви бажаєте видалити поточний запис з порядковим номером - " + str(self.recNum + 1) +
                                           " та лабораторним номером - " + str(self.recOld[9]) + "?")
            btnYes = QtWidgets.QPushButton("&Так")
            btnNo = QtWidgets.QPushButton("&Ні")
            btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
            self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
            self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
            self.formMassWin.setDefaultButton(btnYes)
            result = self.formMassWin.exec()
            if result == 0:
                try:
                    with UseDatebase(dbconfig) as curs:
                        curs.execute("DELETE FROM compres WHERE id = %(v10)s;", {'v10': val10})
                    self.requerySelect()
                    self.recCount = len(self.recAll)
                    if self.recCount > 0:
                        self.firstRecord()
                        self.refreshRecord()
                        self.refreshToolbar()
                    else:
                        self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information, "Компресійні випробування",
                                                       "Видалено останній запис")
                        btnOK = QtWidgets.QPushButton("&OK")
                        btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                        self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                        result = self.formMassWin.exec()
                        if result == 0:
                            self.formMassWin.close()
                            self.parent().close()
                except:
                    self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "Компресійні випробування",
                                                            "Видалення не можливо. "
                                                            "З поточним записом пов'язані записи у таблиці: "
                                                            "Результати випробувань"
                                                            "\nПотрібно виконати попереднє видалення усіх записів "
                                                            "в указаній таблиці")
                    btnOK = QtWidgets.QPushButton("&OK")
                    btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                    self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                    result = self.formMassWin.exec()
                    if result == 0:
                        self.formMassWin.close()
            else:
                pass
        else:
            pass

    def delRezultCompres(self) -> set:
        """Удаляет один результат сжатия из таблицы результатов испытаний"""
        i = self.tableRezultCompres.currentIndex().row()
        if i == None or i == -1:
            pass
        else:
            idRezultCompres = self.modelRezultCompres.item(i, 0).text()
            with UseDatebase(dbconfig) as curs:
                curs.execute("DELETE FROM compresi WHERE id = %(v0)s;", {'v0': idRezultCompres})
        self.refreshTableRezultCompres()

    def asktoSave(self) -> bool:
        """Проверяет наличие изменений в компрессионных испытаниях"""
        if self.recOld:
            # Считывание данных и обновление списка согласно значений экранной формы
            self.recNewCompres = self.readCompres() # Обновление новых значений
            askCompres = (self.recNewCompres == self.recOldCompres)
            askTableCompres = self.asktoSaveTableCompres()
            askRezultCompres = self.asktoSaveRezultCompres()
            # Проверка наличия изменений результатов компрессионных испытаний и физических свойствах грунтов
            if askCompres == False or askRezultCompres == False:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                               "Компресійні іспити",
                                               "Є незбережені дані результатів компресійних іспитів. "
                                               "\nВи бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    if askRezultCompres == False:
                        retval = self.saveRecordRezultCompres(False)
                    if askCompres == False:
                        retval = self.saveRecord(False)
                else:
                    retval = False
            elif askTableCompres == False:  # В таблице характеристик компрессионных испытаний есть изменения
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                               "Компресійні іспити",
                                               "Є незбережені дані у таблиці компресійних іспитів. "
                                               "\nВи бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecordTableCompres(False)
                    retval = True
                else:
                    retval = False
            else:
                retval = False
        else:
            retval = False
        return retval

    def asktoSaveTableCompres(self) -> bool:
        """Проверка наличия изменений в таблице компрессионных испытаний"""
        # Считывание данных и обновление списка согласно значений экранной формы
#        self.recAllOldCompres = self.recAllNewCompres   # Обновление старых значений
        self.recAllNewCompres = self.readTabCompres()   # Обновление новых значений
        if self.recAllNewCompres == self.recAllOldCompres:
            ask = True
        else:
            ask = False
        return ask

    def asktoSaveRezultCompres(self) -> bool:
        """Проверка наличия изменений в таблице Результатов компрессионных испытаний"""
        # Считывание данных и обновление списка результатов компрессионных испытаний согласно значений экранной формы
#        self.recAllOldRezultCompres = self.recAllNewRezultCompres   # Обновление старых значений
        self.recAllNewRezultCompres = self.readTabRezultCompres()   # Обновление новых значений
        if self.recAllNewRezultCompres == self.recAllOldRezultCompres:
            ask = True
        else:
            ask = False
        return ask

    def saveAll(self) -> list:
        """Сохраняет изменения по нажатию кнопки Сохранить на панели инструментов"""
        retval = False
        if self.currentIndex() == 0:
            self.recNewCompres = self.readCompres()
            self.recAllNewRezultCompres = self.readTabRezultCompres()
            if self.recAllNewRezultCompres != self.recAllOldRezultCompres:
                retval = self.saveRecordRezultCompres(False)
            if self.recNewCompres != self.recOldCompres:
                retval = self.saveRecord(False)
        else:
            self.recAllNewCompres = self.readTabCompres()
            if self.recAllNewCompres != self.recAllOldCompres:
                retval = self.saveRecordTableCompres(False)
        return retval

    def saveRecord(self, ask) -> bool:
        """Сохраняет изменения в записи и формирует новый курсор"""
        if ask == False:
            with UseDatebase(dbconfig) as curs:
                curs.execute("""UPDATE compres
                               SET id_obrazec = %(v11)s,
                                   id_pribor = %(v12)s,
                                   id_harakter = %(v13)s,
                                   kf_b = %(v19)s,
                                   mod_def = %(v21)s,
                                   mod_def_mk = %(v22)s,
                                   metod_mod = %(v23)s,
                                   metod_mk = %(v24)s,
                                   id_labman = %(v25)s
                               WHERE id = %(v10)s;""",
                             {'v11': self.recNewCompres[11], 'v12': self.recNewCompres[12],
                              'v13': self.recNewCompres[13], 'v19': self.recNewCompres[19],
                              'v21': self.recNewCompres[21], 'v22': self.recNewCompres[22],
                              'v23': self.recNewCompres[23], 'v24': self.recNewCompres[24],
                              'v25': self.recNewCompres[25], 'v10': self.recNewCompres[10]})
            if self.recOld[29] == 1:
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE glina
                                   SET vlag = %(v14)s,
                                       vlagtek = %(v15)s,
                                       vlagrask = %(v16)s,
                                       plotn = %(v17)s,
                                       plotnchast = %(v18)s
                                   WHERE id_obrazec = %(v11)s;""",
                                 {'v14': self.recNewCompres[14], 'v15': self.recNewCompres[15],
                                  'v16': self.recNewCompres[16], 'v17': self.recNewCompres[17],
                                  'v18': self.recNewCompres[18], 'v11': self.recNewCompres[11]})
            else:
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE pesok
                                   SET vlag = %(v14)s,
                                       plotn = %(v17)s,
                                       plotnchast = %(v18)s
                                   WHERE id_obrazec = %(v11)s;""",
                                 {'v14': self.recNewCompres[14], 'v17': self.recNewCompres[17],
                                  'v18': self.recNewCompres[18], 'v11': self.recNewCompres[11]})
            retval = True
            self.requerySelect()
            self.refreshRecord()
            self.refreshGraph()
        else:
            retval = False
        return retval

    def saveRecordRezultCompres(self, ask) -> bool:
        """Сохранение записей таблицы результатов компрессионных испытаний"""
        ask = self.asktoSaveRezultCompres()
        if ask == False:
            for i in range(0, self.recCountRezultCompres):
                recRezultCompres = self.recAllNewRezultCompres[i]
                val0 = int(recRezultCompres[0])  # Идентификатор сжатия при одной нагрузке
                val1 = int(recRezultCompres[1])  # Идентификатор компрессионных испытаний
                val2 = recRezultCompres[2]  # Нагрузка, МПа
                val3 = recRezultCompres[3]  # Отностительное сжатие, д.е.
                val4 = recRezultCompres[4]  # Коэффициент пористости, д.е.
                val5 = recRezultCompres[5]  # Коэффициент сжимаемости, МПа-1
                val6 = recRezultCompres[6]  # Модуль деформации, МПа
                val7 = recRezultCompres[7]  # Модуль деформации с учетом коэффициента Мк, МПа
                if val3 == None:
                    pass
                else:
                    val3 = dc.Decimal(val3)
                if val4 == None:
                    pass
                else:
                    val4 = dc.Decimal(val4)
                if val5 == None:
                    pass
                else:
                    val5 = dc.Decimal(val5)
                if val6 == None:
                    pass
                else:
                    val6 = dc.Decimal(val6)
                if val7 == None:
                    pass
                else:
                    val7 = dc.Decimal(val7)
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE compresi  
                                    SET nagruzka = %(v2)s, 
                                        otn_sjat = %(v3)s, 
                                        kf_por = %(v4)s, 
                                        kf_sjim = %(v5)s, 
                                        mod_def = %(v6)s,
                                        mod_def_mk = %(v7)s
                                    WHERE id = %(v0)s;""",
                                 {'v2': val2, 'v3': val3, 'v4': val4, 'v5': val5, 'v6': val6, 'v7': val7, 'v0': val0})
            retval = True
            self.refreshTableRezultCompres()
            self.refreshGraph()
        else:
            retval = False
        return retval

    def saveRecordTableCompres(self, ask) -> bool:
        """Сохранение записей таблицы характеристики компрессионных испытаний"""
        if ask == False:
            for i in range(0, self.recCountCompres):
                recTabCompres = self.recAllNewCompres[i]
                val10 = recTabCompres[1]    # ID компрессии
                val11 = recTabCompres[2]    # ID образца
                val12 = recTabCompres[3]    # ID прибора
                val13 = recTabCompres[4]    # ID характеристики испытаний
                val14 = recTabCompres[9]    # ID лаборанта
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE compres
                                  SET id_obrazec = %(v11)s,
                                        id_pribor = %(v12)s,
                                        id_harakter = %(v13)s,
                                        id_labman = %(v14)s
                                  WHERE id = %(v10)s;""",
                                 {'v11': val11, 'v12': val12, 'v13': val13, 'v14': val14, 'v10': val10})
            self.requerySelect()
            self.refreshRecord()
            retval = True
        else:
            retval = False
        return retval


class ProsadWindow(QtWidgets.QTabWidget, egclasswin.Ui_Prosad_win):
    def __init__(self) -> set:
        """Инициализация окна Результатов компрессионных испытаний просадочных грунтов"""
        super().__init__()
        self.setupUi(self)
        global idActivObekt
        self.recAllOldProsad = []
        self.recCountProsad = 0
        # Подготовка инструментов для рисования
        self.penblack = QtGui.QPen(QtCore.Qt.black)
        self.penred = QtGui.QPen(QtCore.Qt.red)
        self.penblackp = QtGui.QPen(QtCore.Qt.black, 1, QtCore.Qt.DotLine)
        self.brushr = QtGui.QBrush(QtCore.Qt.red)
        self.brushy = QtGui.QBrush(QtCore.Qt.yellow)
        self.brushly = QtGui.QBrush(QtGui.QColor(255, 255, 0, 30))  # Светло-желтый
        self.brushg = QtGui.QBrush(QtCore.Qt.green)
        self.brushb = QtGui.QBrush(QtCore.Qt.blue)
        self.brushw = QtGui.QBrush(QtCore.Qt.white)
        self.brushbl = QtGui.QBrush(QtCore.Qt.black)
        self.brushgr = QtGui.QBrush(QtCore.Qt.lightGray)
        self.brushgr.setColor(QtGui.QColor(245,245,245))
        self.penb = QtGui.QPen(self.brushb, 2)
        # Оформление сцены графиков
        self.scene = QtWidgets.QGraphicsScene(0, 0, 352, 322, self.graphicsView)
        self.graphicsView.setScene(self.scene)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT obrazec.id, 
                                obrazec.lab_num
                            FROM obekt,
                                burehole,
                                obrazec
                            WHERE obekt.id = %(v)s 
                                AND obekt.id = burehole.id_obekt 
                                AND burehole.id = obrazec.id_burehole
                                AND substring(mater_obr for 2) = 'Зв'
                            ORDER BY obrazec.lab_num""", {'v': idActivObekt})
            recAll = curs.fetchall()
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox.addItem(recOne[1])
                self.comboBox.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT id, 
                                name_pribor,
                                visota,
                                diametr,
                                plosch 
                            FROM pribor  
                            WHERE isput = 'Компресійний стиск'""")
            recAll = curs.fetchall()
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox_2.addItem(recOne[1])
                self.comboBox_2.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
                self.comboBox_2.setItemData(i, recOne[2], role=QtCore.Qt.UserRole + 1)
                self.comboBox_2.setItemData(i, recOne[3], role=QtCore.Qt.UserRole + 2)
                self.comboBox_2.setItemData(i, recOne[4], role=QtCore.Qt.UserRole + 3)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT id, metod, shema 
                            FROM harakter 
                            WHERE name_har = 'Вiдносне просiдання'
                            ORDER BY shema""")
            recAll = curs.fetchall()
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox_3.addItem(recOne[2])
                self.comboBox_3.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT ispol.id, 
                                ispol.fio
                            FROM ispol
                            WHERE ispol.vidrab = 0 OR ispol.vidrab = 7
                            ORDER BY ispol.fio""")
            recAll = curs.fetchall()
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox_4.addItem(recOne[1])
                self.comboBox_4.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
        self.prosadId = 0  # ID свойств компрессионного испытания просадочных грунтов
        self.modelProsad = QtGui.QStandardItemModel(30, 14)  # Создание модели характеристики компрессионных испытаний просадочных грунтов
        self.selmodelProsad = QtCore.QItemSelectionModel(self.modelProsad)  # Создание модели выделения
        self.modelProsad.setRowCount(len(self.recAll))
        self.modelProsad.setHorizontalHeaderLabels(['Labnum',
                                                     'ID Prosad',
                                                     'Лабораторний\nномер',
                                                     'Прилад',
                                                     'Схема випробувань',
                                                     'Коэффициент\nβ',
                                                     'Метод\nрозрахунків',
                                                     'Компресійний\nмодуль\nдеформації\nпри природній\nвологості\nМПа',
                                                     'Модуль деформації\nз урахуванням\nкоефіцієнта Мк\nпри природній\nвологості\nМПа',
                                                     'Компресійний\nмодуль\nдеформації\nу водонасиченому\nстані \nМПа',
                                                     'Модуль деформації\nз урахуванням\nкоефіцієнта Мк\nу водонасиченому\nстані\nМПа',
                                                     'Початковий\nтиск\nпросідання\nМПа',
                                                     'Відносна\nдеформація\nпросідання\nпри максимальному\nтиску\nд.о.',
                                                     'Лаборант'])
        self.tableProsad.setModel(self.modelProsad)  # Создание представления
        self.tableProsad.setSelectionModel(self.selmodelProsad)  # Установить модель выделения в представлении
        self.tableProsad.setColumnWidth(0, 10)  # Labnum
        self.tableProsad.setColumnWidth(1, 10)  # ID Prosad
        self.tableProsad.setColumnWidth(2, 120)  # Лабораторний номер
        self.tableProsad.setColumnWidth(3, 80)  # Прилад
        self.tableProsad.setColumnWidth(4, 160)  # Схема випробувань
        self.tableProsad.setColumnWidth(5, 100)  # Коэффициент β
        self.tableProsad.setColumnWidth(6, 100)  # Метод розрахунків
        self.tableProsad.setColumnWidth(7, 110)  # Модуль деформації без урахування коефіцієнта Мк, МПа
        self.tableProsad.setColumnWidth(8, 140)  # Модуль деформації з урахуванням коефіцієнта Мк, МПа
        self.tableProsad.setColumnWidth(9, 130)  # Модуль деформації без урахування коефіцієнта Мк, МПа
        self.tableProsad.setColumnWidth(10, 140)  # Модуль деформації з урахуванням коефіцієнта Мк, МПа
        self.tableProsad.setColumnWidth(11, 100)  # Початковий тиск просідання, МПа
        self.tableProsad.setColumnWidth(12, 140)  # Відносне просідання ґрунту
        self.tableProsad.setColumnWidth(13, 140)  # Лаборант
        self.tableProsad.setColumnHidden(0, True)
        self.tableProsad.setColumnHidden(1, True)
        self.tableProsad.setEnabled(True)
        self.modelRezultProsad = QtGui.QStandardItemModel(10, 12)  # Создание модели результатов компрессионных испытаний просадочных грунтов
        self.selmodelRezultProsad = QtCore.QItemSelectionModel(self.modelRezultProsad)  # Создание модели выделения
        self.modelRezultProsad.setHorizontalHeaderLabels(['ID',
                                                          'ID Prosad',
                                                          'Нормальний\nтиски\np МПа',
                                                          'Відносний\nстиск\nε д.о.',
                                                          'Коефіцієнт\nпористості\nе д.о.',
                                                          'Коефіцієнт\nстисливості\nmo МПа-1',
                                                          'Модуль\nдеформації\nЕ МПа',
                                                          'Відносний\nстиск\nε д.о.',
                                                          'Коефіцієнт\nпористості\nе д.о.',
                                                          'Коефіцієнт\nстисливості\nmo МПа-1',
                                                          'Модуль\nдеформації\nЕ МПа',
                                                          'Відносне\nпросідання\nεsl д.о.'])
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT *
                            FROM public.prosadi 
                            WHERE prosadi.id_prosad = %(v2)s
                            ORDER BY prosadi.id ASC""", {'v2': self.prosadId})
            self.recAllRezultProsad = curs.fetchall()
        self.modelRezultProsad.setRowCount(len(self.recAllRezultProsad))
        self.tableRezultProsad.setModel(self.modelRezultProsad)  # Создание представления
        self.tableRezultProsad.setSelectionModel(self.selmodelRezultProsad)  # Установить модель выделения в представлении
        self.tableRezultProsad.setColumnWidth(0, 10)  # ID
        self.tableRezultProsad.setColumnWidth(1, 10)  # ID Prosad
        self.tableRezultProsad.setColumnWidth(2, 100)  # Нормальний тиски МПа
        self.tableRezultProsad.setColumnWidth(3, 80)  # Відносний стиск ε д.о.
        self.tableRezultProsad.setColumnWidth(4, 80)  # Коефіцієнти пористості е д.о.
        self.tableRezultProsad.setColumnWidth(5, 90)  # Коефіцієнт стисливості mo МПа-1
        self.tableRezultProsad.setColumnWidth(6, 90)  # Модуль деформації Е, МПа
        self.tableRezultProsad.setColumnWidth(7, 80)  # Відносний стиск ε д.о.
        self.tableRezultProsad.setColumnWidth(8, 80)  # Коефіцієнти пористості е д.о.
        self.tableRezultProsad.setColumnWidth(9, 90)  # Коефіцієнт стисливості mo МПа-1
        self.tableRezultProsad.setColumnWidth(10, 90)  # Модуль деформації Е, МПа
        self.tableRezultProsad.setColumnWidth(11, 82)  # Відносне просідання
        self.tableRezultProsad.setColumnHidden(0, True)
        self.tableRezultProsad.setColumnHidden(1, True)
        self.requerySelect()  # Главный запрос для формирования экранной формы
        if not self.recAll:
            self.addRecord()
        else:
            self.recCount = len(self.recAll)
            self.recNum = 0
            self.recOld = self.recAll[self.recNum]
            self.prosadId = self.recOld[10]  # ID свойств компрессионных испытаний просадочных грунтов
        # Назначение делегатов
        self.DelegateProsad1 = egdelegat.DoubleSpinBoxDelegate1()
        self.DelegateProsad2 = egdelegat.DoubleSpinBoxDelegate()
        self.DelegateProsad3 = egdelegat.DoubleSpinBoxDelegate53()
        self.DelegateProsad4 = egdelegat.DoubleSpinBoxDelegate4()
        self.DelegateProsad_53 = egdelegat.DoubleSpinBoxDelegate_53()
        self.DelegateProsad_64 = egdelegat.DoubleSpinBoxDelegate_64()
        self.DelegateLabnumProsad = egdelegat.ComboBoxDelegateLabnumGran()
        self.DelegatePriborProsad = egdelegat.ComboBoxDelegatePriborCompres()
        self.DelegateShemaProsad = egdelegat.ComboBoxDelegateShemaProsad()
        self.DelegateLabman = egdelegat.ComboBoxDelegateLabman()
        self.tableProsad.setItemDelegateForColumn(2, self.DelegateLabnumProsad)
        self.tableProsad.setItemDelegateForColumn(3, self.DelegatePriborProsad)
        self.tableProsad.setItemDelegateForColumn(4, self.DelegateShemaProsad)
        self.tableProsad.setItemDelegateForColumn(5, self.DelegateProsad4)
        self.tableProsad.setItemDelegateForColumn(12, self.DelegateLabman)
        self.tableRezultProsad.setItemDelegateForColumn(2, self.DelegateProsad_64)
        self.tableRezultProsad.setItemDelegateForColumn(3, self.DelegateProsad_64)
        self.tableRezultProsad.setItemDelegateForColumn(4, self.DelegateProsad_53)
        self.tableRezultProsad.setItemDelegateForColumn(7, self.DelegateProsad_64)
        self.tableRezultProsad.setItemDelegateForColumn(8, self.DelegateProsad_53)
        # Обновление формы и панели инструментов
        self.refreshToolbar()
        self.refreshRecord()
        # Назначение обработчиков сигналов
        self.currentChanged.connect(self.asktoSave)
        self.currentChanged.connect(self.setRow)
        self.comboBox.activated.connect(self.requeryFiz)
        self.comboBox_2.activated.connect(self.requeryPribor)
        self.radioButton_3.toggled.connect(self.refreshMetodRaschet)
        self.radioButton_4.toggled.connect(self.refreshMetodRaschet)
        self.radioButton.toggled.connect(self.refreshMetodMk)
        self.radioButton_2.toggled.connect(self.refreshMetodMk)
        self.toolButton_1.clicked.connect(self.addRezultProsad)
        self.toolButton_2.clicked.connect(self.delRezultProsad)
        self.toolButton_3.clicked.connect(self.setB)
        self.toolButton.clicked.connect(self.calcMoE)
        self.selmodelProsad.selectionChanged['QItemSelection', 'QItemSelection'].connect(self.currentRow)

    def requerySelect(self) -> set:
        """Обновление главного запроса для экранной формы"""
        global idActivObekt
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT burehole.id_obekt,
                                obekt.numdog,
                                obekt.archnum,
                                obekt.stadia,
                                burehole.vidhole,
                                burehole.num_hole,
                                obrazec.num_obrazec,
                                obrazec.glub_otbor,
                                burehole.koord_z - obrazec.glub_otbor AS abs_otm,
                                obrazec.lab_num,
                                prosad.id,
                                prosad.id_obrazec,
                                prosad.id_pribor,
                                prosad.id_harakter,
                                glina.vlag,
                                glina.vlagtek,
                                glina.vlagrask,
                                glina.plotn,
                                glina.plotnchast,
                                pribor.name_pribor,
                                harakter.shema,
                                prosad.kf_b,
                                prosad.metod_mod,
                                prosad.mod_def,
                                prosad.mod_def_mk,
                                prosad.metod_mk,
                                prosad.pmin_prosad,
                                pesok.vlag AS vlag_pesok,
                                pesok.plotn AS plotn_pesok,
                                pesok.plotnchast AS plotnchast_pesok,
                                CASE
									WHEN glina.svgroup = 1 AND pesok.svgroup is null THEN 1
									WHEN pesok.svgroup = 2 AND glina.svgroup is null THEN 2
									ELSE null
								END AS svgroup,
                                prosad.id_labman,
                                vlabman.fio,
                                prosad.mod_defw,
                                prosad.mod_defw_mk,
                                prosad.otn_prosad
                            FROM obekt,
                                burehole,
                                obrazec,
                                prosad LEFT JOIN glina ON prosad.id_obrazec = glina.id_obrazec
                                        LEFT JOIN pesok ON prosad.id_obrazec = pesok.id_obrazec
                                        LEFT JOIN vlabman ON prosad.id_labman = vlabman.id
                                        LEFT JOIN pribor ON prosad.id_pribor = pribor.id,
                                harakter
                            WHERE obekt.id = %(v0)s 
                            AND obekt.id = burehole.id_obekt 
                            AND burehole.id = obrazec.id_burehole 
                            AND obrazec.id = prosad.id_obrazec 
                            AND prosad.id_harakter = harakter.id
                            ORDER BY prosad.id""", {'v0': idActivObekt})
            self.recAll = curs.fetchall()
            return self.recAll

    def requeryFiz(self) -> set:
        """Обновление физ параметров при изменении образца"""
        ind = self.comboBox.currentIndex()
        idObr = self.comboBox.itemData(ind, role=QtCore.Qt.UserRole)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT vlag_glina,
                                vlagtek,
                                vlagrask,
                                plotn_glina,
                                plotnchast_glina,
                                vlag_pesok,
                                plotn_pesok,
                                plotnchast_pesok,
                                svgroup
                            FROM vfizall
                            WHERE id_obrazec = %(v)s AND svgroup = 1""",
                         {'v': idObr})
            self.recFiz = curs.fetchone()
            if self.recFiz is not None:
                self.refreshFiz(self.recFiz[8], self.recFiz[0], self.recFiz[1], self.recFiz[2], self.recFiz[3],
                                self.recFiz[4], self.recFiz[5], self.recFiz[6], self.recFiz[7]) # Обновление физсвойств
            else:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Critical,
                                               "Визначення властивостей просідання",
                                               "За вибраним зразком відсутні фізичні власивості."
                                               "\nРозрахунок провести немає можливості. "
                                               "Необхідно додати по данному зразку фізичні властивости зв'язних ґрунтів.")
                btnOK = QtWidgets.QPushButton("&OK")
                btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                result = self.formMassWin.exec()

    def requeryPribor(self) -> set:
        """Обновление свойств прибора"""
        visota = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), QtCore.Qt.UserRole + 1)
        self.label_16.setText(str(visota))  # Висота зразка, мм
        diametr = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), QtCore.Qt.UserRole + 2)
        self.label_29.setText(str(diametr))  # Діаметр зразка, мм

    def refreshRecord(self) -> set:
        """Обновляет экранную форму с отображаемой записью"""
        # Передача значений из списка в экранную форму
        self.recOldAll = self.recAll[self.recNum]   # Полный кортеж текущей записи
        if self.recOldAll:
            self.label.setText("Ідентіфікатор об'єкта - " + str(self.recOldAll[0]) + "\n" +
                               "Номер договору - " + self.recOldAll[1] + "\n" +
                               "Архівний номер звіту - " + self.recOldAll[2] + "\n" +
                               self.recOldAll[4] + " №" + self.recOldAll[5] + "\n" +
                               "Зразок №" + str(self.recOldAll[6]) + "\n" +
                               "Глибина відбору - " + str(self.recOldAll[7]))  # ID объекта, номер договора,
                                                                            # архивный номер, вид и № выработки,
                                                                            # № образца, глубина отбора
            self.obID = self.recOldAll[0]  # ID объекта
            self.numdog = self.recOldAll[1]  # Номер договора
            self.archnum = self.recOldAll[2]  # Архивный номер объекта
            self.stadia = self.recOldAll[3]  # Стадия проектирования
            self.vidhole = self.recOldAll[4]  # Вид выработки
            self.numhole = self.recOldAll[5]  # Номер выработки
            self.numobrazec = self.recOldAll[6]  # Номер образца
            self.glubotbor = self.recOldAll[7]  # Глубина отбора
            self.absotm = self.recOldAll[8]  # Абсолютная отметка отбора
            self.labnum = self.recOldAll[9]  # Лабораторный номер
            self.prosadId = self.recOldAll[10]  # ID компрессионных испытаний
            self.comboBox.setCurrentIndex(
                self.comboBox.findData(self.recOldAll[11], role=QtCore.Qt.UserRole))  # ID образца
            self.comboBox_2.setCurrentIndex(
                self.comboBox_2.findData(self.recOldAll[12], role=QtCore.Qt.UserRole))  # Прилад
            visota = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), QtCore.Qt.UserRole + 1)
            self.label_16.setText(str(visota))  # Висота зразка, мм
            diametr = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), QtCore.Qt.UserRole + 2)
            self.label_29.setText(str(diametr))  # Діаметр зразка, мм
            self.comboBox_3.setCurrentIndex(
                self.comboBox_3.findData(self.recOldAll[13], role=QtCore.Qt.UserRole))  # Схема випробувань
            self.comboBox_4.setCurrentIndex(
                self.comboBox_4.findData(self.recOldAll[31], role=QtCore.Qt.UserRole))  # ID лаборанта
            self.refreshFiz(self.recOldAll[30], self.recOldAll[14], self.recOldAll[15], self.recOldAll[16],
                            self.recOldAll[17], self.recOldAll[18], self.recOldAll[27], self.recOldAll[28],
                            self.recOldAll[29])  # Обновление блока физических свойств
            if self.recOldAll[21] == None:
                self.spinBox_3.clear()
            else:
                self.spinBox_3.setValue(self.recOldAll[21])  # Коэффициент β
            self.metodRasch = self.recOldAll[22]  # Метод расчета модуля деформации
            if self.metodRasch == 1:
                self.radioButton_3.setChecked(True)
                self.radioButton_4.setChecked(False)
            else:
                self.radioButton_3.setChecked(False)
                self.radioButton_4.setChecked(True)
            self.modDef = self.recOldAll[23]  # Модуль деформации без учета Кф Мк
            self.modDefMk = self.recOldAll[24]  # Модуль деформации с учетом Кф Мк
            self.label_13.setText(str(self.recOldAll[23]))      # Модуль деформации без учета Кф Мк, МПа
            self.label_14.setText(str(self.recOldAll[24]))      # Модуль деформации с учетом Кф Мк, МПа
            if self.recOldAll[33] is None:
                self.label_32.setText('-')
            else:
                self.label_32.setText(str(self.recOldAll[33]))  # Модуль деформации водонасыщенный без учета Кф Мк, МПа
            if self.recOldAll[34] is None:
                self.label_44.setText('-')
            else:
                self.label_44.setText(str(self.recOldAll[34]))  # Модуль деформации водонасыщенный с учетом Кф Мк, МПа
            if self.recOldAll[26] is not None:
                self.label_31.setText(str(self.recOldAll[26]))      # Начальное давление просадки, МПа
            else:
                self.label_31.setText("-")
            self.otn_prosad = self.recOldAll[35]    # Относительная просадочность при максимальной нагрузке, д.е.
            self.metodMk = self.recOldAll[25]     # Метод расчета Коэффициента Мк
            if self.metodMk == 1:
                self.radioButton.setChecked(True)
                self.radioButton_2.setChecked(False)
            else:
                self.radioButton.setChecked(False)
                self.radioButton_2.setChecked(True)
            self.kfMk = self.setMk(self.metodMk)
            if self.kfMk is None:
                self.label_15.setText("-")  # Коэффициент Мк
            else:
                kfMk = round(dc.Decimal(self.kfMk), 2)
                self.label_15.setText(str(kfMk))   # Коэффициент Мк
            if self.recOldAll[30] == 1:
                namegrunt = nameglina(self.e, self.ip, self.il)
            else:
                namegrunt = "Пісок"
        else:
            pass
        self.recOld = self.readRecord()     # Сокращенный кортеж текущей записи
#        self.refreshTableProsad()
        self.refreshTableRezultProsad()
        if namegrunt[0:5] == 'Глина':
            self.label_18.setText(namegrunt + self.prosadName[0:8] + 'а')  # Наименование грунта с учетом просадочности
        else:
            self.label_18.setText(namegrunt + self.prosadName)  # Наименование грунта с учетом просадочности
        self.refreshTableProsad()
        self.refreshGraph()

    def refreshFiz(self, svgroup, w, wl, wp, p, ps, wpes, ppes, pspes) -> set:
        """Обновление блока физсвойств"""
        if svgroup == 1:  # Для глин
            if w is None:
                self.doubleSpinBox.setValue(0)
            else:
                self.doubleSpinBox.setValue(w)  # Вологість ґрунту глини, %
            if wl is None:
                self.doubleSpinBox_2.setValue(0)
            else:
                self.doubleSpinBox_2.setValue(wl)  # Вологість на границi текучостi, %
            if wp is None:
                self.doubleSpinBox_3.setValue(0)
            else:
                self.doubleSpinBox_3.setValue(wp)  # Вологість на границi розкочування, %
            if p is None:
                self.doubleSpinBox_4.setValue(0)
            else:
                self.doubleSpinBox_4.setValue(p)  # Щільність ґрунту глини, г/см3
            if ps is None:
                self.doubleSpinBox_5.setValue(0)
            else:
                self.doubleSpinBox_5.setValue(ps)  # Щiльнiсть часток ґрунту глини, г/см3
            self.plotn = p  # Щільність ґрунту глини, г/см3
        elif svgroup == 2:  # Для песков
            if wpes is None:
                self.doubleSpinBox.setValue(0)
            else:
                self.doubleSpinBox.setValue(wpes)  # Вологість ґрунту піску, %
            if wl is None:
                self.doubleSpinBox_2.setValue(0)
            else:
                self.doubleSpinBox_2.setValue(wl)  # Вологість на границi текучостi, %
            if wp is None:
                self.doubleSpinBox_3.setValue(0)
            else:
                self.doubleSpinBox_3.setValue(wp)  # Вологість на границi розкочування, %
            self.plotn = ppes  # Щільність ґрунту піску, г/см3
            if ppes is None:
                self.doubleSpinBox_4.setValue(0)
            else:
                self.doubleSpinBox_4.setValue(ppes)  # Щільність ґрунту піску, г/см3
            if pspes is None:
                self.doubleSpinBox_5.setValue(0)
            else:
                self.doubleSpinBox_5.setValue(pspes)  # Щiльнiсть часток ґрунту піску, г/см3
        else:  # При отсутствии результатов анализов
            self.doubleSpinBox.setValue(0)
            self.doubleSpinBox_2.setValue(0)
            self.doubleSpinBox_3.setValue(0)
            self.doubleSpinBox_4.setValue(0)
            self.doubleSpinBox_5.setValue(0)
        # Подготовка и отображение расчетных показателей
        if svgroup == 1:     # Для глинистых грунтов
            self.ip = plastich(wl, wp)
            if self.ip is not None:
                self.label_9.setText(str(self.ip))  # Число пластичностi, %
            else:
                self.label_9.setText("-")
            self.il = konsist(w, wl, wp)
            if self.il is not None:
                self.label_10.setText(str(self.il))  # Показник текучостi (консистенция), д.о.
            else:
                self.label_10.setText("-")
            self.pd = plotsk(w, p)
            if self.pd is not None:
                self.label_11.setText(str(self.pd))  # Щiльнiсть сухого грунту (скелета), г/см3
            else:
                self.label_11.setText("-")
            self.e = kfPorw(w, p, ps)
            if self.e is not None:
                self.label_12.setText(str(self.e))  # Кф пористости
            else:
                self.label_12.setText("-")
            self.kfSr = kfVodonas(w, p, ps)  # Кф водонасыщения
            if self.kfSr is not None:
                self.label_34.setText(str(self.kfSr))  # Кф водонасыщения
            else:
                self.label_34.setText("-")
        elif svgroup == 2:    # Для песков
            self.ip = plastich(wl, wp)
            if self.ip is not None:
                self.label_9.setText(str(self.ip))  # Число пластичностi, %
            else:
                self.label_9.setText("-")
            self.il = konsist(w, wl, wp)
            if self.il is not None:
                self.label_10.setText(str(self.il))  # Показник текучостi (консистенция), д.о.
            else:
                self.label_10.setText("-")
            self.pd = plotsk(wpes, ppes)
            if self.pd is not None:
                self.label_11.setText(str(self.pd))  # Щiльнiсть сухого грунту (скелета), г/см3
            else:
                self.label_11.setText("-")
            self.e = kfPorw(wpes, ppes, pspes)
            if self.e is not None:
                self.label_12.setText(str(self.e))  # Кф пористости
            else:
                self.label_12.setText("-")
            self.kfSr = kfVodonas(wpes, ppes, pspes)  # Кф водонасыщения
            if self.kfSr != None:
                self.label_34.setText(str(self.kfSr))  # Кф водонасыщения
            else:
                self.label_34.setText("-")
        else:
            self.label_9.setText("-")
            self.label_10.setText("-")
            self.label_11.setText("-")
            self.label_12.setText("-")
            self.label_34.setText("-")

    def refreshMetodRaschet(self) -> set:
        """Обновление таблицы результатов испытаний
        в зависимости от метода расчета"""
        i = 0
        if self.radioButton_3.isChecked() == True:
            self.metodRasch = 1
            for i in range(0, self.recCountRezultProsad):
                self.modelRezultProsad.item(i, 3).setEnabled(True)
                self.modelRezultProsad.item(i, 4).setEnabled(False)
                self.modelRezultProsad.item(i, 7).setEnabled(True)
                self.modelRezultProsad.item(i, 8).setEnabled(False)
                self.modelRezultProsad.item(i, 3).setBackground(self.brushw)
                self.modelRezultProsad.item(i, 4).setBackground(self.brushgr)
                self.modelRezultProsad.item(i, 7).setBackground(self.brushw)
                self.modelRezultProsad.item(i, 8).setBackground(self.brushgr)
                self.modelRezultProsad.item(i, 3).setForeground(self.brushbl)
                self.modelRezultProsad.item(i, 4).setForeground(self.brushbl)
                self.modelRezultProsad.item(i, 7).setForeground(self.brushbl)
                self.modelRezultProsad.item(i, 8).setForeground(self.brushbl)
        else:
            self.metodRasch = 2
            for i in range(0, self.recCountRezultProsad):
                self.modelRezultProsad.item(i, 3).setEnabled(False)
                self.modelRezultProsad.item(i, 4).setEnabled(True)
                self.modelRezultProsad.item(i, 7).setEnabled(False)
                self.modelRezultProsad.item(i, 8).setEnabled(True)
                self.modelRezultProsad.item(i, 3).setBackground(self.brushgr)
                self.modelRezultProsad.item(i, 4).setBackground(self.brushw)
                self.modelRezultProsad.item(i, 7).setBackground(self.brushgr)
                self.modelRezultProsad.item(i, 8).setBackground(self.brushw)
                self.modelRezultProsad.item(i, 3).setForeground(self.brushbl)
                self.modelRezultProsad.item(i, 4).setForeground(self.brushbl)
                self.modelRezultProsad.item(i, 7).setForeground(self.brushbl)
                self.modelRezultProsad.item(i, 8).setForeground(self.brushbl)

    def refreshMetodMk(self) -> set:
        """Обновление метода расчета коэффициента Мк"""
        if self.radioButton.isChecked() == True:
            metodMk = 1
        else:
            metodMk = 2
        nMk = self.setMk(metodMk)
        nMod = float(self.label_13.text())  # Модуль деформации без учета Кф Мк, МПа
        if self.label_32.text() == '-':
            nModw = None
        else:
            nModw = float(self.label_32.text())  # Модуль деформации водонасыщенный без учета Кф Мк, МПа
        if nMk is not None:
            self.label_15.setText(str(round(dc.Decimal(nMk), 2)))  # Коэффициент Мк
            self.label_14.setText(str(round(nMk * nMod, 2)))  # Модуль деформации с учетом Кф Мк, МПа
            if nModw is None:
                self.label_44.setText('-')  # Модуль деформации водонасыщенный с учетом Кф Мк, МПа
            else:
                self.label_44.setText(str(round(nMk * nModw, 2)))   # Модуль деформации водонасыщенный с учетом Кф Мк, МПа
        else:
            self.label_15.setText('-')      # Коэффициент Мк
            self.label_14.setText('-')      # Модуль деформации с учетом Кф Мк, МПа
            self.label_44.setText('-')      # Модуль деформации водонасыщенный с учетом Кф Мк, МПа
        return metodMk

    def refreshGraph(self) -> set:
        """Обновление графика-диаграммы"""
        if len(self.recAllRezultProsad) > 0:
            arrProsadi = np.array(self.recAllRezultProsad)
            minx = np.min(arrProsadi, axis=0)[2]
            maxx = np.max(arrProsadi, axis=0)[2]
            miny = np.min(arrProsadi, axis=0)[3]
            maxy = np.max(arrProsadi, axis=0)[7]
            maxy2 = np.max(arrProsadi, axis=0)[11]
            if minx > 0.00 and miny > 0.00:
                shagx = dc.Decimal('0.05')    # Шаг нагрузок по сетке
                schet = True
                xcount = int(maxx / shagx)  # Количество значений для подписи осей
                self.scene.clear()
                self.scene.addRect(40, 40, 264, 256, self.penblack, self.brushly) # Границы области графика
                ix = int(round(256 / xcount, 0))  # Шаг сетки по х в пикселях
                for ix in range(40, 296 + 16, ix):
                    self.scene.addLine(ix, 40, ix, 296, self.penblackp)     # Вертикальная сетка
                    self.scene.addLine(ix, 35, ix, 40, self.penblack)       # Вертикальные штрихи большие
                i = 0
                for i in range(40, 296 + 16, 8):
                    self.scene.addLine(i, 38, i, 40, self.penblack)   # Вертикальные штрихи малые
                i = int(256 / xcount)  # Шаг сетки для подписи оси x
                j = 0
                for j in range(0, xcount + 1, 2):
                    xtext = QtWidgets.QGraphicsSimpleTextItem(str(round(0.05 * j, 2)))
                    self.scene.addItem(xtext)
                    xtext.setPos(32 + i * j, 18)
                iy = int(256 / 8)  # Шаг сетки по y в пикселях
                for iy in range(40, 328, iy):
                    self.scene.addLine(40, iy, 296 + 8, iy, self.penblackp)  # Горизонтальная сетка
                    self.scene.addLine(35, iy, 40, iy, self.penblack)  # Горизонтальные штрихи большие слева
                    self.scene.addLine(304, iy, 309, iy, self.penblack)  # Горизонтальные штрихи большие справа
                i = 0
                for i in range(0, 256, 8):
                    self.scene.addLine(38, i + 40, 40, i + 40, self.penblack)  # Горизонтальные штрихи малые слева
                    self.scene.addLine(304, i + 40, 306, i + 40, self.penblack)  # Горизонтальные штрихи малые справа
                j = 0
                i = int(256 / 8)   # Шаг сетки для подписей оси y
                ycount = 8         # Количество значений для подписи оси y
                if maxy < dc.Decimal('0.08'):      # Определение шага значений относительного сжатия по левой шкале y
                    shagy = dc.Decimal('0.01')
                elif maxy < dc.Decimal('0.16'):
                    shagy = dc.Decimal('0.02')
                else:
                    shagy = dc.Decimal('0.05')
                for j in range(0, ycount + 1):
                    ytext = QtWidgets.QGraphicsSimpleTextItem(str(round(shagy * j, 2)))
                    self.scene.addItem(ytext)
                    ytext.setPos(5, 32 + i * j)
                xname = QtWidgets.QGraphicsSimpleTextItem("p МПа")
                self.scene.addItem(xname)
                xname.setPos(270, 0)
                yname = QtWidgets.QGraphicsSimpleTextItem("ε д.о.")
                self.scene.addItem(yname)
                yname.setPos(5, 304)
                yname2 = QtWidgets.QGraphicsSimpleTextItem("εsl д.о.")
                self.scene.addItem(yname2)
                yname2.setPos(310, 18)
                if maxy2 < dc.Decimal('0.016'):      # Определение шага значений относительного просидания по правой шкале y
                    shagy2 = dc.Decimal('0.002')
                elif maxy2 < dc.Decimal('0.032'):
                    shagy2 = dc.Decimal('0.004')
                else:
                    shagy2 = dc.Decimal('0.01')
                for j in range(0, ycount + 1):
                    ytext2 = QtWidgets.QGraphicsSimpleTextItem(str(round(shagy2 * j, 3)))
                    self.scene.addItem(ytext2)
                    ytext2.setPos(314, 288 - i * j)
                # Формирование списков с вставкой начала координат
                listnagruzka = np.insert(arrProsadi[:, 2], 0, dc.Decimal('0.0000'))
                listnagruzka1 = np.append(listnagruzka, maxx)   # Добавлено максимальное значение нагрузки
                listotnsjat = np.insert(arrProsadi[:, 3], 0, dc.Decimal('0.000'))
                listotnsjat1 = np.append(listotnsjat, maxy) # Добавлено максимальное значение отн. сжатия водонасыщенное
                listotnsjatw = np.insert(arrProsadi[:, 7], 0, dc.Decimal('0.000'))
                listotnprosad = np.insert(arrProsadi[:, 11], 0, dc.Decimal('0.0000'))
                i = 0
                for i in range(0, len(arrProsadi)):      # Проверка для построения графика
                    if listnagruzka[i + 1] is None or listotnsjat[i + 1] is None:
                        schet = False
                    else:
                        schet = True
                i = 0
                for i in range(0, len(arrProsadi)):      # Проверка для построения точек
                    if listnagruzka[i + 1] is None or listotnsjat[i + 1] is None:
                        schet = False
                    else:
                        schet = True
                if schet == False:
                    self.scene.clear()
                else:
                    i = 0
                    for i in range(0, len(arrProsadi) + 1):  # Построение графика с природной влажностью
                        x1 = 40 + int(round(256 / maxx * listnagruzka1[i], 0))
                        x2 = 40 + int(round(256 / maxx * listnagruzka1[i + 1], 0))
                        y1 = 40 + int(round(256 / dc.Decimal(shagy * 8) * listotnsjat1[i], 0))
                        y2 = 40 + int(round(256 / dc.Decimal(shagy * 8) * listotnsjat1[i + 1], 0))
                        self.scene.addLine(x1, y1, x2, y2, self.penb)
                    i = 0
                    for i in range(0, len(arrProsadi) + 1):  # Построение точек с природной влажностью
                        x2 = 40 + int(round(256 / maxx * listnagruzka1[i + 1], 0))
                        y2 = 40 + int(round(256 / dc.Decimal(shagy * 8) * listotnsjat1[i + 1], 0))
                        self.scene.addEllipse(x2 - 4, y2 - 4, 8, 8, self.penblack, self.brushr)
                    # Формирование графика для водонасыщенного грунта
                    if self.comboBox_3.currentData(role=QtCore.Qt.UserRole) == 43:
                        # Построение прямой начального давления просадочности
                        p_pr = dc.Decimal(self.label_31.text())
                        x1 = x2 = 40 + int(256 / maxx * p_pr)
                        y1 = 40
                        y2 = 296
                        self.scene.addLine(x1, y1, x2, y2, self.penred)
                        p_name = QtWidgets.QGraphicsSimpleTextItem("Psl") # Формирование подписи начального давления просадочности
                        self.scene.addItem(p_name)
                        p_name.setPos(x1 - 10, 304)
                        i = 0
                        for i in range(0, len(arrProsadi)):  # Построение графика после водонасыщения
                            x1 = 40 + int(round(256 / maxx * listnagruzka[i], 0))
                            x2 = 40 + int(round(256 / maxx * listnagruzka[i + 1], 0))
                            y1 = 40 + int(round(256 / dc.Decimal(shagy * 8) * listotnsjatw[i], 0))
                            y2 = 40 + int(round(256 / dc.Decimal(shagy * 8) * listotnsjatw[i + 1], 0))
                            self.scene.addLine(x1, y1, x2, y2, self.penb)
                        i = 0
                        for i in range(0, len(arrProsadi)): # Построение графика отн. просадочности
                            x1 = 40 + int(round(256 / maxx * listnagruzka[i], 0))
                            x2 = 40 + int(round(256 / maxx * listnagruzka[i + 1], 0))
                            y1 = 296 - int(round(256 / dc.Decimal(shagy2 * 8) * listotnprosad[i], 0))
                            y2 = 296 - int(round(256 / dc.Decimal(shagy2 * 8) * listotnprosad[i + 1], 0))
                            self.scene.addLine(x1, y1, x2, y2, self.penred)
                        i = 0
                        for i in range(0, len(arrProsadi)):  # Построение точек после водонасыщения
                            x2 = 40 + int(round(256 / maxx * listnagruzka[i + 1], 0))
                            y2 = 40 + int(round(256 / dc.Decimal(shagy * 8) * listotnsjatw[i + 1], 0))
                            self.scene.addEllipse(x2 - 4, y2 - 4, 8, 8, self.penblack, self.brushr)
                        i = 0
                        for i in range(0, len(arrProsadi)):  # Построение точек отн. просадочности
                            x2 = 40 + int(round(256 / maxx * listnagruzka[i + 1], 0))
                            y2 = 296 - int(round(256 / dc.Decimal(shagy2 * 8) * listotnprosad[i + 1], 0))
                            self.scene.addEllipse(x2 - 4, y2 - 4, 8, 8, self.penblack, self.brushr)
            else:
                schet = False
        else:
            schet = False
        if schet == False:
            self.scene.clear()
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Critical,
                                           "Визначення властивостей просідання",
                                           "У таблиці результатів випробувань одне або кілька значень "
                                           "нормального тиску (σ) або відносного стиску (ε) "
                                           "або коефіцієнта пористості (e) не визначені "
                                           "або мають значення 0.00. \nРозрахунок провести немає можливості. "
                                           "Необхідно внести в таблицю виправлення.")
            btnOK = QtWidgets.QPushButton("&OK")
            btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
            result = self.formMassWin.exec()

    def refreshTableProsad(self) -> set:
        """Обновление таблицы характеристики компрессионных испытаний по определеню просадочности"""
        self.recCountProsad = len(self.recAll)
        self.recAllOldProsad = []
        if self.recCountProsad > 0:
            self.modelProsad.setRowCount(self.recCountProsad)
            self.tableProsad.setEnabled(True)
            self.modelProsad.removeRows(0, self.modelProsad.rowCount())
            item11 = QtWidgets.QTableWidgetItem()
            item11.setData(QtCore.Qt.EditRole, id)
            for i in range(0, self.recCountProsad):  # Занесение данных в ячейки таблицы
                self.recOldProsad = self.recAll[i][9:36]
                listrow = list(self.recOldProsad)  # Список одной строки
                item9 = QtGui.QStandardItem(str(listrow[0]))  # Лабораторный номер
                item10 = QtGui.QStandardItem(str(listrow[1]))  # ID компрессии
                item11 = QtGui.QStandardItem(str(listrow[0]))
                QtGui.QStandardItem.setData(item11, str(listrow[2]), role=QtCore.Qt.UserRole)  # ID образца
                item14 = QtGui.QStandardItem(str(listrow[10]))  # Прибор
                item14.setData(listrow[3], role=QtCore.Qt.UserRole)  # Идентификатор прибора
                item15 = QtGui.QStandardItem(str(listrow[11]))  # Схема испытаний
                item15.setData(listrow[4], role=QtCore.Qt.UserRole)  # ID схемы испытаний
                item16 = QtGui.QStandardItem(str(listrow[12]))  # Коэфициент В
                item17 = QtGui.QStandardItem(str(listrow[13]))  # Метод расчетов
                item18 = QtGui.QStandardItem(str(listrow[14]))  # Модуль деформации без учета Кф Мк, МПа
                item19 = QtGui.QStandardItem(str(listrow[15]))  # Модуль деформации с учетом Кф Мк, МПа
                if listrow[24] is None:
                    item24 = QtGui.QStandardItem("-")
                else:
                    item24 = QtGui.QStandardItem(str(listrow[24]))    # Модуль деформации водонасыщенный без учета Кф Мк, МПа
                if listrow[25] is None:
                    item25 = QtGui.QStandardItem("-")
                else:
                    item25 = QtGui.QStandardItem(str(listrow[25]))    # Модуль деформации водонасыщенный с учетом Кф Мк, МПа
                if listrow[17] is None:
                    item20 = QtGui.QStandardItem("-")
                else:
                    item20 = QtGui.QStandardItem(str(listrow[17]))    # Початковий тис просідання, МПа
                item26 = QtGui.QStandardItem(str(listrow[26]))    # Відносна деформація просідання, д.о.
                item21 = QtGui.QStandardItem(str(listrow[23]))  # Лаборант
                item21.setData(str(listrow[22]), role=QtCore.Qt.UserRole)  # ID лаборанта
                item11.setTextAlignment(QtCore.Qt.AlignCenter)
                item14.setTextAlignment(QtCore.Qt.AlignCenter)
                item15.setTextAlignment(QtCore.Qt.AlignCenter)
                item16.setTextAlignment(QtCore.Qt.AlignCenter)
                item17.setTextAlignment(QtCore.Qt.AlignCenter)
                item18.setTextAlignment(QtCore.Qt.AlignCenter)
                item19.setTextAlignment(QtCore.Qt.AlignCenter)
                item20.setTextAlignment(QtCore.Qt.AlignCenter)
                item24.setTextAlignment(QtCore.Qt.AlignCenter)
                item25.setTextAlignment(QtCore.Qt.AlignCenter)
                item26.setTextAlignment(QtCore.Qt.AlignCenter)
                item17.setEnabled(False)
                item18.setEnabled(False)
                item19.setEnabled(False)
                item20.setEnabled(False)
                item24.setEnabled(False)
                item25.setEnabled(False)
                item26.setEnabled(False)
                item17.setForeground(self.brushbl)
                item18.setForeground(self.brushbl)
                item19.setForeground(self.brushbl)
                item20.setForeground(self.brushbl)
                item24.setForeground(self.brushbl)
                item25.setForeground(self.brushbl)
                item26.setForeground(self.brushbl)
                item17.setBackground(self.brushgr)
                item18.setBackground(self.brushgr)
                item19.setBackground(self.brushgr)
                item20.setBackground(self.brushgr)
                item24.setBackground(self.brushgr)
                item25.setBackground(self.brushgr)
                item26.setBackground(self.brushgr)
                self.modelProsad.appendRow([item9, item10, item11, item14, item15, item16, item17,
                                            item18, item19, item24, item25, item20, item26, item21])
                oldProsadOne = []
                for j in range(0, 27):  # Занесение данных в ячейки таблицы
                    it = listrow[j]
                    if j in range(5, 12):
                        pass
                    elif j == 16:
                        pass
                    elif j in range(18, 22):
                        pass
                    elif j == 23:
                        pass
                    else:
                        oldProsadOne.append(it)
                self.recAllOldProsad.append(oldProsadOne)  # Формирование исходного списка компрессионных испытаний
        else:
            self.tableProsad.setEnabled(False)
            self.toolButton_2.setEnabled(False)
            self.modelProsad.removeRows(0, self.modelProsad.rowCount())
        self.recAllNewProsad = self.recAllOldProsad
        self.tableProsad.selectRow(self.recNum)

    def refreshTableRezultProsad(self) -> set:
        """Обновление таблицы Результатов компрессионных испытаний"""
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT *
                            FROM public.prosadi 
                            WHERE prosadi.id_prosad = %(v2)s
                            ORDER BY prosadi.id ASC""", {'v2': self.prosadId})
            self.recAllRezultProsad = curs.fetchall()  # Полный исходный список результатов компрессионных испытаний выбранного образца
        self.recCountRezultProsad = len(self.recAllRezultProsad)
        self.recAllOldRezultProsad = self.recAllRezultProsad    # Исходный список результатов испытаний образца
        if self.recCountRezultProsad > 0:
            self.modelRezultProsad.setRowCount(self.recCountRezultProsad)
            self.tableRezultProsad.setEnabled(True)
            self.toolButton_2.setEnabled(True)
            self.toolButton.setEnabled(True)
            self.modelRezultProsad.removeRows(0, self.modelRezultProsad.rowCount())
            for i in range(0, self.recCountRezultProsad):  # Занесение данных в ячейки таблицы
                self.recOldRezultProsad = self.recAllRezultProsad[i][0:12]
                listrow = list(self.recOldRezultProsad)  # Список одной строки
                rowitem = []
                for j in range(0, 12):
                    item = QtGui.QStandardItem(str(listrow[j]))
                    item.setTextAlignment(QtCore.Qt.AlignCenter)
                    if j == 5 or j == 6 or j == 9 or j == 10 or j == 11:
                        item.setEnabled(False)
                        item.setBackground(self.brushgr)
                        item.setForeground(self.brushbl)
                    rowitem.append(item)                    # Формирование строки таблицы
                self.modelRezultProsad.appendRow(rowitem)   # Добавление строки в таблицу
        else:
            self.tableRezultProsad.setEnabled(False)
            self.toolButton_2.setEnabled(False)
            self.toolButton.setEnabled(False)
            self.modelRezultProsad.removeRows(0, self.modelRezultProsad.rowCount())
        self.recAllNewRezultProsad = self.recAllOldRezultProsad
        self.refreshMetodRaschet()
        if len(self.recAllNewRezultProsad) > 0:
            maxotn_prosad = np.max(np.array(self.recAllNewRezultProsad), axis=0)[-1]
        else:
            maxotn_prosad = 0
        self.prosadName = self.refreshProsad(maxotn_prosad)
        self.otn_prosad = round(maxotn_prosad, 4)     # Относительная просадочность ґрунта

    def refreshProsad(self, maxotn_prosad) -> set:
        """Обновление характеристики просадочности"""
        if maxotn_prosad >= 0.01:
            prosadtext = "Ґрунт просідний"
            self.label_18.setStyleSheet("background-color: red; color: yellow")
        elif maxotn_prosad > 0.00:
            prosadtext = "Ґрунт непросідний"
            self.label_18.setStyleSheet("background-color: lightgreen; color: white")
        else:
            prosadtext = ""
            self.label_18.setStyleSheet("background-color: white; color: black")
        return prosadtext[5:]

    def refreshToolbar(self) -> set:
        """Обновляет панель инструментов"""
        if self.recNum == 0 and self.recCount > 1:
            form.action_8.setEnabled(False)  # Первая запись
            form.action_9.setEnabled(False)  # Предыдущая запись
            form.action_10.setEnabled(True)  # Следующая запись
            form.action_11.setEnabled(True)  # Последняя запись
        elif self.recNum in range(1, self.recCount - 1):
            form.action_8.setEnabled(True)  # Первая запись
            form.action_9.setEnabled(True)  # Последняя запись
            form.action_10.setEnabled(True)  # Следующая запись
            form.action_11.setEnabled(True)  # Последняя запись
        elif self.recNum == self.recCount - 1 and self.recCount > 1:
            form.action_8.setEnabled(True)  # Первая запись
            form.action_9.setEnabled(True)  # Предыдущая запись
            form.action_10.setEnabled(False)  # Следующая запись
            form.action_11.setEnabled(False)  # Последняя запись
        else:
            form.action_8.setEnabled(False)  # Первая запись
            form.action_9.setEnabled(False)  # Предыдущая запись
            form.action_10.setEnabled(False)  # Следующая запись
            form.action_11.setEnabled(False)  # Последняя запись

    def setRow(self) -> set:
        if self.currentIndex() == 0:
            self.refreshToolbar()
            self.refreshRecord()
        elif self.currentIndex() == 1:
            self.tableProsad.selectRow(self.recNum)
        else:
            self.refreshRecord()

    def currentRow(self) -> set:
        """Определение номера записи (строки)  и установка движка на эту запись"""
        if self.currentIndex() == 1:
            recNum = self.recNum
            self.recNum = self.selmodelProsad.currentIndex().row()
            if self.recNum < 0:
                self.recNum = recNum
            self.refreshToolbar()

    def showEvent(self, e) -> set:
        """Выполняет действия при выводе окна на экран"""
        form.action_26.setEnabled(False)
        QtWidgets.QTabWidget.showEvent(self, e)

    def hideEvent(self, e) -> set:
        """Выполняет действия при скрытии окна"""
        form.action_26.setEnabled(True)
        form.prosadwin = None
        if self.recAll != []:
            self.asktoSave()
        form.refreshMain()
        QtWidgets.QTabWidget.hideEvent(self, e)

    def nextRecord(self) -> set:
        """Становится на следующей записи"""
        self.recNum += 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableProsad.selectRow(self.recNum)

    def priorRecord(self) -> set:
        """Становится на предыдущей записи"""
        self.recNum -= 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableProsad.selectRow(self.recNum)

    def firstRecord(self) -> set:
        """Становится на первой записи"""
        self.recNum = 0
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableProsad.selectRow(self.recNum)

    def lastRecord(self) -> set:
        """Становится на последней записи"""
        if self.recCount > 0:
            self.recNum = self.recCount - 1
            self.refreshToolbar()
            self.asktoSave()
            self.refreshRecord()
            self.tableProsad.selectRow(self.recNum)

    def sortRecord(self) -> set:
        """Сортировка записей"""
        self.recAll.sort(key=itemgetter(0,5,7))
        form.action_13.setEnabled(False)  # Сортировать
        form.action_14.setEnabled(True)  # Снять сортировку
        self.refreshRecord()

    def desortRecord(self) -> set:
        """Отмена сортировки, что соответствует сортировке по ID"""
        self.recAll.sort(key=itemgetter(10))
        form.action_13.setEnabled(True)  # Сортировать
        form.action_14.setEnabled(False)  # Снять сортировку
        self.refreshRecord()

    def setMk(self, metodMk:int) -> float:
        """Расчет коэффициента Мк"""
        global idActivObekt
        if metodMk == 1:
            nkfMk = setMkSNIP(self.e, self.il)
        else:
            val11 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole)  # ID образца
            with UseDatebase(dbconfig) as curs:
                curs.execute("""SELECT burehole.id_obekt,
                                           obekt.archnum,
                                           obekt.name,
                                           obekt.stadia,
                                           burehole.num_hole,
                                           burehole.koord_z,
                                           obrazec.id,
                                           obrazec.num_obrazec,
                                           obrazec.glub_otbor,
                                           obrazec.lab_num,
                                           strate.vozrast,
                                           strate.name_strate,
                                           strate.strate1,
                                           strate.strate2
                                       FROM obekt,
                                           burehole,
                                           obrazec,
                                           strate
                                       WHERE obekt.id = burehole.id_obekt
                                           AND burehole.id = obrazec.id_burehole
                                           AND burehole.id = strate.id_burehole
                                           AND obrazec.glub_otbor >= strate.strate1
                                           AND obrazec.glub_otbor <= strate.strate2
                                           AND obrazec.id = %(v11)s
                                           AND obekt.id = %(v0)s;""", {'v0': idActivObekt, 'v11': val11})
                self.recVozrast = curs.fetchone()  # Характеристика текущего образца
            self.vozrast = self.recVozrast[10]  # Возраст стратиграфо-генетический индекс образца
            nkfMk = setMkDBN(self.vozrast, self.ip, self.e, self.kfSr)
        return nkfMk

    def setB(self) -> set:
        """Расчет коэффициента  β"""
        #kf_b = setBVP(self.plotn, self.ip, self.il)    # Через плотность и консистенцию
        #kf_b = setBV(self.e, self.ip, self.il)     # Через коэффициент пористости и консистенцию
        kf_b = setBIL(self.pd, self.ip, self.il)    # Через консистенцию (для песков через плотность скелета)
        self.spinBox_3.setValue(kf_b)

    def calcMoE(self) -> set:
        """Расчет Кф пористости, Кф сжимаемости, модуля деформации
        и относительной деформации просадочности для всех нагрузок"""
        self.saveRecordRezultProsad()
        self.refreshTableRezultProsad()
        e0 = self.e
        kf_b = dc.Decimal(self.spinBox_3.value())  # коэффициент  β
        if self.label_15.text() == '-':
            mk = dc.Decimal('1.00')
        else:
            mk = dc.Decimal(self.label_15.text())  # коэффициент  Mk
        rowAll = self.modelRezultProsad.rowCount()
        if rowAll > 0:  # Расчет проводить
            recProsadi = []
            i = 0
            for i in range(0, rowAll):
                recOneProsadi = []
                j = 0
                for j in range(2, 12):
                    val = dc.Decimal(self.modelRezultProsad.item(i, j).data(QtCore.Qt.EditRole))
                    recOneProsadi.append(val)
                recProsadi.append(recOneProsadi)
            arrProsadi = np.array(recProsadi)
            i = 0
            for i in range(0, rowAll):
                if self.radioButton_3.isChecked() == True:  # Расчет через относительное сжатие
                    arrProsadi[i, 2] = e0 - arrProsadi[i, 1] * (1 + e0)  # Кф пористости природный при текущей нагрузке
                    arrProsadi[i, 6] = e0 - arrProsadi[i, 5] * (1 + e0)  # Кф пористости водонасыщенный при текущей нагрузке
                else:                                                   # Расчет через Кф пористости
                    if arrProsadi[i, 2] == 0:
                        arrProsadi[i, 2] = e0
                    if arrProsadi[i, 6] == 0:
                        arrProsadi[i, 6] = e0
                    arrProsadi[i, 1] = (e0 - arrProsadi[i, 2]) / (1 + e0)   # Относительное сжатие природное
                    arrProsadi[i, 5] = (e0 - arrProsadi[i, 6]) / (1 + e0)  # Относительное сжатие водонасыщенное
            i = 0
            otn_sjat1 = otn_sjat1w = otn_sjat2 = otn_sjat2w = dc.Decimal('0.0000')
            for i in range(0, rowAll):
                if i == 0:      # расчет для первой нагрузки
                    arrProsadi[i, 3] = (e0 - arrProsadi[i, 2]) / arrProsadi[i, 0]   # mo природный
                    arrProsadi[i, 4] = arrProsadi[i, 0] / arrProsadi[i, 1] * kf_b   # E природный
                    arrProsadi[i, 7] = (e0 - arrProsadi[i, 6]) / arrProsadi[i, 0]  # mo водонасыщенный
                    if arrProsadi[i, 5] > 0:
                        arrProsadi[i, 8] = arrProsadi[i, 0] / arrProsadi[i, 5] * kf_b  # E водонасыщенный
                        arrProsadi[i, 9] = arrProsadi[i, 5] - arrProsadi[i, 1]          # Относительная просадочность
                    else:
                        arrProsadi[i, 9] = 0
                elif i > 0:     # расчет для всех остальных нагрузок
                    arrProsadi[i, 3] = (arrProsadi[i - 1, 2] - arrProsadi[i, 2]) / (arrProsadi[i, 0] - arrProsadi[i - 1, 0])  # mo природный
                    arrProsadi[i, 4] = (arrProsadi[i, 0] - arrProsadi[i - 1, 0]) / (arrProsadi[i, 1] - arrProsadi[i - 1, 1]) * kf_b  # E природный
                    arrProsadi[i, 7] = (arrProsadi[i - 1, 6] - arrProsadi[i, 6]) / (arrProsadi[i, 0] - arrProsadi[i - 1, 0])  # mo водонасыщенный
                    if arrProsadi[i, 5] > 0:
                        arrProsadi[i, 8] = (arrProsadi[i, 0] - arrProsadi[i - 1, 0]) / (arrProsadi[i, 5] - arrProsadi[i - 1, 5]) * kf_b  # E водонасыщенный
                        arrProsadi[i, 9] = arrProsadi[i, 5] - arrProsadi[i, 1]  # Относительная просадочность
                    else:
                        arrProsadi[i, 9] = 0
                if arrProsadi[i, 0] == dc.Decimal('0.1000'):
                    otn_sjat1 = arrProsadi[i, 1]
                    otn_sjat1w = arrProsadi[i, 5]
                else:
                    pass
                if arrProsadi[i, 0] == dc.Decimal('0.2000'):
                    otn_sjat2 = arrProsadi[i, 1]
                    otn_sjat2w = arrProsadi[i, 5]
                else:
                    pass
        else:
            pass  # Расчет не проводить
        i = 0
        for i in range(0, self.recCountRezultProsad):  # Занесение данных в ячейки таблицы
            j = 0
            for j in range(2, 12):
                if j == 3 or j == 5 or j == 7 or j == 9 or j == 11:
                    self.modelRezultProsad.item(i, j).setText(str(round(arrProsadi[i, j - 2], 4)))
                elif j == 4 or j == 8:
                    self.modelRezultProsad.item(i, j).setText(str(round(arrProsadi[i, j - 2], 3)))
                elif j == 6 or j == 10:
                    self.modelRezultProsad.item(i, j).setText(str(round(arrProsadi[i, j - 2], 2)))
                else:
                    pass
        mod_def = mod_defw = dc.Decimal('0.00')
        if (otn_sjat2 - otn_sjat1) > 0:
            mod_def = dc.Decimal('0.1') / (otn_sjat2 - otn_sjat1) * kf_b      # Модуль деформации природный в интервале 0,1-0,2 МПа
        if (otn_sjat2w - otn_sjat1w) > 0:
            mod_defw = dc.Decimal('0.1') / (otn_sjat2w - otn_sjat1w) * kf_b   # Модуль деформации водонасыщенный в интервале 0,1-0,2 МПа
        arrOtnProsad = np.concatenate([[arrProsadi[:, 0]], [arrProsadi[:, 9]]]).T
        p_pr = p_prmin = p_prmax = prmax = prmin = dc.Decimal('0.0000')
        for i in range(0, rowAll):
            if arrOtnProsad[i, 1] < 0.01:
                p_prmin = arrOtnProsad[i, 0]
                prmin = arrOtnProsad[i, 1]
            if arrOtnProsad[i, 1] >= 0.01:
                p_prmax = arrOtnProsad[i, 0]
                prmax = arrOtnProsad[i, 1]
                break
        if (prmax - prmin) > 0:
            p_pr = (p_prmax - p_prmin) / (prmax - prmin) * (dc.Decimal('0.01') - prmin) + p_prmin # Початковий тиск просідання, МПа
            self.label_13.setText(str(round(mod_def, 2)))
            self.label_14.setText(str(round(mod_def * mk, 2)))
        if (otn_sjat2w - otn_sjat1w) > 0:
            self.label_32.setText(str(round(mod_defw, 2)))
            self.label_44.setText(str(round(mod_defw * mk, 2)))
        if self.comboBox_3.currentData(role=QtCore.Qt.UserRole) == 43:
            self.label_31.setText(str(round(p_pr, 4)))
        else:
            self.label_31.setText('-')
        maxotn_prosad = np.max(arrOtnProsad, axis = 0)[-1]    # Максимальное значение относительной просадочности
        self.otn_prosad = round(maxotn_prosad, 4)         # Относительная просадочность максимальная
        self.modelProsad.item(self.recNum, 12).setText(str(self.otn_prosad))    # Відносна деформація просідання, д.о.
        self.refreshProsad(maxotn_prosad)       # Обновление характеристики просадочности
        self.saveRecordRezultProsad()
        self.refreshTableRezultProsad()
        self.refreshGraph()

    def addRecord(self) -> set:
        """Добавляет новую запись"""
        val11 = self.comboBox.itemData(self.comboBox.currentIndex(),
                                       role=QtCore.Qt.UserRole)  # ID последнего образца
        with UseDatebase(dbconfig) as curs:
            curs.execute("INSERT INTO prosad (id_obrazec) VALUES (%(v11)s);", {'v11': val11})
        self.requerySelect()
        self.recCount = len(self.recAll)
        if self.recCount == 1:
            self.recNum = 0
            self.recOldAll = self.recAll[self.recNum]
        self.refreshRecord()
        self.lastRecord()
        self.refreshToolbar()

    def addRezultProsad(self) -> set:
        """Добавляет результаты одного сжатия при заданном давлении"""
        with UseDatebase(dbconfig) as curs:
            curs.execute("SELECT count(id) FROM prosadi WHERE prosadi.id_prosad = %(v2)s;",
                         {'v2': self.prosadId})
            countComprei = curs.fetchone()
            numcount = countComprei[0]
        with UseDatebase(dbconfig) as curs:
            curs.execute("INSERT INTO prosadi (id_prosad) VALUES (%(v2)s);",
                         {'v2': self.prosadId})
        self.saveRecordRezultProsad()
        self.refreshTableRezultProsad()
        self.tableRezultProsad.setFocus()
        sel = self.tableRezultProsad.selectionModel()
        ind = self.tableRezultProsad.model().index(numcount, 2)
        sel.setCurrentIndex(ind, QtCore.QItemSelectionModel.ClearAndSelect)

    def delRecord(self) -> set:
        """Удаляет текущую запись"""
        self.refreshRecord()
        val10 = self.recOldAll[10]  # ID
        if val10 is not None:
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                           "Просідність ґрунтів",
                                           "Ви бажаєте видалити поточний запис з порядковим номером - " + str(self.recNum + 1) +
                                           " та лабораторним номером - " + str(self.recOldAll[9]) + "?")
            btnYes = QtWidgets.QPushButton("&Так")
            btnNo = QtWidgets.QPushButton("&Ні")
            btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
            self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
            self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
            self.formMassWin.setDefaultButton(btnYes)
            result = self.formMassWin.exec()
            if result == 0:
                try:
                    with UseDatebase(dbconfig) as curs:
                        curs.execute("DELETE FROM prosad WHERE id = %(v10)s;", {'v10': val10})
                    self.requerySelect()
                    self.recCount = len(self.recAll)
                    if self.recCount > 0:
                        self.firstRecord()
                        self.refreshRecord()
                        self.refreshToolbar()
                    else:
                        self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information, "Просідність ґрунтів",
                                                       "Видалено останній запис")
                        btnOK = QtWidgets.QPushButton("&OK")
                        btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                        self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                        result = self.formMassWin.exec()
                        if result == 0:
                            self.formMassWin.close()
                            self.parent().close()
                except:
                    self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "Просідність ґрунтів",
                                                            "Видалення не можливо. "
                                                            "З поточним записом пов'язані записи у таблиці: "
                                                            "Результати випробувань"
                                                            "\nПотрібно виконати попереднє видалення усіх записів "
                                                            "в указаній таблиці")
                    btnOK = QtWidgets.QPushButton("&OK")
                    btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                    self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                    result = self.formMassWin.exec()
                    if result == 0:
                        self.formMassWin.close()
            else:
                pass
        else:
            pass

    def delRezultProsad(self) -> set:
        """Удаляет один результат сжатия из таблицы результатов испытаний"""
        i = self.tableRezultProsad.currentIndex().row()
        if i == None or i == -1:
            pass
        else:
            idRezultProsad = self.modelRezultProsad.item(i, 0).text()
            with UseDatebase(dbconfig) as curs:
                curs.execute("DELETE FROM prosadi WHERE id = %(v0)s;", {'v0': idRezultProsad})
        self.refreshTableRezultProsad()

    def readRecord(self) -> set:
        """Считывание данных текущей записи с экранной формы"""
        val0 = self.recOldAll[0]  # ID объекта
        val1 = self.recOldAll[1]  # Архивный номер объекта
        val2 = self.recOldAll[2]  # Наименование объекта
        val3 = self.recOldAll[3]  # Стадия проектирования
        val4 = self.recOldAll[4]  # Вид выработки
        val5 = self.recOldAll[5]  # Номер выработки
        val6 = self.recOldAll[6]  # Номер образца
        val7 = self.recOldAll[7]  # Глубина отбора
        val8 = self.recOldAll[8]  # Абсолютная отметка отбора
        val9 = self.recOldAll[9]  # Лабораторный номер
        val10 = self.recOldAll[10]  # ID компрессионных испытаний
        val11 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole)  # ID образца
        val14 = self.comboBox_2.itemData(self.comboBox_2.currentIndex(),
                                         role=QtCore.Qt.UserRole)  # Идентификатор прибора
        val15 = self.comboBox_3.itemData(self.comboBox_3.currentIndex(),
                                         role=QtCore.Qt.UserRole)  # Идентификатор схемы испытаний
        val16 = self.doubleSpinBox.value()  # Вологість ґрунту, %
        if val16 == 0:
            val16 = None
        val17 = self.doubleSpinBox_2.value()  # Вологість на границi текучостi, %
        if val17 == 0:
            val17 = None
        val18 = self.doubleSpinBox_3.value()  # Вологість на границi розкочування, %
        if val18 == 0:
            val18 = None
        val19 = self.doubleSpinBox_4.value()  # Щільність ґрунту, г/см3
        if val19 == 0:
            val19 = None
        val20 = self.doubleSpinBox_5.value()  # Щiльнiсть часток ґрунту, г/см3
        if val20 == 0:
            val20 = None
        val23 = self.spinBox_3.value()  # Коэффициент β
        val24 = self.metodRasch  # Метод расчета модуля деформации
        val25 = dc.Decimal(self.label_13.text())  # Модуль деформации без учета Кф Мк, МПа
        val26 = dc.Decimal(self.label_14.text())  # Модуль деформации с учетом Кф Мк, МПа
        if self.radioButton.isChecked() == True:    # Метод расчета Мк
            val27 = 1
        else:
            val27 = 2
        if self.label_31.text() == "-":
            val28 = None                    # Початковий тиск просідання, МПа
        else:
            val28 = dc.Decimal(self.label_31.text())
        val29 = self.recOldAll[30]  # Код группы физсвойств = 1 для глин
        val30 = self.comboBox_4.itemData(self.comboBox_4.currentIndex(),
                                         role=QtCore.Qt.UserRole)  # ID лаборанта
        if self.label_32.text() == '-':
            val31 = None
        else:
            val31 = dc.Decimal(self.label_32.text())  # Модуль деформации водонасыщенный без учета Кф Мк, МПа
        if self.label_44.text() == '-':
            val32 = None
        else:
            val32 = dc.Decimal(self.label_44.text())  # Модуль деформации водонасыщенный с учетом Кф Мк, МПа
        recOne = [val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, val10, val11,
                       val14, val15, val16, val17, val18, val19, val20,
                       val23, val24, val25, val26, val27, val28, val29, val30, val31, val32]
        return recOne

    def asktoSave(self) -> set:
        """Проверяет наличие изменений в компрессионных испытаниях"""
        if self.recOld:
            # Считывание данных и обновление списка согласно значений экранной формы
            self.recNew = self.readRecord()
            askProsad = (self.recNew == self.recOld)
            askTableProsad = self.asktoSaveTableProsad()
            askRezultProsad = self.asktoSaveRezultProsad()
            if askProsad == False or askRezultProsad == False:  # В характеристиках компрессионных испытаний и физических свойствах грунтов есть изменения
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                               "Просідність ґрунтів",
                                               "Є незбережені дані результатів іспитів по визначенню просідності ґрунтів методом компресійного стиску. "
                                               "\nВи бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecord(False)
                else:
                    pass
            elif askTableProsad == False:  # В таблице характеристик компрессионных испытаний есть изменения
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                               "Просідність ґрунтів",
                                               "Є незбережені дані у таблиці результатів іспитів по визначенню просідності ґрунтів методом компресійного стиску. "
                                               "\nВи бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecordTableProsad(False)
                else:
                    pass
            else:
                pass
        else:
            pass

    def asktoSaveTableProsad(self) -> set:
        """Проверка наличия изменений в таблице компрессионных испытаний"""
        # Считывание данных и обновление списка согласно значений экранной формы
        self.recAllNewProsad = []
        for i in range(0, self.recCountProsad):
            rec = []
            j = 0
            for j in range(0, 14):
                if j == 0:
                    el = str(self.modelProsad.item(i, j).data(QtCore.Qt.EditRole))  # ID Лабораторный номер
                elif j == 1 or j == 6:
                    el = int(self.modelProsad.item(i, j).data(QtCore.Qt.EditRole))
                elif j == 2 or j == 3 or j == 4 or j == 13:
                    el = int(self.modelProsad.item(i, j).data(QtCore.Qt.UserRole))
                else:
                    if self.modelProsad.item(i, j).data(QtCore.Qt.EditRole) == '-':
                        el = None
                    else:
                        el = dc.Decimal(self.modelProsad.item(i, j).data(QtCore.Qt.EditRole))
                rec.append(el)  # Формирование текущей записи из элементов
            rec = rec[0:9] + rec[11:12] + rec[13:14] + rec[9:11] + rec[12:13] # Замена очередности значений под начальный формат
            self.recAllNewProsad.append(rec)  # Формирование обновленного списка (записей-кортежей)
        if self.recAllNewProsad == self.recAllOldProsad:
            ask = True
        else:
            ask = False
        return ask

    def asktoSaveRezultProsad(self) -> set:
        """Проверка наличия изменений в таблице Результатов компрессионных испытаний"""
        # Считывание данных и обновление списка результатов компрессионных испытаний согласно значений экранной формы
        self.recAllNewRezultProsad = []
        for i in range(0, self.recCountRezultProsad):
            rec = []
            for j in range(0, 12):
                el = self.modelRezultProsad.item(i, j).data(QtCore.Qt.EditRole)  # Определение элемента текущей записи
                if j == 0 or j == 1:
                    el = int(el)
                else:
                    el = dc.Decimal(el)
                rec.append(el)  # Формирование текущей записи из элементов
            self.recAllNewRezultProsad.append(tuple(rec))  # Формирование обновленного списка (записей-кортежей)
        if self.recAllNewRezultProsad == self.recAllOldRezultProsad:
            ask = True
        else:
            ask = False
        return ask

    def saveAll(self) -> set:
        """Сохраняет изменения по нажатию кнопки Сохранить на панели инструментов"""
        self.recNew = self.readRecord()
        if self.currentIndex() == 0:
            self.saveRecord(False)
        if self.currentIndex() == 1:
            self.setCurrentIndex(0)
            self.setCurrentIndex(1)
        else:
            pass

    def saveRecord(self, ask) -> set:
        """Сохраняет изменения в записи и формирует новый курсор"""
        if ask == False:
            with UseDatebase(dbconfig) as curs:
                curs.execute("""UPDATE prosad
                               SET id_obrazec = %(v11)s,
                                   id_pribor = %(v12)s,
                                   id_harakter = %(v13)s,
                                   kf_b = %(v19)s,
                                   mod_def = %(v21)s,
                                   mod_def_mk = %(v22)s,
                                   mod_defw = %(v27)s,
                                   mod_defw_mk = %(v28)s,
                                   metod_mod = %(v20)s,
                                   metod_mk = %(v23)s,
                                   pmin_prosad = %(v24)s,
                                   id_labman = %(v26)s
                               WHERE id = %(v10)s;""",
                             {'v11': self.recNew[11], 'v12': self.recNew[12], 'v13': self.recNew[13],
                              'v19': self.recNew[19], 'v20': self.recNew[20], 'v21': self.recNew[21],
                              'v22': self.recNew[22], 'v23': self.recNew[23], 'v24': self.recNew[24],
                              'v26': self.recNew[26], 'v27': self.recNew[27], 'v28': self.recNew[28],
                              'v10': self.recNew[10]})
            if self.recOld[25] == 1:
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE glina
                                   SET vlag = %(v14)s,
                                       vlagtek = %(v15)s,
                                       vlagrask = %(v16)s,
                                       plotn = %(v17)s,
                                       plotnchast = %(v18)s
                                   WHERE id_obrazec = %(v11)s;""",
                                 {'v14': self.recNew[14], 'v15': self.recNew[15], 'v16': self.recNew[16],
                                  'v17': self.recNew[17], 'v18': self.recNew[18], 'v11': self.recNew[11]})

            else:
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE pesok
                                   SET vlag = %(v14)s,
                                       plotn = %(v17)s,
                                       plotnchast = %(v18)s
                                   WHERE id_obrazec = %(v11)s;""",
                                 {'v14': self.recNew[14], 'v17': self.recNew[17], 'v18': self.recNew[18],
                                  'v11': self.recNew[11]})
            self.requerySelect()
            self.saveRecordRezultProsad()
            self.refreshRecord()
            self.refreshGraph()
        else:
            pass

    def saveRecordRezultProsad(self) -> set:
        """Сохранение записей таблицы результатов компрессионных испытаний"""
        ask = self.asktoSaveRezultProsad()
        if ask == False:
            for i in range(0, self.recCountRezultProsad):
                recRezultProsad = self.recAllNewRezultProsad[i]
                val0 = int(recRezultProsad[0])  # Идентификатор сжатия при одной нагрузке
                val1 = int(recRezultProsad[1])  # Идентификатор компрессионных испытаний
                val2 = recRezultProsad[2]   # Нагрузка, МПа
                val3 = recRezultProsad[3]   # Отностительное сжатие, д.е.
                val4 = recRezultProsad[4]   # Коэффициент пористости, д.е.
                val5 = recRezultProsad[5]   # Коэффициент сжимаемости, МПа-1
                val6 = recRezultProsad[6]   # Модуль деформации, МПа
                val7 = recRezultProsad[7]   # Відносний стиск ε д.о.
                val8 = recRezultProsad[8]   # Коефіцієнти пористості е д.о.
                val9 = recRezultProsad[9]   # Коефіцієнт стисливості mo МПа-1
                val10 = recRezultProsad[10] # Модуль деформації Е, МПа
                val11 = recRezultProsad[11] # Відносне просідання
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE prosadi  
                                    SET nagruzka = %(v2)s, 
                                        otn_sjat = %(v3)s, 
                                        kf_por = %(v4)s, 
                                        kf_sjim = %(v5)s, 
                                        mod_def = %(v6)s,
                                        otn_sjatw = %(v7)s,
                                        kf_porw = %(v8)s,
                                        kf_sjimw = %(v9)s,
                                        mod_defw = %(v10)s,
                                        otn_prosad = %(v11)s
                                    WHERE id = %(v0)s;""",
                                 {'v2': val2, 'v3': val3, 'v4': val4, 'v5': val5, 'v6': val6, 'v7': val7,
                                  'v8': val8, 'v9': val9, 'v10': val10, 'v11': val11, 'v0': val0})
        else:
            pass

    def saveRecordTableProsad(self, ask) -> set:
        """Сохранение записей таблицы характеристики компрессионных испытаний"""
        if ask == False:
            for i in range(0, self.recCountProsad):
                recTabProsad = self.recAllNewProsad[i]
                val1 = recTabProsad[1]     # ID компрессии 10
                val2 = recTabProsad[2]     # ID образца 11
                val3 = recTabProsad[3]     # ID прибора 12
                val4 = recTabProsad[4]     # ID характеристики испытаний 13
                val5 = recTabProsad[5]     # Коэффициент b 14
                val10 = recTabProsad[10]    # ID лаборанта 15
                val13 = recTabProsad[13]    # Максимальная относительная просадочность
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE prosad
                                  SET id_obrazec = %(v2)s,
                                        id_pribor = %(v3)s,
                                        id_harakter = %(v4)s,
                                        kf_b = %(v5)s,
                                        id_labman = %(v10)s,
                                        otn_prosad = %(v13)s
                                  WHERE id = %(v1)s;""",
                                 {'v2': val2, 'v3': val3, 'v4': val4, 'v5': val5, 'v10': val10, 'v13': val13,
                                  'v1': val1})
            self.requerySelect()
            self.refreshRecord()
        else:
            pass


class NabuhWindow(QtWidgets.QTabWidget, egclasswin.Ui_Nabuh_win):
    def __init__(self) -> set:
        """Инициализация окна Результатов испытаний набухания"""
        super().__init__()
        self.setupUi(self)
        global idActivObekt
        self.recAllOldNabuh = []
        self.recCountNabuh = 0
        self.recNum = 0
        # Подготовка инструментов для рисования
        self.penblack = QtGui.QPen(QtCore.Qt.black)
        self.penblackp = QtGui.QPen(QtCore.Qt.black, 1, QtCore.Qt.DotLine)
        self.penred = QtGui.QPen(QtCore.Qt.red)
        self.penbp = QtGui.QPen(QtCore.Qt.blue, 3, QtCore.Qt.DotLine)
        self.brushr = QtGui.QBrush(QtCore.Qt.red)
        self.brushy = QtGui.QBrush(QtCore.Qt.yellow)
        self.brushly = QtGui.QBrush(QtGui.QColor(255, 255, 0, 30))  # Светло-желтый
        self.brushg = QtGui.QBrush(QtCore.Qt.green)
        self.brushb = QtGui.QBrush(QtCore.Qt.blue)
        self.brushw = QtGui.QBrush(QtCore.Qt.white)
        self.brushbl = QtGui.QBrush(QtCore.Qt.black)
        self.brushgr = QtGui.QBrush(QtCore.Qt.lightGray)
        self.brushgr.setColor(QtGui.QColor(245,245,245))
        self.penb = QtGui.QPen(self.brushb, 2)
        self.peny = QtGui.QPen(self.brushy, 2)
        # Оформление сцены графиков
        self.scene = QtWidgets.QGraphicsScene(0, 0, 310, 310, self.graphicsView)
        self.graphicsView.setScene(self.scene)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT obrazec.id, 
                                obrazec.lab_num
                            FROM obekt,
                                burehole,
                                obrazec
                            WHERE obekt.id = %(v)s 
                                AND obekt.id = burehole.id_obekt 
                                AND burehole.id = obrazec.id_burehole
                                AND obrazec.mater_obr != 'Вода'
                            ORDER BY obrazec.lab_num""", {'v': idActivObekt})
            recAll = curs.fetchall()
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox.addItem(recOne[1])
                self.comboBox.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT id, 
                                name_pribor,
                                visota,
                                diametr,
                                plosch 
                            FROM pribor 
                            WHERE isput = 'Вільне набухання'""")
            recAll = curs.fetchall()
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox_2.addItem(recOne[1])
                self.comboBox_2.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
                self.comboBox_2.setItemData(i, recOne[2], role=QtCore.Qt.UserRole+1)
                self.comboBox_2.setItemData(i, recOne[3], role=QtCore.Qt.UserRole+2)
                self.comboBox_2.setItemData(i, recOne[4], role=QtCore.Qt.UserRole+3)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT id, 
                                name_pribor,
                                visota,
                                diametr,
                                plosch 
                            FROM pribor 
                            WHERE isput = 'Компресійний стиск'""")
            recAll = curs.fetchall()
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox_5.addItem(recOne[1])
                self.comboBox_5.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
                self.comboBox_5.setItemData(i, recOne[2], role=QtCore.Qt.UserRole+1)
                self.comboBox_5.setItemData(i, recOne[3], role=QtCore.Qt.UserRole+2)
                self.comboBox_5.setItemData(i, recOne[4], role=QtCore.Qt.UserRole+3)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT id, metod, shema 
                            FROM harakter 
                            WHERE metod = 'Компресiйний стиск при набуханні'
                            ORDER BY shema""")
            recAll = curs.fetchall()
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox_3.addItem(recOne[2])
                self.comboBox_3.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT ispol.id, 
                                ispol.fio
                            FROM ispol
                            WHERE ispol.vidrab = 7 
                            ORDER BY ispol.fio""")
            recAll = curs.fetchall()
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox_4.addItem(recOne[1])
                self.comboBox_4.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
        self.comboBox_4.insertItem(0, "")
        self.comboBox_4.setItemData(0, None, role=QtCore.Qt.UserRole)
        self.nabuhId = 0  # ID свойств испытания
        self.modelNabuh = QtGui.QStandardItemModel(30, 9)  # Создание модели характеристики испытаний
        self.selmodelNabuh = QtCore.QItemSelectionModel(self.modelNabuh)  # Создание модели выделения
        self.modelNabuh.setRowCount(len(self.recAll))
        self.modelNabuh.setHorizontalHeaderLabels(['Labnum',
                                                    'ID Nabuh',
                                                    'Лабораторний \nномер',
                                                    'Прилад \nз визначення \nвільного набухання',
                                                    'Прилад \nз визначення \nтиску набухання',
                                                    'Схема випробувань',
                                                    'Відносна деформація \nнабухання \nбез навантаження \nεsw д.о.',
                                                    'Тиск \nнабухання \nPsw, МПа',
                                                    'Лаборант'])
        self.tableNabuh.setModel(self.modelNabuh)  # Создание представления
        self.tableNabuh.setSelectionModel(self.selmodelNabuh)   # Установить модель выделения в представлении
        self.tableNabuh.setColumnWidth(0, 10)  # Labnum
        self.tableNabuh.setColumnWidth(1, 10)  # ID Nabuh
        self.tableNabuh.setColumnWidth(2, 120)  # Лабораторний номер
        self.tableNabuh.setColumnWidth(3, 140)  # Прилад з визначення вільного набухання
        self.tableNabuh.setColumnWidth(4, 140)  # Прилад з визначення тиску набухання
        self.tableNabuh.setColumnWidth(5, 200)  # Схема випробувань
        self.tableNabuh.setColumnWidth(6, 150)  # Відносна деформація набухання без навантаження ε sw
        self.tableNabuh.setColumnWidth(7, 100)  # Тиск набухання, МПа
        self.tableNabuh.setColumnWidth(8, 140)  # Лаборант
        self.tableNabuh.setColumnHidden(0, True)
        self.tableNabuh.setColumnHidden(1, True)
        self.tableNabuh.setEnabled(True)
        self.modelRezultNabuh = QtGui.QStandardItemModel(10, 7)  # Создание модели результатов компрессионных испытаний
        self.selmodelRezultNabuh = QtCore.QItemSelectionModel(self.modelRezultNabuh)  # Создание модели выделения
        self.modelRezultNabuh.setHorizontalHeaderLabels(['ID',
                                                        'ID Nabuh',
                                                        'Нормальний \nтиски \np МПа',
                                                        'Відносна деформація \nнабухання \nεsw д.о.',
                                                        'Коефіцієнт \nпористості \nе д.о.',
                                                        'Вологість \nнабухання \nWsw %',
                                                        'Повна \nвологоємність \nWsat %'])
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT *
                            FROM public.nabuhi 
                            WHERE nabuhi.id_nabuh = %(v2)s
                            ORDER BY nabuhi.id ASC""", {'v2': self.nabuhId})
            self.recAllRezultNabuh = curs.fetchall()
        self.modelRezultNabuh.setRowCount(len(self.recAllRezultNabuh))
        self.tableRezultNabuh.setModel(self.modelRezultNabuh)  # Создание представления
        self.tableRezultNabuh.setSelectionModel(self.selmodelRezultNabuh)  # Установить модель выделения в представлении
        self.tableRezultNabuh.setColumnWidth(0, 10)  # ID
        self.tableRezultNabuh.setColumnWidth(1, 10)  # ID Nabuh
        self.tableRezultNabuh.setColumnWidth(2, 150)  # Нормальний тиски МПа
        self.tableRezultNabuh.setColumnWidth(3, 180)  # Відносна деформація набухання e sw д.о.
        self.tableRezultNabuh.setColumnWidth(4, 150)  # Коефіцієнти пористості е д.о.
        self.tableRezultNabuh.setColumnWidth(5, 150)  # Вологість набухання w sw , д.о.
        self.tableRezultNabuh.setColumnWidth(6, 140)    # Повна вологоємність Wsat %
        self.tableRezultNabuh.setColumnHidden(0, True)
        self.tableRezultNabuh.setColumnHidden(1, True)
        self.requerySelect()  # Главный запрос для формирования экранной формы
        if not self.recAll:
            self.addRecord()
        else:
            self.recCount = len(self.recAll)
            self.recNum = 0
            self.recOld = self.recAll[self.recNum]
            self.nabuhId = self.recOld[10]  # ID свойств испытаний
        # Назначение делегатов
        self.DelegateNabuh1 = egdelegat.DoubleSpinBoxDelegate1()
        self.DelegateNabuh2 = egdelegat.DoubleSpinBoxDelegate2()
        self.DelegateNabuh3 = egdelegat.DoubleSpinBoxDelegate53()
        self.DelegateNabuh_3 = egdelegat.DoubleSpinBoxDelegate5_3()
        self.DelegateNabuh4 = egdelegat.DoubleSpinBoxDelegate4()
        self.DelegateLabnumNabuh = egdelegat.ComboBoxDelegateLabnumGran()
        self.DelegatePriborNabuhV = egdelegat.ComboBoxDelegatePriborNabuhV()
        self.DelegatePriborNabuhS = egdelegat.ComboBoxDelegatePriborCompres()
        self.DelegateShemaNabuh = egdelegat.ComboBoxDelegateShemaNabuh()
        self.DelegateLabman = egdelegat.ComboBoxDelegateLabman()
        self.tableNabuh.setItemDelegateForColumn(2, self.DelegateLabnumNabuh)
        self.tableNabuh.setItemDelegateForColumn(3, self.DelegatePriborNabuhV)
        self.tableNabuh.setItemDelegateForColumn(4, self.DelegatePriborNabuhS)
        self.tableNabuh.setItemDelegateForColumn(5, self.DelegateShemaNabuh)
        self.tableNabuh.setItemDelegateForColumn(8, self.DelegateLabman)
        self.tableRezultNabuh.setItemDelegateForColumn(2, self.DelegateNabuh4)
        self.tableRezultNabuh.setItemDelegateForColumn(3, self.DelegateNabuh_3)
        self.tableRezultNabuh.setItemDelegateForColumn(4, self.DelegateNabuh3)
        self.tableRezultNabuh.setItemDelegateForColumn(5, self.DelegateNabuh1)
        # Обновление формы и панели инструментов
        self.refreshToolbar()
        self.refreshRecord()
        # Назначение обработчиков сигналов
        self.currentChanged.connect(self.asktoSave)
        self.currentChanged.connect(self.setRow)
        self.comboBox.activated.connect(self.requeryFiz)
        self.comboBox_2.activated.connect(self.requeryPriborV)
        self.comboBox_5.activated.connect(self.requeryPriborS)
        self.radioButton.toggled.connect(self.refreshMetodRaschet)
        self.radioButton_2.toggled.connect(self.refreshMetodRaschet)
        self.toolButton_1.clicked.connect(self.addRezultNabuh)
        self.toolButton_2.clicked.connect(self.delRezultNabuh)
        self.toolButton.clicked.connect(self.calcNabuh)
        self.selmodelNabuh.selectionChanged['QItemSelection', 'QItemSelection'].connect(self.currentRow)

    def requerySelect(self) -> set:
        """Обновление главного запроса для экранной формы"""
        global idActivObekt
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT burehole.id_obekt,
                                obekt.numdog,
                                obekt.archnum,
                                obekt.stadia,
                                burehole.vidhole,
                                burehole.num_hole,
                                obrazec.num_obrazec,
                                obrazec.glub_otbor,
                                burehole.koord_z - obrazec.glub_otbor AS abs_otm,
                                obrazec.lab_num,
                                nabuh.id,
                                nabuh.id_obrazec,
                                nabuh.id_pribor_n,
                                nabuh.id_pribor_c,
                                nabuh.id_harakter,
                                nabuh.otnnabuh,
                                nabuh.davnabuh,
                                glina.vlag,
                                glina.vlagtek,
                                glina.vlagrask,
                                glina.plotn,
                                glina.plotnchast,
                                harakter.shema,
                                nabuh.id_labman,
                                vlabman.fio,
                                nabuh.metod_e,
                                vpriborsnabuh.name_pribor AS name_priborn,
								pribor.name_pribor AS name_priborc
                            FROM obekt,
                                burehole,
                                obrazec,
                                nabuh LEFT JOIN glina ON nabuh.id_obrazec = glina.id_obrazec
                                        LEFT JOIN vlabman ON nabuh.id_labman = vlabman.id
                                        LEFT JOIN harakter ON nabuh.id_harakter = harakter.id
                                        LEFT JOIN vpriborsnabuh ON nabuh.id_pribor_n = vpriborsnabuh.id
										LEFT JOIN pribor ON nabuh.id_pribor_c = pribor.id
                            WHERE obekt.id = %(v0)s 
                            AND obekt.id = burehole.id_obekt 
                            AND burehole.id = obrazec.id_burehole 
                            AND obrazec.id = nabuh.id_obrazec 
                            ORDER BY nabuh.id""", {'v0': idActivObekt})
            self.recAll = curs.fetchall()
            return self.recAll

    def requeryFiz(self) -> set:
        """Обновление физ параметров при изменении образца"""
        ind = self.comboBox.currentIndex()
        idObr = self.comboBox.itemData(ind, role=QtCore.Qt.UserRole)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT vlag,
                                vlagtek,
                                vlagrask,
                                plotn,
                                plotnchast
                            FROM glina
                            WHERE id_obrazec = %(v)s""",
                         {'v': idObr})
            self.recFiz = curs.fetchone()
            if self.recFiz is None:
                self.doubleSpinBox.clear()
                self.doubleSpinBox_2.clear()
                self.doubleSpinBox_3.clear()
                self.doubleSpinBox_4.clear()
                self.doubleSpinBox_5.clear()
                self.label_9.setText("-")
                self.label_10.setText("-")
                self.label_11.setText("-")
                self.label_12.setText("-")
                self.label_34.setText("-")
            else:
                if self.recFiz[0] == None:
                    self.doubleSpinBox.clear()
                else:
                    self.doubleSpinBox.setValue(self.recFiz[0])  # Вологість ґрунту, %
                if self.recFiz[1] == None:
                    self.doubleSpinBox_2.clear()
                else:
                    self.doubleSpinBox_2.setValue(self.recFiz[1])  # Вологість на границi текучостi, %
                if self.recFiz[2] == None:
                    self.doubleSpinBox_3.clear()
                else:
                    self.doubleSpinBox_3.setValue(self.recFiz[2])  # Вологість на границi розкочування, %
                if self.recFiz[3] == None:
                    self.doubleSpinBox_4.clear()
                else:
                    self.doubleSpinBox_4.setValue(self.recFiz[3])  # Щільність ґрунту, г/см3
                if self.recFiz[4] == None:
                    self.doubleSpinBox_5.clear()
                else:
                    self.doubleSpinBox_5.setValue(self.recFiz[4])  # Щiльнiсть часток ґрунту, г/см3
                # Подготовка и отображение расчетных показателей
                self.ip = plastich(self.recFiz[1], self.recFiz[2])
                if self.ip != None:
                    self.label_9.setText(str(self.ip))  # Число пластичностi, %
                else:
                    self.label_9.setText("-")
                self.il = konsist(self.recFiz[0], self.recFiz[1], self.recFiz[2])
                if self.il != None:
                    self.label_10.setText(str(self.il))  # Показник текучостi, д.о.
                else:
                    self.label_10.setText("-")
                self.pd = plotsk(self.recFiz[0], self.recFiz[3])
                if self.pd != None:
                    self.label_11.setText(str(self.pd))  # Щiльнiсть сухого грунту (скелета), г/см3
                else:
                    self.label_11.setText("-")
                self.e = kfPorw(self.recFiz[0], self.recFiz[3], self.recFiz[4])
                if self.e != None:
                    self.label_12.setText(str(self.e))  # Кф пористости
                else:
                    self.label_12.setText("-")
                self.kfSr = kfVodonas(self.recFiz[0], self.recFiz[3], self.recFiz[4])  # Коэффициент водонасыщения
                if self.kfSr != None:
                    self.label_34.setText(str(self.kfSr))  # Кф водонасыщения
                else:
                    self.label_34.setText("-")

    def requeryPriborV(self) -> set:
        """Обновление свойств прибора свободного набухания"""
        visotaV = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), QtCore.Qt.UserRole + 1)
        self.label_13.setText(str(visotaV))  # Висота зразка, мм
        diametrV = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), QtCore.Qt.UserRole + 2)
        self.label_38.setText(str(diametrV))  # Діаметр зразка, мм

    def requeryPriborS(self) -> set:
        """Обновление свойств прибора для определения давления набухания"""
        visotaS = self.comboBox_5.itemData(self.comboBox_5.currentIndex(), QtCore.Qt.UserRole + 1)
        self.label_14.setText(str(visotaS))  # Висота зразка, мм
        diametrS = self.comboBox_5.itemData(self.comboBox_5.currentIndex(), QtCore.Qt.UserRole + 2)
        self.label_39.setText(str(diametrS))  # Діаметр зразка, мм

    def refreshRecord(self) -> set:
        """Обновляет экранную форму с отображаемой записью"""
        # Передача значений из списка в экранную форму
        self.recOld = self.recAll[self.recNum]
        if self.recOld:
            self.label.setText("Ідентіфікатор об'єкта - " + str(self.recOld[0]) + "\n" +
                               "Номер договору - " + self.recOld[1] + "\n" +
                               "Архівний номер звіту - " + self.recOld[2] + "\n" +
                               self.recOld[4] + " №" + self.recOld[5] + "\n" +
                               "Зразок №" + str(self.recOld[6]) + "\n" +
                               "Глибина відбору - " + str(self.recOld[7]))  # ID объекта, номер договора,
                                                                            # архивный номер, вид и № выработки,
                                                                            # № образца, глубина отбора
            self.obID = self.recOld[0]  # ID объекта
            self.numdog = self.recOld[1]  # Номер договора
            self.archnum = self.recOld[2]  # Архивный номер объекта
            self.stadia = self.recOld[3]  # Стадия проектирования
            self.vidhole = self.recOld[4]  # Вид выработки
            self.numhole = self.recOld[5]  # Номер выработки
            self.numobrazec = self.recOld[6]  # Номер образца
            self.glubotbor = self.recOld[7]  # Глубина отбора
            self.absotm = self.recOld[8]  # Абсолютная отметка отбора
            self.labnum = self.recOld[9]  # Лабораторный номер
            self.nabuhId = self.recOld[10]  # ID испытаний набухания
            self.comboBox.setCurrentIndex(
                self.comboBox.findData(self.recOld[11], role=QtCore.Qt.UserRole))  # ID образца
            self.comboBox_2.setCurrentIndex(
                self.comboBox_2.findData(self.recOld[12], role=QtCore.Qt.UserRole))  # Прилад свободного набухания
            visotaV = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), QtCore.Qt.UserRole+1)
            if visotaV is None:
                self.label_13.setText('-')
            else:
                self.label_13.setText(str(visotaV))  # Висота зразка, мм
            diametrV = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), QtCore.Qt.UserRole + 2)
            if diametrV is None:
                self.label_38.setText('-')
            else:
                self.label_38.setText(str(diametrV))  # Діаметр зразка, мм
            self.comboBox_5.setCurrentIndex(
                self.comboBox_5.findData(self.recOld[13], role=QtCore.Qt.UserRole))  # Прилад давления набухания
            visotaS = self.comboBox_5.itemData(self.comboBox_5.currentIndex(), QtCore.Qt.UserRole + 1)
            if visotaS is None:
                self.label_14.setText('-')
            else:
                self.label_14.setText(str(visotaS))  # Висота зразка, мм
            diametrS = self.comboBox_5.itemData(self.comboBox_5.currentIndex(), QtCore.Qt.UserRole + 2)
            if diametrS is None:
                self.label_39.setText('-')
            else:
                self.label_39.setText(str(diametrS))  # Діаметр зразка, мм
            self.comboBox_3.setCurrentIndex(
                self.comboBox_3.findData(self.recOld[14], role=QtCore.Qt.UserRole))  # Схема випробувань
            self.comboBox_4.setCurrentIndex(
                self.comboBox_4.findData(self.recOld[23], role=QtCore.Qt.UserRole))  # ID лаборанта
            self.metodRasch = self.recOld[25]  # Метод расчета модуля Кф пористости
            if self.metodRasch == 1:
                self.radioButton.setChecked(True)
                self.radioButton_2.setChecked(False)
            else:
                self.radioButton.setChecked(False)
                self.radioButton_2.setChecked(True)
            if self.recOld[15] == None:
                self.label_37.setText("-")
            else:
                self.label_37.setText(str(self.recOld[15]))  # Свободное набухание
            if self.recOld[16] == None:
                self.label_41.setText("-")
            else:
                self.label_41.setText(str(self.recOld[16]))  # Давление набухания
            if self.recOld[17] == None:
                self.doubleSpinBox.clear()
            else:
                self.doubleSpinBox.setValue(self.recOld[17])  # Вологість ґрунту глини, %
            if self.recOld[18] == None:
                self.doubleSpinBox_2.clear()
            else:
                self.doubleSpinBox_2.setValue(self.recOld[18])  # Вологість на границi текучостi, %
            if self.recOld[19] == None:
                self.doubleSpinBox_3.clear()
            else:
                self.doubleSpinBox_3.setValue(self.recOld[19])  # Вологість на границi розкочування, %
            self.plotn = self.recOld[20]                        # Щільність ґрунту глини, г/см3
            if self.recOld[20] == None:
                self.doubleSpinBox_4.clear()
            else:
                self.doubleSpinBox_4.setValue(self.recOld[20])  # Щільність ґрунту глини, г/см3
            if self.recOld[21] == None:
                self.doubleSpinBox_5.clear()
            else:
                self.doubleSpinBox_5.setValue(self.recOld[21])  # Щiльнiсть часток ґрунту глини, г/см3
            # Подготовка и отображение расчетных показателей
            self.ip = plastich(self.recOld[18], self.recOld[19])
            if self.ip != None:
                self.label_9.setText(str(self.ip))  # Число пластичностi, %
            else:
                self.label_9.setText("-")
            self.il = konsist(self.recOld[17], self.recOld[18], self.recOld[19])
            if self.il != None:
                self.label_10.setText(str(self.il))  # Показник текучостi, д.о.
            else:
                self.label_10.setText("-")
            self.pd = plotsk(self.recOld[17], self.recOld[20])
            if self.pd != None:
                self.label_11.setText(str(self.pd))  # Щiльнiсть сухого грунту (скелета), г/см3
            else:
                self.label_11.setText("-")
            self.e = kfPorw(self.recOld[17], self.recOld[20], self.recOld[21])
            if self.e != None:
                self.label_12.setText(str(self.e))  # Кф пористости
            else:
                self.label_12.setText("-")
            self.kfSr = kfVodonas(self.recOld[17], self.recOld[20], self.recOld[21])  # Коэффициент водонасыщения
            if self.kfSr != None:
                self.label_34.setText(str(self.kfSr))  # Кф водонасыщения
            else:
                self.label_34.setText("-")
            self.namegrunt = nameglina(self.e, self.ip, self.il)
            self.label_18.setText(self.namegrunt)  # Наименование грунта
            # Считывание данных и обновление списка согласно значений экранной формы
            val0 = self.recOld[0]  # ID объекта
            val1 = self.recOld[1]  # Номер договора
            val2 = self.recOld[2]  # Архивный номер объекта
            val3 = self.recOld[3]  # Стадия проектирования
            val4 = self.recOld[4]  # Вид выработки
            val5 = self.recOld[5]  # Номер выработки
            val6 = self.recOld[6]  # Номер образца
            val7 = self.recOld[7]  # Глубина отбора
            val8 = self.recOld[8]  # Абсолютная отметка отбора
            val9 = self.recOld[9]  # Лабораторный номер
            val10 = self.recOld[10]  # ID испытаний
            val11 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole)  # ID образца
            val12 = self.comboBox_2.itemData(self.comboBox_2.currentIndex(),
                                             role=QtCore.Qt.UserRole)  # ID прибора свободного набухания
            val13 = self.comboBox_5.itemData(self.comboBox_5.currentIndex(),
                                             role=QtCore.Qt.UserRole)  # ID прибора давления набухания
            val14 = self.comboBox_3.itemData(self.comboBox_3.currentIndex(),
                                             role=QtCore.Qt.UserRole)  # Идентификатор схемы испытаний
            if self.label_37.text() == '-':
                val15 = None
            else:
                val15 = dc.Decimal(self.label_37.text())   # Свободное набухание
            if self.label_41.text() == '-':
                val16 = None
            else:
                val16 = dc.Decimal(self.label_41.text())   # Давление набухания
            val17 = self.doubleSpinBox.value()  # Вологість ґрунту, %
            val18 = self.doubleSpinBox_2.value()  # Вологість на границi текучостi, %
            val19 = self.doubleSpinBox_3.value()  # Вологість на границi розкочування, %
            val20 = self.doubleSpinBox_4.value()  # Щільність ґрунту, г/см3
            val21 = self.doubleSpinBox_5.value()  # Щiльнiсть часток ґрунту, г/см3
            val22 = self.recOld[22] # Название схемы испытаний
            val23 = self.comboBox_4.itemData(self.comboBox_4.currentIndex(),
                                             role=QtCore.Qt.UserRole)  # ID лаборанта
            val24 = self.recOld[24] # ФИО лаборанта
            val25 = self.metodRasch
            self.recOld = [val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, val10, val11,
                           val12, val13, val14, val15, val16, val17, val18, val19, val20, val21, val22,
                           val23, val24, val25]
        else:
            pass
        self.refreshTableNabuh()
        self.refreshTableRezultNabuh()
        self.refreshGraph()

    def refreshMetodRaschet(self) -> set:
        """Обновление таблицы результатов испытаний
        в зависимости от состояния переключателя блокировки отдельных показателей"""
        i = 0
        if self.radioButton.isChecked() == True:
            for i in range(0, self.recCountRezultNabuh):
                self.modelRezultNabuh.item(i, 4).setEnabled(False)
                self.modelRezultNabuh.item(i, 4).setBackground(self.brushgr)
                self.modelRezultNabuh.item(i, 4).setForeground(self.brushbl)
        else:
            for i in range(0, self.recCountRezultNabuh):
                self.modelRezultNabuh.item(i, 4).setEnabled(True)
                self.modelRezultNabuh.item(i, 4).setBackground(self.brushw)
                self.modelRezultNabuh.item(i, 4).setForeground(self.brushbl)

    def refreshTableNabuh(self) -> set:
        """Обновление таблицы характеристики испытаний по набуханию"""
        self.recCountNabuh = len(self.recAll)
        self.recAllOldNabuh = []
        if self.recCountNabuh > 0:
            self.modelNabuh.setRowCount(self.recCountNabuh)
            self.tableNabuh.setEnabled(True)
            self.modelNabuh.removeRows(0, self.modelNabuh.rowCount())
            item11 = QtWidgets.QTableWidgetItem()
            item11.setData(QtCore.Qt.EditRole, id)
            for i in range(0, self.recCountNabuh):  # Занесение данных в ячейки таблицы
                self.recOldNabuh = self.recAll[i][9:28]
                listrow = list(self.recOldNabuh)  # Список одной строки
                item9 = QtGui.QStandardItem(str(listrow[0]))  # Лабораторный номер
                item10 = QtGui.QStandardItem(str(listrow[1]))  # ID испытаний набухания
                item11 = QtGui.QStandardItem(str(listrow[0])) # Лабораторный номер
                item11.setData(listrow[2], role=QtCore.Qt.UserRole)    # ID образца
                if listrow[17] is None:
                    item12 = QtGui.QStandardItem('-')
                else:
                    item12 = QtGui.QStandardItem(listrow[17])  # IНазвание прибора свободного набухания
                item12.setData(listrow[3], role=QtCore.Qt.UserRole)    # ID Прибора свобод. набухания
                if listrow[18] is None:
                    item13 = QtGui.QStandardItem('-')
                else:
                    item13 = QtGui.QStandardItem(listrow[18])  # IНазвание прибора давления набухания
                item13.setData(listrow[4], role=QtCore.Qt.UserRole) # ID Прибора давления набухания
                if listrow[13] is None:
                    item14 = QtGui.QStandardItem('-')
                else:
                    item14 = QtGui.QStandardItem(listrow[13])  # Схема испытаний
                item14.setData(listrow[5], role=QtCore.Qt.UserRole) # ID Схемы испытаний
                if listrow[6] is None:
                    item15 = QtGui.QStandardItem('-')
                else:
                    item15 = QtGui.QStandardItem(str(listrow[6]))  # Свободное набухание
                if listrow[7] is None:
                    item16 = QtGui.QStandardItem('-')
                else:
                    item16 = QtGui.QStandardItem(str(listrow[7]))  # Давление набухания
                if listrow[15] == '':
                    item17 = QtGui.QStandardItem('-')
                else:
                    item17 = QtGui.QStandardItem(str(listrow[15]))  # Лаборант
                QtGui.QStandardItem.setData(item17, str(listrow[14]), role=QtCore.Qt.UserRole)  # ID лаборанта
                item11.setTextAlignment(QtCore.Qt.AlignCenter)
                item12.setTextAlignment(QtCore.Qt.AlignCenter)
                item13.setTextAlignment(QtCore.Qt.AlignCenter)
                item14.setTextAlignment(QtCore.Qt.AlignCenter)
                item15.setTextAlignment(QtCore.Qt.AlignCenter)
                item16.setTextAlignment(QtCore.Qt.AlignCenter)
                item17.setTextAlignment(QtCore.Qt.AlignCenter)
                item15.setEnabled(False)
                item15.setForeground(self.brushbl)
                item15.setBackground(self.brushgr)
                item16.setEnabled(False)
                item16.setForeground(self.brushbl)
                item16.setBackground(self.brushgr)
                self.modelNabuh.appendRow([item9, item10, item11, item12, item13, item14,
                                             item15, item16, item17])
                oldNabuhOne = []
                for j in range(0, 16):  # Занесение данных в ячейки таблицы
                    it = listrow[j]
                    if j in range(8, 14):
                        pass
                    elif j == 15:
                        pass
                    else:
                        oldNabuhOne.append(it)
                self.recAllOldNabuh.append(oldNabuhOne)  # Формирование исходного списка испытаний
        else:
            self.tableNabuh.setEnabled(False)
            self.toolButton_2.setEnabled(False)
            self.modelNabuh.removeRows(0, self.modelNabuh.rowCount())
        self.recAllNewNabuh = self.recAllOldNabuh
        self.tableNabuh.selectRow(self.recNum)

    def refreshTableRezultNabuh(self) -> set:
        """Обновление таблицы Результатов испытаний по набуханию"""
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT *
                            FROM public.nabuhi 
                            WHERE nabuhi.id_nabuh = %(v2)s
                            ORDER BY nabuhi.id ASC""", {'v2': self.nabuhId})
            self.recAllRezultNabuh = curs.fetchall()  # Полный исходный список результатов испытаний выбранного образца
        self.recCountRezultNabuh = len(self.recAllRezultNabuh)
        self.recAllOldRezultNabuh = []
        if self.recCountRezultNabuh > 0:
            self.modelRezultNabuh.setRowCount(self.recCountRezultNabuh)
            self.tableRezultNabuh.setEnabled(True)
            self.toolButton_2.setEnabled(True)
            self.toolButton.setEnabled(True)
            self.modelRezultNabuh.removeRows(0, self.modelRezultNabuh.rowCount())
            for i in range(0, self.recCountRezultNabuh):  # Занесение данных в ячейки таблицы
                self.recOldRezultNabuh = self.recAllRezultNabuh[i][0:6]
                listrow = list(self.recOldRezultNabuh)  # Список одной строки
                item0 = QtGui.QStandardItem(str(listrow[0]))  # ID
                item1 = QtGui.QStandardItem(str(listrow[1]))  # ID Nabuh
                item2 = QtGui.QStandardItem(str(listrow[2]))  # Нормальний тиски МПа
                item3 = QtGui.QStandardItem(str(listrow[3]))  # Відносна деформація набухання e sw д.о.
                if self.radioButton.isChecked():
                    try:
                        item4 = QtGui.QStandardItem(str(round(self.e + listrow[3] * (1 + self.e), 3)))
                    except:
                        pass
                else:
                    item4 = QtGui.QStandardItem(str(listrow[4]))  # Коэффициент пористости
                item5 = QtGui.QStandardItem(str(listrow[5]))  # Вологість набухання w sw , д.о.
                if self.doubleSpinBox_5.value() != 0.0:
                    item6 = QtGui.QStandardItem(str(round(listrow[4] / dc.Decimal(self.doubleSpinBox_5.value()) * 100, 1)))
                else:
                    item6 = QtGui.QStandardItem(str('-'))
                item2.setTextAlignment(QtCore.Qt.AlignCenter)
                item3.setTextAlignment(QtCore.Qt.AlignCenter)
                item4.setTextAlignment(QtCore.Qt.AlignCenter)
                item5.setTextAlignment(QtCore.Qt.AlignCenter)
                item6.setTextAlignment(QtCore.Qt.AlignCenter)
                if self.radioButton.isChecked():
                    item4.setEnabled(False)
                    item4.setForeground(self.brushbl)
                    item4.setBackground(self.brushgr)
                else:
                    item4.setEnabled(True)
                item6.setEnabled(False)
                item6.setForeground(self.brushbl)
                item6.setBackground(self.brushgr)
                self.modelRezultNabuh.appendRow([item0, item1, item2, item3, item4, item5, item6])
                oldRezultNabuhOne = []
                for j in range(0, 6):  # Занесение данных в ячейки таблицы
                    it = None
                    if j == 0 or j == 1:
                        it = listrow[j]
                    else:
                        if listrow[j] == None:
                            pass
                        else:
                            it = float(listrow[j])
                    oldRezultNabuhOne.append(it)
                self.recAllOldRezultNabuh.append(
                    oldRezultNabuhOne)  # Формирование исходного списка результатов набухания
        else:
            self.tableRezultNabuh.setEnabled(False)
            self.toolButton_2.setEnabled(False)
            self.toolButton.setEnabled(False)
            self.modelRezultNabuh.removeRows(0, self.modelRezultNabuh.rowCount())
        self.recAllNewRezultNabuh = self.recAllOldRezultNabuh

    def refreshGraph(self) -> bool:
        """Обновление графика-диаграммы"""
        if self.label_41.text() == '-':
            self.davNabuh = None
        else:
            self.davNabuh = dc.Decimal(self.label_41.text())  # Давление набухания
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT MIN(nagruzka) AS minx,
                                    MAX(nagruzka) AS maxx,
                                    MIN(otn_nabuh) AS miny,
                                    MAX(otn_nabuh) AS maxy
                            FROM public.nabuhi 
                            GROUP BY id_nabuh
                            HAVING id_nabuh = %(v2)s""",
                         {'v2': self.nabuhId})
            self.recGroupRezultNabuh = curs.fetchone()  # Исходный список минимальных и максимальных нагрузок компрессионных испытаний выбранного образца
        if self.recGroupRezultNabuh != None and self.davNabuh is not None:
            self.minx = self.recGroupRezultNabuh[0]
            self.maxx = self.recGroupRezultNabuh[1]
            self.miny = self.recGroupRezultNabuh[2]
            self.maxy = self.recGroupRezultNabuh[3]
            while self.maxx < self.davNabuh:
                self.maxx += dc.Decimal('0.1')
            self.minx = dc.Decimal('0.1')    # Шаг нагрузок по сетке
            xcount = int(self.maxx / self.minx) # Количество значений для подписи осей
            self.scene.clear()
            self.scene.addRect(40, 30, 250, 260, self.penblack, self.brushly)   # Область построения графика
            ix = int(240 / (xcount))    # Шаг сетки по х
            for ix in range(40, 300, ix):
                self.scene.addLine(ix, 30, ix, 290, self.penblackp)  # Вертикальная сетка
                self.scene.addLine(ix, 25, ix, 30, self.penblack)  # Вертикальные штрихи
            i = int(240 / (xcount))  # Шаг сетки для подписи оси x
            for j in range(0, xcount + 1):
                xtext = QtWidgets.QGraphicsSimpleTextItem(str(round(0.1 * j, 1)))
                self.scene.addItem(xtext)
                xtext.setPos(32 + i * j, 8)
            iy = int(260 / 10)  # Шаг сетки по y
            for iy in range(30, 300, iy):
                self.scene.addLine(40, iy, 290, iy, self.penblackp)  # Горизонтальная сетка
                self.scene.addLine(35, iy, 40, iy, self.penblack)  # Горизонтальные штрихи
            j = 0
            i = int(260 / 10)   # Шаг сетки для подписей оси y
            ycount = 10         # Количество значений для подписи оси y
            if dc.Decimal(self.maxy) <= dc.Decimal('0.100'):      # Определение шага значений относительного набухания по шкале y
                shagy = dc.Decimal('0.01')
                yprima = dc.Decimal('0.10')    # Первое сверху значение на шкале y
            elif dc.Decimal(self.maxy) <= dc.Decimal('0.200'):
                shagy = dc.Decimal('0.02')
                yprima = dc.Decimal('0.20')    # Первое сверху значение на шкале y
            else:
                shagy = dc.Decimal('0.05')
            for j in range(0, ycount + 1):
                ytext = QtWidgets.QGraphicsSimpleTextItem(str(round(yprima - shagy * j, 2)))
                self.scene.addItem(ytext)
                ytext.setPos(5, 22 + i * j)
            xname = QtWidgets.QGraphicsSimpleTextItem("p МПа")
            yname = QtWidgets.QGraphicsSimpleTextItem("εsw д.о.")
            pname = QtWidgets.QGraphicsSimpleTextItem("Psw")
            self.scene.addItem(xname)
            xname.setPos(8 + i * j, -5)
            self.scene.addItem(yname)
            yname.setPos(0, 295)
            self.scene.addItem(pname)
            davnabuhX = 40 + int(round(240 / self.maxx * self.davNabuh, 0))
            pname.setPos(davnabuhX - 10, 295)
            self.scene.addLine(davnabuhX, 30, davnabuhX, 290, self.penred)  # Линия давления набухания
            j = 0
            listnagruzka = [dc.Decimal('0.0000')]
            listotnnabuh = [dc.Decimal('0.000')]
            recPlus = self.recAllRezultNabuh[len(self.recAllRezultNabuh) - 1]
            recdavnabuh = []    # Формирование дополнителной записи с давлением набухания
            for i in range(0, 6):
                if i == 0:
                    el = recPlus[i] + 1
                elif i == 2:
                    el = self.davNabuh
                elif i == 3:
                    el = dc.Decimal('0.000')
                else:
                    el = recPlus[i]
                recdavnabuh.append(el)
            recdavnabuh = tuple(recdavnabuh)
            recAllRezultNabuh = self.recAllRezultNabuh
            recAllRezultNabuh.append(recdavnabuh)   # Список результатов испытаний + запись с давлением набухания
            recAllRezultNabuh = sorted(recAllRezultNabuh,key=itemgetter(2), reverse=False)
            recCountRezultNabuh = len(recAllRezultNabuh)
            for j in range(0, recCountRezultNabuh):  # Подготовка к построению точек и графика
                recOneRezultNabuh = recAllRezultNabuh[j][0:6]
                listrow = list(recOneRezultNabuh)  # Список одной строки
                listnagruzka.append(listrow[2])
                listotnnabuh.append(listrow[3])
            i = 0
            for i in range(0, recCountRezultNabuh):  # Построение графика
                x1 = 40 + int(round(240 / self.maxx * listnagruzka[i], 0))
                x2 = 40 + int(round(240 / self.maxx * listnagruzka[i + 1], 0))
                y1 = 290 - int(round(260 / dc.Decimal(shagy * 10) * listotnnabuh[i], 0))
                y2 = 290 - int(round(260 / dc.Decimal(shagy * 10) * listotnnabuh[i + 1], 0))
                if i == recCountRezultNabuh - 1 and listotnnabuh[i + 1] == 0:
                    self.scene.addLine(x1, y1, x2, y2, self.penbp)
                else:
                    self.scene.addLine(x1, y1, x2, y2, self.penb)
            i = 0
            for i in range(0, recCountRezultNabuh + 1):  # Построение точек
                x2 = 40 + int(round(240 / self.maxx * listnagruzka[i], 0))
                y2 = 290 - int(round(260 / dc.Decimal(shagy * 10) * listotnnabuh[i], 0))
                self.scene.addEllipse(x2 - 4, y2 - 4, 8, 8, self.penblack, self.brushr)
        else:
            self.scene.clear()
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Critical,
                                               "Випробування методом компресійного стиску при набуханні",
                                               "У таблиці результатів випробувань відсутні записи або є помилка. "
                                               "\nНеобхідно внести виправлення і виконати перерахунок")
            btnOK = QtWidgets.QPushButton("&OK")
            btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
            result = self.formMassWin.exec()
        if self.label_37.text() == '-':
            self.label_18.setStyleSheet("background-color: white; color: black")
            retval = False
        else:
            nabuh0 = dc.Decimal(self.label_37.text())
            if nabuh0 < dc.Decimal('0.04'):
                self.label_18.setStyleSheet("background-color: lightgreen; color: black")
                self.label_18.setText(self.namegrunt + ' ненабухаюча')
            elif nabuh0 <= dc.Decimal('0.08'):
                self.label_18.setStyleSheet("background-color: yellow; color: black")
                self.label_18.setText(self.namegrunt + ' слабонабухаюча')
            elif nabuh0 <= dc.Decimal('0.12'):
                self.label_18.setStyleSheet("background-color: orange; color: black")
                self.label_18.setText(self.namegrunt + ' середньонабухаюча')
            elif nabuh0 > dc.Decimal('0.12'):
                self.label_18.setStyleSheet("background-color: red; color: yellow")
                self.label_18.setText(self.namegrunt + ' сильнонабухаюча')
            else:
                pass
            retval = True
        return retval

    def refreshToolbar(self) -> set:
        """Обновляет панель инструментов"""
        if self.recNum == 0 and self.recCount > 1:
            form.action_8.setEnabled(False)  # Первая запись
            form.action_9.setEnabled(False)  # Предыдущая запись
            form.action_10.setEnabled(True)  # Следующая запись
            form.action_11.setEnabled(True)  # Последняя запись
        elif self.recNum in range(1, self.recCount - 1):
            form.action_8.setEnabled(True)  # Первая запись
            form.action_9.setEnabled(True)  # Последняя запись
            form.action_10.setEnabled(True)  # Следующая запись
            form.action_11.setEnabled(True)  # Последняя запись
        elif self.recNum == self.recCount - 1 and self.recCount > 1:
            form.action_8.setEnabled(True)  # Первая запись
            form.action_9.setEnabled(True)  # Предыдущая запись
            form.action_10.setEnabled(False)  # Следующая запись
            form.action_11.setEnabled(False)  # Последняя запись
        else:
            form.action_8.setEnabled(False)  # Первая запись
            form.action_9.setEnabled(False)  # Предыдущая запись
            form.action_10.setEnabled(False)  # Следующая запись
            form.action_11.setEnabled(False)  # Последняя запись

    def setRow(self) -> set:
        if self.currentIndex() == 0:
            self.refreshToolbar()
            self.refreshRecord()
        elif self.currentIndex() == 1:
            self.tableNabuh.selectRow(self.recNum)
        else:
            self.refreshRecord()

    def currentRow(self) -> set:
        """Определение номера записи (строки)  и установка движка на эту запись"""
        if self.currentIndex() == 1:
            recNum = self.recNum
            self.recNum = self.selmodelNabuh.currentIndex().row()
            if self.recNum < 0:
                self.recNum = recNum
            self.refreshToolbar()

    def showEvent(self, e) -> set:
        """Выполняет действия при выводе окна на экран"""
        form.action_27.setEnabled(False)
        QtWidgets.QTabWidget.showEvent(self, e)

    def hideEvent(self, e) -> set:
        """Выполняет действия при скрытии окна"""
        form.action_27.setEnabled(True)
        form.nabuhwin = None
        if self.recAll != []:
            self.asktoSave()
        form.refreshMain()
        QtWidgets.QTabWidget.hideEvent(self, e)

    def nextRecord(self) -> set:
        """Становится на следующей записи"""
        self.recNum += 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableNabuh.selectRow(self.recNum)

    def priorRecord(self) -> set:
        """Становится на предыдущей записи"""
        self.recNum -= 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableNabuh.selectRow(self.recNum)

    def firstRecord(self) -> set:
        """Становится на первой записи"""
        self.recNum = 0
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableNabuh.selectRow(self.recNum)

    def lastRecord(self) -> set:
        """Становится на последней записи"""
        if self.recCount > 0:
            self.recNum = self.recCount - 1
            self.refreshToolbar()
            self.asktoSave()
            self.refreshRecord()
            self.tableNabuh.selectRow(self.recNum)

    def sortRecord(self) -> set:
        """Сортировка записей"""
        self.recAll.sort(key=itemgetter(0,5,7))
        form.action_13.setEnabled(False)  # Сортировать
        form.action_14.setEnabled(True)  # Снять сортировку
        self.refreshRecord()

    def desortRecord(self) -> set:
        """Отмена сортировки, что соответствует сортировке по ID"""
        self.recAll.sort(key=itemgetter(10))
        form.action_13.setEnabled(True)  # Сортировать
        form.action_14.setEnabled(False)  # Снять сортировку
        self.refreshRecord()

    def calcNabuh(self) -> set:
        """Расчет свободного набухания и давления набухания"""
        self.saveRecord(False)
        self.refreshTableRezultNabuh()
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT *
                            FROM public.nabuhi 
                            WHERE nabuhi.id_nabuh = %(v2)s
                            ORDER BY nabuhi.nagruzka ASC""", {'v2': self.nabuhId})
            recAllNabuh = curs.fetchall()
        self.label_37.setText(str(recAllNabuh[0][3]))    # Свободное набухание, д.о.
        for i in range(1, len(recAllNabuh)):
            defnabuhEnd_1 = recAllNabuh[i - 1][3]   # Относит. набухание при предыдущей нагрузке
            defnabuhEnd = recAllNabuh[i][3] # Первое отрицательное относит. набухание или последнее в ряду нагрузок
            nagruzkaEnd_1 = recAllNabuh[i - 1][2]   # Предыдущая нагрузка
            nagruzkaEnd = recAllNabuh[i][2] # Нагрузка при первом отрицательном относ. набухании в ряду нагрузок
            if defnabuhEnd <= 0:
                break
        if defnabuhEnd >= 0:
            if defnabuhEnd_1 > defnabuhEnd:
                self.davNabuh = round((nagruzkaEnd - nagruzkaEnd_1) / (defnabuhEnd_1 - defnabuhEnd) * defnabuhEnd_1 + nagruzkaEnd_1, 3)
            else:
                self.davNabuh = None
        else:
            try:
                self.davNabuh = round((nagruzkaEnd - nagruzkaEnd_1) / (defnabuhEnd_1 + abs(defnabuhEnd)) * defnabuhEnd_1 + nagruzkaEnd_1, 3)
            except:
                self.davNabuh = None
        if self.davNabuh is None:
            self.label_41.setText('-')
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Critical,
                                           "Випробування методом компресійного стиску при набуханні",
                                           "У таблиці результатів випробувань є помилка. Відносне набухання (ε) "
                                           "має зменшуватися зі збільшенням нормального тиску (σ)."
                                           "\nРозрахунок провести немає можливості. "
                                           "Необхідно внести в таблицю виправлення.")
            btnOK = QtWidgets.QPushButton("&OK")
            btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
            result = self.formMassWin.exec()
            self.scene.clear()
        else:
            self.label_41.setText(str(self.davNabuh))    # Давление набухания расчетное, МПа
        self.saveRecord(False)

    def addRecord(self) -> set:
        """Добавляет новую запись"""
        val11 = self.comboBox.itemData(self.comboBox.currentIndex(),
                                       role=QtCore.Qt.UserRole)  # ID последнего образца
        with UseDatebase(dbconfig) as curs:
            curs.execute("INSERT INTO nabuh (id_obrazec) VALUES (%(v11)s);", {'v11': val11})
        self.requerySelect()
        self.recCount = len(self.recAll)
        if self.recCount == 1:
            self.recNum = 0
            self.recOld = self.recAll[self.recNum]
        self.refreshRecord()
        self.lastRecord()
        self.refreshToolbar()

    def addRezultNabuh(self) -> set:
        """Добавляет результаты одного набухания при заданном давлении"""
        with UseDatebase(dbconfig) as curs:
            curs.execute("SELECT count(id) FROM nabuhi WHERE nabuhi.id_nabuh = %(v2)s;",
                         {'v2': self.nabuhId})
            countComprei = curs.fetchone()
            numcount = countComprei[0]
        with UseDatebase(dbconfig) as curs:
            curs.execute("INSERT INTO nabuhi (id_nabuh) VALUES (%(v2)s);",
                         {'v2': self.nabuhId})
        self.saveRecordRezultNabuh()
        self.refreshTableRezultNabuh()
        self.tableRezultNabuh.setFocus()
        sel = self.tableRezultNabuh.selectionModel()
        ind = self.tableRezultNabuh.model().index(numcount, 2)
        sel.setCurrentIndex(ind, QtCore.QItemSelectionModel.ClearAndSelect)

    def delRecord(self) -> set:
        """Удаляет текущую запись"""
        self.refreshRecord()
        val10 = self.recOld[10]  # ID
        if val10 is not None:
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                           "Набухання ґрунтів",
                                           "Ви бажаєте видалити поточний запис з порядковим номером - " + str(self.recNum + 1) +
                                           " та лабораторним номером - " + str(self.recOld[9]) + "?")
            btnYes = QtWidgets.QPushButton("&Так")
            btnNo = QtWidgets.QPushButton("&Ні")
            btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
            self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
            self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
            self.formMassWin.setDefaultButton(btnYes)
            result = self.formMassWin.exec()
            if result == 0:
                try:
                    with UseDatebase(dbconfig) as curs:
                        curs.execute("DELETE FROM nabuh WHERE id = %(v10)s;", {'v10': val10})
                    self.requerySelect()
                    self.recCount = len(self.recAll)
                    if self.recCount > 0:
                        self.firstRecord()
                        self.refreshRecord()
                        self.refreshToolbar()
                    else:
                        self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information, "Набухання ґрунтів",
                                                       "Видалено останній запис")
                        btnOK = QtWidgets.QPushButton("&OK")
                        btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                        self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                        result = self.formMassWin.exec()
                        if result == 0:
                            self.formMassWin.close()
                            self.parent().close()
                except:
                    self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "Набухання ґрунтів",
                                                            "Видалення не можливо. "
                                                            "З поточним записом пов'язані записи у таблиці: "
                                                            "Результати випробувань"
                                                            "\nПотрібно виконати попереднє видалення усіх записів "
                                                            "в указаній таблиці")
                    btnOK = QtWidgets.QPushButton("&OK")
                    btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                    self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                    result = self.formMassWin.exec()
                    if result == 0:
                        self.formMassWin.close()
            else:
                pass
        else:
            pass

    def delRezultNabuh(self) -> set:
        """Удаляет один результат набухания из таблицы результатов испытаний"""
        i = self.tableRezultNabuh.currentIndex().row()
        if i == None or i == -1:
            pass
        else:
            idRezultNabuh = self.modelRezultNabuh.item(i, 0).text()
            with UseDatebase(dbconfig) as curs:
                curs.execute("DELETE FROM nabuhi WHERE id = %(v0)s;", {'v0': idRezultNabuh})
        self.refreshTableRezultNabuh()

    def asktoSave(self) -> bool:
        """Проверяет наличие изменений в испытаниях набухания"""
        if self.recOld:
            # Считывание данных и обновление списка согласно значений экранной формы
            val0 = self.recOld[0]  # ID объекта
            val1 = self.recOld[1]  # Номер договора
            val2 = self.recOld[2]  # Архивный номер объекта
            val3 = self.recOld[3]  # Стадия проектирования
            val4 = self.recOld[4]  # Вид выработки
            val5 = self.recOld[5]  # Номер выработки
            val6 = self.recOld[6]  # Номер образца
            val7 = self.recOld[7]  # Глубина отбора
            val8 = self.recOld[8]  # Абсолютная отметка отбора
            val9 = self.recOld[9]  # Лабораторный номер
            val10 = self.recOld[10]  # ID испытаний
            val11 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole)  # ID образца
            val12 = self.comboBox_2.itemData(self.comboBox_2.currentIndex(),
                                             role=QtCore.Qt.UserRole)  # ID прибора свободного набухания
            val13 = self.comboBox_5.itemData(self.comboBox_5.currentIndex(),
                                             role=QtCore.Qt.UserRole)  # ID прибора давления набухания
            val14 = self.comboBox_3.itemData(self.comboBox_3.currentIndex(),
                                             role=QtCore.Qt.UserRole)  # Идентификатор схемы испытаний
            if self.label_37.text() == '-':
                val15 = None
            else:
                val15 = dc.Decimal(self.label_37.text())   # Свободное набухание
            if self.label_41.text() == '-':
                val16 = None
            else:
                val16 = dc.Decimal(self.label_41.text())   # Давление набухания
            val17 = self.doubleSpinBox.value()  # Вологість ґрунту, %
            val18 = self.doubleSpinBox_2.value()  # Вологість на границi текучостi, %
            val19 = self.doubleSpinBox_3.value()  # Вологість на границi розкочування, %
            val20 = self.doubleSpinBox_4.value()  # Щільність ґрунту, г/см3
            val21 = self.doubleSpinBox_5.value()  # Щiльнiсть часток ґрунту, г/см3
            val22 = self.recOld[22]  # Название схемы испытаний
            val23 = self.comboBox_4.itemData(self.comboBox_4.currentIndex(),
                                             role=QtCore.Qt.UserRole)  # ID лаборанта
            val24 = self.recOld[24]  # ФИО лаборанта
            if self.radioButton.isChecked():
                val25 = 1
            else:
                val25 = 2
            self.recNew = [val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, val10, val11,
                           val12, val13, val14, val15, val16, val17, val18, val19, val20, val21, val22,
                           val23, val24, val25]
            askNabuh = (self.recNew == self.recOld)
            askTableNabuh = self.asktoSaveTableNabuh()
            askRezultNabuh = self.asktoSaveRezultNabuh()
            if askNabuh == False or askRezultNabuh == False:  # В характеристиках испытаний и физических свойствах грунтов есть изменения
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                               "Набухання ґрунтів",
                                               "Є незбережені дані результатів іспитів з визначення набухання ґрунтів. "
                                               "\nВи бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecord(False)
                else:
                    pass
            elif askTableNabuh == False:  # В таблице характеристик компрессионных испытаний есть изменения
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                               "Набухання ґрунтів",
                                               "Є незбережені дані у таблиці результатів іспитів з визначення набухання ґрунтів. "
                                               "\nВи бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecordTableNabuh(False)
                else:
                    pass
            else:
                pass
        else:
            pass

    def asktoSaveTableNabuh(self) -> set:
        """Проверка наличия изменений в таблице компрессионных испытаний"""
        # Считывание данных и обновление списка согласно значений экранной формы
        self.recAllNewNabuh = []
        for i in range(0, self.recCountNabuh):
            rec = []
            j = 0
            for j in range(0, 9):
                if j == 0:
                    el = str(
                        self.modelNabuh.item(i, j).data(QtCore.Qt.EditRole))  # ID Лабораторный номер
                elif j == 1:
                    el = int(self.modelNabuh.item(i, j).data(QtCore.Qt.EditRole))
                elif j in range(2, 6):
                    if self.modelNabuh.item(i, j).data(QtCore.Qt.UserRole) is None:
                        el = None
                    else:
                        el = int(self.modelNabuh.item(i, j).data(QtCore.Qt.UserRole))
                elif j == 6 or j == 7:
                    if self.modelNabuh.item(i, j).data(QtCore.Qt.EditRole) == '-':
                        el = None
                    else:
                        el = dc.Decimal(self.modelNabuh.item(i, j).data(QtCore.Qt.EditRole))
                elif j == 8:
                    el = int(self.modelNabuh.item(i, j).data(QtCore.Qt.UserRole))
                else:
                    pass
                rec.append(el)  # Формирование текущей записи из элементов
            self.recAllNewNabuh.append(rec)  # Формирование обновленного списка (записей-кортежей)
        if self.recAllNewNabuh == self.recAllOldNabuh:
            ask = True
        else:
            ask = False
        return ask

    def asktoSaveRezultNabuh(self) -> set:
        """Проверка наличия изменений в таблице Результатов испытаний набухания"""
        # Считывание данных и обновление списка результатов испытаний набухания согласно значений экранной формы
        self.recAllNewRezultNabuh = []
        for i in range(0, self.recCountRezultNabuh):
            rec = []
            for j in range(0, 6):
                try:
                    el = self.modelRezultNabuh.item(i, j).data(QtCore.Qt.EditRole)  # Определение элемента текущей записи
                except:
                    el = -1
                if j == 0 or j == 1:
                    el = int(el)
                else:
                    if el == 'None' or el == None:
                        el = None
                    else:
                        el = float(el)
                rec.append(el)  # Формирование текущей записи из элементов
            self.recAllNewRezultNabuh.append(rec)  # Формирование обновленного списка (записей-кортежей)
        if self.recAllNewRezultNabuh == self.recAllOldRezultNabuh:
            ask = True
        else:
            ask = False
        return ask

    def saveAll(self) -> set:
        """Сохраняет изменения по нажатию кнопки Сохранить на панели инструментов"""
        if self.currentIndex() == 0:
            self.saveRecord(False)
        if self.currentIndex() == 1:
            self.setCurrentIndex(0)
            self.setCurrentIndex(1)
        else:
            pass

    def saveRecord(self, ask) -> set:
        """Сохраняет изменения в записи и формирует новый курсор"""
        if ask == False:
            val10 = self.recOld[10]  # ID испытаний
            val11 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole)  # ID образца
            val12 = self.comboBox_2.itemData(self.comboBox_2.currentIndex(),
                                             role=QtCore.Qt.UserRole)  # ID прибора свободного набухания
            val13 = self.comboBox_5.itemData(self.comboBox_5.currentIndex(),
                                             role=QtCore.Qt.UserRole)  # ID прибора давления набухания
            val14 = self.comboBox_3.itemData(self.comboBox_3.currentIndex(),
                                             role=QtCore.Qt.UserRole)  # Идентификатор схемы испытаний
            if self.label_37.text() == '-':
                val15 = None
            else:
                val15 = dc.Decimal(self.label_37.text())  # Свободное набухание
            if self.label_41.text() == '-':
                val16 = None
            else:
                val16 = dc.Decimal(self.label_41.text())  # Давление набухания
            self.davNabuh = val16
            if self.doubleSpinBox.value() == 0:
                val17 = None
            else:
                val17 = self.doubleSpinBox.value()  # Вологість ґрунту, %
            if self.doubleSpinBox_2.value() == 0:
                val18 = None
            else:
                val18 = self.doubleSpinBox_2.value()  # Вологість на границi текучостi, %
            if self.doubleSpinBox_3.value() == 0:
                val19 = None
            else:
                val19 = self.doubleSpinBox_3.value()  # Вологість на границi розкочування, %
            if self.doubleSpinBox_4.value() == 0:
                val20 = None
            else:
                val20 = self.doubleSpinBox_4.value()  # Щільність ґрунту, г/см3
            if self.doubleSpinBox_5.value() == 0:
                val21 = None
            else:
                val21 = self.doubleSpinBox_5.value()  # Щiльнiсть часток ґрунту, г/см3
            val23 = self.comboBox_4.itemData(self.comboBox_4.currentIndex(),
                                             role=QtCore.Qt.UserRole)  # ID лаборанта
            if self.radioButton.isChecked():
                val25 = 1
            else:
                val25 = 2
            with UseDatebase(dbconfig) as curs:
                curs.execute("""UPDATE nabuh
                               SET id_obrazec = %(v11)s,
                                   id_pribor_n = %(v12)s,
                                   id_pribor_c = %(v13)s,
                                   id_harakter = %(v14)s,
                                   otnnabuh = %(v15)s,
                                   davnabuh = %(v16)s,
                                   metod_e = %(v25)s,
                                   id_labman = %(v23)s
                               WHERE id = %(v10)s;""",
                             {'v11': val11, 'v12': val12, 'v13': val13, 'v14': val14, 'v15': val15,
                              'v16': val16, 'v23': val23, 'v25': val25,'v10': val10})
            with UseDatebase(dbconfig) as curs:
                curs.execute("""UPDATE glina
                               SET vlag = %(v17)s,
                                   vlagtek = %(v18)s,
                                   vlagrask = %(v19)s,
                                   plotn = %(v20)s,
                                   plotnchast = %(v21)s
                               WHERE id_obrazec = %(v11)s;""",
                             {'v17': val17, 'v18': val18,
                              'v19': val19, 'v20': val20, 'v21': val21, 'v11': val11})
            self.requerySelect()
            self.saveRecordRezultNabuh()
            self.refreshRecord()
        else:
            pass

    def saveRecordRezultNabuh(self) -> set:
        """Сохранение записей таблицы результатов компрессионных испытаний"""
        ask = self.asktoSaveRezultNabuh()
        if ask == False:
            for i in range(0, self.recCountRezultNabuh):
                recRezultNabuh = self.recAllNewRezultNabuh[i]
                val0 = int(recRezultNabuh[0])  # Идентификатор набухания при одной нагрузке
                val1 = int(recRezultNabuh[1])  # Идентификатор испытаний набухания
                val2 = recRezultNabuh[2]  # Нагрузка, МПа
                val3 = recRezultNabuh[3]  # Отностительное набухание, д.е.
                val4 = recRezultNabuh[4]  # Коэффициент пористости, д.е.
                val5 = recRezultNabuh[5]  # Влажность набухания, %
                if val3 == None:
                    pass
                else:
                    val3 = dc.Decimal(val3)
                if val4 == None:
                    pass
                else:
                    val4 = dc.Decimal(val4)
                if val5 == None:
                    pass
                else:
                    val5 = dc.Decimal(val5)
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE nabuhi  
                                    SET nagruzka = %(v2)s, 
                                        otn_nabuh = %(v3)s, 
                                        kf_por = %(v4)s, 
                                        vlag_nabuh = %(v5)s
                                    WHERE id = %(v0)s;""",
                                 {'v2': val2, 'v3': val3, 'v4': val4, 'v5': val5, 'v0': val0})
        else:
            pass

    def saveRecordTableNabuh(self, ask) -> set:
        """Сохранение записей таблицы характеристики испытаний набухания"""
        if ask == False:
            for i in range(0, self.recCountNabuh):
                recTabNabuh = self.recAllNewNabuh[i]
                val10 = recTabNabuh[1]
                val11 = recTabNabuh[2]
                val12 = recTabNabuh[3]
                val13 = recTabNabuh[4]
                val14 = recTabNabuh[5]
                val23 = recTabNabuh[8]
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE nabuh
                                    SET id_obrazec = %(v11)s,
                                        id_pribor_n = %(v12)s,
                                        id_pribor_c = %(v13)s,
                                        id_harakter = %(v14)s,
                                        id_labman = %(v23)s
                                    WHERE id = %(v10)s;""",
                                    {'v11': val11, 'v12': val12, 'v13': val13,
                                     'v14': val14, 'v23': val23, 'v10': val10})
            self.requerySelect()
            self.refreshRecord()
        else:
            pass


class UsadkaWindow(QtWidgets.QTabWidget, egclasswin.Ui_Usadka_win):
    def __init__(self) -> set:
        """Инициализация окна Результатов испытаний усадки"""
        super().__init__()
        self.setupUi(self)
        global idActivObekt
        self.recAllOldUsadka = []
        self.recCountUsadka = 0
        self.recNum = 0
        # Подготовка инструментов для рисования
        self.penblack = QtGui.QPen(QtCore.Qt.black)
        self.penred = QtGui.QPen(QtCore.Qt.red)
        self.penblackp = QtGui.QPen(QtCore.Qt.black, 1, QtCore.Qt.DotLine)
        self.penbp = QtGui.QPen(QtCore.Qt.blue, 2, QtCore.Qt.DotLine)
        self.brushr = QtGui.QBrush(QtCore.Qt.red)
        self.brushy = QtGui.QBrush(QtCore.Qt.yellow)
        self.brushly = QtGui.QBrush(QtGui.QColor(255, 255, 0, 30))  # Светло-желтый
        self.brushg = QtGui.QBrush(QtCore.Qt.green)
        self.brushb = QtGui.QBrush(QtCore.Qt.blue)
        self.brushw = QtGui.QBrush(QtCore.Qt.white)
        self.brushbl = QtGui.QBrush(QtCore.Qt.black)
        self.brushgr = QtGui.QBrush(QtCore.Qt.lightGray)
        self.brushgr.setColor(QtGui.QColor(245,245,245))
        self.penb = QtGui.QPen(self.brushb, 2)
        self.peny = QtGui.QPen(self.brushy, 2)
        # Оформление сцены графиков
        self.scene = QtWidgets.QGraphicsScene(0, 0, 310, 310, self.graphicsView)
        self.graphicsView.setScene(self.scene)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT obrazec.id, 
                                obrazec.lab_num
                            FROM obekt,
                                burehole,
                                obrazec
                            WHERE obekt.id = %(v)s 
                                AND obekt.id = burehole.id_obekt 
                                AND burehole.id = obrazec.id_burehole
                                AND obrazec.mater_obr != 'Вода'
                            ORDER BY obrazec.lab_num""", {'v': idActivObekt})
            recAll = curs.fetchall()
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox.addItem(recOne[1])
                self.comboBox.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT id, 
                                name_pribor,
                                visota,
                                diametr,
                                plosch 
                            FROM pribor 
                            WHERE isput = 'Усадка'""")
            recAll = curs.fetchall()
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox_2.addItem(recOne[1])
                self.comboBox_2.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
                self.comboBox_2.setItemData(i, recOne[2], role=QtCore.Qt.UserRole+1)
                self.comboBox_2.setItemData(i, recOne[3], role=QtCore.Qt.UserRole+2)
                self.comboBox_2.setItemData(i, recOne[4], role=QtCore.Qt.UserRole+3)
        self.comboBox_2.insertItem(0, "")
        self.comboBox_2.setItemData(0, 0, role=QtCore.Qt.UserRole)
        self.comboBox_2.setItemData(0, 0, role=QtCore.Qt.UserRole + 1)
        self.comboBox_2.setItemData(0, 0, role=QtCore.Qt.UserRole + 2)
        self.comboBox_2.setItemData(0, 0, role=QtCore.Qt.UserRole + 3)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT ispol.id, 
                                   ispol.fio
                               FROM ispol
                               WHERE ispol.vidrab = 0 OR ispol.vidrab = 7 
                               ORDER BY ispol.fio""")
            recAll = curs.fetchall()
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox_4.addItem(recOne[1])
                self.comboBox_4.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT id, metod, shema 
                            FROM harakter 
                            WHERE metod = 'При вiльнiй трьохосьовiй деформацiї'
                            ORDER BY shema""")
            recAll = curs.fetchall()
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox_3.addItem(recOne[2])
                self.comboBox_3.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)
        self.usadkaId = 0  # ID свойств испытания
        self.modelUsadka = QtGui.QStandardItemModel(30, 7)  # Создание модели характеристики испытаний
        self.selmodelUsadka = QtCore.QItemSelectionModel(self.modelUsadka)  # Создание модели выделения
        self.modelUsadka.setRowCount(len(self.recAll))
        self.modelUsadka.setHorizontalHeaderLabels(['Labnum',
                                                    'ID Usadka',
                                                    'Лабораторний \nномер',
                                                    'Прилад \nз визначення \nусадки',
                                                    'Схема випробувань',
                                                    'Вологість \nна границі усадки \nWsh д.о.',
                                                    'Лаборант'])
        self.tableUsadka.setModel(self.modelUsadka)  # Создание представления
        self.tableUsadka.setSelectionModel(self.selmodelUsadka)  # Установить модель выделения в представлении
        self.tableUsadka.setColumnWidth(0, 10)  # Labnum
        self.tableUsadka.setColumnWidth(1, 10)  # ID Usadka
        self.tableUsadka.setColumnWidth(2, 120)  # Лабораторний номер
        self.tableUsadka.setColumnWidth(3, 140)  # Прилад з визначення усадки
        self.tableUsadka.setColumnWidth(4, 400)  # Схема випробувань
        self.tableUsadka.setColumnWidth(5, 150)  # Вологість на границі усадки Wsh д.о.
        self.tableUsadka.setColumnWidth(6, 140)  # Лаборант
        self.tableUsadka.setColumnHidden(0, True)
        self.tableUsadka.setColumnHidden(1, True)
        self.tableUsadka.setEnabled(True)
        self.modelRezultUsadka = QtGui.QStandardItemModel(10, 9)  # Создание модели результатов испытаний усадки
        self.selmodelRezultUsadka = QtCore.QItemSelectionModel(self.modelRezultUsadka)  # Создание модели выделения
        self.modelRezultUsadka.setHorizontalHeaderLabels(["ID",
                                                        "ID Usadka",
                                                        "Вологість \nW %",
                                                        "Висота \nзразка \nH мм",
                                                        "Діаметр \nзразка \nD мм",
                                                        "Об'єм \nзразка \nV см3",
                                                        "Відносна усадка \nза висотою \nεh д.о.",
                                                        "Відносна усадка \nза діаметром \nεd д.о.",
                                                        "Відносна усадка \nза об'ємом \nεv д.о."])
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT *
                            FROM public.usadkai 
                            WHERE usadkai.id_usadka = %(v2)s
                            ORDER BY usadkai.id ASC""", {'v2': self.usadkaId})
            self.recAllRezultUsadka = curs.fetchall()
        self.modelRezultUsadka.setRowCount(len(self.recAllRezultUsadka))
        self.tableRezultUsadka.setModel(self.modelRezultUsadka)  # Создание представления
        self.tableRezultUsadka.setSelectionModel(self.selmodelRezultUsadka)  # Установить модель выделения в представлении
        self.tableRezultUsadka.setColumnWidth(0, 10)  # ID
        self.tableRezultUsadka.setColumnWidth(1, 10)  # ID Usadka
        self.tableRezultUsadka.setColumnWidth(2, 100)  # Вологість W %
        self.tableRezultUsadka.setColumnWidth(3, 90)  # Висота зразка, мм
        self.tableRezultUsadka.setColumnWidth(4, 90) # Диаметр зразка, мм
        self.tableRezultUsadka.setColumnWidth(5, 90)  # Об'єм зразка V см3
        self.tableRezultUsadka.setColumnWidth(6, 130)  # Відносна усадка за висотою εh д.о.
        self.tableRezultUsadka.setColumnWidth(7, 135)  # Відносна усадка за діаметром εd д.о.
        self.tableRezultUsadka.setColumnWidth(8, 135)    # Відносна усадка за об'ємом εd д.о.
        self.tableRezultUsadka.setColumnHidden(0, True)
        self.tableRezultUsadka.setColumnHidden(1, True)
        self.requerySelect()  # Главный запрос для формирования экранной формы
        if not self.recAll:
            self.addRecord()
        else:
            self.recCount = len(self.recAll)
            self.recNum = 0
            self.recOld = self.recAll[self.recNum]
            self.usadkaId = self.recOld[10]  # ID свойств испытаний
        # Назначение делегатов
        self.DelegateUsadka1 = egdelegat.DoubleSpinBoxDelegate1()
        self.DelegateLabnumUsadka = egdelegat.ComboBoxDelegateLabnumGran()
        self.DelegatePriborUsadka = egdelegat.ComboBoxDelegatePriborUsadka()
        self.DelegateShemaUsadka = egdelegat.ComboBoxDelegateShemaUsadka()
        self.DelegateLabman = egdelegat.ComboBoxDelegateLabman()
        self.tableUsadka.setItemDelegateForColumn(2, self.DelegateLabnumUsadka)
        self.tableUsadka.setItemDelegateForColumn(3, self.DelegatePriborUsadka)
        self.tableUsadka.setItemDelegateForColumn(4, self.DelegateShemaUsadka)
        self.tableUsadka.setItemDelegateForColumn(5, self.DelegateUsadka1)
        self.tableUsadka.setItemDelegateForColumn(6, self.DelegateLabman)
        self.tableRezultUsadka.setItemDelegateForColumn(2, self.DelegateUsadka1)
        self.tableRezultUsadka.setItemDelegateForColumn(3, self.DelegateUsadka1)
        self.tableRezultUsadka.setItemDelegateForColumn(4, self.DelegateUsadka1)
        # Обновление формы и панели инструментов
        self.refreshToolbar()
        self.refreshRecord()
        # Назначение обработчиков сигналов
        self.currentChanged.connect(self.asktoSave)
        self.comboBox.activated.connect(self.requeryFiz)
        self.comboBox_2.activated.connect(self.requeryPribor)
        self.currentChanged.connect(self.setRow)
        self.toolButton_1.clicked.connect(self.addRezultUsadka)
        self.toolButton_2.clicked.connect(self.delRezultUsadka)
        self.toolButton.clicked.connect(self.calcUsadka)
        self.selmodelUsadka.selectionChanged['QItemSelection', 'QItemSelection'].connect(self.currentRow)

    def requerySelect(self) -> set:
        """Обновление главного запроса для экранной формы"""
        global idActivObekt
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT burehole.id_obekt,
                                obekt.numdog,
                                obekt.archnum,
                                obekt.stadia,
                                burehole.vidhole,
                                burehole.num_hole,
                                obrazec.num_obrazec,
                                obrazec.glub_otbor,
                                burehole.koord_z - obrazec.glub_otbor AS abs_otm,
                                obrazec.lab_num,
                                usadka.id,
                                usadka.id_obrazec,
                                usadka.id_pribor,
                                usadka.id_harakter,
                                usadka.vlag_usad,
                                glina.vlag,
                                glina.vlagtek,
                                glina.vlagrask,
                                glina.plotn,
                                glina.plotnchast,
                                harakter.shema,
                                usadka.id_labman,
                                vlabman.fio,
                                pribor.name_pribor
                            FROM obekt,
                                burehole,
                                obrazec,
                                usadka LEFT JOIN glina ON usadka.id_obrazec = glina.id_obrazec
                                        LEFT JOIN vlabman ON usadka.id_labman = vlabman.id
                                        LEFT JOIN harakter ON usadka.id_harakter = harakter.id
                                        LEFT JOIN pribor ON usadka.id_pribor = pribor.id
                            WHERE obekt.id = %(v0)s 
                            AND obekt.id = burehole.id_obekt 
                            AND burehole.id = obrazec.id_burehole 
                            AND obrazec.id = usadka.id_obrazec 
                            ORDER BY usadka.id""", {'v0': idActivObekt})
            self.recAll = curs.fetchall()
            return self.recAll

    def requeryFiz(self) -> set:
        """Обновление физ параметров при изменении образца"""
        ind = self.comboBox.currentIndex()
        idObr = self.comboBox.itemData(ind, role=QtCore.Qt.UserRole)
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT vlag,
                                vlagtek,
                                vlagrask,
                                plotn,
                                plotnchast
                            FROM glina
                            WHERE id_obrazec = %(v)s""",
                         {'v': idObr})
            self.recFiz = curs.fetchone()
            if self.recFiz is None:
                self.doubleSpinBox.clear()
                self.doubleSpinBox_2.clear()
                self.doubleSpinBox_3.clear()
                self.doubleSpinBox_4.clear()
                self.doubleSpinBox_5.clear()
                self.label_9.setText("-")
                self.label_10.setText("-")
                self.label_11.setText("-")
                self.label_12.setText("-")
                self.label_34.setText("-")
            else:
                if self.recFiz[0] == None:
                    self.doubleSpinBox.clear()
                else:
                    self.doubleSpinBox.setValue(self.recFiz[0])  # Вологість ґрунту, %
                if self.recFiz[1] == None:
                    self.doubleSpinBox_2.clear()
                else:
                    self.doubleSpinBox_2.setValue(self.recFiz[1])  # Вологість на границi текучостi, %
                if self.recFiz[2] == None:
                    self.doubleSpinBox_3.clear()
                else:
                    self.doubleSpinBox_3.setValue(self.recFiz[2])  # Вологість на границi розкочування, %
                if self.recFiz[3] == None:
                    self.doubleSpinBox_4.clear()
                else:
                    self.doubleSpinBox_4.setValue(self.recFiz[3])  # Щільність ґрунту, г/см3
                if self.recFiz[4] == None:
                    self.doubleSpinBox_5.clear()
                else:
                    self.doubleSpinBox_5.setValue(self.recFiz[4])  # Щiльнiсть часток ґрунту, г/см3
                # Подготовка и отображение расчетных показателей
                self.ip = plastich(self.recFiz[1], self.recFiz[2])
                if self.ip != None:
                    self.label_9.setText(str(self.ip))  # Число пластичностi, %
                else:
                    self.label_9.setText("-")
                self.il = konsist(self.recFiz[0], self.recFiz[1], self.recFiz[2])
                if self.il != None:
                    self.label_10.setText(str(self.il))  # Показник текучостi, д.о.
                else:
                    self.label_10.setText("-")
                self.pd = plotsk(self.recFiz[0], self.recFiz[3])
                if self.pd != None:
                    self.label_11.setText(str(self.pd))  # Щiльнiсть сухого грунту (скелета), г/см3
                else:
                    self.label_11.setText("-")
                self.e = kfPorw(self.recFiz[0], self.recFiz[3], self.recFiz[4])
                if self.e != None:
                    self.label_12.setText(str(self.e))  # Кф пористости
                else:
                    self.label_12.setText("-")
                self.kfSr = kfVodonas(self.recFiz[0], self.recFiz[3], self.recFiz[4])  # Коэффициент водонасыщения
                if self.kfSr != None:
                    self.label_34.setText(str(self.kfSr))  # Кф водонасыщения
                else:
                    self.label_34.setText("-")

    def requeryPribor(self) -> set:
        """Обновление свойств прибора"""
        visota = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), QtCore.Qt.UserRole + 1)
        self.label_13.setText(str(visota))  # Висота зразка, мм
        diametr = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), QtCore.Qt.UserRole + 2)
        self.label_38.setText(str(diametr))  # Діаметр зразка, мм
        if diametr is not None and visota is not None:
            obem = round(math.pi * (float(diametr) / 2) ** 2 * float(visota) / 1000, 2)
        else:
            obem = None
        self.label_39.setText(str(obem))  # Объем образца, см3

    def refreshRecord(self) -> set:
        """Обновляет экранную форму с отображаемой записью"""
        # Передача значений из списка в экранную форму
        self.recOld = self.recAll[self.recNum]
        if self.recOld:
            self.label.setText("Ідентіфікатор об'єкта - " + str(self.recOld[0]) + "\n" +
                               "Номер договору - " + self.recOld[1] + "\n" +
                               "Архівний номер звіту - " + self.recOld[2] + "\n" +
                               self.recOld[4] + " №" + self.recOld[5] + "\n" +
                               "Зразок №" + str(self.recOld[6]) + "\n" +
                               "Глибина відбору - " + str(self.recOld[7]))  # ID объекта, номер договора,
                                                                            # архивный номер, вид и № выработки,
                                                                            # № образца, глубина отбора
            self.obID = self.recOld[0]  # ID объекта
            self.numdog = self.recOld[1]  # Номер договора
            self.archnum = self.recOld[2]  # Архивный номер объекта
            self.stadia = self.recOld[3]  # Стадия проектирования
            self.vidhole = self.recOld[4]  # Вид выработки
            self.numhole = self.recOld[5]  # Номер выработки
            self.numobrazec = self.recOld[6]  # Номер образца
            self.glubotbor = self.recOld[7]  # Глубина отбора
            self.absotm = self.recOld[8]  # Абсолютная отметка отбора
            self.labnum = self.recOld[9]  # Лабораторный номер
            self.usadkaId = self.recOld[10]  # ID испытаний усадки
            self.comboBox.setCurrentIndex(
                self.comboBox.findData(self.recOld[11], role=QtCore.Qt.UserRole))  # ID образца
            self.comboBox_2.setCurrentIndex(
                self.comboBox_2.findData(self.recOld[12], role=QtCore.Qt.UserRole))  # Прилад з визначеня усадки
            visota = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), QtCore.Qt.UserRole+1)
            if visota is None:
                self.label_13.setText('-')
            else:
                self.label_13.setText(str(visota))  # Висота зразка, мм
            diametr = self.comboBox_2.itemData(self.comboBox_2.currentIndex(), QtCore.Qt.UserRole + 2)
            if diametr is None:
                self.label_38.setText('-')
            else:
                self.label_38.setText(str(diametr))  # Діаметр зразка, мм
            if diametr is not None and visota is not None:
                obem = round(math.pi * (float(diametr) / 2) ** 2 * float(visota) / 1000, 2)
            else:
                obem = None
            if obem is None:
                self.label_39.setText('-')
            else:
                self.label_39.setText(str(obem))  # Объем образца, см3
            self.comboBox_3.setCurrentIndex(
                self.comboBox_3.findData(self.recOld[13], role=QtCore.Qt.UserRole))  # Схема випробувань
            self.comboBox_4.setCurrentIndex(
                self.comboBox_4.findData(self.recOld[21], role=QtCore.Qt.UserRole))  # ID лаборанта
            if self.recOld[14] == None:
                self.doubleSpinBox_6.setValue(self.doubleSpinBox_6.minimum())
            else:
                self.doubleSpinBox_6.setValue(self.recOld[14])  # Влажность на границе усадки
            if self.recOld[15] == None:
                self.doubleSpinBox.setValue(self.doubleSpinBox.minimum())
            else:
                self.doubleSpinBox.setValue(self.recOld[15])  # Вологість ґрунту глини, %
            if self.recOld[16] == None:
                self.doubleSpinBox_2.setValue(self.doubleSpinBox_2.minimum())
            else:
                self.doubleSpinBox_2.setValue(self.recOld[16])  # Вологість на границi текучостi, %
            if self.recOld[17] == None:
                self.doubleSpinBox_3.setValue(self.doubleSpinBox_3.minimum())
            else:
                self.doubleSpinBox_3.setValue(self.recOld[17])  # Вологість на границi розкочування, %
            self.plotn = self.recOld[18]                        # Щільність ґрунту глини, г/см3
            if self.recOld[18] == None:
                self.doubleSpinBox_4.setValue(self.doubleSpinBox_4.minimum())
            else:
                self.doubleSpinBox_4.setValue(self.recOld[18])  # Щільність ґрунту глини, г/см3
            if self.recOld[19] == None:
                self.doubleSpinBox_5.setValue(self.doubleSpinBox_5.minimum())
            else:
                self.doubleSpinBox_5.setValue(self.recOld[19])  # Щiльнiсть часток ґрунту глини, г/см3
            # Подготовка и отображение расчетных показателей
            self.ip = plastich(self.recOld[16], self.recOld[17])
            if self.ip != None:
                self.label_9.setText(str(self.ip))  # Число пластичностi, %
            else:
                self.label_9.setText("-")
            self.il = konsist(self.recOld[15], self.recOld[16], self.recOld[17])
            if self.il != None:
                self.label_10.setText(str(self.il))  # Показник текучостi, д.о.
            else:
                self.label_10.setText("-")
            self.pd = plotsk(self.recOld[15], self.recOld[18])
            if self.pd != None:
                self.label_11.setText(str(self.pd))  # Щiльнiсть сухого грунту (скелета), г/см3
            else:
                self.label_11.setText("-")
            self.e = kfPorw(self.recOld[15], self.recOld[18], self.recOld[19])
            if self.e != None:
                self.label_12.setText(str(self.e))  # Кф пористости
            else:
                self.label_12.setText("-")
            self.kfSr = kfVodonas(self.recOld[15], self.recOld[18], self.recOld[19])  # Коэффициент водонасыщения
            if self.kfSr != None:
                self.label_34.setText(str(self.kfSr))  # Кф водонасыщения
            else:
                self.label_34.setText("-")
            namegrunt = nameglina(self.e, self.ip, self.il)
            self.label_18.setText(namegrunt)  # Наименование грунта
            # Считывание данных и обновление списка согласно значений экранной формы
            val0 = self.recOld[0]  # ID объекта
            val1 = self.recOld[1]  # Номер договора
            val2 = self.recOld[2]  # Архивный номер объекта
            val3 = self.recOld[3]  # Стадия проектирования
            val4 = self.recOld[4]  # Вид выработки
            val5 = self.recOld[5]  # Номер выработки
            val6 = self.recOld[6]  # Номер образца
            val7 = self.recOld[7]  # Глубина отбора
            val8 = self.recOld[8]  # Абсолютная отметка отбора
            val9 = self.recOld[9]  # Лабораторный номер
            val10 = self.recOld[10]  # ID испытаний
            val11 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole)  # ID образца
            val12 = self.comboBox_2.itemData(self.comboBox_2.currentIndex(),
                                             role=QtCore.Qt.UserRole)  # ID прибора усадки
            val13 = self.comboBox_3.itemData(self.comboBox_3.currentIndex(),
                                             role=QtCore.Qt.UserRole)  # Идентификатор схемы испытаний
            val14 = self.doubleSpinBox_6.value() # Влажность на границе усадки
            val15 = self.doubleSpinBox.value()  # Вологість ґрунту, %
            val16 = self.doubleSpinBox_2.value()  # Вологість на границi текучостi, %
            val17 = self.doubleSpinBox_3.value()  # Вологість на границi розкочування, %
            val18 = self.doubleSpinBox_4.value()  # Щільність ґрунту, г/см3
            val19 = self.doubleSpinBox_5.value()  # Щiльнiсть часток ґрунту, г/см3
            val20 = self.recOld[20] # Название схемы испытаний
            val21 = self.comboBox_4.itemData(self.comboBox_4.currentIndex(),
                                             role=QtCore.Qt.UserRole)  # ID лаборанта
            val22 = self.recOld[22] # ФИО лаборанта
            self.recOld = [val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, val10, val11,
                           val12, val13, val14, val15, val16, val17, val18, val19, val20, val21, val22]
        else:
            pass
        self.refreshTableUsadka()
        self.refreshTableRezultUsadka()
        self.refreshGraph()

    def refreshTableUsadka(self) -> set:
        """Обновление таблицы характеристики испытаний по усадке"""
        self.recCountUsadka = len(self.recAll)
        self.recAllOldUsadka = []
        if self.recCountUsadka > 0:
            self.modelUsadka.setRowCount(self.recCountUsadka)
            self.tableUsadka.setEnabled(True)
            self.modelUsadka.removeRows(0, self.modelUsadka.rowCount())
            item11 = QtWidgets.QTableWidgetItem()
            item11.setData(QtCore.Qt.EditRole, id)
            for i in range(0, self.recCountUsadka):  # Занесение данных в ячейки таблицы
                self.recOldUsadka = self.recAll[i][9:24]
                listrow = list(self.recOldUsadka)  # Список одной строки
                item9 = QtGui.QStandardItem(str(listrow[0]))  # Лабораторный номер
                item10 = QtGui.QStandardItem(str(listrow[1]))  # ID испытаний усадки
                item11 = QtGui.QStandardItem(str(listrow[0])) # Лабораторный номер
                item11.setData(listrow[2], role=QtCore.Qt.UserRole)    # ID образца
                if listrow[14] is None:
                    item12 = QtGui.QStandardItem('-')
                else:
                    item12 = QtGui.QStandardItem(listrow[14])  # IНазвание прибора усадки
                item12.setData(listrow[3], role=QtCore.Qt.UserRole)    # ID Прибора усадки
                if listrow[11] is None:
                    item13 = QtGui.QStandardItem('-')
                else:
                    item13 = QtGui.QStandardItem(listrow[11])  # Схема испытаний
                item13.setData(listrow[4], role=QtCore.Qt.UserRole) # ID Схемы испытаний
                if listrow[5] is None:
                    item14 = QtGui.QStandardItem('-')
                else:
                    item14 = QtGui.QStandardItem(str(listrow[5]))  # Влажность на границе усадки
                if listrow[13] == '':
                    item15 = QtGui.QStandardItem('-')
                else:
                    item15 = QtGui.QStandardItem(str(listrow[13]))  # Лаборант
                QtGui.QStandardItem.setData(item15, str(listrow[12]), role=QtCore.Qt.UserRole)  # ID лаборанта
                item11.setTextAlignment(QtCore.Qt.AlignCenter)
                item12.setTextAlignment(QtCore.Qt.AlignCenter)
                item13.setTextAlignment(QtCore.Qt.AlignCenter)
                item14.setTextAlignment(QtCore.Qt.AlignCenter)
                item15.setTextAlignment(QtCore.Qt.AlignCenter)
                self.modelUsadka.appendRow([item9, item10, item11, item12, item13, item14, item15])
                oldUsadkaOne = []
                for j in range(0, 14):  # Занесение данных в ячейки таблицы
                    it = listrow[j]
                    if j in range(6, 12):
                        pass
                    elif j == 13:
                        pass
                    else:
                        oldUsadkaOne.append(it)
                self.recAllOldUsadka.append(oldUsadkaOne)  # Формирование исходного списка испытаний
        else:
            self.tableUsadka.setEnabled(False)
            self.toolButton_2.setEnabled(False)
            self.modelUsadka.removeRows(0, self.modelUsadka.rowCount())
        self.recAllNewUsadka = self.recAllOldUsadka
        self.tableUsadka.selectRow(self.recNum)

    def refreshTableRezultUsadka(self) -> set:
        """Обновление таблицы Результатов испытаний по усадке"""
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT *
                            FROM public.usadkai 
                            WHERE usadkai.id_usadka = %(v2)s
                            ORDER BY usadkai.id ASC""", {'v2': self.usadkaId})
            self.recAllRezultUsadka = curs.fetchall()  # Полный исходный список результатов испытаний выбранного образца
        self.recCountRezultUsadka = len(self.recAllRezultUsadka)
        self.recAllOldRezultUsadka = []
        if self.recCountRezultUsadka > 0:
            self.modelRezultUsadka.setRowCount(self.recCountRezultUsadka)
            self.tableRezultUsadka.setEnabled(True)
            self.toolButton_2.setEnabled(True)
            self.toolButton.setEnabled(True)
            self.modelRezultUsadka.removeRows(0, self.modelRezultUsadka.rowCount())
            for i in range(0, self.recCountRezultUsadka):  # Занесение данных в ячейки таблицы
                self.recOldRezultUsadka = self.recAllRezultUsadka[i][0:9]
                listrow = list(self.recOldRezultUsadka)  # Список одной строки
                item0 = QtGui.QStandardItem(str(listrow[0]))  # ID
                item1 = QtGui.QStandardItem(str(listrow[1]))  # ID Usadka
                item2 = QtGui.QStandardItem(str(listrow[2]))  # Влажность при усадке
                item3 = QtGui.QStandardItem(str(listrow[3]))  # Высота образца, мм
                item4 = QtGui.QStandardItem(str(listrow[4]))  # Диаметр образца, мм
                item5 = QtGui.QStandardItem(str(listrow[5]))  # Объем образца при усадке, см3
                item6 = QtGui.QStandardItem(str(listrow[6]))  # Относителная усадка по высоте, д.е.
                item7 = QtGui.QStandardItem(str(listrow[7]))  # Относительная усадка по диаметру, д.е.
                item8 = QtGui.QStandardItem(str(listrow[8]))  # Относительная усадка по объему, д.е.
                item2.setTextAlignment(QtCore.Qt.AlignCenter)
                item3.setTextAlignment(QtCore.Qt.AlignCenter)
                item4.setTextAlignment(QtCore.Qt.AlignCenter)
                item5.setTextAlignment(QtCore.Qt.AlignCenter)
                item6.setTextAlignment(QtCore.Qt.AlignCenter)
                item7.setTextAlignment(QtCore.Qt.AlignCenter)
                item8.setTextAlignment(QtCore.Qt.AlignCenter)
                item5.setEnabled(False)
                item5.setForeground(self.brushbl)
                item5.setBackground(self.brushgr)
                item6.setEnabled(False)
                item6.setForeground(self.brushbl)
                item6.setBackground(self.brushgr)
                item7.setEnabled(False)
                item7.setForeground(self.brushbl)
                item7.setBackground(self.brushgr)
                item8.setEnabled(False)
                item8.setForeground(self.brushbl)
                item8.setBackground(self.brushgr)
                self.modelRezultUsadka.appendRow([item0, item1, item2, item3, item4, item5, item6, item7, item8])
                oldRezultUsadkaOne = []
                for j in range(0, 9):  # Занесение данных в ячейки таблицы
                    it = None
                    if j == 0 or j == 1:
                        it = listrow[j]
                    else:
                        if listrow[j] == None:
                            pass
                        else:
                            it = dc.Decimal(listrow[j])
                    oldRezultUsadkaOne.append(it)
                self.recAllOldRezultUsadka.append(
                    oldRezultUsadkaOne)  # Формирование исходного списка результатов усадки
        else:
            self.tableRezultUsadka.setEnabled(False)
            self.toolButton_2.setEnabled(False)
            self.toolButton.setEnabled(False)
            self.modelRezultUsadka.removeRows(0, self.modelRezultUsadka.rowCount())
        self.recAllNewRezultUsadka = self.recAllOldRezultUsadka

    def refreshGraph(self) -> set:
        """Обновление графика-диаграммы"""
        vlag = round(dc.Decimal(self.doubleSpinBox.value()),1)
        vlagusadka = dc.Decimal(self.doubleSpinBox_6.value())   # Влажность на границе усадки
        if self.label_13.text() == '-':
            visota = None
        else:
            visota = dc.Decimal(self.label_13.text())  # Висота зразка, мм
        if self.label_38.text() == '-':
            diametr = None
        else:
            diametr = dc.Decimal(self.label_38.text())  # Діаметр зразка, мм
        if diametr is not None or visota is not None:
            obem = round(dc.Decimal(math.pi) * diametr ** 2 * visota / 4000, 2)
        else:
            pass
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT MIN(vlag_u) AS minx,
                                    MAX(vlag_u) AS maxx,
                                    MIN(obem_u) AS miny,
                                    MAX(obem_u) AS maxy
                            FROM public.usadkai 
                            GROUP BY id_usadka
                            HAVING id_usadka = %(v2)s""",
                         {'v2': self.usadkaId})
            self.recGroupRezultUsadka = curs.fetchone()  # Исходный список минимальных и максимальных значений испытаний выбранного образца
        if self.modelRezultUsadka.rowCount() > 0:
            self.minx = 0
            self.maxx = dc.Decimal(int(vlag / 10) + 1) * 10
            self.miny = dc.Decimal(int(self.recGroupRezultUsadka[2] / 10) - 1) * 10
            self.maxy = dc.Decimal(int(obem / 10) + 1) * 10
            intervalY = self.maxy - self.miny # Интервал значений объема усадки
            if self.maxx < 40:  # Определения коэфициента масштабирования по оси х
                k = 1
            else:
                k = 2
            self.shagx = dc.Decimal('5.0') * k   # Шаг влажности усадки по сетке
            self.shagy = dc.Decimal('10.0')  # Шаг объема усадки по сетке
            xcount = int(self.maxx / self.shagx) # Количество значений для подписи осей X
            ycount = int((intervalY) / self.shagy) # Количество значений для подписи осей Y
            self.scene.clear()
            self.scene.addRect(40, 30, 250, 260, self.penblack, self.brushly)   # Область построения графика
            ix = int(240 / xcount)    # Шаг сетки по х в пикселях
            for ix in range(40, 300, ix):
                self.scene.addLine(ix, 30, ix, 290, self.penblackp)  # Вертикальная сетка
                self.scene.addLine(ix, 25, ix, 30, self.penblack)  # Вертикальные штрихи
            i = int(240 / xcount)  # Шаг сетки для подписи оси x
            for j in range(0, xcount + 1):
                xtext = QtWidgets.QGraphicsSimpleTextItem(str(round(dc.Decimal('5.0') * k * j, 1)))
                self.scene.addItem(xtext)
                xtext.setPos(32 + i * j, 8)
            iy = int(260 / ycount)  # Шаг сетки по y
            for iy in range(30, 300, iy):
                self.scene.addLine(40, iy, 290, iy, self.penblackp)  # Горизонтальная сетка
                self.scene.addLine(35, iy, 40, iy, self.penblack)  # Горизонтальные штрихи
            j = 0
            i = int(260 / ycount)   # Шаг сетки для подписей оси y
            shagy = intervalY / ycount  # Определение шага значений объема по шкале y
            yprima = self.maxy  # Первое сверху значение на шкале y
            for j in range(0, ycount + 1):
                ytext = QtWidgets.QGraphicsSimpleTextItem(str(round(yprima - shagy * j, 1)))
                self.scene.addItem(ytext)
                ytext.setPos(5, 22 + i * j)
            xname = QtWidgets.QGraphicsSimpleTextItem("W %")
            yname = QtWidgets.QGraphicsSimpleTextItem("V см3")
            wname = QtWidgets.QGraphicsSimpleTextItem("Wsh")
            self.scene.addItem(xname)
            xname.setPos(8 + i * j, -5)
            self.scene.addItem(yname)
            yname.setPos(0, 295)
            j = 0
            listvlagusadka = [dc.Decimal('0.0')]
            listobemusadka = [dc.Decimal('0.0')]
            recPlus = self.recAllRezultUsadka[len(self.recAllRezultUsadka) - 1] # Последняя запись результатов усадки
            recvlagusadka = []    # Формирование дополнителной записи с исходной влажностью (первичной)
            for i in range(0, 9):
                if i == 0:
                    el = recPlus[i] + 1
                elif i == 1:
                    el = recPlus[i]
                elif i == 2:
                    el = vlag
                elif i == 3:
                    el = visota
                elif i == 4:
                    el = diametr
                elif i == 5:
                    el = obem
                else:
                    el = 0
                recvlagusadka.append(el)
            recvlagusadka = tuple(recvlagusadka)
            recAllRezultUsadka = self.recAllRezultUsadka
            recAllRezultUsadka.append(recvlagusadka)   # Список результатов испытаний + запись с первичной влажностью
            recAllRezultUsadka = sorted(recAllRezultUsadka,key=itemgetter(2), reverse=True)
            recCountRezultUsadka = len(recAllRezultUsadka)
            for j in range(0, recCountRezultUsadka):  # Подготовка к построению точек и графика
                recOneRezultUsadka = recAllRezultUsadka[j][0:9]
                listrow = list(recOneRezultUsadka)  # Список одной строки
                listvlagusadka.append(listrow[2])
                listobemusadka.append(listrow[5])
            i = 0
            for i in range(0, recCountRezultUsadka):      # Проверка для построения графика
                if listvlagusadka[i + 1] is None or listobemusadka[i + 1] is None:
                    self.schet = False
                    break
                else:
                    self.schet = True
            if self.schet == False:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Critical,
                                   "Випробування з визначення усадки ґрунту",
                                   "У таблиці результатів випробувань одне або кілька значень "
                                   "вологості (W) або розмірів зразка не визначені."
                                   "\nПровести остаточний розрахунок немає можливості. "
                                   "Необхідно внести в таблицю виправлення.")
                btnOK = QtWidgets.QPushButton("&OK")
                btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                result = self.formMassWin.exec()
                self.scene.clear()
            else:
                i = 0
                for i in range(1, recCountRezultUsadka):  # Построение графика
                    x1 = 40 + int(round(240 / self.maxx * listvlagusadka[i], 0))
                    x2 = 40 + int(round(240 / self.maxx * listvlagusadka[i + 1], 0))
                    y01 = 290 - int(round(260 / intervalY * listobemusadka[i], 0)) # Без учета смещения
                    y1 = y01 + self.miny * 260 / intervalY # С учетом смещения
                    y02 = 290 - int(round(260 / intervalY * listobemusadka[i + 1], 0)) # Без учета смещения
                    y2 = y02 + self.miny * 260 / intervalY # С учетом смещения
                    self.scene.addLine(x1, y1, x2, y2, self.penb)
                i = 0
                for i in range(1, recCountRezultUsadka + 1):  # Построение точек
                    x2 = 40 + int(round(240 / self.maxx * listvlagusadka[i], 0))
                    y02 = 290 - int(round(260 / intervalY * listobemusadka[i], 0))  # Без учета смещения
                    y2 = y02 + self.miny * 260 / intervalY  # С учетом смещения
                    self.scene.addEllipse(x2 - 4, y2 - 4, 8, 8, self.penblack, self.brushr)
            vlagusadkaX = 40 + int(round(240 / self.maxx * vlagusadka, 0))
            self.scene.addLine(vlagusadkaX, 30, vlagusadkaX, 290, self.penred)  # Линия влажности на границе усадки
            self.scene.addItem(wname)
            wname.setPos(vlagusadkaX - 10, 295)
        else:
            self.scene.clear()

    def refreshToolbar(self) -> set:
        """Обновляет панель инструментов"""
        if self.recNum == 0 and self.recCount > 1:
            form.action_8.setEnabled(False)  # Первая запись
            form.action_9.setEnabled(False)  # Предыдущая запись
            form.action_10.setEnabled(True)  # Следующая запись
            form.action_11.setEnabled(True)  # Последняя запись
        elif self.recNum in range(1, self.recCount - 1):
            form.action_8.setEnabled(True)  # Первая запись
            form.action_9.setEnabled(True)  # Последняя запись
            form.action_10.setEnabled(True)  # Следующая запись
            form.action_11.setEnabled(True)  # Последняя запись
        elif self.recNum == self.recCount - 1 and self.recCount > 1:
            form.action_8.setEnabled(True)  # Первая запись
            form.action_9.setEnabled(True)  # Предыдущая запись
            form.action_10.setEnabled(False)  # Следующая запись
            form.action_11.setEnabled(False)  # Последняя запись
        else:
            form.action_8.setEnabled(False)  # Первая запись
            form.action_9.setEnabled(False)  # Предыдущая запись
            form.action_10.setEnabled(False)  # Следующая запись
            form.action_11.setEnabled(False)  # Последняя запись

    def setRow(self) -> set:
        if self.currentIndex() == 0:
            self.refreshToolbar()
            self.refreshRecord()
        elif self.currentIndex() == 1:
            self.tableUsadka.selectRow(self.recNum)
        else:
            self.refreshRecord()

    def currentRow(self) -> set:
        """Определение номера записи (строки)  и установка движка на эту запись"""
        if self.currentIndex() == 1:
            recNum = self.recNum
            self.recNum = self.selmodelUsadka.currentIndex().row()
            if self.recNum < 0:
                self.recNum = recNum
            self.refreshToolbar()

    def showEvent(self, e) -> set:
        """Выполняет действия при выводе окна на экран"""
        form.action_38.setEnabled(False)
        QtWidgets.QTabWidget.showEvent(self, e)

    def hideEvent(self, e) -> set:
        """Выполняет действия при скрытии окна"""
        form.action_38.setEnabled(True)
        form.usadkawin = None
        if self.recAll != []:
            self.asktoSave()
        form.refreshMain()
        QtWidgets.QTabWidget.hideEvent(self, e)

    def nextRecord(self) -> set:
        """Становится на следующей записи"""
        self.recNum += 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableUsadka.selectRow(self.recNum)

    def priorRecord(self) -> set:
        """Становится на предыдущей записи"""
        self.recNum -= 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableUsadka.selectRow(self.recNum)

    def firstRecord(self) -> set:
        """Становится на первой записи"""
        self.recNum = 0
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableUsadka.selectRow(self.recNum)

    def lastRecord(self) -> set:
        """Становится на последней записи"""
        if self.recCount > 0:
            self.recNum = self.recCount - 1
            self.refreshToolbar()
            self.asktoSave()
            self.refreshRecord()
            self.tableUsadka.selectRow(self.recNum)

    def sortRecord(self) -> set:
        """Сортировка записей"""
        self.recAll.sort(key=itemgetter(0,5,7))
        form.action_13.setEnabled(False)  # Сортировать
        form.action_14.setEnabled(True)  # Снять сортировку
        self.refreshRecord()

    def desortRecord(self) -> set:
        """Отмена сортировки, что соответствует сортировке по ID"""
        self.recAll.sort(key=itemgetter(10))
        form.action_13.setEnabled(True)  # Сортировать
        form.action_14.setEnabled(False)  # Снять сортировку
        self.refreshRecord()

    def calcUsadka(self) -> set:
        """Расчет характеристик усадки"""
        visota = dc.Decimal(self.label_13.text())
        diametr = dc.Decimal(self.label_38.text())
        obem = dc.Decimal(self.label_39.text())
        recAllUsadka = self.modelRezultUsadka.rowCount()
        for i in range(0, recAllUsadka):
            indW = self.modelRezultUsadka.index(i, 2)
            indH = self.modelRezultUsadka.index(i, 3)
            indD = self.modelRezultUsadka.index(i, 4)
            vlagUsadka = self.modelRezultUsadka.data(indW, role=QtCore.Qt.DisplayRole)
            visotaUsadka = self.modelRezultUsadka.data(indH, role=QtCore.Qt.DisplayRole)
            diametrUsadka = self.modelRezultUsadka.data(indD, role=QtCore.Qt.DisplayRole)
            if visota != 0 and diametr != 0 and obem != 0:
                visotaUsadka = dc.Decimal(visotaUsadka)
                diametrUsadka = dc.Decimal(diametrUsadka)
                obemUsadka = round(visotaUsadka * (diametrUsadka / 2) ** 2 * dc.Decimal(math.pi) / 1000, 2)
                otnUsadkaH = round((visota - visotaUsadka) / visota, 3)
                otnUsadkaD = round((diametr - diametrUsadka) / diametr, 3)
                otnUsadkaV = round((obem - obemUsadka) / obem, 3)
                self.schet = True
            else:
                obemUsadka = None
                otnUsadkaH = None
                otnUsadkaD = None
                otnUsadkaV = None
                self.schet = False
            self.modelRezultUsadka.item(i, 5).setText(str(obemUsadka))
            self.modelRezultUsadka.item(i, 6).setText(str(otnUsadkaH))
            self.modelRezultUsadka.item(i, 7).setText(str(otnUsadkaD))
            self.modelRezultUsadka.item(i, 8).setText(str(otnUsadkaV))

    def addRecord(self) -> set:
        """Добавляет новую запись"""
        val11 = self.comboBox.itemData(self.comboBox.currentIndex(),
                                       role=QtCore.Qt.UserRole)  # ID последнего образца
        with UseDatebase(dbconfig) as curs:
            curs.execute("INSERT INTO usadka (id_obrazec) VALUES (%(v11)s);", {'v11': val11})
        self.requerySelect()
        self.recCount = len(self.recAll)
        if self.recCount == 1:
            self.recNum = 0
            self.recOld = self.recAll[self.recNum]
        self.refreshRecord()
        self.lastRecord()
        self.refreshToolbar()

    def addRezultUsadka(self) -> set:
        """Добавляет результаты одной усадки"""
        with UseDatebase(dbconfig) as curs:
            curs.execute("SELECT count(id) FROM usadkai WHERE usadkai.id_usadka = %(v2)s;",
                         {'v2': self.usadkaId})
            countComprei = curs.fetchone()
            numcount = countComprei[0]
        with UseDatebase(dbconfig) as curs:
            curs.execute("INSERT INTO usadkai (id_usadka) VALUES (%(v2)s);",
                         {'v2': self.usadkaId})
        self.saveRecordRezultUsadka()
        self.refreshTableRezultUsadka()
        self.tableRezultUsadka.setFocus()
        sel = self.tableRezultUsadka.selectionModel()
        ind = self.tableRezultUsadka.model().index(numcount, 2)
        sel.setCurrentIndex(ind, QtCore.QItemSelectionModel.ClearAndSelect)

    def delRecord(self) -> set:
        """Удаляет текущую запись"""
        self.refreshRecord()
        val10 = self.recOld[10]  # ID
        if val10 is not None:
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                           "Усадка ґрунтів",
                                           "Ви бажаєте видалити поточний запис з порядковим номером - " + str(
                                               self.recNum + 1) +
                                           " та лабораторним номером - " + str(self.recOld[9]) + "?")
            btnYes = QtWidgets.QPushButton("&Так")
            btnNo = QtWidgets.QPushButton("&Ні")
            btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
            self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
            self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
            self.formMassWin.setDefaultButton(btnYes)
            result = self.formMassWin.exec()
            if result == 0:
                try:
                    with UseDatebase(dbconfig) as curs:
                        curs.execute("DELETE FROM usadka WHERE id = %(v10)s;", {'v10': val10})
                    self.requerySelect()
                    self.recCount = len(self.recAll)
                    if self.recCount > 0:
                        self.firstRecord()
                        self.refreshRecord()
                        self.refreshToolbar()
                    else:
                        self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information, "Усадка ґрунтів",
                                                       "Видалено останній запис")
                        btnOK = QtWidgets.QPushButton("&OK")
                        btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                        self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                        result = self.formMassWin.exec()
                        if result == 0:
                            self.formMassWin.close()
                            self.parent().close()
                except:
                    self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "Усадка ґрунтів",
                                                            "Видалення не можливо. "
                                                            "З поточним записом пов'язані записи у таблиці: "
                                                            "Результати випробувань"
                                                            "\nПотрібно виконати попереднє видалення усіх записів "
                                                            "в указаній таблиці")
                    btnOK = QtWidgets.QPushButton("&OK")
                    btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                    self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                    result = self.formMassWin.exec()
                    if result == 0:
                        self.formMassWin.close()
            else:
                pass
        else:
            pass

    def delRezultUsadka(self) -> set:
        """Удаляет один результат усадки из таблицы результатов испытаний"""
        i = self.tableRezultUsadka.currentIndex().row()
        if i == None or i == -1:
            pass
        else:
            idRezultUsadka = self.modelRezultUsadka.item(i, 0).text()
            with UseDatebase(dbconfig) as curs:
                curs.execute("DELETE FROM usadkai WHERE id = %(v0)s;", {'v0': idRezultUsadka})
        self.refreshTableRezultUsadka()

    def asktoSave(self) -> set:
        """Проверяет наличие изменений в испытаниях усадки"""
        if self.recOld:
            # Считывание данных и обновление списка согласно значений экранной формы
            val0 = self.recOld[0]  # ID объекта
            val1 = self.recOld[1]  # Номер договора
            val2 = self.recOld[2]  # Архивный номер объекта
            val3 = self.recOld[3]  # Стадия проектирования
            val4 = self.recOld[4]  # Вид выработки
            val5 = self.recOld[5]  # Номер выработки
            val6 = self.recOld[6]  # Номер образца
            val7 = self.recOld[7]  # Глубина отбора
            val8 = self.recOld[8]  # Абсолютная отметка отбора
            val9 = self.recOld[9]  # Лабораторный номер
            val10 = self.recOld[10]  # ID испытаний
            val11 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole)  # ID образца
            val12 = self.comboBox_2.itemData(self.comboBox_2.currentIndex(),
                                             role=QtCore.Qt.UserRole)  # ID прибора усадки
            val13 = self.comboBox_3.itemData(self.comboBox_3.currentIndex(),
                                             role=QtCore.Qt.UserRole)  # Идентификатор схемы испытаний
            val14 = self.doubleSpinBox_6.value()    # Вологість на границі усадки, д.о.
            val15 = self.doubleSpinBox.value()  # Вологість ґрунту, %
            val16 = self.doubleSpinBox_2.value()  # Вологість на границi текучостi, %
            val17 = self.doubleSpinBox_3.value()  # Вологість на границi розкочування, %
            val18 = self.doubleSpinBox_4.value()  # Щільність ґрунту, г/см3
            val19 = self.doubleSpinBox_5.value()  # Щiльнiсть часток ґрунту, г/см3
            val20 = self.recOld[20]  # Название схемы испытаний
            val21 = self.comboBox_4.itemData(self.comboBox_4.currentIndex(),
                                             role=QtCore.Qt.UserRole)  # ID лаборанта
            val22 = self.recOld[22]  # ФИО лаборанта
            self.recNew = [val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, val10, val11,
                           val12, val13, val14, val15, val16, val17, val18, val19, val20, val21, val22]
            askUsadka = (self.recNew == self.recOld)
            askTableUsadka = self.asktoSaveTableUsadka()
            askRezultUsadka = self.asktoSaveRezultUsadka()
            if askUsadka == False or askRezultUsadka == False:  # В характеристиках испытаний и физических свойствах грунтов есть изменения
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                               "Усадка ґрунтів",
                                               "Є незбережені дані результатів іспитів з визначення усадки ґрунтів. "
                                               "\nВи бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecord(False)
                else:
                    pass
            elif askTableUsadka == False:  # В таблице характеристик испытаний есть изменения
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                               "Усадка ґрунтів",
                                               "Є незбережені дані у таблиці результатів іспитів з визначення усадки ґрунтів. "
                                               "\nВи бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecordTableUsadka(False)
                else:
                    pass
            else:
                pass
        else:
            pass

    def asktoSaveTableUsadka(self) -> set:
        """Проверка наличия изменений в таблице испытаний усадки"""
        # Считывание данных и обновление списка согласно значений экранной формы
        self.recAllNewUsadka = []
        for i in range(0, self.recCountUsadka):
            rec = []
            j = 0
            for j in range(0, 7):
                if j == 0:
                    el = str(
                        self.modelUsadka.item(i, j).data(QtCore.Qt.EditRole))  # ID Лабораторный номер
                elif j == 1:
                    el = int(self.modelUsadka.item(i, j).data(QtCore.Qt.EditRole))
                elif j in range(2, 5):
                    if self.modelUsadka.item(i, j).data(QtCore.Qt.UserRole) == 'None':
                        el = None
                    elif self.modelUsadka.item(i, j).data(QtCore.Qt.UserRole) is None:
                        el = None
                    else:
                        el = int(self.modelUsadka.item(i, j).data(QtCore.Qt.UserRole))
                elif j == 5:
                    if self.modelUsadka.item(i, j).data(QtCore.Qt.EditRole) == '-':
                        el = None
                    else:
                        el = dc.Decimal(self.modelUsadka.item(i, j).data(QtCore.Qt.EditRole))
                elif j == 6:
                    el = int(self.modelUsadka.item(i, j).data(QtCore.Qt.UserRole))
                else:
                    pass
                rec.append(el)  # Формирование текущей записи из элементов
            self.recAllNewUsadka.append(rec)  # Формирование обновленного списка (записей-кортежей)
        if self.recAllNewUsadka == self.recAllOldUsadka:
            ask = True
        else:
            ask = False
        return ask

    def asktoSaveRezultUsadka(self) -> set:
        """Проверка наличия изменений в таблице Результатов испытаний усадки"""
        # Считывание данных и обновление списка результатов испытаний усадки согласно значений экранной формы
        self.recAllNewRezultUsadka = []
        for i in range(0, self.recCountRezultUsadka):
            rec = []
            for j in range(0, 9):
                el = self.modelRezultUsadka.item(i, j).data(QtCore.Qt.EditRole)  # Определение элемента текущей записи
                if j == 0 or j == 1:
                    el = int(el)
                else:
                    if el == 'None':
                        el = None
                    else:
                        el = dc.Decimal(el)
                rec.append(el)  # Формирование текущей записи из элементов
            self.recAllNewRezultUsadka.append(rec)  # Формирование обновленного списка (записей-кортежей)
        if self.recAllNewRezultUsadka == self.recAllOldRezultUsadka:
            ask = True
        else:
            ask = False
        return ask

    def saveAll(self) -> set:
        """Сохраняет изменения по нажатию кнопки Сохранить на панели инструментов"""
        if self.currentIndex() == 0:
            self.saveRecord(False)
        if self.currentIndex() == 1:
            self.setCurrentIndex(0)
            self.setCurrentIndex(1)
        else:
            pass

    def saveRecord(self, ask) -> set:
        """Сохраняет изменения в записи и формирует новый курсор"""
        if ask == False:
            val10 = self.recOld[10]  # ID испытаний
            val11 = self.comboBox.itemData(self.comboBox.currentIndex(), role=QtCore.Qt.UserRole)  # ID образца
            val12 = self.comboBox_2.itemData(self.comboBox_2.currentIndex(),
                                             role=QtCore.Qt.UserRole)  # ID прибора усадки
            val13 = self.comboBox_3.itemData(self.comboBox_3.currentIndex(),
                                             role=QtCore.Qt.UserRole)  # Идентификатор схемы испытаний
            if self.doubleSpinBox_6.value() == 0:
                val14 = None
            else:
                val14 = self.doubleSpinBox_6.value()  # Вологість на границі усадки, д.о.
            if self.doubleSpinBox.value() == 0:
                val15 = None
            else:
                val15 = self.doubleSpinBox.value()  # Вологість ґрунту, %
            if self.doubleSpinBox_2.value() == 0:
                val16 = None
            else:
                val16 = self.doubleSpinBox_2.value()  # Вологість на границi текучостi, %
            if self.doubleSpinBox_3.value() == 0:
                val17 = None
            else:
                val17 = self.doubleSpinBox_3.value()  # Вологість на границi розкочування, %
            if self.doubleSpinBox_4.value() == 0:
                val18 = None
            else:
                val18 = self.doubleSpinBox_4.value()  # Щільність ґрунту, г/см3
            if self.doubleSpinBox_5.value() == 0:
                val19 = None
            else:
                val19 = self.doubleSpinBox_5.value()  # Щiльнiсть часток ґрунту, г/см3
            val20 = self.comboBox_4.itemData(self.comboBox_4.currentIndex(),
                                             role=QtCore.Qt.UserRole)  # ID лаборанта
            with UseDatebase(dbconfig) as curs:
                curs.execute("""UPDATE usadka
                               SET id_obrazec = %(v11)s,
                                   id_pribor = %(v12)s,
                                   id_harakter = %(v13)s,
                                   vlag_usad = %(v14)s,
                                   id_labman = %(v20)s
                               WHERE id = %(v10)s;""",
                             {'v11': val11, 'v12': val12, 'v13': val13, 'v14': val14, 'v20': val20, 'v10': val10})
            with UseDatebase(dbconfig) as curs:
                curs.execute("""UPDATE glina
                               SET vlag = %(v15)s,
                                   vlagtek = %(v16)s,
                                   vlagrask = %(v17)s,
                                   plotn = %(v18)s,
                                   plotnchast = %(v19)s
                               WHERE id_obrazec = %(v11)s;""",
                             {'v15': val15, 'v16': val16, 'v17': val17, 'v18': val18, 'v19': val19, 'v11': val11})
            self.requerySelect()
            self.saveRecordRezultUsadka()
            self.refreshRecord()
        #            self.refreshGraph()
        else:
            pass

    def saveRecordRezultUsadka(self) -> set:
        """Сохранение записей таблицы результатов испытаний усадки"""
        ask = self.asktoSaveRezultUsadka()
        if ask == False:
            for i in range(0, self.recCountRezultUsadka):
                recRezultUsadka = self.recAllNewRezultUsadka[i]
                val0 = int(recRezultUsadka[0])  # Идентификатор усадки
                val1 = int(recRezultUsadka[1])  # Идентификатор испытаний усадки
                val2 = recRezultUsadka[2]  # Влажность усадки, %
                val3 = recRezultUsadka[3]  # Высота образца, мм
                val4 = recRezultUsadka[4]  # Диаметр образца, мм
                val5 = recRezultUsadka[5]  # Объем, см3
                val6 = recRezultUsadka[6]  # Относителная усадка по высоте, д.е.
                val7 = recRezultUsadka[7]  # Относителная усадка по диаметру, д.е.
                val8 = recRezultUsadka[8]  # Относителная усадка по объему, д.е.
                if val2 == None:
                    pass
                else:
                    val2 = dc.Decimal(val2)
                if val3 == None:
                    pass
                else:
                    val3 = dc.Decimal(val3)
                if val4 == None:
                    pass
                else:
                    val4 = dc.Decimal(val4)
                if val5 == None:
                    pass
                else:
                    val5 = dc.Decimal(val5)
                if val6 == None:
                    pass
                else:
                    val6 = dc.Decimal(val6)
                if val7 == None:
                    pass
                else:
                    val7 = dc.Decimal(val7)
                if val8 == None:
                    pass
                else:
                    val8 = dc.Decimal(val8)
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE usadkai  
                                    SET vlag_u = %(v2)s, 
                                        visota_u = %(v3)s,
                                        diametr_u = %(v4)s,
                                        obem_u = %(v5)s, 
                                        otn_h = %(v6)s, 
                                        otn_d = %(v7)s,
                                        otn_v = %(v8)s
                                    WHERE id = %(v0)s;""",
                                 {'v2': val2, 'v3': val3, 'v4': val4, 'v5': val5, 'v6': val6,
                                  'v7': val7, 'v8': val8, 'v0': val0})
        else:
            pass

    def saveRecordTableUsadka(self, ask) -> set:
        """Сохранение записей таблицы характеристики испытаний усадки"""
        if ask == False:
            for i in range(0, self.recCountUsadka):
                recTabUsadka = self.recAllNewUsadka[i]
                val10 = recTabUsadka[1]
                val11 = recTabUsadka[2]
                val12 = recTabUsadka[3]
                val13 = recTabUsadka[4]
                val14 = recTabUsadka[5]
                val20 = recTabUsadka[6]
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE usadka
                                    SET id_obrazec = %(v11)s,
                                        id_pribor = %(v12)s,
                                        id_harakter = %(v13)s,
                                        vlag_usad = %(v14)s,
                                        id_labman = %(v20)s
                                    WHERE id = %(v10)s;""",
                                    {'v11': val11, 'v12': val12, 'v13': val13, 'v14': val14, 'v20': val20, 'v10': val10})
            self.requerySelect()
            self.refreshRecord()
        else:
            pass


class KomerchWindow(QtWidgets.QTabWidget, egclasswin.Ui_Komerch_win):
    def __init__(self) -> set:
        """Инициализация окна Коммерческого прежложения"""
        super().__init__()
        self.setupUi(self)
        self.recAllOldVidKomerch = []
        self.recCountVidKomerch = 0
        self.comboBox.addItems(["UAN", "USD", "EUR", "RUB"])
        self.comboBox_2.addItems(["Календарні дні", "Робочі дні", "Тижні", "Місяці"])
        self.modelVidKomerch = QtGui.QStandardItemModel(30, 6)  # Создание модели видов работ
        self.modelPodVidKomerch = QtGui.QStandardItemModel(30, 4)  # Создание модели подвидов работ
        self.kpId = 0
        self.vkpId = 0
        self.requerySelect()
        if not self.recAll:
            self.addRecord()
        else:
            self.recCount = len(self.recAll)
            self.recNum = 0
            self.recOld = self.recAll[self.recNum]
            self.kpId = self.recOld[4]  # ID коммерческого предложения
        self.modelVidKomerch = QtGui.QStandardItemModel(30, 6)  # Создание модели видов работ
        self.modelVidKomerch.setHorizontalHeaderLabels(['id',
                                                        'id_komerch',
                                                        'Розділ',
                                                        'Умови робіт',
                                                        'Вид робіт',
                                                        'Одиниця виміру',
                                                        'Обсяг'])
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT *
                                FROM public.vidkomerch 
                                WHERE vidkomerch.id_komerch = %(v2)s
                                ORDER BY vidkomerch.id ASC""", {'v2': self.kpId})
            self.recAllVidKomerch = curs.fetchall()
            self.modelVidKomerch.setRowCount(len(self.recAllVidKomerch))
        self.tableVidKomerch.setModel(self.modelVidKomerch)  # Создание представления
        self.tableVidKomerch.setGeometry(QtCore.QRect(10, 160, 870, 170))
        self.tableVidKomerch.setColumnWidth(0, 10)
        self.tableVidKomerch.setColumnWidth(1, 10)
        self.tableVidKomerch.setColumnWidth(2, 147)
        self.tableVidKomerch.setColumnWidth(3, 100)
        self.tableVidKomerch.setColumnWidth(4, 409)
        self.tableVidKomerch.setColumnWidth(5, 110)
        self.tableVidKomerch.setColumnWidth(6, 69)
        self.tableVidKomerch.setColumnHidden(0, True)
        self.tableVidKomerch.setColumnHidden(1, True)
        if not self.recAllVidKomerch:
            pass
        else:
            self.recCountVidKomerch = len(self.recAllVidKomerch)
            self.recNumVidKomerch = 0
            self.recOldVidKomerch = self.recAllVidKomerch[self.recNumVidKomerch]
            self.vkpId = self.recOldVidKomerch[0]  # ID вида работ коммерческого предложения
        self.modelPodVidKomerch = QtGui.QStandardItemModel(30, 4)  # Создание модели подвидов работ
        self.modelPodVidKomerch.setHorizontalHeaderLabels(['id',
                                                           'id_vidkomerch',
                                                           'Різновидність умов робіт',
                                                           'Одиниця виміру',
                                                           'Обсяг'])
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT *
                                FROM public.podvidkomerch 
                                WHERE podvidkomerch.id_vidkomerch = %(v2)s
                                ORDER BY podvidkomerch.id ASC""", {'v2': self.vkpId})
            self.recAllPodvidKomerch = curs.fetchall()
            self.modelPodVidKomerch.setRowCount(len(self.recAllPodvidKomerch))
        self.tablePodvidKomerch.setModel(self.modelPodVidKomerch)  # Создание представления
        self.tablePodvidKomerch.setGeometry(QtCore.QRect(10, 370, 870, 170))
        self.tablePodvidKomerch.setColumnWidth(0, 10)
        self.tablePodvidKomerch.setColumnWidth(1, 10)
        self.tablePodvidKomerch.setColumnWidth(2, 656)
        self.tablePodvidKomerch.setColumnWidth(3, 110)
        self.tablePodvidKomerch.setColumnWidth(4, 70)
        self.tablePodvidKomerch.setColumnHidden(0, True)
        self.tablePodvidKomerch.setColumnHidden(1, True)
        # Назначение делегатов
        self.DelegateGroupRab = egdelegat.ComboBoxDelegateGroupRab()
        self.DelegateUslovRab = egdelegat.ComboBoxDelegateUslovRab()
        self.DelegateObemRab = egdelegat.DoubleSpinBoxDelegate10()
        self.DelegateObemRab2 = egdelegat.DoubleSpinBoxDelegate10()
        self.tableVidKomerch.setItemDelegateForColumn(2, self.DelegateGroupRab)
        self.tableVidKomerch.setItemDelegateForColumn(3, self.DelegateUslovRab)
        self.tableVidKomerch.setItemDelegateForColumn(6, self.DelegateObemRab)
        self.tablePodvidKomerch.setItemDelegateForColumn(4, self.DelegateObemRab2)
        self.refreshToolbar()
        self.refreshRecord()
        # Назначение обработчиков сигналов
        self.currentChanged.connect(self.asktoSave)
        self.tableVidKomerch.clicked.connect(self.saveRecordPodVidKomerch)
        self.tableVidKomerch.activated.connect(self.indexTablePodVidKomerch)
        self.tableVidKomerch.clicked.connect(self.indexTablePodVidKomerch)
        self.tableVidKomerch.clicked.connect(self.nameRazdelRab)
        self.tableVidKomerch.activated.connect(self.nameRazdelRab)
        self.toolButton_1.clicked.connect(self.addVidKomerch)
        self.toolButton_2.clicked.connect(self.delVidKomerch)
        self.toolButton_3.clicked.connect(self.addPodVidKomerch)
        self.toolButton_4.clicked.connect(self.delPodVidKomerch)

    def requerySelect(self) -> set:
        """Обновление главного запроса для экранной формы"""
        global idActivObekt
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT obekt.id, 
                                obekt.archnum,
                                obekt.name, 
                                obekt.stadia,
                                komerch.id, 
                                komerch.numkomerch, 
                                komerch.datakomerch, 
                                komerch.pricekomerch, 
                                komerch.ed_price, 
                                komerch.srok, 
                                komerch.ed_srok, 
                                komerch.textkomerch, 
                                komerch.smetakomerch
                            FROM public.obekt, public.komerch
                            WHERE obekt.id = komerch.id_obekt 
                            AND obekt.id = %(v0)s
                            ORDER BY komerch.id ASC""", {'v0': idActivObekt})
            self.recAll = curs.fetchall()
            return self.recAll

    def refreshRecord(self) -> set:
        """Обновляет экранную форму с отображаемой записью"""
        # Передача значений из списка в экранную форму
        if self.recAll == []:
            self.recOld = []
        else:
            self.recOld = self.recAll[self.recNum]
        if self.recOld:
            self.label_7.setText("Ідентіфікатор об'єкта - " + str(self.recOld[0]) + "\n" +
                                 "Архівний номер звіту - " + self.recOld[1] + "\n" +
                                 self.recOld[2] + "\n" +
                                 "Стадія проектування - " + self.recOld[
                                     3])  # ID объекта, архивный номер, название и стадия объекта
            self.obID = self.recOld[0]  # ID объекта
            self.archnum = self.recOld[1]  # Архивный номер объекта
            self.nameobekt = self.recOld[2]  # Наименование объекта
            self.stadia = self.recOld[3]  # Стадия проектирования
            self.kpId = self.recOld[4]  # ID коммерческого предложения
            self.lineEdit.setText(self.recOld[5])  # Номер коммерческого предложения
            self.dateEdit.setDate(self.recOld[6])  # Дата коммерческого предложения
            self.doubleSpinBox.setValue(self.recOld[7])  # Общая стоимость
            self.comboBox.setCurrentText(self.recOld[8])  # Наименование валюты
            self.spinBox.setValue(self.recOld[9])  # Продолжительность работ
            self.comboBox_2.setCurrentText(self.recOld[10])  # Единицы измерения продолжительности работ
            self.textEdit.setHtml(self.recOld[11])  # Текст коммерческого предложения
            self.textEdit_2.setHtml(self.recOld[12])  # Текст сметы
            # Считывание данных и обновление списка согласно значений экранной формы
            val0 = self.recOld[0]  # ID объекта
            val1 = self.recOld[1]  # Номер объекта
            val2 = self.recOld[2]  # Наименование объекта
            val3 = self.recOld[3]  # Стадия проектирования
            val4 = self.recOld[4]  # ID коммерческого предложения
            val5 = self.lineEdit.text()  # Номер коммерческого предложения
            val6 = self.dateEdit.date().toPyDate()  # Дата коммерческого предложения
            val7 = self.doubleSpinBox.value()  # Общая стоимость
            val8 = self.comboBox.currentText()  # Наименование валюты
            val9 = self.spinBox.value()  # Продолжительность работ
            val10 = self.comboBox_2.currentText()  # Единицы измерения продолжительности работ
            val11 = self.textEdit.toPlainText()  # Текст коммерческого предложения
            val12 = self.textEdit_2.toPlainText()  # Текст сметы
            self.recOld = [val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, val10, val11, val12]
        else:
           pass
        self.refreshTableVidKomerch()

    def refreshTableVidKomerch(self) -> set:
        """Обновление таблицы видов работ коммерческого предложения"""
        self.vkpId = None
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT *
                            FROM public.vidkomerch 
                            WHERE vidkomerch.id_komerch = %(v2)s
                            ORDER BY vidkomerch.id ASC""", {'v2': self.kpId})
            self.recAllVidKomerch = curs.fetchall()  # Полный исходный список объемов работ
        self.recCountVidKomerch = len(self.recAllVidKomerch)
        self.recAllOldVidKomerch = []
        if self.recCountVidKomerch > 0:
            self.modelVidKomerch.setRowCount(self.recCountVidKomerch)
            self.tableVidKomerch.setEnabled(True)
            self.toolButton_2.setEnabled(True)
            self.modelVidKomerch.removeRows(0, self.modelVidKomerch.rowCount())
            for i in range(0, self.recCountVidKomerch):  # Занесение данных в ячейки таблицы
                self.recOldVidKomerch = self.recAllVidKomerch[i][0:7]
                listrow = list(self.recOldVidKomerch)  # Список одной строки
                item0 = QtGui.QStandardItem(str(listrow[0]))
                self.vkpId = str(listrow[0])
                item1 = QtGui.QStandardItem(str(listrow[1]))
                item2 = QtGui.QStandardItem(str(listrow[2]))
                item3 = QtGui.QStandardItem(str(listrow[3]))
                item4 = QtGui.QStandardItem(str(listrow[4]))
                item5 = QtGui.QStandardItem(str(listrow[5]))
                item6 = QtGui.QStandardItem(str(listrow[6]))
                item2.setTextAlignment(QtCore.Qt.AlignCenter)
                item3.setTextAlignment(QtCore.Qt.AlignCenter)
                item4.setTextAlignment(QtCore.Qt.AlignCenter)
                item5.setTextAlignment(QtCore.Qt.AlignCenter)
                item6.setTextAlignment(QtCore.Qt.AlignCenter)
                self.modelVidKomerch.appendRow([item0, item1, item2, item3, item4, item5, item6])
                oldVidKomerchOne = []
                for j in range(0, 7):  # Занесение данных в ячейки таблицы
                    it = None
                    if j != 6:
                        it = listrow[j]
                    else:
                        if listrow[j] == None:
                            pass
                        else:
                            it = float(listrow[j])
                    oldVidKomerchOne.append(it)
                self.recAllOldVidKomerch.append(oldVidKomerchOne)  # Формирование исходного списка замеров
        else:
            self.tableVidKomerch.setEnabled(False)
            self.toolButton_2.setEnabled(False)
            self.modelVidKomerch.removeRows(0, self.modelVidKomerch.rowCount())
        self.recAllNewVidKomerch = self.recAllOldVidKomerch
        self.tableVidKomerch.resizeRowsToContents()
        self.refreshTablePodVidKomerch()

    def refreshTablePodVidKomerch(self) -> set:
        """Обновление таблицы детализации видов работ коммерческого предложения"""
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT *
                            FROM public.PodVidKomerch 
                            WHERE PodVidKomerch.id_vidkomerch = %(v2)s
                            ORDER BY PodVidKomerch.id ASC""", {'v2': self.vkpId})
            self.recAllPodVidKomerch = curs.fetchall()  # Полный исходный список детализации объемов работ
        self.recCountPodVidKomerch = len(self.recAllPodVidKomerch)
        self.recAllOldPodVidKomerch = []
        if self.recCountPodVidKomerch > 0:
            self.modelPodVidKomerch.setRowCount(self.recCountPodVidKomerch)
            self.tablePodvidKomerch.setEnabled(True)
            self.toolButton_4.setEnabled(True)
            self.modelPodVidKomerch.removeRows(0, self.modelPodVidKomerch.rowCount())
            for i in range(0, self.recCountPodVidKomerch):  # Занесение данных в ячейки таблицы
                self.recOldPodVidKomerch = self.recAllPodVidKomerch[i][0:5]
                listrow = list(self.recOldPodVidKomerch)  # Список одной строки
                item0 = QtGui.QStandardItem(str(listrow[0]))
                item1 = QtGui.QStandardItem(str(listrow[1]))
                item2 = QtGui.QStandardItem(str(listrow[2]))
                item3 = QtGui.QStandardItem(str(listrow[3]))
                item4 = QtGui.QStandardItem(str(listrow[4]))
                item2.setTextAlignment(QtCore.Qt.AlignCenter)
                item3.setTextAlignment(QtCore.Qt.AlignCenter)
                item4.setTextAlignment(QtCore.Qt.AlignCenter)
                self.modelPodVidKomerch.appendRow([item0, item1, item2, item3, item4])
                oldPodVidKomerchOne = []
                for j in range(0, 5):  # Занесение данных в ячейки таблицы
                    it = None
                    if j != 4:
                        it = listrow[j]
                    else:
                        if listrow[j] == None:
                            pass
                        else:
                            it = float(listrow[j])
                    oldPodVidKomerchOne.append(it)
                self.recAllOldPodVidKomerch.append(oldPodVidKomerchOne)  # Формирование исходного списка замеров
        else:
            self.tablePodvidKomerch.setEnabled(False)
            self.toolButton_4.setEnabled(False)
            self.modelPodVidKomerch.removeRows(0, self.modelPodVidKomerch.rowCount())
        self.recAllNewPodVidKomerch = self.recAllOldPodVidKomerch
        self.tablePodvidKomerch.resizeRowsToContents()

    def refreshToolbar(self) -> set:
        """Обновляет панель инструментов"""
        if self.recNum == 0 and self.recCount > 1:
            form.action_8.setEnabled(False)  # Первая запись
            form.action_9.setEnabled(False)  # Предыдущая запись
            form.action_10.setEnabled(True)  # Следующая запись
            form.action_11.setEnabled(True)  # Последняя запись
        elif self.recNum in range(1, self.recCount - 1):
            form.action_8.setEnabled(True)  # Первая запись
            form.action_9.setEnabled(True)  # Последняя запись
            form.action_10.setEnabled(True)  # Следующая запись
            form.action_11.setEnabled(True)  # Последняя запись
        elif self.recNum == self.recCount - 1 and self.recCount > 1:
            form.action_8.setEnabled(True)  # Первая запись
            form.action_9.setEnabled(True)  # Предыдущая запись
            form.action_10.setEnabled(False)  # Следующая запись
            form.action_11.setEnabled(False)  # Последняя запись
        else:
            form.action_8.setEnabled(False)  # Первая запись
            form.action_9.setEnabled(False)  # Предыдущая запись
            form.action_10.setEnabled(False)  # Следующая запись
            form.action_11.setEnabled(False)  # Последняя запись

    def indexTablePodVidKomerch(self) -> set:
        """Выполняет подготовку к обнавлению таблицы подвида работ"""
        ind = self.tableVidKomerch.currentIndex()
        i = ind.row()  # Номер текущей строки таблицы вида работ
        if i < 0:
            el = 0
        else:
            el = self.modelVidKomerch.item(i, 0).data(QtCore.Qt.EditRole)  # Текущее значение ID вида работ
        self.vkpId = el
        self.refreshTablePodVidKomerch()

    def nameRazdelRab(self) -> set:
        """Возвращает раздел работ"""
        global namerazdel
        ind = self.tableVidKomerch.currentIndex()
        i = ind.row()  # Номер текущей строки таблицы вида работ
        if i < 0:
            namerazdel = ""
        else:
            namerazdel = self.modelVidKomerch.item(i, 2).data(QtCore.Qt.EditRole)
        return namerazdel

    def showEvent(self, e) -> set:
        """Выполняет действия при выводе окна на экран"""
        form.action_28.setEnabled(False)
        QtWidgets.QTabWidget.showEvent(self, e)

    def hideEvent(self, e) -> set:
        """Выполняет действия при скрытии окна"""
        form.action_28.setEnabled(True)
        form.komerchdwin = None
        if self.recAll != []:
            self.asktoSave()
        form.refreshMain()
        QtWidgets.QTabWidget.hideEvent(self, e)

    def nextRecord(self) -> set:
        """Становится на следующей записи"""
        self.recNum += 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()

    def priorRecord(self) -> set:
        """Становится на предыдущей записи"""
        self.recNum -= 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()

    def firstRecord(self) -> set:
        """Становится на первой записи"""
        self.recNum = 0
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()

    def lastRecord(self) -> set:
        """Становится на последней записи"""
        if self.recCount > 0:
            self.recNum = self.recCount - 1
            self.refreshToolbar()
            self.asktoSave()
            self.refreshRecord()

    def sortRecord(self) -> set:
        """Сортировка записей"""
        self.recAll.sort(key=itemgetter(5))
        form.action_13.setEnabled(False)  # Сортировать
        form.action_14.setEnabled(True)  # Снять сортировку
        self.refreshRecord()

    def desortRecord(self) -> set:
        """Отмена сортировки, что соответствует сортировке по ID"""
        self.recAll.sort(key=itemgetter(4))
        form.action_13.setEnabled(True)  # Сортировать
        form.action_14.setEnabled(False)  # Снять сортировку
        self.refreshRecord()

    def addRecord(self) -> set:
        """Добавляет новую запись"""
        global idActivObekt
        with UseDatebase(dbconfig) as curs:
            curs.execute("INSERT INTO komerch (id_obekt) VALUES (%(v3)s);", {'v3': idActivObekt})
        self.requerySelect()
        self.recCount = len(self.recAll)
        if self.recCount == 1:
            self.recNum = 0
            self.recOld = self.recAll[self.recNum]
        self.refreshRecord()
        self.lastRecord()
        self.refreshToolbar()
        self.refreshRecord()

    def addVidKomerch(self) -> set:
        """Добавляет один вид работ коммерческого предложения"""
        with UseDatebase(dbconfig) as curs:
            curs.execute("SELECT count(vidkomerch.id) FROM vidkomerch WHERE vidkomerch.id_komerch = %(v1)s;",
                        {'v1': self.kpId})
            countVid = curs.fetchone()
            numVid = countVid[0]
        with UseDatebase(dbconfig) as curs:
            curs.execute("INSERT INTO vidkomerch (id_komerch) VALUES (%(v2)s);",
                         {'v2': self.kpId})
        self.saveRecordVidKomerch()
        self.refreshTableVidKomerch()
        self.refreshTablePodVidKomerch()
        self.tableVidKomerch.setFocus()
        sel = self.tableVidKomerch.selectionModel()
        ind = self.tableVidKomerch.model().index(numVid, 2)
        sel.setCurrentIndex(ind, QtCore.QItemSelectionModel.NoUpdate)

    def addPodVidKomerch(self) -> set:
        """Добавляет расширение вида работ коммерческого предложения"""
        with UseDatebase(dbconfig) as curs:
            curs.execute("SELECT count(podvidkomerch.id) FROM podvidkomerch WHERE podvidkomerch.id_vidkomerch = %(v1)s;",
                        {'v1': self.vkpId})
            countPodVid = curs.fetchone()
            numPodVid = countPodVid[0]
        with UseDatebase(dbconfig) as curs:
            curs.execute("INSERT INTO podvidkomerch (id_vidkomerch) VALUES (%(v3)s);",
                         {'v3': self.vkpId})
        self.saveRecordPodVidKomerch()
        self.refreshTablePodVidKomerch()
        self.tablePodvidKomerch.setFocus()
        sel = self.tablePodvidKomerch.selectionModel()
        ind = self.tablePodvidKomerch.model().index(numPodVid, 2)
        sel.setCurrentIndex(ind, QtCore.QItemSelectionModel.NoUpdate)

    def delRecord(self) -> set:
        """Удаляет текущую запись"""
        val4 = self.recOld[4]
        val5 = self.recOld[5]
        if val4 is not None:
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                           "Комерційні пропозиції",
                                           "Ви бажаєте видалити поточний запис з порядковим номером - " +
                                            str(self.recNum + 1) + " та номером комерційної пропозиціїі - " + str(val5) + "?")
            btnYes = QtWidgets.QPushButton("&Так")
            btnNo = QtWidgets.QPushButton("&Ні")
            btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
            self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
            self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
            self.formMassWin.setDefaultButton(btnYes)
            result = self.formMassWin.exec()
            if result == 0:
                try:
                    with UseDatebase(dbconfig) as curs:
                        curs.execute("DELETE FROM komerch WHERE id = %(v3)s;", {'v3': val4})
                    self.requerySelect()
                    self.recCount = len(self.recAll)
                    if self.recCount > 0:
                        self.firstRecord()
                        self.refreshToolbar()
                        self.refreshRecord()
                    else:
                        self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information, "Комерційні пропозиції",
                                                       "Видалено останній запис")
                        btnOK = QtWidgets.QPushButton("&OK")
                        btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                        self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                        result = self.formMassWin.exec()
                        if result == 0:
                            self.formMassWin.close()
                            self.parent().close()
                except:
                    self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "Комерційні пропозиції",
                                                            "Видалення не можливо. "
                                                            "З поточним записом пов'язані записи у таблицях: "
                                                            "Обсяги робіт та Деталізація обсягів робіт."
                                                            "\nПотрібно виконати попереднє видалення усіх записів "
                                                            "в указаних таблицях.")
                    btnOK = QtWidgets.QPushButton("&OK")
                    btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                    self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                    result = self.formMassWin.exec()
                    if result == 0:
                        self.formMassWin.close()

    def delVidKomerch(self) -> set:
        """Удаляет вид работ коммерческого предложения"""
        i = self.tableVidKomerch.currentIndex().row()
        if i == None or i == -1:
            pass
        else:
            idVidKomerch = self.modelVidKomerch.item(i, 0).text()
            try:
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""DELETE FROM vidkomerch 
                                    WHERE id = %(v0)s;""",
                                 {'v0': idVidKomerch})
                self.refreshTableVidKomerch()
            except:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "Комерційні пропозиції",
                                                         "Видалення не можливо. "
                                                         "З поточним записом пов'язані записи у таблиці: "
                                                         "Деталізація обсягів робіт."
                                                         "\nПотрібно виконати попереднє видалення усіх записів "
                                                         "в указаній таблиці.")
                btnOK = QtWidgets.QPushButton("&OK")
                btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                result = self.formMassWin.exec()
                if result == 0:
                    self.formMassWin.close()

    def delPodVidKomerch(self) -> set:
        """Удаляет подвид работ коммерческого предложения"""
        i = self.tablePodvidKomerch.currentIndex().row()
        if i == None or i == -1:
            pass
        else:
            idPodVidKomerch = self.modelPodVidKomerch.item(i, 0).text()
            with UseDatebase(dbconfig) as curs:
                curs.execute("""DELETE FROM podvidkomerch 
                                WHERE id = %(v0)s;""",
                             {'v0': idPodVidKomerch})
        self.refreshTablePodVidKomerch()

    def asktoSave(self) -> set:
        """Проверяет наличие изменений в характеристиках коммерческого предложения"""
        if self.recOld:
            # Считывание данных и обновление списка согласно значений экранной формы
            val0 = self.recOld[0]  # ID объекта
            val1 = self.recOld[1]  # Номер объекта
            val2 = self.recOld[2]  # Наименование объекта
            val3 = self.recOld[3]  # Стадия проектирования
            val4 = self.recOld[4]  # ID коммерческого предложения
            val5 = self.lineEdit.text()  # Номер коммерческого предложения
            val6 = self.dateEdit.date().toPyDate()  # Дата коммерческого предложения
            val7 = self.doubleSpinBox.value()  # Общая стоимость
            val8 = self.comboBox.currentText()  # Наименование валюты
            val9 = self.spinBox.value()  # Продолжительность работ
            val10 = self.comboBox_2.currentText()  # Единицы измерения продолжительности работ
            val11 = self.textEdit.toPlainText()  # Текст коммерческого предложения
            val12 = self.textEdit_2.toPlainText()  # Текст сметы
            self.recNew = [val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, val10, val11, val12]
            askKomerchpoint = (self.recNew == self.recOld)
            askVidKomerch = self.asktoSaveVidKomerch()
            askPodVidKomerch = self.asktoSavePodVidKomerch()
            if askKomerchpoint == False or askVidKomerch == False or askPodVidKomerch == False:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                               "Комерційні пропозиції",
                                               "Є незбережені дані комерційних пропозицій. "
                                               "\nВи бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecord(False)
                else:
                    pass
            else:
                pass
        else:
            pass

    def asktoSaveVidKomerch(self) -> set:
        """Проверка наличия изменений в таблице Статического зондирования"""
        # Считывание данных и обновление списка замеров согласно значений экранной формы
        self.recAllNewVidKomerch = []
        for i in range(0, self.recCountVidKomerch):
            rec = []
            for j in range(0, 7):
                el = self.modelVidKomerch.item(i, j).data(QtCore.Qt.EditRole)  # Определение элемента текущей записи
                if j == 0 or j == 1:
                    el = int(el)
                elif j == 6:
                    el = float(el)
                else:
                    if el == 'None':
                        el = None
                rec.append(el)  # Формирование текущей записи из элементов
            self.recAllNewVidKomerch.append(rec)  # Формирование обновленного списка (записей-кортежей)
        if self.recAllNewVidKomerch == self.recAllOldVidKomerch:
            ask = True
        else:
            ask = False
        return ask

    def asktoSavePodVidKomerch(self) -> set:
        """Проверка наличия изменений в таблице Статического зондирования"""
        # Считывание данных и обновление списка замеров согласно значений экранной формы
        self.recAllNewPodVidKomerch = []
        for i in range(0, self.recCountPodVidKomerch):
            rec = []
            for j in range(0, 5):
                el = self.modelPodVidKomerch.item(i, j).data(QtCore.Qt.EditRole)  # Определение элемента текущей записи
                if j == 0 or j == 1:
                    el = int(el)
                elif j == 4:
                    el = float(el)
                else:
                    if el == 'None':
                        el = None
                rec.append(el)  # Формирование текущей записи из элементов
            self.recAllNewPodVidKomerch.append(rec)  # Формирование обновленного списка (записей-кортежей)
        if self.recAllNewPodVidKomerch == self.recAllOldPodVidKomerch:
            ask = True
        else:
            ask = False
        return ask

    def saveAll(self) -> set:
        """Сохраняет изменения по нажатию кнопки Сохранить на панели инструментов"""
        self.saveRecord(False)

    def saveRecord(self, ask) -> set:
        """Сохраняет изменения в записи и формирует новый курсор"""
        if ask == False:
            val3 = self.recOld[4]  # ID коммерческого предложения
            val4 = self.lineEdit.text()  # Номер коммерческого предложения
            val5 = self.dateEdit.date().toPyDate()  # Дата коммерческого предложения
            val6 = self.doubleSpinBox.value()  # Общая стоимость
            val7 = self.comboBox.currentText()  # Наименование валюты
            val8 = self.spinBox.value()  # Продолжительность работ
            val9 = self.comboBox_2.currentText()  # Единицы измерения продолжительности работ
            val10 = self.textEdit.toHtml()  # Текст коммерческого предложения
            val11 = self.textEdit_2.toHtml()  # Текст сметы
            with UseDatebase(dbconfig) as curs:
                curs.execute("""UPDATE komerch
                                SET numkomerch = %(v4)s, 
                                    datakomerch = %(v5)s, 
                                    pricekomerch = %(v6)s, 
                                    ed_price = %(v7)s, 
                                    srok = %(v8)s, 
                                    ed_srok = %(v9)s, 
                                    textkomerch = %(v10)s, 
                                    smetakomerch = %(v11)s 
                                WHERE id = %(v3)s;""",
                             {'v4': val4, 'v5': val5, 'v6': val6,
                              'v7': val7, 'v8': val8, 'v9': val9, 'v10': val10,
                              'v11': val11, 'v3': val3})
            self.requerySelect()
            self.saveRecordVidKomerch()
            self.saveRecordPodVidKomerch()
            self.refreshRecord()
        else:
            pass

    def saveRecordVidKomerch(self) -> set:
        """Сохранение записей таблицы видов работ"""
        ask = self.asktoSaveVidKomerch()
        if ask == False:
            for i in range(0, self.recCountVidKomerch):
                recVidKomerch = self.recAllNewVidKomerch[i]
                val0 = int(recVidKomerch[0])
                val1 = int(recVidKomerch[1])
                val2 = recVidKomerch[2]
                val3 = recVidKomerch[3]
                val4 = recVidKomerch[4]
                val5 = recVidKomerch[5]
                val6 = dc.Decimal(recVidKomerch[6])
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE vidkomerch  
                                    SET razdelk = %(v2)s, 
                                        uslov = %(v3)s, 
                                        vidrab = %(v4)s, 
                                        edizmer = %(v5)s, 
                                        obem = %(v6)s 
                                    WHERE id = %(v0)s;""",
                                 {'v2': val2, 'v3': val3, 'v4': val4, 'v5': val5, 'v6': val6, 'v0': val0})
        else:
            pass

    def saveRecordPodVidKomerch(self) -> set:
        """Сохранение записей таблицы подвидов работ"""
        ask = self.asktoSavePodVidKomerch()
        if ask == False:
            for i in range(0, self.recCountPodVidKomerch):
                recPodVidKomerch = self.recAllNewPodVidKomerch[i]
                val0 = int(recPodVidKomerch[0])
                val1 = int(recPodVidKomerch[1])
                val2 = recPodVidKomerch[2]
                val3 = recPodVidKomerch[3]
                val4 = recPodVidKomerch[4]
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE podvidkomerch  
                                    SET podvidrab = %(v2)s, 
                                        edizmer = %(v3)s, 
                                        obem = %(v4)s 
                                    WHERE id = %(v0)s;""",
                                 {'v2': val2, 'v3': val3, 'v4': val4, 'v0': val0})
        else:
            pass


class DogovorWindow(QtWidgets.QTabWidget, egclasswin.Ui_Dogovor_win):
    def __init__(self) -> set:
        """Инициализация окна Договора"""
        super().__init__()
        self.setupUi(self)
        self.recAllOldVidDogovor = []
        self.recCountVidDogovor = 0
        self.comboBox.addItems(["UAN", "USD", "EUR", "RUB"])
        self.comboBox_2.addItems(["Календарні дні", "Робочі дні", "Тижні", "Місяці"])
        self.modelVidDogovor = QtGui.QStandardItemModel(30, 6)  # Создание модели видов работ
        self.modelPodVidDogovor = QtGui.QStandardItemModel(30, 4)  # Создание модели подвидов работ
        self.kpId = 0
        self.vkpId = 0
        self.requerySelect()
        if not self.recAll:
                self.addRecord()
        else:
            self.recCount = len(self.recAll)
            self.recNum = 0
            self.recOld = self.recAll[self.recNum]
            self.kpId = self.recOld[4]  # ID Договора
        self.modelVidDogovor = QtGui.QStandardItemModel(30, 6)  # Создание модели видов работ
        self.modelVidDogovor.setHorizontalHeaderLabels(['id',
                                                        'id_dogovor',
                                                        'Розділ',
                                                        'Умови робіт',
                                                        'Вид робіт',
                                                        'Одиниця виміру',
                                                        'Обсяг'])
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT *
                                FROM public.viddogovor 
                                WHERE viddogovor.id_dogovor = %(v2)s
                                ORDER BY viddogovor.id ASC""", {'v2': self.kpId})
            self.recAllVidDogovor = curs.fetchall()
            self.modelVidDogovor.setRowCount(len(self.recAllVidDogovor))
        self.tableVidDogovor.setModel(self.modelVidDogovor)  # Создание представления
        self.tableVidDogovor.setGeometry(QtCore.QRect(10, 160, 870, 170))
        self.tableVidDogovor.setColumnWidth(0, 10)
        self.tableVidDogovor.setColumnWidth(1, 10)
        self.tableVidDogovor.setColumnWidth(2, 147)
        self.tableVidDogovor.setColumnWidth(3, 100)
        self.tableVidDogovor.setColumnWidth(4, 409)
        self.tableVidDogovor.setColumnWidth(5, 110)
        self.tableVidDogovor.setColumnWidth(6, 69)
        self.tableVidDogovor.setColumnHidden(0, True)
        self.tableVidDogovor.setColumnHidden(1, True)
        if not self.recAllVidDogovor:
            pass
        else:
            self.recCountVidDogovor = len(self.recAllVidDogovor)
            self.recNumVidDogovor = 0
            self.recOldVidDogovor = self.recAllVidDogovor[self.recNumVidDogovor]
            self.vkpId = self.recOldVidDogovor[0]  # ID вида работ договора
        self.modelPodVidDogovor = QtGui.QStandardItemModel(30, 4)  # Создание модели подвидов работ
        self.modelPodVidDogovor.setHorizontalHeaderLabels(['id',
                                                           'id_viddogovor',
                                                           'Різновидність умов робіт',
                                                           'Одиниця виміру',
                                                           'Обсяг'])
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT *
                                FROM public.podviddogovor 
                                WHERE podviddogovor.id_viddogovor = %(v2)s
                                ORDER BY podviddogovor.id ASC""", {'v2': self.vkpId})
            self.recAllPodvidDogovor = curs.fetchall()
            self.modelPodVidDogovor.setRowCount(len(self.recAllPodvidDogovor))
        self.tablePodvidDogovor.setModel(self.modelPodVidDogovor)  # Создание представления
        self.tablePodvidDogovor.setGeometry(QtCore.QRect(10, 370, 870, 170))
        self.tablePodvidDogovor.setColumnWidth(0, 10)
        self.tablePodvidDogovor.setColumnWidth(1, 10)
        self.tablePodvidDogovor.setColumnWidth(2, 656)
        self.tablePodvidDogovor.setColumnWidth(3, 110)
        self.tablePodvidDogovor.setColumnWidth(4, 70)
        self.tablePodvidDogovor.setColumnHidden(0, True)
        self.tablePodvidDogovor.setColumnHidden(1, True)
        # Назначение делегатов
        self.DelegateGroupRab = egdelegat.ComboBoxDelegateGroupRab()
        self.DelegateUslovRab = egdelegat.ComboBoxDelegateUslovRab()
        self.DelegateObemRab = egdelegat.DoubleSpinBoxDelegate10()
        self.DelegateObemRab2 = egdelegat.DoubleSpinBoxDelegate10()
        self.tableVidDogovor.setItemDelegateForColumn(2, self.DelegateGroupRab)
        self.tableVidDogovor.setItemDelegateForColumn(3, self.DelegateUslovRab)
        self.tableVidDogovor.setItemDelegateForColumn(6, self.DelegateObemRab)
        self.tablePodvidDogovor.setItemDelegateForColumn(4, self.DelegateObemRab2)
        self.refreshToolbar()
        self.refreshRecord()
        # Назначение обработчиков сигналов
        self.currentChanged.connect(self.asktoSave)
        self.tableVidDogovor.clicked.connect(self.saveRecordPodVidDogovor)
        self.tableVidDogovor.activated.connect(self.indexTablePodVidDogovor)
        self.tableVidDogovor.clicked.connect(self.indexTablePodVidDogovor)
        self.tableVidDogovor.clicked.connect(self.nameRazdelRab)
        self.tableVidDogovor.activated.connect(self.nameRazdelRab)
        self.toolButton_1.clicked.connect(self.addVidDogovor)
        self.toolButton_2.clicked.connect(self.delVidDogovor)
        self.toolButton_3.clicked.connect(self.addPodVidDogovor)
        self.toolButton_4.clicked.connect(self.delPodVidDogovor)

    def requerySelect(self) -> set:
        """Обновление главного запроса для экранной формы"""
        global idActivObekt
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT obekt.id, 
                                obekt.archnum,
                                obekt.name, 
                                obekt.stadia,
                                dogovor.id, 
                                dogovor.numdogovor, 
                                dogovor.datadogovor, 
                                dogovor.pricedogovor, 
                                dogovor.ed_price, 
                                dogovor.srok, 
                                dogovor.ed_srok, 
                                dogovor.textdogovor, 
                                dogovor.smetadogovor
                            FROM public.obekt, public.dogovor
                            WHERE obekt.id = dogovor.id_obekt 
                            AND obekt.id = %(v0)s
                            ORDER BY dogovor.id ASC""", {'v0': idActivObekt})
            self.recAll = curs.fetchall()
            return self.recAll

    def refreshRecord(self) -> set:
        """Обновляет экранную форму с отображаемой записью"""
        # Передача значений из списка в экранную форму
        if self.recAll == []:
            self.recOld = []
        else:
            self.recOld = self.recAll[self.recNum]
        if self.recOld:
            self.label_7.setText("Ідентіфікатор об'єкта - " + str(self.recOld[0]) + "\n" +
                                 "Архівний номер звіту - " + self.recOld[1] + "\n" +
                                 self.recOld[2] + "\n" +
                                 "Стадія проектування - " + self.recOld[
                                     3])  # ID объекта, архивный номер, название и стадия объекта
            self.obID = self.recOld[0]  # ID объекта
            self.archnum = self.recOld[1]  # Архивный номер объекта
            self.nameobekt = self.recOld[2]  # Наименование объекта
            self.stadia = self.recOld[3]  # Стадия проектирования
            self.kpId = self.recOld[4]  # ID договора
            self.lineEdit.setText(self.recOld[5])  # Номер договора
            self.dateEdit.setDate(self.recOld[6])  # Дата договора
            self.doubleSpinBox.setValue(self.recOld[7])  # Общая стоимость
            self.comboBox.setCurrentText(self.recOld[8])  # Наименование валюты
            self.spinBox.setValue(self.recOld[9])  # Продолжительность работ
            self.comboBox_2.setCurrentText(self.recOld[10])  # Единицы измерения продолжительности работ
            self.textEdit.setHtml(self.recOld[11])  # Текст договора
            self.textEdit_2.setHtml(self.recOld[12])  # Текст сметы
            # Считывание данных и обновление списка согласно значений экранной формы
            val0 = self.recOld[0]  # ID объекта
            val1 = self.recOld[1]  # Номер объекта
            val2 = self.recOld[2]  # Наименование объекта
            val3 = self.recOld[3]  # Стадия проектирования
            val4 = self.recOld[4]  # ID договора
            val5 = self.lineEdit.text()  # Номер договора
            val6 = self.dateEdit.date().toPyDate()  # Дата договора
            val7 = self.doubleSpinBox.value()  # Общая стоимость
            val8 = self.comboBox.currentText()  # Наименование валюты
            val9 = self.spinBox.value()  # Продолжительность работ
            val10 = self.comboBox_2.currentText()  # Единицы измерения продолжительности работ
            val11 = self.textEdit.toPlainText()  # Текст договора
            val12 = self.textEdit_2.toPlainText()  # Текст сметы
            self.recOld = [val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, val10, val11, val12]
        else:
            pass
        self.refreshTableVidDogovor()

    def refreshTableVidDogovor(self) -> set:
        """Обновление таблицы видов работ договора"""
        self.vkpId = None
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT *
                            FROM public.viddogovor 
                            WHERE viddogovor.id_dogovor = %(v2)s
                            ORDER BY viddogovor.id ASC""", {'v2': self.kpId})
            self.recAllVidDogovor = curs.fetchall()  # Полный исходный список объемов работ
        self.recCountVidDogovor = len(self.recAllVidDogovor)
        self.recAllOldVidDogovor = []
        if self.recCountVidDogovor > 0:
            self.modelVidDogovor.setRowCount(self.recCountVidDogovor)
            self.tableVidDogovor.setEnabled(True)
            self.toolButton_2.setEnabled(True)
            self.modelVidDogovor.removeRows(0, self.modelVidDogovor.rowCount())
            for i in range(0, self.recCountVidDogovor):  # Занесение данных в ячейки таблицы
                self.recOldVidDogovor = self.recAllVidDogovor[i][0:7]
                listrow = list(self.recOldVidDogovor)  # Список одной строки
                item0 = QtGui.QStandardItem(str(listrow[0]))
                self.vkpId = str(listrow[0])
                item1 = QtGui.QStandardItem(str(listrow[1]))
                item2 = QtGui.QStandardItem(str(listrow[2]))
                item3 = QtGui.QStandardItem(str(listrow[3]))
                item4 = QtGui.QStandardItem(str(listrow[4]))
                item5 = QtGui.QStandardItem(str(listrow[5]))
                item6 = QtGui.QStandardItem(str(listrow[6]))
                item2.setTextAlignment(QtCore.Qt.AlignCenter)
                item3.setTextAlignment(QtCore.Qt.AlignCenter)
                item4.setTextAlignment(QtCore.Qt.AlignCenter)
                item5.setTextAlignment(QtCore.Qt.AlignCenter)
                item6.setTextAlignment(QtCore.Qt.AlignCenter)
                self.modelVidDogovor.appendRow([item0, item1, item2, item3, item4, item5, item6])
                oldVidDogovorOne = []
                for j in range(0, 7):  # Занесение данных в ячейки таблицы
                    it = None
                    if j != 6:
                        it = listrow[j]
                    else:
                        if listrow[j] == None:
                            pass
                        else:
                            it = float(listrow[j])
                    oldVidDogovorOne.append(it)
                self.recAllOldVidDogovor.append(oldVidDogovorOne)  # Формирование исходного списка замеров
        else:
            self.tableVidDogovor.setEnabled(False)
            self.toolButton_2.setEnabled(False)
            self.modelVidDogovor.removeRows(0, self.modelVidDogovor.rowCount())
        self.recAllNewVidDogovor = self.recAllOldVidDogovor
        self.tableVidDogovor.resizeRowsToContents()
        self.refreshTablePodVidDogovor()

    def refreshTablePodVidDogovor(self) -> set:
        """Обновление таблицы детализации видов работ договора"""
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT *
                            FROM public.podviddogovor 
                            WHERE podviddogovor.id_viddogovor = %(v2)s
                            ORDER BY podviddogovor.id ASC""", {'v2': self.vkpId})
            self.recAllPodVidDogovor = curs.fetchall()  # Полный исходный список детализации объемов работ
        self.recCountPodVidDogovor = len(self.recAllPodVidDogovor)
        self.recAllOldPodVidDogovor = []
        if self.recCountPodVidDogovor > 0:
            self.modelPodVidDogovor.setRowCount(self.recCountPodVidDogovor)
            self.tablePodvidDogovor.setEnabled(True)
            self.toolButton_4.setEnabled(True)
            self.modelPodVidDogovor.removeRows(0, self.modelPodVidDogovor.rowCount())
            for i in range(0, self.recCountPodVidDogovor):  # Занесение данных в ячейки таблицы
                self.recOldPodVidDogovor = self.recAllPodVidDogovor[i][0:5]
                listrow = list(self.recOldPodVidDogovor)  # Список одной строки
                item0 = QtGui.QStandardItem(str(listrow[0]))
                item1 = QtGui.QStandardItem(str(listrow[1]))
                item2 = QtGui.QStandardItem(str(listrow[2]))
                item3 = QtGui.QStandardItem(str(listrow[3]))
                item4 = QtGui.QStandardItem(str(listrow[4]))
                item2.setTextAlignment(QtCore.Qt.AlignCenter)
                item3.setTextAlignment(QtCore.Qt.AlignCenter)
                item4.setTextAlignment(QtCore.Qt.AlignCenter)
                self.modelPodVidDogovor.appendRow([item0, item1, item2, item3, item4])
                oldPodVidDogovorOne = []
                for j in range(0, 5):  # Занесение данных в ячейки таблицы
                    it = None
                    if j != 4:
                        it = listrow[j]
                    else:
                        if listrow[j] == None:
                            pass
                        else:
                            it = float(listrow[j])
                    oldPodVidDogovorOne.append(it)
                self.recAllOldPodVidDogovor.append(oldPodVidDogovorOne)  # Формирование исходного списка замеров
        else:
            self.tablePodvidDogovor.setEnabled(False)
            self.toolButton_4.setEnabled(False)
            self.modelPodVidDogovor.removeRows(0, self.modelPodVidDogovor.rowCount())
        self.recAllNewPodVidDogovor = self.recAllOldPodVidDogovor
        self.tablePodvidDogovor.resizeRowsToContents()

    def refreshToolbar(self) -> set:
        """Обновляет панель инструментов"""
        if self.recNum == 0 and self.recCount > 1:
            form.action_8.setEnabled(False)  # Первая запись
            form.action_9.setEnabled(False)  # Предыдущая запись
            form.action_10.setEnabled(True)  # Следующая запись
            form.action_11.setEnabled(True)  # Последняя запись
        elif self.recNum in range(1, self.recCount - 1):
            form.action_8.setEnabled(True)  # Первая запись
            form.action_9.setEnabled(True)  # Последняя запись
            form.action_10.setEnabled(True)  # Следующая запись
            form.action_11.setEnabled(True)  # Последняя запись
        elif self.recNum == self.recCount - 1 and self.recCount > 1:
            form.action_8.setEnabled(True)  # Первая запись
            form.action_9.setEnabled(True)  # Предыдущая запись
            form.action_10.setEnabled(False)  # Следующая запись
            form.action_11.setEnabled(False)  # Последняя запись
        else:
            form.action_8.setEnabled(False)  # Первая запись
            form.action_9.setEnabled(False)  # Предыдущая запись
            form.action_10.setEnabled(False)  # Следующая запись
            form.action_11.setEnabled(False)  # Последняя запись
            form.action_6.setEnabled(False)  # Удалить запись

    def indexTablePodVidDogovor(self) -> set:
        """Выполняет подготовку к обнавлению таблицы подвида работ"""
        ind = self.tableVidDogovor.currentIndex()
        i = ind.row()  # Номер текущей строки таблицы вида работ
        if i < 0:
            el = 0
        else:
            el = self.modelVidDogovor.item(i, 0).data(QtCore.Qt.EditRole)  # Текущее значение ID вида работ
        self.vkpId = el
        self.refreshTablePodVidDogovor()

    def nameRazdelRab(self) -> set:
        """Возвращает раздел работ"""
        global namerazdel
        ind = self.tableVidDogovor.currentIndex()
        i = ind.row()  # Номер текущей строки таблицы вида работ
        if i < 0:
            namerazdel = ""
        else:
            namerazdel = self.modelVidDogovor.item(i, 2).data(QtCore.Qt.EditRole)
        return namerazdel

    def showEvent(self, e) -> set:
        """Выполняет действия при выводе окна на экран"""
        form.action_33.setEnabled(False)
        QtWidgets.QTabWidget.showEvent(self, e)

    def hideEvent(self, e) -> set:
        """Выполняет действия при скрытии окна"""
        form.action_33.setEnabled(True)
        form.dogovordwin = None
        if self.recAll != []:
            self.asktoSave()
        form.refreshMain()
        QtWidgets.QTabWidget.hideEvent(self, e)

    def nextRecord(self) -> set:
        """Становится на следующей записи"""
        self.recNum += 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()

    def priorRecord(self) -> set:
        """Становится на предыдущей записи"""
        self.recNum -= 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()

    def firstRecord(self) -> set:
        """Становится на первой записи"""
        self.recNum = 0
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()

    def lastRecord(self) -> set:
        """Становится на последней записи"""
        if self.recCount > 0:
            self.recNum = self.recCount - 1
            self.refreshToolbar()
            self.asktoSave()
            self.refreshRecord()

    def sortRecord(self) -> set:
        """Сортировка записей"""
        self.recAll.sort(key=itemgetter(5))
        form.action_13.setEnabled(False)  # Сортировать
        form.action_14.setEnabled(True)  # Снять сортировку
        self.refreshRecord()

    def desortRecord(self) -> set:
        """Отмена сортировки, что соответствует сортировке по ID"""
        self.recAll.sort(key=itemgetter(4))
        form.action_13.setEnabled(True)  # Сортировать
        form.action_14.setEnabled(False)  # Снять сортировку
        self.refreshRecord()

    def addRecord(self) -> set:
        """Добавляет новую запись"""
        global idActivObekt
        with UseDatebase(dbconfig) as curs:
            curs.execute("INSERT INTO dogovor (id_obekt) VALUES (%(v3)s);", {'v3': idActivObekt})
        self.requerySelect()
        self.recCount = len(self.recAll)
        if self.recCount == 1:
            self.recNum = 0
            self.recOld = self.recAll[self.recNum]
        self.refreshRecord()
        self.lastRecord()
        self.refreshToolbar()
        self.refreshRecord()

    def addVidDogovor(self) -> set:
        """Добавляет один вид работ договора"""
        with UseDatebase(dbconfig) as curs:
            curs.execute("SELECT count(id) FROM viddogovor WHERE viddogovor.id_dogovor = %(v2)s;",
                         {'v2': self.kpId})
            countVid = curs.fetchone()
            numVid = countVid[0]
        with UseDatebase(dbconfig) as curs:
            curs.execute("INSERT INTO viddogovor (id_dogovor) VALUES (%(v2)s);",
                         {'v2': self.kpId})
        self.saveRecordVidDogovor()
        self.refreshTableVidDogovor()
        self.refreshTablePodVidDogovor()
        self.tableVidDogovor.setFocus()
        sel = self.tableVidDogovor.selectionModel()
        ind = self.tableVidDogovor.model().index(numVid, 2)
        sel.setCurrentIndex(ind, QtCore.QItemSelectionModel.NoUpdate)

    def addPodVidDogovor(self) -> set:
        """Добавляет расширение вида работ договора"""
        with UseDatebase(dbconfig) as curs:
            curs.execute("SELECT count(id) FROM podviddogovor WHERE podviddogovor.id_viddogovor = %(v2)s;",
                         {'v2': self.vkpId})
            countPodVid = curs.fetchone()
            numPodVid = countPodVid[0]
        with UseDatebase(dbconfig) as curs:
            curs.execute("INSERT INTO podviddogovor (id_viddogovor) VALUES (%(v3)s);",
                         {'v3': self.vkpId})
        self.saveRecordPodVidDogovor()
        self.refreshTablePodVidDogovor()
        self.tablePodvidDogovor.setFocus()
        sel = self.tablePodvidDogovor.selectionModel()
        ind = self.tablePodvidDogovor.model().index(numPodVid, 2)
        sel.setCurrentIndex(ind, QtCore.QItemSelectionModel.NoUpdate)

    def delRecord(self) -> set:
        """Удаляет текущую запись"""
        val4 = self.recOld[4]
        val5 = self.recOld[5]
        if val4 is not None:
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                           "Договори",
                                           "Ви бажаєте видалити поточний запис з порядковим номером - " + str(
                                               self.recNum + 1) + " та номером Договору - " + str(val5) + "?")
            btnYes = QtWidgets.QPushButton("&Так")
            btnNo = QtWidgets.QPushButton("&Ні")
            btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
            self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
            self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
            self.formMassWin.setDefaultButton(btnYes)
            result = self.formMassWin.exec()
            if result == 0:
                try:
                    with UseDatebase(dbconfig) as curs:
                        curs.execute("DELETE FROM dogovor WHERE id = %(v3)s;", {'v3': val4})
                    self.requerySelect()
                    self.recCount = len(self.recAll)
                    if self.recCount > 0:
                        self.firstRecord()
                        self.refreshToolbar()
                        self.refreshRecord()
                    else:
                        self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information, "Договори",
                                                       "Видалено останній запис")
                        btnOK = QtWidgets.QPushButton("&OK")
                        btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                        self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                        result = self.formMassWin.exec()
                        if result == 0:
                            self.formMassWin.close()
                            self.parent().close()
                except:
                    self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "Договори",
                                                             "Видалення не можливо. "
                                                             "З поточним записом пов'язані записи у таблицях: "
                                                             "Обсяги робіт та Деталізація обсягів робіт."
                                                             "\nПотрібно виконати попереднє видалення усіх записів "
                                                             "в указаних таблицях.")
                    btnOK = QtWidgets.QPushButton("&OK")
                    btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                    self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                    result = self.formMassWin.exec()
                    if result == 0:
                        self.formMassWin.close()

    def delVidDogovor(self) -> set:
        """Удаляет вид работ договора"""
        try:
            i = self.tableVidDogovor.currentIndex().row()
            if i == None or i == -1:
                pass
            else:
                idVidDogovor = self.modelVidDogovor.item(i, 0).text()
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""DELETE FROM viddogovor 
                                    WHERE id = %(v0)s;""",
                                 {'v0': idVidDogovor})
            self.refreshTableVidDogovor()
        except:
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "Договори",
                                                     "Видалення не можливо. "
                                                     "З поточним записом пов'язані записи у таблиці: "
                                                     "Деталізація обсягів робіт."
                                                     "\nПотрібно виконати попереднє видалення усіх записів "
                                                     "в указаній таблиці.")
            btnOK = QtWidgets.QPushButton("&OK")
            btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
            result = self.formMassWin.exec()
            if result == 0:
                self.formMassWin.close()

    def delPodVidDogovor(self) -> set:
        """Удаляет подвид работ договора"""
        i = self.tablePodvidDogovor.currentIndex().row()
        if i == None or i == -1:
            pass
        else:
            idPodVidDogovor = self.modelPodVidDogovor.item(i, 0).text()
            with UseDatebase(dbconfig) as curs:
                curs.execute("""DELETE FROM podviddogovor 
                                WHERE id = %(v0)s;""",
                             {'v0': idPodVidDogovor})
        self.refreshTablePodVidDogovor()

    def asktoSave(self) -> set:
        """Проверяет наличие изменений в характеристиках договора"""
        if self.recOld:
            # Считывание данных и обновление списка согласно значений экранной формы
            val0 = self.recOld[0]  # ID объекта
            val1 = self.recOld[1]  # Номер объекта
            val2 = self.recOld[2]  # Наименование объекта
            val3 = self.recOld[3]  # Стадия проектирования
            val4 = self.recOld[4]  # ID договора
            val5 = self.lineEdit.text()  # Номер договора
            val6 = self.dateEdit.date().toPyDate()  # Дата договора
            val7 = self.doubleSpinBox.value()  # Общая стоимость
            val8 = self.comboBox.currentText()  # Наименование валюты
            val9 = self.spinBox.value()  # Продолжительность работ
            val10 = self.comboBox_2.currentText()  # Единицы измерения продолжительности работ
            val11 = self.textEdit.toPlainText()  # Текст договора
            val12 = self.textEdit_2.toPlainText()  # Текст сметы
            self.recNew = [val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, val10, val11, val12]
            askDogovorpoint = (self.recNew == self.recOld)
            askVidDogovor = self.asktoSaveVidDogovor()
            askPodVidDogovor = self.asktoSavePodVidDogovor()
            if askDogovorpoint == False or askVidDogovor == False or askPodVidDogovor == False:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                               "Договори",
                                               "Є незбережені дані договорів. "
                                               "\nВи бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecord(False)
                else:
                    pass
            else:
                pass
        else:
            pass

    def asktoSaveVidDogovor(self) -> set:
        """Проверка наличия изменений в таблице Статического зондирования"""
        # Считывание данных и обновление списка замеров согласно значений экранной формы
        self.recAllNewVidDogovor = []
        for i in range(0, self.recCountVidDogovor):
            rec = []
            for j in range(0, 7):
                el = self.modelVidDogovor.item(i, j).data(QtCore.Qt.EditRole)  # Определение элемента текущей записи
                if j == 0 or j == 1:
                    el = int(el)
                elif j == 6:
                    el = float(el)
                else:
                    if el == 'None':
                        el = None
                rec.append(el)  # Формирование текущей записи из элементов
            self.recAllNewVidDogovor.append(rec)  # Формирование обновленного списка (записей-кортежей)
        if self.recAllNewVidDogovor == self.recAllOldVidDogovor:
            ask = True
        else:
            ask = False
        return ask

    def asktoSavePodVidDogovor(self) -> set:
        """Проверка наличия изменений в таблице Статического зондирования"""
        # Считывание данных и обновление списка замеров согласно значений экранной формы
        self.recAllNewPodVidDogovor = []
        for i in range(0, self.recCountPodVidDogovor):
            rec = []
            for j in range(0, 5):
                el = self.modelPodVidDogovor.item(i, j).data(QtCore.Qt.EditRole)  # Определение элемента текущей записи
                if j == 0 or j == 1:
                    el = int(el)
                elif j == 4:
                    el = float(el)
                else:
                    if el == 'None':
                        el = None
                rec.append(el)  # Формирование текущей записи из элементов
            self.recAllNewPodVidDogovor.append(rec)  # Формирование обновленного списка (записей-кортежей)
        if self.recAllNewPodVidDogovor == self.recAllOldPodVidDogovor:
            ask = True
        else:
            ask = False
        return ask

    def saveAll(self) -> set:
        """Сохраняет изменения по нажатию кнопки Сохранить на панели инструментов"""
        self.saveRecord(False)

    def saveRecord(self, ask) -> set:
        """Сохраняет изменения в записи и формирует новый курсор"""
        if ask == False:
            val3 = self.recOld[4]  # ID договора
            val4 = self.lineEdit.text()  # Номер договора
            val5 = self.dateEdit.date().toPyDate()  # Дата договора
            val6 = self.doubleSpinBox.value()  # Общая стоимость
            val7 = self.comboBox.currentText()  # Наименование валюты
            val8 = self.spinBox.value()  # Продолжительность работ
            val9 = self.comboBox_2.currentText()  # Единицы измерения продолжительности работ
            val10 = self.textEdit.toHtml()  # Текст договора
            val11 = self.textEdit_2.toHtml()  # Текст сметы
            with UseDatebase(dbconfig) as curs:
                curs.execute("""UPDATE dogovor
                                SET numdogovor = %(v4)s, 
                                    datadogovor = %(v5)s, 
                                    pricedogovor = %(v6)s, 
                                    ed_price = %(v7)s, 
                                    srok = %(v8)s, 
                                    ed_srok = %(v9)s, 
                                    textdogovor = %(v10)s, 
                                    smetadogovor = %(v11)s 
                                WHERE id = %(v3)s;""",
                             {'v4': val4, 'v5': val5, 'v6': val6,
                              'v7': val7, 'v8': val8, 'v9': val9, 'v10': val10,
                              'v11': val11, 'v3': val3})
            self.requerySelect()
            self.saveRecordVidDogovor()
            self.saveRecordPodVidDogovor()
            self.refreshRecord()
        else:
            pass

    def saveRecordVidDogovor(self) -> set:
        """Сохранение записей таблицы видов работ"""
        ask = self.asktoSaveVidDogovor()
        if ask == False:
            for i in range(0, self.recCountVidDogovor):
                recVidDogovor = self.recAllNewVidDogovor[i]
                val0 = int(recVidDogovor[0])
                val1 = int(recVidDogovor[1])
                val2 = recVidDogovor[2]
                val3 = recVidDogovor[3]
                val4 = recVidDogovor[4]
                val5 = recVidDogovor[5]
                val6 = dc.Decimal(recVidDogovor[6])
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE viddogovor  
                                    SET razdeld = %(v2)s, 
                                        uslov = %(v3)s, 
                                        vidrab = %(v4)s, 
                                        edizmer = %(v5)s, 
                                        obem = %(v6)s 
                                    WHERE id = %(v0)s;""",
                                 {'v2': val2, 'v3': val3, 'v4': val4, 'v5': val5, 'v6': val6, 'v0': val0})
        else:
            pass

    def saveRecordPodVidDogovor(self) -> set:
        """Сохранение записей таблицы подвидов работ"""
        ask = self.asktoSavePodVidDogovor()
        if ask == False:
            for i in range(0, self.recCountPodVidDogovor):
                recPodVidDogovor = self.recAllNewPodVidDogovor[i]
                val0 = int(recPodVidDogovor[0])
                val1 = int(recPodVidDogovor[1])
                val2 = recPodVidDogovor[2]
                val3 = recPodVidDogovor[3]
                val4 = recPodVidDogovor[4]
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE podviddogovor  
                                    SET podvidrab = %(v2)s, 
                                        edizmer = %(v3)s, 
                                        obem = %(v4)s 
                                    WHERE id = %(v0)s;""",
                                 {'v2': val2, 'v3': val3, 'v4': val4, 'v0': val0})
        else:
            pass


class ObektWindow(QtWidgets.QWidget, egclasswin.Ui_Obekt_win):
    def __init__(self) -> set:
        """Инициализация окна характеристик объекта"""
        super().__init__()
        global idActivObekt
        self.recOld = []
        self.recCount = 0
        self.setupUi(self)
        self.comboBox.addItems(
            ["Техніко-економічне обґрунтування (ТЕО)", "Техніко-економічний розрахунок (ТЕР)", "Ескізний проект (ЕП)",
             "Проект (П)", "Робочий проект (РП)", "Робоча документація (Р)", "Позастадійно"])
        self.requeryContractor()
        self.requeryCustomer()
        with UseDatebase(dbconfig) as curs:
            curs.execute("SELECT * FROM obekt ORDER BY id")
            self.recAll = curs.fetchall()
        if not self.recAll:
            self.addRecord()
        else:
            self.recCount = len(self.recAll)
            self.recNum = 0
            self.recOld = self.recAll[self.recNum]
            # Поиск активированного объекта
            i = 0
            while i < len(self.recAll):
                if self.recAll[i][0] == idActivObekt:
                    self.recNum = i
                    break
                else:
                    i += 1
            if idActivObekt is None:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "Характеристика об'єкта",
                                               "Жодного активованого об'єкта немає. Необхідно активувати об'єкт з яким плануєте працювати")
                btnOK = QtWidgets.QPushButton("&OK")
                btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                result = self.formMassWin.exec()
                if result == 0:
                    self.formMassWin.close()
            self.refreshToolbar()
            self.refreshRecord()
        # Назначение обработчиков сигналов
        self.pushButton.clicked.connect(self.poiskOb)
        self.checkBox.stateChanged.connect(self.refreshActiv)
        self.checkBox.stateChanged.connect(self.refreshCombo)
        self.toolButton.clicked.connect(self.addContractor)
        self.toolButton_2.clicked.connect(self.addCustomer)

    def refreshCombo(self) -> set:
        """Обновление комбобокса в панели управления"""
        global idActivObekt
        i = 0
        if self.checkBox.checkState() == 2:
            idActivObekt = self.recOld[0]
            for i in range(0, form.combo.count()):
                if form.combo.itemData(i, role=QtCore.Qt.UserRole) == idActivObekt:
                    break
                else:
                    continue
            form.combo.setCurrentIndex(i)
        else:
            pass

    def refreshActiv(self) -> set:
        """Обновление иконки активации"""
        global idActivObekt
        if self.checkBox.checkState() == 2:
            self.label_13.setPixmap(QtGui.QPixmap("./icons/64/activ.png"))
        else:
            self.label_13.setPixmap(QtGui.QPixmap("./icons/64/deactiv.png"))

    def refreshRecord(self) -> set:
        """Обновляет экранную форму с отображаемой записью"""
        # Передача значений из списка в экранную форму
        self.recOld = self.recAll[self.recNum]
        if self.recOld is not None:
            self.label_12.setText("Ідентіфікатор об'єкта - " + str(self.recOld[0]))  # Идентификатор объекта
            self.lineEdit.setText(self.recOld[1])  # Архівний номер звіту
            self.lineEdit_2.setText(self.recOld[2])  # Головний інженер проекту
            self.lineEdit_3.setText(self.recOld[3])  # Відповідальний виконавець (автор звіту)
            #self.lineEdit_4.setText(self.recOld[4])  # Замовник
            self.comboBox_3.setCurrentIndex(self.comboBox_3.findData(self.recOld[14], QtCore.Qt.UserRole)) # Замовник
            self.comboBox_2.setCurrentIndex(self.comboBox_2.findData(self.recOld[13], QtCore.Qt.UserRole)) # Підрядник
            self.textEdit.setPlainText(self.recOld[6])  # Місце розташування об'єкта
            self.textEdit_2.setPlainText(self.recOld[7])  # Найменування об'єкта
            self.dateEdit.setDate(self.recOld[8])  # Дата початку робіт
            self.dateEdit_2.setDate(self.recOld[9])  # Дата завершення робіт
            if self.recOld[0] == idActivObekt:
                self.checkBox.setCheckState(QtCore.Qt.Checked)  # Об'єкт активований
            else:
                self.checkBox.setCheckState(QtCore.Qt.Unchecked)  # Об'єкт неактивований
            self.lineEdit_6.setText(self.recOld[11])  # Номер договору
            self.comboBox.setCurrentIndex(self.comboBox.findText(self.recOld[12]))  # Стадія проектування
            # Обновление списка согласно значений экранной формы
            val0 = self.recOld[0]
            val1 = self.lineEdit.text()
            val2 = self.lineEdit_2.text()
            val3 = self.lineEdit_3.text()
            val4 = self.comboBox_3.currentData(QtCore.Qt.DisplayRole)
            val5 = self.comboBox_2.currentData(QtCore.Qt.DisplayRole)
            val6 = self.textEdit.toPlainText()
            val7 = self.textEdit_2.toPlainText()
            val8 = self.dateEdit.date().toPyDate()
            val9 = self.dateEdit_2.date().toPyDate()
            val10 = self.checkBox.checkState()
            val11 = self.lineEdit_6.text()
            val12 = self.comboBox.currentText()
            val13 = self.comboBox_2.currentData(QtCore.Qt.UserRole)
            val14 = self.comboBox_3.currentData(QtCore.Qt.UserRole)
            self.recOld = [val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, val11, val12, val13, val14]
        else:
            pass
        self.refreshActiv()

    def requeryContractor(self) -> set:
        """Обновление списка Подрядчиков"""
        self.comboBox_2.clear()
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT firma.id, 
                                    firma.namemin
                            FROM firma""")
            recAll = curs.fetchall()
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox_2.addItem(recOne[1])
                self.comboBox_2.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)

    def requeryCustomer(self) -> set:
        """Обновление списка Замовника"""
        self.comboBox_3.clear()
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT customer.id, 
                                    customer.namemin
                            FROM customer
                            ORDER BY customer.namemin""")
            recAll = curs.fetchall()
            for i in range(0, len(recAll)):
                recOne = recAll[i]
                self.comboBox_3.addItem(recOne[1])
                self.comboBox_3.setItemData(i, recOne[0], role=QtCore.Qt.UserRole)

    def refreshToolbar(self) -> set:
        """Обновляет панель инструментов"""
        if self.recNum == 0 and self.recCount > 1:
            form.action_8.setEnabled(False)  # Первая запись
            form.action_9.setEnabled(False)  # Предыдущая запись
            form.action_10.setEnabled(True)  # Следующая запись
            form.action_11.setEnabled(True)  # Последняя запись
        elif self.recNum in range(1, self.recCount - 1):
            form.action_8.setEnabled(True)  # Первая запись
            form.action_9.setEnabled(True)  # Последняя запись
            form.action_10.setEnabled(True)  # Следующая запись
            form.action_11.setEnabled(True)  # Последняя запись
        elif self.recNum == self.recCount - 1 and self.recCount > 1:
            form.action_8.setEnabled(True)  # Первая запись
            form.action_9.setEnabled(True)  # Предыдущая запись
            form.action_10.setEnabled(False)  # Следующая запись
            form.action_11.setEnabled(False)  # Последняя запись
        else:
            form.action_8.setEnabled(False)  # Первая запись
            form.action_9.setEnabled(False)  # Предыдущая запись
            form.action_10.setEnabled(False)  # Следующая запись
            form.action_11.setEnabled(False)  # Последняя запись

    def nextRecord(self) -> set:
        """Становится на следующей записи"""
        self.recNum += 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()

    def priorRecord(self) -> set:
        """Становится на предыдущей записи"""
        self.recNum -= 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()

    def firstRecord(self) -> set:
        """Становится на первой записи"""
        self.recNum = 0
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()

    def lastRecord(self) -> set:
        """Становится на последней записи"""
        if self.recCount > 0:
            self.recNum = self.recCount - 1
            self.refreshToolbar()
            self.asktoSave()
            self.refreshRecord()

    def sortRecord(self) -> set:
        """Сортировка записей"""
        self.recAll.sort(key=itemgetter(1))
        form.action_13.setEnabled(False)  # Сортировать
        form.action_14.setEnabled(True)  # Снять сортировку
        self.refreshRecord()

    def desortRecord(self) -> set:
        """Отмена сортировки, что соответствует сортировке по ID"""
        self.recAll.sort(key=itemgetter(0))
        form.action_13.setEnabled(True)  # Сортировать
        form.action_14.setEnabled(False)  # Снять сортировку
        self.refreshRecord()

    def addRecord(self) -> set:
        """Добавляет новую запись"""
        self.asktoSave()
        with UseDatebase(dbconfig) as curs:
            curs.execute("INSERT INTO obekt DEFAULT VALUES")
        with UseDatebase(dbconfig) as curs:
            curs.execute("SELECT * FROM obekt ORDER BY id")
            self.recAll = curs.fetchall()
        self.recCount = len(self.recAll)
        if self.recCount == 1:
            self.recNum = 0
            self.recOld = self.recAll[self.recNum]
        self.lastRecord()
        self.refreshToolbar()
        self.refreshRecord()

    def addContractor(self) -> set:
        """Добавление нового подрядчика в список"""
        global id
        id = self.comboBox_2.currentData(QtCore.Qt.UserRole)
        form.openFirma()
        form.obektwin.aboutToActivate.connect(self.requeryContractor)
        FirmaWindow.setID(FirmaWindow(), id)

    def addCustomer(self) -> set:
        """Добавление нового заказчика в список"""
        global id
        id = self.comboBox_3.currentData(QtCore.Qt.UserRole)
        form.openCustomer()
        form.obektwin.aboutToActivate.connect(self.requeryContractor)
        CustomerWindow.setID(CustomerWindow(), id)

    def delRecord(self) -> set:
        """Удаляет текущую запись"""
        val0 = self.recOld[0]
        val10 = self.recOld[10]
        if val0 is not None:
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                           "Характеристика об'єкта",
                                           "Ви бажаєте видалити поточний запис з порядковим номером - " + str(
                                           self.recNum + 1) + ", ідентіфікатором об'єкта - " + str(val0) +
                                           " та номером Договору " + val10 + "?")
            btnYes = QtWidgets.QPushButton("&Так")
            btnNo = QtWidgets.QPushButton("&Ні")
            btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
            self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
            self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
            self.formMassWin.setDefaultButton(btnYes)
            result = self.formMassWin.exec()
            if result == 0:
                with UseDatebase(dbconfig) as curs:
                    curs.execute("DELETE FROM obekt WHERE id = %(v0)s;", {'v0': val0})
                with UseDatebase(dbconfig) as curs:
                    curs.execute("SELECT * FROM obekt ORDER BY id")
                    self.recAll = curs.fetchall()
                self.recCount = len(self.recAll)
                if self.recCount > 0:
                    self.firstRecord()
                    self.refreshToolbar()
                    self.refreshRecord()
                else:
                    self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information, "Характеристика об'єкта",
                                                   "Вилучено останній запис")
                    btnOK = QtWidgets.QPushButton("&OK")
                    btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                    self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                    result = self.formMassWin.exec()
                    if result == 0:
                        self.formMassWin.close()
                        self.parent().close()

    def setActivObekt(self) -> set:
        """Постановка на запись активного объекта"""
        global idActivObekt
        i = 0
        for i in range(0, self.recCount):
            if self.recAll[i][0] == idActivObekt:
                self.recNum = i
                break
            else:
                continue

    def poiskOb(self) -> set:
        """Поиск объекта"""
        global idActivObekt
        self.asktoSave()
        self.formPoiskObekt = PoiskObekt(self.recAll)
        result = self.formPoiskObekt.exec_()
        if result == QtWidgets.QDialog.Accepted:
            if self.formPoiskObekt.radIndex == 1 or self.formPoiskObekt.radIndex == 2:
                obektID = self.formPoiskObekt.retval
                i = 0
                while i < len(self.recAll):
                    if self.recAll[i][0] == obektID:
                        self.recNum = i
                        break
                    else:
                        i += 1
            else:
                self.setActivObekt()
                if idActivObekt is None:
                    self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "Характеристика об'єкта",
                                                   "Активованих об'єктів не виявлено. Необхідно активувати об'єкт, з яким плануєте працювати.")
                    btnOK = QtWidgets.QPushButton("&OK")
                    btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                    self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                    result = self.formMassWin.exec()
            self.refreshToolbar()
            self.refreshRecord()
        else:
            pass

    def showEvent(self, e) -> set:
        """Выполняет действие при визуализации окна"""
        form.action.setEnabled(False)
        QtWidgets.QWidget.showEvent(self, e)

    def hideEvent(self, e) -> set:
        """Выполняет действия при скрытии окна"""
        form.action.setEnabled(True)
        form.obektwin = None
        if self.recAll != []:
            self.asktoSave()
        form.refreshMain()
        QtWidgets.QWidget.hideEvent(self, e)

    def asktoSave(self) -> set:
        """Проверяет наличие изменений в файле"""
        if self.recOld != []:
            self.val0 = self.recOld[0]
            self.val1 = self.lineEdit.text()
            self.val2 = self.lineEdit_2.text()
            self.val3 = self.lineEdit_3.text()
            self.val4 = self.comboBox_3.currentData(QtCore.Qt.DisplayRole)
            self.val5 = self.comboBox_2.currentData(QtCore.Qt.DisplayRole)
            self.val6 = self.textEdit.toPlainText()
            self.val7 = self.textEdit_2.toPlainText()
            self.val8 = self.dateEdit.date().toPyDate()
            self.val9 = self.dateEdit_2.date().toPyDate()
#            self.val10 = self.checkBox.checkState()
            self.val11 = self.lineEdit_6.text()
            self.val12 = self.comboBox.currentText()
            self.val13 = self.comboBox_2.currentData(QtCore.Qt.UserRole)
            self.val14 = self.comboBox_3.currentData(QtCore.Qt.UserRole)
            self.recNew = [self.val0, self.val1, self.val2, self.val3, self.val4, self.val5, self.val6, self.val7,
                           self.val8, self.val9, self.val11, self.val12, self.val13, self.val14]
            if not self.recNew == self.recOld:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                               "Характеристика об'єкта",
                                               "Є незбережені дані характеристики об'єкта. "
                                               "\nВи бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecord(False)
                else:
                    pass
            else:
                pass
        else:
            pass

    def saveAll(self) -> set:
        """Сохраняет изменения по нажатию кнопки Сохранить на панели инструментов"""
        self.saveRecord(False)

    def saveRecord(self, ask) -> set:
        """Сохраняет изменения в записи и формирует новый курсор"""
        if ask == False:
            self.val0 = self.recOld[0]
            self.val1 = self.lineEdit.text()
            self.val2 = self.lineEdit_2.text()
            self.val3 = self.lineEdit_3.text()
            self.val4 = self.comboBox_3.currentData(QtCore.Qt.DisplayRole)
            self.val5 = self.comboBox_2.currentData(QtCore.Qt.DisplayRole)
            self.val6 = self.textEdit.toPlainText()
            self.val7 = self.textEdit_2.toPlainText()
            self.val8 = self.dateEdit.date().toPyDate()
            self.val9 = self.dateEdit_2.date().toPyDate()
#            self.val10 = self.checkBox.checkState()
            self.val11 = self.lineEdit_6.text()
            self.val12 = self.comboBox.currentText()
            self.val13 = self.comboBox_2.currentData(QtCore.Qt.UserRole)
            self.val14 = self.comboBox_3.currentData(QtCore.Qt.UserRole)
            with UseDatebase(dbconfig) as curs:
                curs.execute("""UPDATE obekt 
                                SET archnum = %(v1)s,
                                    gip = %(v2)s,
                                    author = %(v3)s,
                                    customer = %(v4)s,
                                    contractor = %(v5)s,
                                    mesto = %(v6)s,
                                    name = %(v7)s,
                                    date_start = %(v8)s,
                                    date_finish = %(v9)s,
                                    numdog = %(v11)s,
                                    stadia = %(v12)s,
                                    id_firma = %(v13)s,
                                    id_customer = %(v14)s
                                WHERE id = %(v0)s;""",
                             {'v1': self.val1, 'v2': self.val2, 'v3': self.val3, 'v4': self.val4,
                              'v5': self.val5, 'v6': self.val6, 'v7': self.val7, 'v8': self.val8,
                              'v9': self.val9, 'v11': self.val11, 'v12': self.val12, 'v13': self.val13,
                              'v14': self.val14, 'v0': self.val0})
            with UseDatebase(dbconfig) as curs:
                curs.execute("SELECT * FROM obekt ORDER BY id")
                self.recAll = curs.fetchall()
                self.refreshRecord()
                form.refreshCombo()     # Обновление списка объектов на панели
        else:
            pass


class FirmaWindow(QtWidgets.QTabWidget, egclasswin.Ui_Firma_win):
    def __init__(self) -> set:
        """Инициализация окна Предприятия"""
        super().__init__()
        self.setupUi(self)
        # Оформление сцены логотипов
        self.scene = QtWidgets.QGraphicsScene(0, 0, 64, 64, self.graphicsView)
        self.graphicsView.setScene(self.scene)
        self.requerySelect()
        self.modelFirma = QtGui.QStandardItemModel(30, 10)  # Создание модели свойств несвязных грунтов
        self.selmodelFirma = QtCore.QItemSelectionModel(self.modelFirma)  # Создание модели выделения
        self.modelFirma.setRowCount(len(self.recAll))
        self.modelFirma.setHorizontalHeaderLabels(['ID firma',
                                                   'Логотип',
                                                   'Повна назва підприємства',
                                                   'Скорочене назва підприємства',
                                                   'Адреса',
                                                   'Телефон, факс',
                                                   'Електронна адреса (email)',
                                                   'Розрахунковий рахунок',
                                                   'Код ЄДРПОУ',
                                                   'Посада керівника',
                                                   'ПІБ керівника'])
        self.tableFirma.setModel(self.modelFirma)  # Создание представления
        self.tableFirma.setGeometry(QtCore.QRect(0, 0, 792, 389))
        self.tableFirma.setColumnWidth(0, 10)
        self.tableFirma.setColumnWidth(1, 70)
        self.tableFirma.setColumnWidth(2, 400)
        self.tableFirma.setColumnWidth(3, 220)
        self.tableFirma.setColumnWidth(4, 280)
        self.tableFirma.setColumnWidth(5, 300)
        self.tableFirma.setColumnWidth(6, 200)
        self.tableFirma.setColumnWidth(7, 260)
        self.tableFirma.setColumnWidth(8, 100)
        self.tableFirma.setColumnWidth(9, 140)
        self.tableFirma.setColumnWidth(10, 140)
        self.tableFirma.setColumnHidden(0, True)
        if not self.recAll:
            self.addRecord()
        else:
            self.recCount = len(self.recAll)
            if self.setID(id) is None:
                self.recNum = 0
            else:
                self.recNum = self.setID(id)
            self.recOld = self.recAll[self.recNum]
            self.kpId = self.recOld[9]  # ID свойств несвязных грунтов
        # Назначение делегатов
#        self.DelegateLogoFirma = ImageDelegate()
#        self.tableFirma.setItemDelegateForColumn(9, self.DelegateLogoFirma)
        # Обновление формы и панели инструментов
        self.refreshToolbar()
        self.refreshRecord()
        # Назначение обработчиков сигналов
        self.currentChanged.connect(self.asktoSave)
        self.currentChanged.connect(self.setRow)
        self.toolButton.clicked.connect(self.setImage)
        self.toolButton_2.clicked.connect(self.removeImage)

    def requerySelect(self) -> set:
        """Обновление главного запроса для экранной формы"""
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT firma.id,
                                firma.logo,
                                firma.namemax,
                                firma.namemin,
                                firma.adres,
                                firma.fone,
                                firma.email,
                                firma.schet,
                                firma.kod,
                                firma.dirposada,
                                firma.dirfio
                            FROM firma
                            ORDER BY firma.id""")
            self.recAll = curs.fetchall()
        return self.recAll

    def refreshRecord(self) -> set:
        """Обновляет экранную форму с отображаемой записью.
        Передача значений из списка в экранную форму"""
        global idActivFirma # Глобальная переменная ID Предприятия
        if self.recAll == []:
            self.recOld = []
        else:
            self.recOld = self.recAll[self.recNum]
        if self.recOld:
            self.firmaID = self.recOld[0]  # ID предприятия
            pixmap = self.bytes_pixmap(self.recOld[1])  # Получение изображения из поля bytes
            item = QtWidgets.QGraphicsPixmapItem(pixmap)
            item.setPos(QtCore.QPointF(1.0, 1.0))
            self.scene.clear()
            self.scene.addItem(item)    # Логотип підприємства
            self.textEdit.setPlainText(self.recOld[2])  # Повна назва підприємства
            self.lineEdit.setText(self.recOld[3])  # Скорочена назва підприємства
            self.lineEdit_2.setText(self.recOld[4])  # Адреса
            self.lineEdit_3.setText(self.recOld[5])  # Телефон, факс
            self.lineEdit_4.setText(self.recOld[6])  # Електронна адреса (email)
            self.textEdit_2.setPlainText(self.recOld[7])  # Розрахунковий рахунок
            self.lineEdit_5.setText(self.recOld[8])  # Код ЄДРПОУ
            self.lineEdit_6.setText(self.recOld[9])  # Посада керівника
            self.lineEdit_7.setText(self.recOld[10])  # ПІБ керівника
            self.recOld = self.readRecOne()
        else:
            pass
        self.refreshTableFirma()

    def readRecOne(self) -> set:
        """Считывание данных и обновление списка текущей записи согласно значений экранной формы"""
        val0 = self.recOld[0]  # ID підприємства
        val1 = self.scene.items()  # Логотип підприємства
        val2 = self.textEdit.toPlainText()  # Повна назва підприємства
        val3 = self.lineEdit.text() # Скорочена назва підприємства
        val4 = self.lineEdit_2.text()   # Адреса
        val5 = self.lineEdit_3.text()  # Телефон, факс
        val6 = self.lineEdit_4.text()  # Електронна адреса (email)
        val7 = self.textEdit_2.toPlainText()  # Розрахунковий рахунок
        val8 = self.lineEdit_5.text()  # Розрахунковий рахунок
        val9 = self.lineEdit_6.text()  # Посада керівника
        val10 = self.lineEdit_7.text()  # ПІБ керівника
        recOne = [val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, val10]
        return recOne

    def refreshTableFirma(self) -> set:
        """Обновление таблицы предприятий"""
        self.recCountFirma = len(self.recAll)
        self.recAllOldFirma = []
        if self.recCountFirma > 0:
            self.modelFirma.setRowCount(self.recCountFirma)
            self.tableFirma.setEnabled(True)
            self.modelFirma.removeRows(0, self.modelFirma.rowCount())
            for i in range(0, self.recCountFirma):  # Занесение данных в ячейки таблицы
                self.recOldFirma = self.recAll[i][0:11]
                listrow = list(self.recOldFirma)  # Список одной строки
                item0 = QtGui.QStandardItem(str(listrow[0]))  # ID підприємства
                pixmap = QtGui.QPixmap()
                pixmap.loadFromData(listrow[1])
                item1 = QtGui.QStandardItem()
                item1.setData(pixmap, QtCore.Qt.DecorationRole)  # Логотип підприємства
                item1.setData(listrow[1], QtCore.Qt.EditRole)  # Запись логотипа в формате bytes
                item2 = QtGui.QStandardItem(str(listrow[2]))  # Повна назва підприємства
                item3 = QtGui.QStandardItem(str(listrow[3]))  # Cкорочена назва підприємства
                item4 = QtGui.QStandardItem(str(listrow[4]))  # Адреса
                item5 = QtGui.QStandardItem(str(listrow[5]))  # Телефон, факс
                item6 = QtGui.QStandardItem(str(listrow[6]))  # Електронна адреса (email)
                item7 = QtGui.QStandardItem(str(listrow[7]))  # Розрахунковий рахунок
                item8 = QtGui.QStandardItem(str(listrow[8]))  # Розрахунковий рахунок
                item9 = QtGui.QStandardItem(str(listrow[9]))  # Посада керівника
                item10 = QtGui.QStandardItem(str(listrow[10]))  # ПІБ керівника
                item0.setTextAlignment(QtCore.Qt.AlignCenter)
                item2.setTextAlignment(QtCore.Qt.AlignCenter)
                item3.setTextAlignment(QtCore.Qt.AlignCenter)
                item4.setTextAlignment(QtCore.Qt.AlignCenter)
                item5.setTextAlignment(QtCore.Qt.AlignCenter)
                item6.setTextAlignment(QtCore.Qt.AlignCenter)
                item7.setTextAlignment(QtCore.Qt.AlignCenter)
                item8.setTextAlignment(QtCore.Qt.AlignCenter)
                item9.setTextAlignment(QtCore.Qt.AlignCenter)
                item10.setTextAlignment(QtCore.Qt.AlignCenter)
                item1.setEnabled(False)
                self.modelFirma.appendRow([item0, item1, item2, item3, item4, item5, item6, item7, item8, item9, item10])
                oldFirmaOne = []
                for j in range(0, 11):  # Занесение данных в ячейки таблицы
                    it = listrow[j]
                    oldFirmaOne.append(it)
                self.recAllOldFirma.append(oldFirmaOne)  # Формирование исходного списка предприятий
        else:
            self.tableFirma.setEnabled(False)
            self.modelFirma.removeRows(0, self.modelFirma.rowCount())
        self.recAllNewFirma = self.recAllOldFirma
        self.tableFirma.resizeRowsToContents()

    def refreshToolbar(self) -> set:
        """Обновляет панель инструментов"""
        if self.recNum == 0 and self.recCount > 1:
            form.action_8.setEnabled(False)  # Первая запись
            form.action_9.setEnabled(False)  # Предыдущая запись
            form.action_10.setEnabled(True)  # Следующая запись
            form.action_11.setEnabled(True)  # Последняя запись
        elif self.recNum in range(1, self.recCount - 1):
            form.action_8.setEnabled(True)  # Первая запись
            form.action_9.setEnabled(True)  # Последняя запись
            form.action_10.setEnabled(True)  # Следующая запись
            form.action_11.setEnabled(True)  # Последняя запись
        elif self.recNum == self.recCount - 1 and self.recCount > 1:
            form.action_8.setEnabled(True)  # Первая запись
            form.action_9.setEnabled(True)  # Предыдущая запись
            form.action_10.setEnabled(False)  # Следующая запись
            form.action_11.setEnabled(False)  # Последняя запись
        else:
            form.action_8.setEnabled(False)  # Первая запись
            form.action_9.setEnabled(False)  # Предыдущая запись
            form.action_10.setEnabled(False)  # Следующая запись
            form.action_11.setEnabled(False)  # Последняя запись

    def pixmap_bytes(self) -> set:
        """Переформатирование изображения сцены в bytes-данные для таблицы Postgresql (pixmap to bytes)"""
        it = self.scene.items()
        if it != []:
            itm = it[0]
            pix = itm.pixmap()
            byt = QtCore.QByteArray()
            buff = QtCore.QBuffer(byt)
            buff.open(QtCore.QIODevice.WriteOnly)
            pix.save(buff, 'PNG')
#            ok = pix.save(buff, 'PNG')
#            assert ok
            valbytes = byt.data()
        else:
            valbytes = None
        return valbytes

    def bytes_pixmap(self, valbytea) -> set:
        """Переформатирование bytes to pixmap"""
        byt = QtCore.QByteArray()
        byt = valbytea
        valpix = QtGui.QPixmap()
        valpix.loadFromData(byt, "PNG")
#        ok = valpix.loadFromData(byt, "PNG")
#        assert ok
        return valpix

    def setRow(self) -> set:
        """Установка на текущую запись при переключении вкладок"""
        if self.currentIndex() == 0:
            mind = self.tableFirma.currentIndex()
            self.recNum = mind.row()
            self.refreshToolbar()
            self.refreshRecord()
        else:
            self.tableFirma.selectRow(self.recNum)

    def setID(self, id) -> set:
        """Возвращение индекса записи со значением ID = параметру id"""
        for i in range(0, len(self.recAll)):
            if id in self.recAll[i]:
                recind = i
                break
            else:
                recind = None
        return recind

    def setImage(self) -> set:
        """Вставка логотипа для отображения из выбранного файла"""
        winFile = QtWidgets.QFileDialog(parent=None,
                              caption="Вибір файлу звіту",
                              directory=QtCore.QDir.currentPath() + '/logo',
                              filter="Всі графічні файли (*.png *.bmp *.ico *.jpeg *.jpg *.tif)"
                                ";;PNG (*.png);;BMP (*.bmp);;ICO (*.ico);;JPEG (*.jpeg);;JPG (*.jpg);;TIF (*.tif)")
        winFile.setAcceptMode(0)
        winFile.setLabelText(1, "Ім'я файлу")
        winFile.setLabelText(3, "Гаразд")
        winFile.setLabelText(4, "Відміна")
        result = winFile.exec()
        if result == QtWidgets.QDialog.Accepted:
            files = winFile.selectedFiles()  #  Список графических файлов с путем
            item = QtWidgets.QGraphicsPixmapItem(QtGui.QPixmap(files[0]))
            item.setPos(QtCore.QPointF(1.0, 1.0))
            self.scene.clear()
            self.scene.addItem(item)
        else:
            pass

    def removeImage(self) -> set:
        """Удаление логотипа предприятия"""
        self.scene.clear()

    def create_item(img) -> set:
        """Создание ячейки-логотипа таблицы"""
        item = QtGui.QStandardItem()
        item.setData(img, QtCore.Qt.DecorationRole)
        return item

    def showEvent(self, e) -> set:
        """Выполняет действия при выводе окна на экран"""
        form.action_41.setEnabled(False)
        QtWidgets.QTabWidget.showEvent(self, e)

    def hideEvent(self, e) -> set:
        """Выполняет действия при скрытии окна"""
        form.action_41.setEnabled(True)
        form.firmawin = None
        if self.recAll != []:
            self.asktoSave()
        form.refreshMain()
        QtWidgets.QTabWidget.hideEvent(self, e)

    def nextRecord(self) -> set:
        """Становится на следующей записи"""
        self.recNum += 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableFirma.selectRow(self.recNum)

    def priorRecord(self) -> set:
        """Становится на предыдущей записи"""
        self.recNum -= 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableFirma.selectRow(self.recNum)

    def firstRecord(self) -> set:
        """Становится на первой записи"""
        self.recNum = 0
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableFirma.selectRow(self.recNum)

    def lastRecord(self) -> set:
        """Становится на последней записи"""
        if self.recCount > 0:
            self.recNum = self.recCount - 1
            self.refreshToolbar()
            self.asktoSave()
            self.refreshRecord()
            self.tableFirma.selectRow(self.recNum)

    def sortRecord(self) -> set:
        """Сортировка записей"""
        self.recAll.sort(key=itemgetter(0,5,7))
        form.action_13.setEnabled(False)  # Сортировать
        form.action_14.setEnabled(True)  # Снять сортировку
        self.refreshRecord()

    def desortRecord(self) -> set:
        """Отмена сортировки, что соответствует сортировке по ID"""
        self.recAll.sort(key=itemgetter(10))
        form.action_13.setEnabled(True)  # Сортировать
        form.action_14.setEnabled(False)  # Снять сортировку
        self.refreshRecord()

    def addRecord(self) -> set:
        """Добавляет новую запись"""
        with UseDatebase(dbconfig) as curs:
            curs.execute("INSERT INTO firma DEFAULT VALUES")
        self.requerySelect()
        self.recCount = len(self.recAll)
        if self.recCount == 1:
            self.recNum = 0
            self.recOld = self.recAll[self.recNum]
        self.refreshRecord()
        self.lastRecord()
        self.refreshToolbar()

    def delRecord(self) -> set:
        """Удаляет текущую запись"""
        val0 = self.recOld[0]   # ID предприятия
        val3 = self.recOld[3]   # Скорочена назва Замовника
        if val0 is not None:
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                           "Підрядники",
                                           "Ви бажаєте видалити поточний запис з порядковим номером - " + str(
                                           self.recNum + 1) + " та скороченою назвою Підрядника - " + val3 + "?")
            btnYes = QtWidgets.QPushButton("&Так")
            btnNo = QtWidgets.QPushButton("&Ні")
            btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
            self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
            self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
            self.formMassWin.setDefaultButton(btnYes)
            result = self.formMassWin.exec()
            if result == 0:
                try:
                    with UseDatebase(dbconfig) as curs:
                        curs.execute("DELETE FROM firma WHERE id = %(v0)s;", {'v0': val0})
                    self.requerySelect()
                    self.recCount = len(self.recAll)
                    if self.recCount > 0:
                        self.firstRecord()
                        self.refreshRecord()
                        self.refreshToolbar()
                    else:
                        self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information, "Підрядники",
                                                       "Вилучено останній запис")
                        btnOK = QtWidgets.QPushButton("&OK")
                        btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                        self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                        result = self.formMassWin.exec()
                        if result == 0:
                            self.formMassWin.close()
                            self.parent().close()
                except:
                    self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "Підрядники",
                                                            "Видалення не можливо. "
                                                            "З поточним записом пов'язані записи у таблиці: "
                                                            "Характеристика об'єкта"
                                                            "\nПотрібно виконати попереднє видалення усіх пов'язаних записів "
                                                            "в указаній таблиці")
                    btnOK = QtWidgets.QPushButton("&OK")
                    btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                    self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                    result = self.formMassWin.exec()
                    if result == 0:
                        self.formMassWin.close()

    def asktoSave(self) -> set:
        """Проверяет наличие изменений в текущей записи файла"""
        if self.recOld != []:
            self.recNew = self.readRecOne()
            askFirma = (self.recNew == self.recOld)
            askTableFirma = self.asktoSaveTableFirma()
            if askFirma == False:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question, "Підрядники",
                                               "Є незбережені дані. Ви бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecord(False)
                else:
                    pass
            elif askTableFirma == False:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question, "Підрядники",
                                               "Є незбережені дані. Ви бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecordTableFirma(False)
                else:
                    pass
            else:
                pass
        else:
            pass

    def asktoSaveTableFirma(self) -> set:
        """Проверка наличия изменений в таблице Предприятий"""
        # Считывание данных и обновление списка согласно значений экранной формы
        self.recAllNewFirma = []
        for i in range(0, self.recCountFirma):
            rec = []
            for j in range(0, 11):
                if j == 0:
                    el = int(self.modelFirma.item(i, j).data(QtCore.Qt.EditRole))  # ID предприятия
                elif j == 1:
                    el = self.modelFirma.item(i, j).data(QtCore.Qt.EditRole)  # Логотип предприятия в формате bytes
                else:
                    el = str(self.modelFirma.item(i, j).data(QtCore.Qt.EditRole))    # Текстовые реквизиты предприятия
                if el == 'None':
                    el = None
                rec.append(el)  # Формирование текущей записи из элементов
            self.recAllNewFirma.append(rec)  # Формирование обновленного списка (записей-кортежей)
        if self.recAllNewFirma == self.recAllOldFirma:
            ask = True
        else:
            ask = False
        return ask

    def saveAll(self) -> set:
        """Сохраняет изменения по нажатию кнопки Сохранить на панели инструментов"""
        if self.currentIndex() == 0:
            self.saveRecord(False)
        if self.currentIndex() == 1:
            self.setCurrentIndex(0)
            self.setCurrentIndex(1)
        else:
            pass

    def saveRecord(self, ask) -> set:
        """Сохраняет изменения в записи и формирует новый курсор"""
        if ask == False:
            val0 = self.recOld[0]  # ID підприємства
            val1 = self.pixmap_bytes() # Логотип
            val2 = self.textEdit.toPlainText()  # Повна назва підприємства
            val3 = self.lineEdit.text()  # Скорочена назва підприємства
            val4 = self.lineEdit_2.text()  # Адреса
            val5 = self.lineEdit_3.text()  # Телефон, факс
            val6 = self.lineEdit_4.text()  # Електронна адреса (email)
            val7 = self.textEdit_2.toPlainText()  # Розрахунковий рахунок
            val8 = self.lineEdit_5.text()  # ЄДРПОУ
            val9 = self.lineEdit_6.text()  # Посада керівника
            val10 = self.lineEdit_7.text()  # ПІБ керівника
            with UseDatebase(dbconfig) as curs:
                curs.execute("""UPDATE firma
                                SET logo = %(v1)s,
                                    namemax = %(v2)s,
                                    namemin = %(v3)s,
                                    adres = %(v4)s,
                                    fone = %(v5)s,
                                    email = %(v6)s,
                                    schet = %(v7)s,
                                    kod = %(v8)s,
                                    dirposada = %(v9)s,
                                    dirfio = %(v10)s
                                WHERE id = %(v0)s;""",
                             {'v1': val1, 'v2': val2, 'v3': val3, 'v4': val4, 'v5': val5, 'v6': val6, 'v7': val7,
                              'v8': val8, 'v9': val9, 'v10': val10, 'v0': val0})
            self.requerySelect()
            self.refreshRecord()
            self.saveRecordTableFirma(False)
        else:
            pass

    def saveRecordTableFirma(self, ask) -> set:
        """Сохранение записей таблицы предприятий"""

        if ask == False:
            for i in range(0, self.recCountFirma):
                recTabFirma = self.recAllNewFirma[i]
                val0 = recTabFirma[0]
                val1 = recTabFirma[1]
                val2 = recTabFirma[2]
                val3 = recTabFirma[3]
                val4 = recTabFirma[4]
                val5 = recTabFirma[5]
                val6 = recTabFirma[6]
                val7 = recTabFirma[7]
                val8 = recTabFirma[8]
                val9 = recTabFirma[9]
                val10 = recTabFirma[10]
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE firma
                                    SET logo = %(v1)s,
                                        namemax = %(v2)s,
                                        namemin = %(v3)s,
                                        adres = %(v4)s,
                                        fone = %(v5)s,
                                        email = %(v6)s,
                                        schet = %(v7)s,
                                        kod = %(v8)s,
                                        dirposada = %(v9)s,
                                        dirfio = %(v10)s 
                                WHERE id = %(v0)s;""",
                             {'v1': val1, 'v2': val2, 'v3': val3, 'v4': val4, 'v5': val5, 'v6': val6, 'v7': val7,
                              'v8': val8, 'v9': val9, 'v10': val10, 'v0': val0})
            self.requerySelect()
            self.refreshRecord()
        else:
            pass


class CustomerWindow(QtWidgets.QTabWidget, egclasswin.Ui_Customer_win):
    def __init__(self) -> set:
        """Инициализация окна Предприятия"""
        super().__init__()
        self.setupUi(self)
        # Оформление сцены логотипов
        self.scene = QtWidgets.QGraphicsScene(0, 0, 64, 64, self.graphicsView)
        self.graphicsView.setScene(self.scene)
        self.requerySelect()
        self.modelCustomer = QtGui.QStandardItemModel(30, 11)  # Создание модели свойств несвязных грунтов
        self.selmodelCustomer = QtCore.QItemSelectionModel(self.modelCustomer)  # Создание модели выделения
        self.modelCustomer.setRowCount(len(self.recAll))
        self.modelCustomer.setHorizontalHeaderLabels(['ID customer',
                                                      'Логотип',
                                                      'Повна назва підприємства',
                                                      'Скорочене назва підприємства',
                                                      'Адреса',
                                                      'Телефон, факс',
                                                      'Електронна адреса (email)',
                                                      'Розрахунковий рахунок',
                                                      'Код ЄДРПОУ',
                                                      'Посада керівника',
                                                      'ПІБ керівника'])
        self.tableCustomer.setModel(self.modelCustomer)  # Создание представления
        self.tableCustomer.setGeometry(QtCore.QRect(0, 0, 792, 389))
        self.tableCustomer.setColumnWidth(0, 10)
        self.tableCustomer.setColumnWidth(1, 70)
        self.tableCustomer.setColumnWidth(2, 400)
        self.tableCustomer.setColumnWidth(3, 220)
        self.tableCustomer.setColumnWidth(4, 280)
        self.tableCustomer.setColumnWidth(5, 300)
        self.tableCustomer.setColumnWidth(6, 200)
        self.tableCustomer.setColumnWidth(7, 260)
        self.tableCustomer.setColumnWidth(8, 100)
        self.tableCustomer.setColumnWidth(9, 140)
        self.tableCustomer.setColumnWidth(10, 140)
        self.tableCustomer.setColumnHidden(0, True)
        if not self.recAll:
            self.addRecord()
        else:
            self.recCount = len(self.recAll)
            if self.setID(id) is None:
                self.recNum = 0
            else:
                self.recNum = self.setID(id)
            self.recOld = self.recAll[self.recNum]
            self.kpId = self.recOld[9]  # ID свойств несвязных грунтов
        # Назначение делегатов
#        self.DelegateLogoCustomer = ImageDelegate()
#        self.tableCustomer.setItemDelegateForColumn(9, self.DelegateLogoCustomer)
        # Обновление формы и панели инструментов
        self.refreshToolbar()
        self.refreshRecord()
        # Назначение обработчиков сигналов
        self.currentChanged.connect(self.asktoSave)
        self.currentChanged.connect(self.setRow)
        self.toolButton.clicked.connect(self.setImage)
        self.toolButton_2.clicked.connect(self.removeImage)

    def requerySelect(self) -> set:
        """Обновление главного запроса для экранной формы"""
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT customer.id,
                                customer.logo,
                                customer.namemax,
                                customer.namemin,
                                customer.adres,
                                customer.fone,
                                customer.email,
                                customer.schet,
                                customer.kod,
                                customer.dirposada,
                                customer.dirfio
                            FROM customer
                            ORDER BY customer.id""")
            self.recAll = curs.fetchall()
        return self.recAll

    def refreshRecord(self) -> set:
        """Обновляет экранную форму с отображаемой записью.
        Передача значений из списка в экранную форму"""
        global idActivCustomer # Глобальная переменная ID Предприятия
        if self.recAll == []:
            self.recOld = []
        else:
            self.recOld = self.recAll[self.recNum]
        if self.recOld:
            self.customerID = self.recOld[0]  # ID предприятия
            pixmap = self.bytes_pixmap(self.recOld[1])  # Получение изображения из поля bytes
            item = QtWidgets.QGraphicsPixmapItem(pixmap)
            item.setPos(QtCore.QPointF(1.0, 1.0))
            self.scene.clear()
            self.scene.addItem(item)  # Логотип підприємства
            self.textEdit.setPlainText(self.recOld[2])  # Повна назва підприємства
            self.lineEdit.setText(self.recOld[3])  # Скорочена назва підприємства
            self.lineEdit_2.setText(self.recOld[4])  # Адреса
            self.lineEdit_3.setText(self.recOld[5])  # Телефон, факс
            self.lineEdit_4.setText(self.recOld[6])  # Електронна адреса (email)
            self.textEdit_2.setPlainText(self.recOld[7])  # Розрахунковий рахунок
            self.lineEdit_5.setText(self.recOld[8])  # Код ЄДРПОУ
            self.lineEdit_6.setText(self.recOld[9])  # Посада керівника
            self.lineEdit_7.setText(self.recOld[10])  # ПІБ керівника
            self.recOld = self.readRecOne()
        else:
            pass
        self.refreshTableCustomer()

    def readRecOne(self) -> set:
        """Считывание данных и обновление списка текущей записи согласно значений экранной формы"""
        val0 = self.recOld[0]  # ID підприємства
        val1 = self.scene.items()  # Логотип підприємства
        val2 = self.textEdit.toPlainText()  # Повна назва підприємства
        val3 = self.lineEdit.text() # Скорочена назва підприємства
        val4 = self.lineEdit_2.text()   # Адреса
        val5 = self.lineEdit_3.text()  # Телефон, факс
        val6 = self.lineEdit_4.text()  # Електронна адреса (email)
        val7 = self.textEdit_2.toPlainText()  # Розрахунковий рахунок
        val8 = self.lineEdit_5.text()  # Код ЄДРПОУ
        val9 = self.lineEdit_6.text()  # Посада керівника
        val10 = self.lineEdit_7.text()  # ПІБ керівника
        recOne = [val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, val10]
        return recOne

    def refreshTableCustomer(self) -> set:
        """Обновление таблицы предприятий"""
        self.recCountCustomer = len(self.recAll)
        self.recAllOldCustomer = []
        if self.recCountCustomer > 0:
            self.modelCustomer.setRowCount(self.recCountCustomer)
            self.tableCustomer.setEnabled(True)
            self.modelCustomer.removeRows(0, self.modelCustomer.rowCount())
            for i in range(0, self.recCountCustomer):  # Занесение данных в ячейки таблицы
                self.recOldCustomer = self.recAll[i][0:11]
                listrow = list(self.recOldCustomer)  # Список одной строки
                item0 = QtGui.QStandardItem(str(listrow[0]))  # ID підприємства
                pixmap = QtGui.QPixmap()
                pixmap.loadFromData(listrow[1])
                item1 = QtGui.QStandardItem()
                item1.setData(pixmap, QtCore.Qt.DecorationRole)  # Логотип підприємства
                item1.setData(listrow[1], QtCore.Qt.EditRole)  # Запись логотипа в формате bytes
                item2 = QtGui.QStandardItem(str(listrow[2]))  # Повна назва підприємства
                item3 = QtGui.QStandardItem(str(listrow[3]))  # Cкорочена назва підприємства
                item4 = QtGui.QStandardItem(str(listrow[4]))  # Адреса
                item5 = QtGui.QStandardItem(str(listrow[5]))  # Телефон, факс
                item6 = QtGui.QStandardItem(str(listrow[6]))  # Електронна адреса (email)
                item7 = QtGui.QStandardItem(str(listrow[7]))  # Розрахунковий рахунок
                item8 = QtGui.QStandardItem(str(listrow[8]))  # Розрахунковий рахунок
                item9 = QtGui.QStandardItem(str(listrow[9]))  # Посада керівника
                item10 = QtGui.QStandardItem(str(listrow[10]))  # ПІБ керівника
                item0.setTextAlignment(QtCore.Qt.AlignCenter)
                item2.setTextAlignment(QtCore.Qt.AlignCenter)
                item3.setTextAlignment(QtCore.Qt.AlignCenter)
                item4.setTextAlignment(QtCore.Qt.AlignCenter)
                item5.setTextAlignment(QtCore.Qt.AlignCenter)
                item6.setTextAlignment(QtCore.Qt.AlignCenter)
                item7.setTextAlignment(QtCore.Qt.AlignCenter)
                item8.setTextAlignment(QtCore.Qt.AlignCenter)
                item9.setTextAlignment(QtCore.Qt.AlignCenter)
                item1.setEnabled(False)
                self.modelCustomer.appendRow([item0, item1, item2, item3, item4, item5, item6, item7, item8, item9, item10])
                oldCustomerOne = []
                for j in range(0, 11):  # Занесение данных в ячейки таблицы
                    it = listrow[j]
                    oldCustomerOne.append(it)
                self.recAllOldCustomer.append(oldCustomerOne)  # Формирование исходного списка предприятий
        else:
            self.tableCustomer.setEnabled(False)
            self.modelCustomer.removeRows(0, self.modelCustomer.rowCount())
        self.recAllNewCustomer = self.recAllOldCustomer
        self.tableCustomer.resizeRowsToContents()

    def refreshToolbar(self) -> set:
        """Обновляет панель инструментов"""
        if self.recNum == 0 and self.recCount > 1:
            form.action_8.setEnabled(False)  # Первая запись
            form.action_9.setEnabled(False)  # Предыдущая запись
            form.action_10.setEnabled(True)  # Следующая запись
            form.action_11.setEnabled(True)  # Последняя запись
        elif self.recNum in range(1, self.recCount - 1):
            form.action_8.setEnabled(True)  # Первая запись
            form.action_9.setEnabled(True)  # Последняя запись
            form.action_10.setEnabled(True)  # Следующая запись
            form.action_11.setEnabled(True)  # Последняя запись
        elif self.recNum == self.recCount - 1 and self.recCount > 1:
            form.action_8.setEnabled(True)  # Первая запись
            form.action_9.setEnabled(True)  # Предыдущая запись
            form.action_10.setEnabled(False)  # Следующая запись
            form.action_11.setEnabled(False)  # Последняя запись
        else:
            form.action_8.setEnabled(False)  # Первая запись
            form.action_9.setEnabled(False)  # Предыдущая запись
            form.action_10.setEnabled(False)  # Следующая запись
            form.action_11.setEnabled(False)  # Последняя запись

    def pixmap_bytes(self) -> set:
        """Переформатирование изображения сцены в bytes-данные для таблицы Postgresql (pixmap to bytes)"""
        it = self.scene.items()
        if it != []:
            itm = it[0]
            pix = itm.pixmap()
            byt = QtCore.QByteArray()
            buff = QtCore.QBuffer(byt)
            buff.open(QtCore.QIODevice.WriteOnly)
            pix.save(buff, 'PNG')
#            ok = pix.save(buff, 'PNG')
#            assert ok
            valbytes = byt.data()
        else:
            valbytes = None
        return valbytes

    def bytes_pixmap(self, valbytea) -> set:
        """Переформатирование bytes to pixmap"""
        byt = QtCore.QByteArray()
        byt = valbytea
        valpix = QtGui.QPixmap()
        valpix.loadFromData(byt, "PNG")
#        ok = valpix.loadFromData(byt, "PNG")
#        assert ok
        return valpix

    def setRow(self) -> set:
        if self.currentIndex() == 0:
            mind = self.tableCustomer.currentIndex()
            self.recNum = mind.row()
            self.refreshToolbar()
            self.refreshRecord()
        else:
            self.tableCustomer.selectRow(self.recNum)

    def setID(self, id) -> set:
        """Возвращение индекса записи со значением ID = параметру id"""
        for i in range(0, len(self.recAll)):
            if id in self.recAll[i]:
                recind = i
                break
            else:
                recind = None
        return recind

    def setImage(self) -> set:
        """Вставка логотипа для отображения из выбранного файла"""
        winFile = QtWidgets.QFileDialog(parent=None,
                              caption="Вибір файлу звіту",
                              directory=QtCore.QDir.currentPath() + '/logo',
                              filter="Всі графічні файли (*.png *.bmp *.ico *.jpeg *.jpg *.tif)"
                                ";;PNG (*.png);;BMP (*.bmp);;ICO (*.ico);;JPEG (*.jpeg);;JPG (*.jpg);;TIF (*.tif)")
        winFile.setAcceptMode(0)
        winFile.setLabelText(1, "Ім'я файлу")
        winFile.setLabelText(3, "Гаразд")
        winFile.setLabelText(4, "Відміна")
        result = winFile.exec()
        if result == QtWidgets.QDialog.Accepted:
            files = winFile.selectedFiles()  #  Список графических файлов с путем
            item = QtWidgets.QGraphicsPixmapItem(QtGui.QPixmap(files[0]))
            item.setPos(QtCore.QPointF(1.0, 1.0))
            self.scene.clear()
            self.scene.addItem(item)
        else:
            pass

    def removeImage(self) -> set:
        """Удаление логотипа предприятия"""
        self.scene.clear()

    def create_item(img) -> set:
        """Создание ячейки-логотипа таблицы"""
        item = QtGui.QStandardItem()
        item.setData(img, QtCore.Qt.DecorationRole)
        return item

    def showEvent(self, e) -> set:
        """Выполняет действия при выводе окна на экран"""
        form.action_42.setEnabled(False)
        QtWidgets.QTabWidget.showEvent(self, e)

    def hideEvent(self, e) -> set:
        """Выполняет действия при скрытии окна"""
        form.action_42.setEnabled(True)
        form.customerwin = None
        if self.recAll != []:
            self.asktoSave()
        form.refreshMain()
        QtWidgets.QTabWidget.hideEvent(self, e)

    def nextRecord(self) -> set:
        """Становится на следующей записи"""
        self.recNum += 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableCustomer.selectRow(self.recNum)

    def priorRecord(self) -> set:
        """Становится на предыдущей записи"""
        self.recNum -= 1
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableCustomer.selectRow(self.recNum)

    def firstRecord(self) -> set:
        """Становится на первой записи"""
        self.recNum = 0
        self.refreshToolbar()
        self.asktoSave()
        self.refreshRecord()
        self.tableCustomer.selectRow(self.recNum)

    def lastRecord(self) -> set:
        """Становится на последней записи"""
        if self.recCount > 0:
            self.recNum = self.recCount - 1
            self.refreshToolbar()
            self.asktoSave()
            self.refreshRecord()
            self.tableCustomer.selectRow(self.recNum)

    def sortRecord(self) -> set:
        """Сортировка записей"""
        self.recAll.sort(key=itemgetter(0,5,7))
        form.action_13.setEnabled(False)  # Сортировать
        form.action_14.setEnabled(True)  # Снять сортировку
        self.refreshRecord()

    def desortRecord(self) -> set:
        """Отмена сортировки, что соответствует сортировке по ID"""
        self.recAll.sort(key=itemgetter(10))
        form.action_13.setEnabled(True)  # Сортировать
        form.action_14.setEnabled(False)  # Снять сортировку
        self.refreshRecord()

    def addRecord(self) -> set:
        """Добавляет новую запись"""
        with UseDatebase(dbconfig) as curs:
            curs.execute("INSERT INTO customer DEFAULT VALUES")
        self.requerySelect()
        self.recCount = len(self.recAll)
        if self.recCount == 1:
            self.recNum = 0
            self.recOld = self.recAll[self.recNum]
        self.refreshRecord()
        self.lastRecord()
        self.refreshToolbar()

    def delRecord(self) -> set:
        """Удаляет текущую запись"""
        val0 = self.recOld[0]  # ID предприятия
        val3 = self.recOld[3]
        if val0 is not None:
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                           "Замовники",
                                           "Ви бажаєте видалити поточний запис з порядковим номером - " + str(
                                           self.recNum + 1) + " та скороченою назвою Замовника - " + val3 + "?")
            btnYes = QtWidgets.QPushButton("&Так")
            btnNo = QtWidgets.QPushButton("&Ні")
            btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
            self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
            self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
            self.formMassWin.setDefaultButton(btnYes)
            result = self.formMassWin.exec()
            if result == 0:
                try:
                    with UseDatebase(dbconfig) as curs:
                        curs.execute("DELETE FROM customer WHERE id = %(v0)s;", {'v0': val0})
                    self.requerySelect()
                    self.recCount = len(self.recAll)
                    if self.recCount > 0:
                        self.firstRecord()
                        self.refreshRecord()
                        self.refreshToolbar()
                    else:
                        self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information, "Замовники",
                                                       "Вилучено останній запис")
                        btnOK = QtWidgets.QPushButton("&OK")
                        btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                        self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                        result = self.formMassWin.exec()
                        if result == 0:
                            self.formMassWin.close()
                            self.parent().close()
                except:
                    self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "Замовники",
                                                            "Видалення не можливо. "
                                                            "З поточним записом пов'язані записи у таблиці: "
                                                            "Характеристика об'єкта"
                                                            "\nПотрібно виконати попереднє видалення усіх пов'язаних записів "
                                                            "в указаній таблиці")
                    btnOK = QtWidgets.QPushButton("&OK")
                    btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                    self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                    result = self.formMassWin.exec()
                    if result == 0:
                        self.formMassWin.close()

    def asktoSave(self) -> set:
        """Проверяет наличие изменений в текущей записи файла"""
        if self.recOld != []:
            self.recNew = self.readRecOne()
            askCustomer = (self.recNew == self.recOld)
            askTableCustomer = self.asktoSaveTableCustomer()
            if askCustomer == False:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question, "Замовники",
                                               "Є незбережені дані. Ви бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecord(False)
                else:
                    pass
            elif askTableCustomer == False:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question, "Замовники",
                                               "Є незбережені дані. Ви бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecordTableCustomer(False)
                else:
                    pass
            else:
                pass
        else:
            pass

    def asktoSaveTableCustomer(self) -> set:
        """Проверка наличия изменений в таблице Предприятий"""
        # Считывание данных и обновление списка согласно значений экранной формы
        self.recAllNewCustomer = []
        for i in range(0, self.recCountCustomer):
            rec = []
            for j in range(0, 11):
                if j == 0:
                    el = int(self.modelCustomer.item(i, j).data(QtCore.Qt.EditRole))  # ID предприятия
                elif j == 1:
#                    el = self.modelCustomer.item(i, j).data(QtCore.Qt.DecorationRole) # Логотип в формате pixmap
                    el = self.modelCustomer.item(i, j).data(QtCore.Qt.EditRole)  # Логотип предприятия в формате bytes
                else:
                    el = str(self.modelCustomer.item(i, j).data(QtCore.Qt.EditRole))    # Текстовые реквизиты предприятия
                if el == 'None':
                    el = None
                rec.append(el)  # Формирование текущей записи из элементов
            self.recAllNewCustomer.append(rec)  # Формирование обновленного списка (записей-кортежей)
        if self.recAllNewCustomer == self.recAllOldCustomer:
            ask = True
        else:
            ask = False
        return ask

    def saveAll(self) -> set:
        """Сохраняет изменения по нажатию кнопки Сохранить на панели инструментов"""
        if self.currentIndex() == 0:
            self.saveRecord(False)
        if self.currentIndex() == 1:
            self.setCurrentIndex(0)
            self.setCurrentIndex(1)
        else:
            pass

    def saveRecord(self, ask) -> set:
        """Сохраняет изменения в записи и формирует новый курсор"""
        if ask == False:
            val0 = self.recOld[0]  # ID підприємства
            val1 = self.pixmap_bytes()
            val2 = self.textEdit.toPlainText()  # Повна назва підприємства
            val3 = self.lineEdit.text()  # Скорочена назва підприємства
            val4 = self.lineEdit_2.text()  # Адреса
            val5 = self.lineEdit_3.text()  # Телефон, факс
            val6 = self.lineEdit_4.text()  # Електронна адреса (email)
            val7 = self.textEdit_2.toPlainText()  # Розрахунковий рахунок
            val8 = self.lineEdit_5.text()  # ЄДРПОУ
            val9 = self.lineEdit_6.text()  # Посада керівника
            val10 = self.lineEdit_7.text()  # ПІБ керівника
            with UseDatebase(dbconfig) as curs:
                curs.execute("""UPDATE customer
                                SET logo = %(v1)s,
                                    namemax = %(v2)s,
                                    namemin = %(v3)s,
                                    adres = %(v4)s,
                                    fone = %(v5)s,
                                    email = %(v6)s,
                                    schet = %(v7)s,
                                    kod = %(v8)s,
                                    dirposada = %(v9)s,
                                    dirfio = %(v10)s 
                                WHERE id = %(v0)s;""",
                             {'v1': val1, 'v2': val2, 'v3': val3, 'v4': val4, 'v5': val5, 'v6': val6, 'v7': val7,
                              'v8': val8, 'v9': val9, 'v10': val10, 'v0': val0})
            self.requerySelect()
            self.refreshRecord()
            self.saveRecordTableCustomer(False)
        else:
            pass

    def saveRecordTableCustomer(self, ask) -> set:
        """Сохранение записей таблицы предприятий"""

        if ask == False:
            for i in range(0, self.recCountCustomer):
                recTabCustomer = self.recAllNewCustomer[i]
                val0 = recTabCustomer[0]
                val1 = recTabCustomer[1]
                val2 = recTabCustomer[2]
                val3 = recTabCustomer[3]
                val4 = recTabCustomer[4]
                val5 = recTabCustomer[5]
                val6 = recTabCustomer[6]
                val7 = recTabCustomer[7]
                val8 = recTabCustomer[8]
                val9 = recTabCustomer[9]
                val10 = recTabCustomer[10]
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE customer
                                    SET logo = %(v1)s,
                                        namemax = %(v2)s,
                                        namemin = %(v3)s,
                                        adres = %(v4)s,
                                        fone = %(v5)s,
                                        email = %(v6)s,
                                        schet = %(v7)s,
                                        kod = %(v8)s,
                                        dirposada = %(v9)s,
                                        dirfio = %(v10)s
                                WHERE id = %(v0)s;""",
                             {'v1': val1, 'v2': val2, 'v3': val3, 'v4': val4, 'v5': val5, 'v6': val6, 'v7': val7,
                              'v8': val8, 'v9': val9, 'v10': val10, 'v0': val0})
            self.requerySelect()
            self.refreshRecord()
        else:
            pass


class CalcgeoWindow(QtWidgets.QToolBox, egclasswin.Ui_Calcgeo_win):
    def __init__(self) -> set:
        """Инициализация окна Геологического калькулятора"""
        super().__init__()
        self.setupUi(self)
        self.requeryObekt()
        self.requeryIgeFiz()
        self.requeryFiz()
        self.requeryIge()
        self.requerySrez()
        self.requeryIgecompres()
        self.requeryCompres()
        self.requeryTa()
        self.requeryFa()
        # Инициализация формы одиночных характеристик грунтов
        self.modelIGEFiz = QtGui.QStandardItemModel(30, 7)  # Создание модели ИГЭ + схема испытаний
        self.modelFiz = QtGui.QStandardItemModel(30, 5)  # Создание модели одиночных свойств
        self.selmodelIGEFiz = QtCore.QItemSelectionModel(self.modelIGEFiz)  # Создание модели выделения ИГЭ+схема
        self.selmodelFiz = QtCore.QItemSelectionModel(
            self.modelFiz)  # Создание модели выделения одиночных свойств
        self.modelIGEFiz.setHorizontalHeaderLabels(['id',
                                                      'id_harakter',
                                                      'id_obekt',
                                                      'Рахувати',
                                                      'ІГЕ',
                                                      'Ґрунт',
                                                      'Характеристика ґрунту'])
        self.tableIGEFiz.setModel(self.modelIGEFiz)  # Создание представления
        self.tableIGEFiz.setGeometry(QtCore.QRect(10, 30, 860, 400))
        self.tableIGEFiz.setColumnWidth(0, 10)
        self.tableIGEFiz.setColumnWidth(1, 10)
        self.tableIGEFiz.setColumnWidth(2, 10)
        self.tableIGEFiz.setColumnWidth(3, 70)
        self.tableIGEFiz.setColumnWidth(4, 50)
        self.tableIGEFiz.setColumnWidth(5, 85)
        self.tableIGEFiz.setColumnWidth(6, 620)
        self.tableIGEFiz.setColumnHidden(0, True)
        self.tableIGEFiz.setColumnHidden(1, True)
        self.tableIGEFiz.setColumnHidden(2, True)
        self.modelFiz.setRowCount(len(self.recFiz))
        self.modelFiz.setHorizontalHeaderLabels(['id',
                                                  'id_IGE',
                                                  'Рахувати',
                                                  'Лабораторний\nномер',
                                                  'Значення\nхарактеристики'])
        self.tableFiz.setModel(self.modelFiz)  # Создание представления
        self.tableFiz.setGeometry(QtCore.QRect(880, 30, 385, 510))
        self.tableFiz.setColumnWidth(0, 10)
        self.tableFiz.setColumnWidth(1, 10)
        self.tableFiz.setColumnWidth(2, 70)
        self.tableFiz.setColumnWidth(3, 120)
        self.tableFiz.setColumnWidth(4, 160)
        self.tableFiz.setColumnHidden(0, True)
        self.tableFiz.setColumnHidden(1, True)
        # Инициализация формы результатов срезных испытаний
        self.modelIGEShema = QtGui.QStandardItemModel(30, 7)  # Создание модели ИГЭ + схема испытаний
        self.modelSrez = QtGui.QStandardItemModel(30, 6)  # Создание модели результатов срезных испытаний
        self.selmodelIGEShema = QtCore.QItemSelectionModel(self.modelIGEShema)  # Создание модели выделения ИГЭ+схема
        self.selmodelSrez = QtCore.QItemSelectionModel(self.modelSrez)  # Создание модели выделения результатов среза
        self.modelIGEShema.setHorizontalHeaderLabels(['id',
                                                      'id_harakter',
                                                      'id_obekt',
                                                      'Рахувати',
                                                      'ІГЕ',
                                                      'Ґрунт',
                                                      'Схема випробувань'])
        self.tableIGE.setModel(self.modelIGEShema)  # Создание представления
        self.tableIGE.setGeometry(QtCore.QRect(10, 30, 860, 380))
        self.tableIGE.setColumnWidth(0, 10)
        self.tableIGE.setColumnWidth(1, 10)
        self.tableIGE.setColumnWidth(2, 10)
        self.tableIGE.setColumnWidth(3, 70)
        self.tableIGE.setColumnWidth(4, 50)
        self.tableIGE.setColumnWidth(5, 85)
        self.tableIGE.setColumnWidth(6, 620)
        self.tableIGE.setColumnHidden(0, True)
        self.tableIGE.setColumnHidden(1, True)
        self.tableIGE.setColumnHidden(2, True)
        self.modelSrez.setRowCount(len(self.recSrez))
        self.modelSrez.setHorizontalHeaderLabels(['id',
                                                  'id_IGE',
                                                  'Рахувати',
                                                  'Лабораторний\nномер',
                                                  'Тангенс кута\nвнутрішнього\nтертя\ntg(φ)',
                                                  'Питоме\nзчеплення\nc, МПа'])
        self.tableSrez.setModel(self.modelSrez)  # Создание представления
        self.tableSrez.setGeometry(QtCore.QRect(880, 30, 385, 510))
        self.tableSrez.setColumnWidth(0, 10)
        self.tableSrez.setColumnWidth(1, 10)
        self.tableSrez.setColumnWidth(2, 70)
        self.tableSrez.setColumnWidth(3, 100)
        self.tableSrez.setColumnWidth(4, 100)
        self.tableSrez.setColumnWidth(5, 80)
        self.tableSrez.setColumnHidden(0, True)
        self.tableSrez.setColumnHidden(1, True)

        # Инициализация формы результатов компрессионных испытаний
        self.modelIGECompres = QtGui.QStandardItemModel(30, 7)  # Создание модели ИГЭ компрессионных испытаний
        self.modelCompres = QtGui.QStandardItemModel(30, 6)  # Создание модели результатов компрессионных испытаний
        self.selmodelIGECompres = QtCore.QItemSelectionModel(self.modelIGECompres)  # Создание модели выделения ИГЭ
        self.selmodelCompres = QtCore.QItemSelectionModel(self.modelCompres)  # Создание модели выделения результатов компрессии
        self.modelIGECompres.setHorizontalHeaderLabels(['id',
                                                      'id_harakter',
                                                      'id_obekt',
                                                      'Рахувати',
                                                      'ІГЕ',
                                                      'Ґрунт',
                                                      'Схема випробувань'])
        self.tableIGEcompres.setModel(self.modelIGECompres)  # Создание представления ИГЭ компрессий
        self.tableIGEcompres.setGeometry(QtCore.QRect(10, 30, 780, 380))
        self.tableIGEcompres.setColumnWidth(0, 10)
        self.tableIGEcompres.setColumnWidth(1, 10)
        self.tableIGEcompres.setColumnWidth(2, 10)
        self.tableIGEcompres.setColumnWidth(3, 70)
        self.tableIGEcompres.setColumnWidth(4, 50)
        self.tableIGEcompres.setColumnWidth(5, 85)
        self.tableIGEcompres.setColumnWidth(6, 540)
        self.tableIGEcompres.setColumnHidden(0, True)
        self.tableIGEcompres.setColumnHidden(1, True)
        self.tableIGEcompres.setColumnHidden(2, True)
        self.modelCompres.setRowCount(len(self.recCompres))
        self.modelCompres.setHorizontalHeaderLabels(['id',
                                                    'id_IGE',
                                                    'Рахувати',
                                                    'Лабораторний\nномер',
                                                    'Нормальна\nнапруга\nσ, МПа',
                                                    'Відносний\nстиск\nε, д.о.',
                                                    'Коефіцієнт\nβ, д.о.'])
        self.tableCompres.setModel(self.modelCompres)  # Создание представления результатов компрессионных испытаний
        self.tableCompres.setGeometry(QtCore.QRect(800, 30, 465, 510))
        self.tableCompres.setColumnWidth(0, 10)
        self.tableCompres.setColumnWidth(1, 10)
        self.tableCompres.setColumnWidth(2, 70)
        self.tableCompres.setColumnWidth(3, 100)
        self.tableCompres.setColumnWidth(4, 100)
        self.tableCompres.setColumnWidth(5, 80)
        self.tableCompres.setColumnWidth(6, 80)
        self.tableCompres.setColumnHidden(0, True)
        self.tableCompres.setColumnHidden(1, True)

        # Инициализация формы характеристик грунта для проверки разделения или объединения ИГЭ
        self.modelIGE1 = QtGui.QStandardItemModel(0, 2)  # Создание модели характеристик ИГЭ1
        self.modelIGE2 = QtGui.QStandardItemModel(0, 2)  # Создание модели характеристик ИГЭ2
        self.selmodelIGE1 = QtCore.QItemSelectionModel(self.modelIGE1)  # Создание модели выделения ИГЭ1
        self.selmodelIGE2 = QtCore.QItemSelectionModel(self.modelIGE2)  # Создание модели выделения ИГЭ2
        self.modelIGE1.setHorizontalHeaderLabels(['Лабораторний\nномер',
                                                  'Значення\nхарактеристики ґрунта'])
        self.tableIGE1.setModel(self.modelIGE1)  # Создание представления ИГЭ1
        self.tableIGE1.setGeometry(QtCore.QRect(660, 55, 291, 517))
        self.tableIGE1.setColumnWidth(0, 100)
        self.tableIGE1.setColumnWidth(1, 155)
        self.modelIGE2.setHorizontalHeaderLabels(['Лабораторний\nномер',
                                                  'Значення\nхарактеристики ґрунта'])
        self.tableIGE2.setModel(self.modelIGE2)  # Создание представления ИГЭ2
        self.tableIGE2.setGeometry(QtCore.QRect(970, 55, 291, 517))
        self.tableIGE2.setColumnWidth(0, 100)
        self.tableIGE2.setColumnWidth(1, 155)

        # Назначение делегатов
        self.DelegateGrunt = egdelegat.ComboBoxDelegateGruntname()
        self.DelegateShemaFiz = egdelegat.ComboBoxDelegateShemaFiz()
        self.DelegateShemaSrez = egdelegat.ComboBoxDelegateShemaSrez()
        self.DelegateShemaCompres = egdelegat.ComboBoxDelegateShemaCompres()
        self.Delegate_64 = egdelegat.DoubleSpinBoxDelegate_64()
        self.Delegate_84 = egdelegat.DoubleSpinBoxDelegate_84()
        self.tableIGEFiz.setItemDelegateForColumn(5, self.DelegateGrunt)
        self.tableIGEFiz.setItemDelegateForColumn(6, self.DelegateShemaFiz)
        self.tableFiz.setItemDelegateForColumn(4, self.Delegate_84)
        self.tableIGE.setItemDelegateForColumn(5, self.DelegateGrunt)
        self.tableIGE.setItemDelegateForColumn(6, self.DelegateShemaSrez)
        self.tableSrez.setItemDelegateForColumn(4, self.Delegate_64)
        self.tableSrez.setItemDelegateForColumn(5, self.Delegate_64)
        self.tableIGEcompres.setItemDelegateForColumn(5, self.DelegateGrunt)
        self.tableIGEcompres.setItemDelegateForColumn(6, self.DelegateShemaCompres)
        self.tableCompres.setItemDelegateForColumn(4, self.Delegate_64)
        self.tableCompres.setItemDelegateForColumn(5, self.Delegate_64)
        self.tableCompres.setItemDelegateForColumn(6, self.Delegate_64)
        self.tableIGE1.setItemDelegateForColumn(1, self.Delegate_84)
        self.tableIGE2.setItemDelegateForColumn(1, self.Delegate_84)
        # Обновление формы и панели инструментов
        self.refreshToolbar()
        self.refreshRecord()
        # Назначение обработчиков сигналов
        self.radioButton.clicked.connect(self.refreshTableSrez)
        self.radioButton_2.clicked.connect(self.refreshTableSrez)
        self.radioButton_3.clicked.connect(self.refreshTableSrez)
        self.radioButton_4.clicked.connect(self.refreshTableSrez)
        self.radioButton_7.clicked.connect(self.refreshTableCompres)
        self.radioButton_8.clicked.connect(self.refreshTableCompres)
        self.checkBox.clicked.connect(self.refreshTableIgeCheck)
        self.checkBox_2.clicked.connect(self.refreshTableSrezCheck)
        self.checkBox_3.clicked.connect(self.refreshTableIgeFizCheck)
        self.checkBox_4.clicked.connect(self.refreshTableFizCheck)
        self.pushButton_4.clicked.connect(self.poiskOb)
        self.pushButton_5.clicked.connect(self.requeryRaschetFiz)
        self.pushButton_6.clicked.connect(form.delWin)
        self.pushButton.clicked.connect(self.poiskOb)
        self.pushButton_2.clicked.connect(self.requeryRaschet)
        self.pushButton_3.clicked.connect(form.delWin)
        self.pushButton_8.clicked.connect(self.poiskOb)
        self.pushButton_7.clicked.connect(self.requeryRaschetCompres)
        self.pushButton_9.clicked.connect(form.delWin)
        self.pushButton_11.clicked.connect(self.requeryRaschetIGE)
        self.pushButton_10.clicked.connect(form.delWin)
        self.toolButton.clicked.connect(self.addRecIge)
        self.toolButton_2.clicked.connect(self.delRecIge)
        self.toolButton_8.clicked.connect(self.addRecIgeFiz)
        self.toolButton_10.clicked.connect(self.delRecIgeFiz)
        self.toolButton_3.clicked.connect(self.addRecSrez)
        self.toolButton_4.clicked.connect(self.delRecSrez)
        self.toolButton_7.clicked.connect(self.addRecFiz)
        self.toolButton_11.clicked.connect(self.delRecSrez)
        self.toolButton_12.clicked.connect(self.addRecFizAll)
        self.toolButton_9.clicked.connect(self.delRecFizAll)
        self.toolButton_5.clicked.connect(self.addRecSrezAll)
        self.toolButton_6.clicked.connect(self.delRecSrezAll)
        self.toolButton_13.clicked.connect(self.addRecIgeCompres)
        self.toolButton_14.clicked.connect(self.delRecIgeCompres)
        self.toolButton_15.clicked.connect(self.addRecCompres)
        self.toolButton_17.clicked.connect(self.delRecCompres)
        self.toolButton_18.clicked.connect(self.addRecCompresAll)
        self.toolButton_16.clicked.connect(self.delRecCompresAll)
        self.toolButton_21.clicked.connect(self.addRecIGE1)
        self.toolButton_19.clicked.connect(self.delRecIGE1)
        self.toolButton_20.clicked.connect(self.addRecIGE1All)
        self.toolButton_22.clicked.connect(self.delRecIGE1All)
        self.toolButton_25.clicked.connect(self.addRecIGE2)
        self.toolButton_23.clicked.connect(self.delRecIGE2)
        self.toolButton_24.clicked.connect(self.addRecIGE2All)
        self.toolButton_26.clicked.connect(self.delRecIGE2All)
#        self.currentChanged().connect(self.asktoSave)
        self.currentChanged.connect(self.refreshRecord)
        self.tableIGEFiz.activated.connect(self.indexTableFiz)
        self.tableIGEFiz.clicked.connect(self.indexTableFiz)
        self.tableIGEFiz.verticalHeader().sectionClicked.connect(self.indexTableFiz)
        self.tableIGE.activated.connect(self.indexTableSrez)
        self.tableIGE.clicked.connect(self.indexTableSrez)
        self.tableIGE.verticalHeader().sectionClicked.connect(self.indexTableSrez)
        self.tableIGEcompres.activated.connect(self.indexTableCompres)
        self.tableIGEcompres.clicked.connect(self.indexTableCompres)
        self.tableIGEcompres.verticalHeader().sectionClicked.connect(self.indexTableCompres)

    def requeryObekt(self) -> set:
        """Обновление главного запроса для экранной формы"""
        global idActivObekt
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT obekt.archnum,
                                obekt.numdog,
                                obekt.name 
                            FROM obekt
                            WHERE obekt.id = %(v0)s""", {'v0': idActivObekt})
            self.recObekt = curs.fetchall()
            return self.recObekt

    def requeryIgeFiz(self) -> set:
        """Обновление запроса ИГЭ для экранной формы свойств грунтов представленных одной величиной"""
        global idActivObekt
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT calcigefiz.id,
                                calcigefiz.id_harakter,
                                calcigefiz.id_obekt,
                                calcigefiz.schet,
                                calcigefiz.ige,
                                calcigefiz.grunt,
                                harakter.name_har
                            FROM calcigefiz
                            LEFT JOIN harakter ON calcigefiz.id_harakter = harakter.id
                            WHERE calcigefiz.id_obekt = %(v0)s
                            ORDER BY calcigefiz.id""", {'v0': idActivObekt})
            self.recIgeFiz = curs.fetchall()
            if self.recIgeFiz == []:
                self.idIgeFiz = 0
            else:
                self.idIgeFiz = self.recIgeFiz[0][0]
            return self.recIgeFiz

    def requeryIge(self) -> set:
        """Обновление запроса ИГЭ для экранной формы результатов срезных испытаний"""
        global idActivObekt
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT calcige.id,
                                calcige.id_harakter,
                                calcige.id_obekt,
                                calcige.schet,
                                calcige.ige,
                                calcige.grunt,
                                harakter.shema
                            FROM calcige
                            LEFT JOIN harakter ON  calcige.id_harakter = harakter.id
                            WHERE calcige.id_obekt = %(v0)s
                            ORDER BY calcige.id""", {'v0': idActivObekt})
            self.recIge = curs.fetchall()
            if self.recIge == []:
                self.idIge = 0
            else:
                self.idIge = self.recIge[0][0]
            return self.recIge

    def requeryIgecompres(self) -> set:
        """Обновление запроса ИГЭ для экранной формы результатов компрессионных испытаний"""
        global idActivObekt
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT calcigecompres.id,
                                calcigecompres.id_harakter,
                                calcigecompres.id_obekt,
                                calcigecompres.schet,
                                calcigecompres.ige,
                                calcigecompres.grunt,
                                harakter.shema
                            FROM calcigecompres
                            LEFT JOIN harakter ON  calcigecompres.id_harakter = harakter.id
                            WHERE calcigecompres.id_obekt = %(v0)s
                            ORDER BY calcigecompres.id""", {'v0': idActivObekt})
            self.recIgecompres = curs.fetchall()
            if self.recIgecompres == []:
                self.idIgecompres = 0
            else:
                self.idIgecompres = self.recIgecompres[0][0]
            return self.recIgecompres

    def requeryFiz(self) -> set:
        """Формирование запроса единичного значения свойств грунтов"""
        if self.radioButton_5.isChecked() or self.radioButton_6.isChecked():
            with UseDatebase(dbconfig) as curs:
                curs.execute("""SELECT calcfiz.id AS id_calcfiz,
                                    calcfiz.id_calcigefiz,
                                    calcfiz.schet AS schet_srez,
                                    calcfiz.labnum,
                                    calcfiz.par
                                FROM calcfiz,
                                    calcigefiz
                                WHERE calcfiz.id_calcigefiz = calcigefiz.id AND calcfiz.id_calcigefiz = %(v0)s""",
                             {'v0': self.idIgeFiz})
                self.recFiz = curs.fetchall()

    def requerySrez(self) -> set:
        """Формирование запроса результатов среза в зависимости от схемы испытаний"""
        if self.radioButton.isChecked():
            with UseDatebase(dbconfig) as curs:
                curs.execute("""SELECT calcsreztg.id AS id_calcsreztg,
                                    calcsreztg.id_calcige,
                                    calcsreztg.schet AS schet_srez,
                                    calcsreztg.labnum,
                                    calcsreztg.tg_f,
                                    calcsreztg.scep
                                FROM calcsreztg,
                                    calcige
                                WHERE calcsreztg.id_calcige = calcige.id AND calcsreztg.id_calcige = %(v0)s""",
                             {'v0': self.idIge})
                self.recSrez = curs.fetchall()
        elif self.radioButton_2.isChecked() or self.radioButton_3.isChecked() or self.radioButton_4.isChecked():
            with UseDatebase(dbconfig) as curs:
                curs.execute("""SELECT calcsrez.id AS id_calcsrez,
                                    calcsrez.id_calcige,
                                    calcsrez.schet AS schet_srez,
                                    calcsrez.labnum,
                                    calcsrez.nagruzka,
                                    calcsrez.sopr
                                FROM calcsrez,
                                    calcige
                                WHERE calcsrez.id_calcige = calcige.id AND calcsrez.id_calcige = %(v0)s""",
                             {'v0': self.idIge})
                self.recSrez = curs.fetchall()

    def requeryCompres(self) -> set:
        """Формирование запроса результатов компрессии в зависимости от ИГЕ"""
        if self.radioButton_7.isChecked():
            with UseDatebase(dbconfig) as curs:
                curs.execute("""SELECT calccompres.id AS id_calccompres,
                                    calccompres.id_calcigecompres,
                                    calccompres.schet AS schet_compres,
                                    calccompres.labnum,
                                    calccompres.nagruzka,
                                    calccompres.otnsjat,
                                    calccompres.betta
                                FROM calccompres,
                                    calcigecompres
                                WHERE calccompres.id_calcigecompres = calcigecompres.id AND calccompres.id_calcigecompres = %(v0)s""",
                             {'v0': self.idIgecompres})
                self.recCompres = curs.fetchall()
        elif self.radioButton_8.isChecked():
            with UseDatebase(dbconfig) as curs:
                curs.execute("""SELECT calccompres_e.id AS id_calccompres_e,
                                    calccompres_e.id_calcigecompres,
                                    calccompres_e.schet AS schet_compres,
                                    calccompres_e.labnum,
                                    calccompres_e.nagruzka,
                                    calccompres_e.kfpor,
                                    calccompres_e.betta
                                FROM calccompres_e,
                                    calcigecompres
                                WHERE calccompres_e.id_calcigecompres = calcigecompres.id AND calccompres_e.id_calcigecompres = %(v0)s""",
                             {'v0': self.idIgecompres})
                self.recCompres = curs.fetchall()

    def requeryTa(self) -> set:
        """Формирование таблицы Ж2"""
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT * FROM setta""")
            self.recSetta = curs.fetchall()  # Таблица Ж2

    def requeryFa(self) -> set:
        """Формирование таблицы Ж4"""
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT * FROM setfa""")
            self.recSetfa = curs.fetchall()  # Таблица Ж4

    def requeryRaschetFiz(self) -> set:
        """Формирование запроса со статистической обработкой результатов испытаний представленных одной величиной"""
        self.asktoSave()
        if self.radioButton_5.isChecked():
            with UseDatebase(dbconfig) as curs:
                curs.execute("""CREATE OR REPLACE VIEW public.vcalc_fiz
                                AS
                                SELECT *
                                FROM vcalcone_fiz
                                WHERE id_obekt = %(v0)s;
                                ALTER TABLE public.vcalc_fiz
                                    OWNER TO postgres;
                                COMMENT ON VIEW public.vcalc_fiz
                                    IS 'Статистическая обработка результатов испытаний грунтов представленных одним значением 
                                    по ДСТУ Б В.2.1-5-96 для геологического калькулятора';
                                GRANT ALL ON TABLE public.vcalc_fiz TO postgres WITH GRANT OPTION;
                                GRANT ALL ON TABLE public.vcalc_fiz TO vik WITH GRANT OPTION;
                                GRANT ALL ON TABLE public.vcalc_fiz TO viktor WITH GRANT OPTION;""", {'v0': idActivObekt})
            nameReport = 'calcfiz_A4P'
        elif self.radioButton_6.isChecked():
            with UseDatebase(dbconfig) as curs:
                curs.execute("""CREATE OR REPLACE VIEW public.vcalc_log
                                AS
                                SELECT *
                                FROM vcalcone_log
                                WHERE id_obekt = %(v0)s;
                                ALTER TABLE public.vcalc_log
                                    OWNER TO postgres;
                                COMMENT ON VIEW public.vcalc_log
                                    IS 'Статистическая обработка результатов испытаний грунтов 
                                    с использованием логарифмически нормального закона распределения 
                                    по ДСТУ Б В.2.1-5-96 для геологического калькулятора';
                                GRANT ALL ON TABLE public.vcalc_log TO postgres WITH GRANT OPTION;
                                GRANT ALL ON TABLE public.vcalc_log TO vik WITH GRANT OPTION;
                                GRANT ALL ON TABLE public.vcalc_log TO viktor WITH GRANT OPTION;""",
                             {'v0': idActivObekt})
            nameReport = 'calconelog_A4P'
        formatF = 'pdf'
        self.getReport(nameReport, formatF)

    def requeryRaschet(self) -> set:
        """Формирование запроса со статистической обработкой результатов срезных испытаний tg(f) и C"""
        self.asktoSave()
        if self.radioButton.isChecked():
            with UseDatebase(dbconfig) as curs:
                curs.execute("""CREATE OR REPLACE VIEW public.vcalc_tgfc
                                AS
                                SELECT *
                                FROM vcalcsrez_tgc
                                WHERE id_obekt = %(v0)s;
                                ALTER TABLE public.vcalc_tgfc
                                    OWNER TO postgres;
                                COMMENT ON VIEW public.vcalc_tgfc
                                    IS 'Статистическая обработка результатов срезных испытаний (tg(f), c) 
                                    по ДСТУ Б В.2.1-5-96 для геологического калькулятора';
                                GRANT ALL ON TABLE public.vcalc_tgfc TO postgres WITH GRANT OPTION;
                                GRANT ALL ON TABLE public.vcalc_tgfc TO vik WITH GRANT OPTION;
                                GRANT ALL ON TABLE public.vcalc_tgfc TO viktor WITH GRANT OPTION;""", {'v0': idActivObekt})
            nameReport = 'calctgfc_A4P'
        elif self.radioButton_2.isChecked():
            with UseDatebase(dbconfig) as curs:
                curs.execute("""CREATE OR REPLACE VIEW public.vcalc_tp
                                AS
                                SELECT *
                                FROM vcalcsrez_tp
                                WHERE id_obekt = %(v0)s;
                                ALTER TABLE public.vcalc_tp
                                    OWNER TO postgres;
                                COMMENT ON VIEW public.vcalc_tp
                                    IS 'Статистическая обработка результатов срезных испытаний (t, p) 
                                    по ДСТУ Б В.2.1-5-96 для геологического калькулятора';
                                GRANT ALL ON TABLE public.vcalc_tp TO postgres WITH GRANT OPTION;
                                GRANT ALL ON TABLE public.vcalc_tp TO vik WITH GRANT OPTION;
                                GRANT ALL ON TABLE public.vcalc_tp TO viktor WITH GRANT OPTION;""",
                             {'v0': idActivObekt})
            nameReport = 'calctp_A4P'
        elif self.radioButton_3.isChecked():
            with UseDatebase(dbconfig) as curs:
                curs.execute("""CREATE OR REPLACE VIEW public.vcalc_tp75
                                AS
                                SELECT *
                                FROM vcalcsrez_tp75
                                WHERE id_obekt = %(v0)s;
                                ALTER TABLE public.vcalc_tp75
                                    OWNER TO postgres;
                                COMMENT ON VIEW public.vcalc_tp75
                                    IS 'Статистическая обработка результатов срезных испытаний (t, p) 
                                    по ГОСТ 20522-75 для геологического калькулятора';
                                GRANT ALL ON TABLE public.vcalc_tp75 TO postgres WITH GRANT OPTION;
                                GRANT ALL ON TABLE public.vcalc_tp75 TO vik WITH GRANT OPTION;
                                GRANT ALL ON TABLE public.vcalc_tp75 TO viktor WITH GRANT OPTION;""",
                             {'v0': idActivObekt})
            nameReport = 'calctp75_A4P'
        elif self.radioButton_4.isChecked():
            with UseDatebase(dbconfig) as curs:
                curs.execute("""CREATE OR REPLACE VIEW public.vcalc_tp
                                AS
                                SELECT *
                                FROM vcalcsrezs_tp
                                WHERE id_obekt = %(v0)s;
                                ALTER TABLE public.vcalc_tp
                                    OWNER TO postgres;
                                COMMENT ON VIEW public.vcalc_tp
                                    IS 'Статистическая обработка результатов срезных испытаний (t, p) 
                                    по СНиП 2.02.02-85 для геологического калькулятора';
                                GRANT ALL ON TABLE public.vcalc_tp TO postgres WITH GRANT OPTION;
                                GRANT ALL ON TABLE public.vcalc_tp TO vik WITH GRANT OPTION;
                                GRANT ALL ON TABLE public.vcalc_tp TO viktor WITH GRANT OPTION;""",
                             {'v0': idActivObekt})
            nameReport = 'calcsniptp_A4P'
        formatF = 'pdf'
        self.getReport(nameReport, formatF)

    def requeryRaschetCompres(self) -> set:
        """Формирование запроса по статистической обработкой результатов компрессионных испытаний eps и p
        и формирование запроса по статистической обработкой результатов компрессионных испытаний e и p"""
        self.asktoSave()
        if self.radioButton_7.isChecked():
            with UseDatebase(dbconfig) as curs:
                curs.execute("""CREATE OR REPLACE VIEW public.vcalce_epsp
                                AS
                                SELECT *
                                FROM vcalccompres
                                WHERE id_obekt = %(v0)s;
                                ALTER TABLE public.vcalce_epsp
                                    OWNER TO postgres;
                                COMMENT ON VIEW public.vcalce_epsp
                                    IS 'Статистическая обработка результатов компрессионных испытаний (eps, p) 
                                    по ДСТУ Б В.2.1-5-96 для геологического калькулятора';
                                GRANT ALL ON TABLE public.vcalce_epsp TO postgres WITH GRANT OPTION;
                                GRANT ALL ON TABLE public.vcalce_epsp TO vik WITH GRANT OPTION;
                                GRANT ALL ON TABLE public.vcalce_epsp TO viktor WITH GRANT OPTION;""", {'v0': idActivObekt})
            nameReport = 'calccompres_A4P'
        elif self.radioButton_8.isChecked():
            with UseDatebase(dbconfig) as curs:
                curs.execute("""CREATE OR REPLACE VIEW public.vcalce_ep
                                AS
                                SELECT *
                                FROM vcalccompres_ep
                                WHERE id_obekt = %(v0)s;
                                ALTER TABLE public.vcalce_ep
                                    OWNER TO postgres;
                                COMMENT ON VIEW public.vcalce_ep
                                    IS 'Статистическая обработка результатов компрессионных испытаний (e, p) 
                                    по ДСТУ Б В.2.1-5-96 для геологического калькулятора';
                                GRANT ALL ON TABLE public.vcalce_ep TO postgres WITH GRANT OPTION;
                                GRANT ALL ON TABLE public.vcalce_ep TO vik WITH GRANT OPTION;
                                GRANT ALL ON TABLE public.vcalce_ep TO viktor WITH GRANT OPTION;""",
                             {'v0': idActivObekt})
            nameReport = 'calccomprese_A4P'
        formatF = 'pdf'
        self.getReport(nameReport, formatF)

    def requeryRaschetIGE(self) -> set:
        """Расчет проверки необходимости разделения ИГЭ и возможности объединения двух ИГЭ в РГЭ"""
        if self.modelIGE1.rowCount() > 0:
            listIGE1 = self.readIGE(self.modelIGE1)
            arr = np.asarray(listIGE1)
            arr1 = np.trim_zeros(arr)
            avg1 = np.mean(arr1)
            n1 = np.count_nonzero(arr1)
            s1 = np.std(arr1, ddof=1)
            self.doubleSpinBox.setValue(round(avg1, 4))
            self.doubleSpinBox_2.setValue(round(s1, 4))
            self.spinBox_3.setValue(n1)
        else:
            avg1 = self.doubleSpinBox.value()
            s1 = self.doubleSpinBox_2.value()
            n1 = self.spinBox_3.value()
        if self.modelIGE2.rowCount() > 0:
            listIGE2 = self.readIGE(self.modelIGE2)
            arr = np.asarray(listIGE2)
            arr2 = np.trim_zeros(arr)
            avg2 = np.mean(arr2)
            n2 = np.count_nonzero(arr2)
            s2 = np.std(arr2, ddof=1)
            self.doubleSpinBox_3.setValue(round(avg2, 4))
            self.doubleSpinBox_4.setValue(round(s2, 4))
            self.spinBox_6.setValue(n2)
        else:
            avg2 = self.doubleSpinBox_3.value()
            s2 = self.doubleSpinBox_4.value()
            n2 = self.spinBox_6.value()
        try:
            if s1 == 0 or s2 == 0 or n1 < 6 or n2 < 6:
                num = int('close')
        except:
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Critical, "Геологічний калькулятор",
                                           "Для розрахунку не повинно бути нульових значень."
                                           "\nКрім того, для достовірності розрахунку кількість значень для кожного ІГЕ повинна бути не меншою за шість")
            btnOK = QtWidgets.QPushButton("&OK")
            btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
            result = self.formMassWin.exec()
        else:
            t = np.abs(avg1 - avg2) / np.sqrt(n1 * np.square(s1) + n2 * np.square(s2)) * np.sqrt(
                n1 * n2 * (n1 + n2 - 2) / (n1 + n2))
            ta = setta((n1 + n2 - 2), self.recSetta)[3]
            if t >= ta:
                str1 = 'Необхідне додаткове разділення ІГЕ'
            else:
                str1 = 'Не має необхідності разделяти ІГЕ'
            if s1 > s2:
                f = np.square(s1) / np.square(s2)
            else:
                f = np.square(s2) / np.square(s1)
            fa = setfa((n1 - 1), (n2 - 1), self.recSetfa)
            if f < fa and t < ta:
                str2 = 'Потрібно об`єднати два ІГЕ в один РГЕ'
            else:
                str2 = 'Не має можливості об`єднати два ІГЕ в один РГЕ'
            self.label_18.setText('\nT = ' + str(round(t, 4)) + '\nTa = ' + str(ta) + '\nF = ' + str(round(f, 4))
                                  + '\nFa = ' + str(round(fa, 4)) + '\n\n' + str1 + '\n' + str2)

    def refreshRecord(self) -> set:
        """Обновление формы калькулятора"""
        self.requeryObekt()
        self.recObektOld = self.recObekt
        if self.recObektOld:
            self.label_3.setText("Ідентіфікатор об'єкта - " + str(idActivObekt) + "\n" +
                               "Номер договору - " + self.recObektOld[0][1] + "\n" +
                               "Архівний номер звіту - " + self.recObektOld[0][0] + "\n" +
                               self.recObektOld[0][2])   # ID объекта, номер договора, архивный номер, наименование объекта
            self.label_6.setText(self.label_3.text())
        if self.currentIndex() == 0:
            self.refreshTableIgeFiz()
            self.refreshTableFiz()
        elif self.currentIndex() == 1:
            self.refreshTableIge()
            self.refreshTableSrez()
        elif self.currentIndex() == 2:
            pass
        elif self.currentIndex() == 3:
            self.refreshTableIgeCompres()
            self.refreshTableCompres()
        elif self.currentIndex() == 4:
            self.refreshTableIGE1()
            self.refreshTableIGE2()
        else:
            pass

    def refreshCombo(self) -> set:
        """Обновление комбобокса в панели управления"""
        for i in range(0, form.combo.count()):
            if form.combo.itemData(i, role=QtCore.Qt.UserRole) == idActivObekt:
                break
            else:
                continue
        form.combo.setCurrentIndex(i)

    def refreshTableIgeFiz(self) -> set:
        """Обновление таблицы ИГЭ_физсвойства"""
        self.requeryIgeFiz()
        self.recCountIgeFiz = len(self.recIgeFiz)
        self.recAllOldIgeFiz = self.recIgeFiz
        if self.recCountIgeFiz > 0:
            self.modelIGEFiz.setRowCount(self.recCountIgeFiz)
            self.tableIGEFiz.setEnabled(True)
            self.toolButton_8.setEnabled(True)
            self.toolButton_10.setEnabled(True)
            for i in range(0, self.recCountIgeFiz):  # Занесение данных в ячейки таблицы
                for j in range(0, 7):
                    itm = QtGui.QStandardItem(self.recIgeFiz[i][j])
                    self.modelIGEFiz.setItem(i, j, itm)
                    itm.setData(self.recIgeFiz[i][j], role=QtCore.Qt.EditRole)
                    if j == 1:  # Обработка поля ID Характеристика
                        idshema = self.recIgeFiz[i][j]
                    elif j == 3:  # Обработка поля Расчет
                        itm.setCheckable(True)
                        itm.setFlags(QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
                        itm.setText('')
                        if self.recIgeFiz[i][j] == True:
                            itm.setCheckState(QtCore.Qt.Checked)
                        else:
                            itm.setCheckState(QtCore.Qt.Unchecked)
                    elif j == 4 or j == 5:  # Обработка поле ИГЭ и Грунт
                        itm.setTextAlignment(QtCore.Qt.AlignCenter)
                    elif j == 6:
                        itm.setData(idshema, role=QtCore.Qt.UserRole)
        else:
            self.tableIGEFiz.setEnabled(False)
            self.toolButton_8.setEnabled(True)
            self.toolButton_10.setEnabled(False)
            self.modelIGEFiz.removeRows(0, self.modelIGEFiz.rowCount())
        self.recAllNewIgeFiz = self.recAllOldIgeFiz

    def refreshTableIge(self) -> set:
        """Обновление таблицы ИГЭ_схема испытаний"""
        self.requeryIge()
        self.recCountIge = len(self.recIge)
        self.recAllOldIge = self.recIge
        if self.recCountIge > 0:
            self.modelIGEShema.setRowCount(self.recCountIge)
            self.tableIGE.setEnabled(True)
            self.toolButton.setEnabled(True)
            self.toolButton_2.setEnabled(True)
            for i in range(0, self.recCountIge):    # Занесение данных в ячейки таблицы
                for j in range(0, 7):
                    itm = QtGui.QStandardItem(self.recIge[i][j])
                    self.modelIGEShema.setItem(i, j, itm)
                    itm.setData(self.recIge[i][j], role=QtCore.Qt.EditRole)
                    if j == 1:                      # Обработка поля ID Схема
                        idshema = self.recIge[i][j]
                    elif j == 3:                    # Обработка поля Расчет
                        itm.setCheckable(True)
                        itm.setFlags(QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
                        itm.setText('')
#                        itm.setForeground(QtGui.QBrush(QtCore.Qt.green))
                        if self.recIge[i][j] == True:
                            itm.setCheckState(QtCore.Qt.Checked)
                        else:
                            itm.setCheckState(QtCore.Qt.Unchecked)
                    elif j == 4 or j == 5:          # Обработка поле ИГЭ и Грунт
                        itm.setTextAlignment(QtCore.Qt.AlignCenter)
                    elif j == 6:
                        itm.setData(idshema, role=QtCore.Qt.UserRole)
        else:
            self.tableIGE.setEnabled(False)
            self.toolButton.setEnabled(True)
            self.toolButton_2.setEnabled(False)
            self.modelIGEShema.removeRows(0, self.modelIGEShema.rowCount())
        self.recAllNewIge = self.recAllOldIge

    def refreshTableIgeCompres(self) -> set:
        """Обновление таблицы ИГЭ_схема компрессионных испытаний"""
        self.requeryIgecompres()
        self.recCountIgecompres = len(self.recIgecompres)
        self.recAllOldIgeCompres = self.recIgecompres
        if self.recCountIgecompres > 0:
            self.modelIGECompres.setRowCount(self.recCountIgecompres)
            self.tableIGEcompres.setEnabled(True)
            self.toolButton_13.setEnabled(True)
            self.toolButton_14.setEnabled(True)
            for i in range(0, self.recCountIgecompres):  # Занесение данных в ячейки таблицы
                for j in range(0, 7):
                    itm = QtGui.QStandardItem(self.recIgecompres[i][j])
                    self.modelIGECompres.setItem(i, j, itm)
                    itm.setData(self.recIgecompres[i][j], role=QtCore.Qt.EditRole)
                    if j == 1:  # Обработка поля ID Схема
                        idshema = self.recIgecompres[i][j]
                    elif j == 3:  # Обработка поля Расчет
                        itm.setCheckable(True)
                        itm.setFlags(QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
                        itm.setText('')
                        if self.recIgecompres[i][j] == True:
                            itm.setCheckState(QtCore.Qt.Checked)
                        else:
                            itm.setCheckState(QtCore.Qt.Unchecked)
                    elif j == 4 or j == 5:  # Обработка поле ИГЭ и Грунт
                        itm.setTextAlignment(QtCore.Qt.AlignCenter)
                    elif j == 6:
                        itm.setData(idshema, role=QtCore.Qt.UserRole)
        else:
            self.tableIGEcompres.setEnabled(False)
            self.toolButton_13.setEnabled(True)
            self.toolButton_14.setEnabled(False)
            self.modelIGECompres.removeRows(0, self.modelIGECompres.rowCount())
        self.recAllNewIgeCompres = self.recAllOldIgeCompres

    def refreshTableIgeFizCheck(self) -> set:
        """Обновление поля Расчетать в таблице ИГЭ_Физхарактеристика"""
        if self.checkBox_3.checkState() == 2:
            for i in range(0, len(self.recIgeFiz)):
                self.modelIGEFiz.item(i, 3).setCheckState(QtCore.Qt.Checked)
        elif self.checkBox_3.checkState() == 0:
            for i in range(0, len(self.recIgeFiz)):
                self.modelIGEFiz.item(i, 3).setCheckState(QtCore.Qt.Unchecked)

    def refreshTableFizCheck(self) -> set:
        """Обновление поля расчет в таблице физических характеристик"""
        if self.checkBox_4.checkState() == 2:
            for i in range(0, len(self.recFiz)):
                self.modelFiz.item(i, 2).setCheckState(QtCore.Qt.Checked)
        elif self.checkBox_4.checkState() == 0:
            for i in range(0, len(self.recFiz)):
                self.modelFiz.item(i, 2).setCheckState(QtCore.Qt.Unchecked)

    def refreshTableIgeCheck(self) -> set:
        """Обновление поля Расчетать в таблице ИГЭ_Схема срезных испытаний"""
        if self.checkBox.checkState() == 2:
            for i in range(0, len(self.recIge)):
                self.modelIGEShema.item(i, 3).setCheckState(QtCore.Qt.Checked)
        elif self.checkBox.checkState() == 0:
            for i in range(0, len(self.recIge)):
                self.modelIGEShema.item(i, 3).setCheckState(QtCore.Qt.Unchecked)

    def refreshTableSrezCheck(self) -> set:
        """Обновление поля расчет в таблице результатов среза"""
        if self.checkBox_2.checkState() == 2:
            for i in range(0, len(self.recSrez)):
                self.modelSrez.item(i, 2).setCheckState(QtCore.Qt.Checked)
        elif self.checkBox_2.checkState() == 0:
            for i in range(0, len(self.recSrez)):
                self.modelSrez.item(i, 2).setCheckState(QtCore.Qt.Unchecked)

    def refreshTableIgeCompresCheck(self) -> set:
        """Обновление поля Расчетать в таблице ИГЭ_Схема компрессионных испытаний"""
        if self.checkBox_5.checkState() == 2:
            for i in range(0, len(self.recIgecompres)):
                self.modelIGECompres.item(i, 3).setCheckState(QtCore.Qt.Checked)
        elif self.checkBox_5.checkState() == 0:
            for i in range(0, len(self.recIgecompres)):
                self.modelIGECompres.item(i, 3).setCheckState(QtCore.Qt.Unchecked)

    def refreshTableCompresCheck(self) -> set:
        """Обновление поля расчет в таблице результатов компрессии"""
        if self.checkBox_6.checkState() == 2:
            for i in range(0, len(self.recCompres)):
                self.modelCompres.item(i, 2).setCheckState(QtCore.Qt.Checked)
        elif self.checkBox_6.checkState() == 0:
            for i in range(0, len(self.recCompres)):
                self.modelCompres.item(i, 2).setCheckState(QtCore.Qt.Unchecked)

    def refreshTableFiz(self) -> set:
        """Обновление таблицы результатов определения физических характеристик"""
        self.requeryFiz()
        self.recCountFiz = len(self.recFiz)
        self.recAllOldFiz = self.recFiz
        if self.recCountFiz > 0:
            self.modelFiz.setRowCount(self.recCountFiz)
            self.tableFiz.setEnabled(True)
            self.toolButton_7.setEnabled(True)
            self.toolButton_11.setEnabled(True)
            self.toolButton_12.setEnabled(True)
            self.toolButton_9.setEnabled(True)
            for i in range(0, self.recCountFiz):  # Занесение данных в ячейки таблицы
                for j in range(0, 5):
                    itm = QtGui.QStandardItem()
                    self.modelFiz.setItem(i, j, itm)
                    if j < 4:
                        itm.setData(self.recFiz[i][j], role=QtCore.Qt.EditRole)
                    else:
                        itm.setData(str(self.recFiz[i][j]), role=QtCore.Qt.EditRole)
                    if j == 2:  # Обработка поля Расчет
                        itm.setCheckable(True)
                        itm.setFlags(QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
                        itm.setText('')
                        #                        itm.setForeground(QtGui.QBrush(QtCore.Qt.green))
                        if self.recFiz[i][j] == True:
                            itm.setCheckState(QtCore.Qt.Checked)
                        else:
                            itm.setCheckState(QtCore.Qt.Unchecked)
                    elif j > 2:  # Обработка последних двух полей
                        itm.setTextAlignment(QtCore.Qt.AlignCenter)
        else:
            self.tableFiz.setEnabled(False)
            self.toolButton_7.setEnabled(True)
            self.toolButton_11.setEnabled(False)
            self.toolButton_12.setEnabled(True)
            self.toolButton_9.setEnabled(False)
            self.modelFiz.removeRows(0, self.modelFiz.rowCount())
        self.recAllNewFiz = self.recAllOldFiz
        self.label_5.setText(str(self.recCountFiz))

    def refreshTableSrez(self) -> set:
        """Обновление таблицы результатов среза"""
        self.requerySrez()
        if self.radioButton.isChecked():
            self.modelSrez.setHeaderData(4, QtCore.Qt.Horizontal, 'Тангенс кута\nвнутрішнього\nтертя\ntg(φ)')
            self.modelSrez.setHeaderData(5, QtCore.Qt.Horizontal, 'Питоме\nзчеплення\nc, МПа')
        else:
            self.modelSrez.setHeaderData(4, QtCore.Qt.Horizontal, 'Нормальна\nнапруга\nσ, МПа')
            self.modelSrez.setHeaderData(5, QtCore.Qt.Horizontal, 'Опір\nзрізу\nτ, МПа')
        self.recCountSrez = len(self.recSrez)
        self.recAllOldSrez = self.recSrez
        if self.recCountSrez > 0:
            self.modelSrez.setRowCount(self.recCountSrez)
            self.tableSrez.setEnabled(True)
            self.toolButton_3.setEnabled(True)
            self.toolButton_4.setEnabled(True)
            self.toolButton_5.setEnabled(True)
            self.toolButton_6.setEnabled(True)
            for i in range(0, self.recCountSrez):  # Занесение данных в ячейки таблицы
                for j in range(0, 6):
                    itm = QtGui.QStandardItem()
                    self.modelSrez.setItem(i, j, itm)
                    if j < 4:
                        itm.setData(self.recSrez[i][j], role=QtCore.Qt.EditRole)
                    else:
                        itm.setData(str(self.recSrez[i][j]), role=QtCore.Qt.EditRole)
                    if j == 2:    # Обработка поля Расчет
                        itm.setCheckable(True)
                        itm.setFlags(QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
                        itm.setText('')
#                        itm.setForeground(QtGui.QBrush(QtCore.Qt.green))
                        if self.recSrez[i][j] == True:
                            itm.setCheckState(QtCore.Qt.Checked)
                        else:
                            itm.setCheckState(QtCore.Qt.Unchecked)
                    elif j > 2:     # Обработка последних трех полей
                        itm.setTextAlignment(QtCore.Qt.AlignCenter)
        else:
            self.tableSrez.setEnabled(False)
            self.toolButton_3.setEnabled(True)
            self.toolButton_4.setEnabled(False)
            self.toolButton_5.setEnabled(True)
            self.toolButton_6.setEnabled(False)
            self.modelSrez.removeRows(0, self.modelSrez.rowCount())
        self.recAllNewSrez = self.recAllOldSrez
        self.label_2.setText(str(self.recCountSrez))

    def refreshTableCompres(self) -> set:
        """Обновление таблицы результатов компресии"""
        self.requeryCompres()
        if self.radioButton_7.isChecked():
            self.modelCompres.setHeaderData(5, QtCore.Qt.Horizontal, 'Відносний\nстиск\nε, д.о.')
        else:
            self.modelCompres.setHeaderData(5, QtCore.Qt.Horizontal, 'Коефіцієнт\nпористості\ne, д.о.')
        self.recCountCompres = len(self.recCompres)
        self.recAllOldCompres = self.recCompres
        if self.recCountCompres > 0:
            self.modelCompres.setRowCount(self.recCountCompres)
            self.tableCompres.setEnabled(True)
            self.toolButton_15.setEnabled(True)
            self.toolButton_16.setEnabled(True)
            self.toolButton_17.setEnabled(True)
            self.toolButton_18.setEnabled(True)
            for i in range(0, self.recCountCompres):  # Занесение данных в ячейки таблицы результатов компрессии
                for j in range(0, 7):
                    itm = QtGui.QStandardItem()
                    self.modelCompres.setItem(i, j, itm)
                    if j < 4:
                        itm.setData(self.recCompres[i][j], role=QtCore.Qt.EditRole)
                    else:
                        itm.setData(str(self.recCompres[i][j]), role=QtCore.Qt.EditRole)
                    if j == 2:  # Обработка поля Расчет
                        itm.setCheckable(True)
                        itm.setFlags(QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
                        itm.setText('')
#                        itm.setForeground(QtGui.QBrush(QtCore.Qt.green))
                        if self.recCompres[i][j] == True:
                            itm.setCheckState(QtCore.Qt.Checked)
                        else:
                            itm.setCheckState(QtCore.Qt.Unchecked)
                    elif j > 2:  # Обработка последних четырех полей
                        itm.setTextAlignment(QtCore.Qt.AlignCenter)
        else:
            self.tableCompres.setEnabled(False)
            self.toolButton_15.setEnabled(True)
            self.toolButton_16.setEnabled(False)
            self.toolButton_17.setEnabled(False)
            self.toolButton_18.setEnabled(True)
            self.modelCompres.removeRows(0, self.modelCompres.rowCount())
        self.recAllNewCompres = self.recAllOldCompres
        self.label_9.setText(str(self.recCountCompres))

    def refreshTableIGE1(self) -> set:
        """Обновление таблицы характеристик первого ИГЭ"""
        self.recCountIGE1 = self.modelIGE1.rowCount()
        if self.recCountIGE1 > 0:
            self.modelIGE1.setRowCount(self.recCountIGE1)
            self.tableIGE1.setEnabled(True)
            self.toolButton_21.setEnabled(True)
            self.toolButton_19.setEnabled(True)
            self.toolButton_20.setEnabled(True)
            self.toolButton_22.setEnabled(True)
        else:
            self.tableIGE1.setEnabled(False)
            self.toolButton_21.setEnabled(True)
            self.toolButton_19.setEnabled(False)
            self.toolButton_20.setEnabled(True)
            self.toolButton_22.setEnabled(False)
            self.modelIGE1.removeRows(0, self.modelIGE1.rowCount())
        self.spinBox_3.setValue(self.recCountIGE1)

    def refreshTableIGE2(self) -> set:
        """Обновление таблицы характеристик Второго ИГЭ"""
        self.recCountIGE2 = self.modelIGE2.rowCount()
        if self.recCountIGE2 > 0:
            self.modelIGE2.setRowCount(self.recCountIGE2)
            self.tableIGE2.setEnabled(True)
            self.toolButton_25.setEnabled(True)
            self.toolButton_23.setEnabled(True)
            self.toolButton_24.setEnabled(True)
            self.toolButton_26.setEnabled(True)
        else:
            self.tableIGE2.setEnabled(False)
            self.toolButton_25.setEnabled(True)
            self.toolButton_23.setEnabled(False)
            self.toolButton_24.setEnabled(True)
            self.toolButton_26.setEnabled(False)
            self.modelIGE2.removeRows(0, self.modelIGE2.rowCount())
        self.spinBox_6.setValue(self.recCountIGE2)

    def refreshToolbar(self) -> set:
        """Обновляет панель инструментов"""
        form.action_8.setEnabled(False)  # Первая запись
        form.action_9.setEnabled(False)  # Предыдущая запись
        form.action_10.setEnabled(False)  # Следующая запись
        form.action_11.setEnabled(False)  # Последняя запись
        form.action_2.setEnabled(False)  # Новая запись
        form.action_3.setEnabled(True)  # Закрыть активное окно
        form.action_5.setEnabled(True)  # Сохранить
        form.action_6.setEnabled(False)  # Удалить текущую запись
        form.action_13.setEnabled(False)  # Сортировать
        form.action_14.setEnabled(False)  # Отмена сортировки

    def indexTableFiz(self) -> set:
        """Выполняет подготовку к обнавлению таблицы результатов испытаний представленных одним значением"""
        ind = self.tableIGEFiz.currentIndex()
        i = ind.row()  # Номер текущей строки таблицы ИГЭ_Физсвойства
        if i < 0:
            self.idIgeFiz = 0
        else:
            self.idIgeFiz = self.modelIGEFiz.item(i, 0).data(QtCore.Qt.EditRole)  # Текущее значение ID ИГЭ_Физсвойства
        self.refreshTableFiz()

    def indexTableSrez(self) -> set:
        """Выполняет подготовку к обнавлению таблицы результатов срезных испытаний"""
        ind = self.tableIGE.currentIndex()
        i = ind.row()  # Номер текущей строки таблицы ИГЭ_Схема срезных испытаний
        if i < 0:
            self.idIge = 0
        else:
            self.idIge = self.modelIGEShema.item(i, 0).data(QtCore.Qt.EditRole)  # Текущее значение ID ИГЭ_Схема
        self.refreshTableSrez()

    def indexTableCompres(self) -> set:
        """Выполняет подготовку к обнавлению таблицы результатов компрессионных испытаний"""
        ind = self.tableIGEcompres.currentIndex()
        i = ind.row()  # Номер текущей строки таблицы ИГЭ_Схема компрессионных испытаний
        if i < 0:
            self.idIgecompres = 0
        else:
            self.idIgecompres = self.modelIGECompres.item(i, 0).data(QtCore.Qt.EditRole)  # Текущее значение ID ИГЭ_Схема
        self.refreshTableCompres()

    def poiskOb(self) -> set:
        """Поиск объекта"""
        global idActivObekt
        with UseDatebase(dbconfig) as curs:
            curs.execute("SELECT * FROM obekt ORDER BY id")
            self.recAllOb = curs.fetchall()
        self.formPoiskObekt = PoiskObekt(self.recAllOb)
        result = self.formPoiskObekt.exec_()
        if result == QtWidgets.QDialog.Accepted:
            if self.formPoiskObekt.radIndex == 1 or self.formPoiskObekt.radIndex == 2:
                idActivObekt = self.formPoiskObekt.retval
            else:
                self.setActivObekt()
                if idActivObekt is None:
                    self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "Геологічний калькулятор",
                                                   "Активованих об'єктів не виявлено. Необхідно активувати об'єкт, з яким плануєте працювати.")
                    btnOK = QtWidgets.QPushButton("&OK")
                    btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                    self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                    result = self.formMassWin.exec()
            self.refreshRecord()
            self.refreshCombo()
        else:
            pass
        return idActivObekt

    def showEvent(self, e) -> set:
        """Выполняет действия при выводе окна на экран"""
        form.action_35.setEnabled(False)
        QtWidgets.QToolBox.showEvent(self, e)

    def hideEvent(self, e) -> set:
        """Выполняет действия при скрытии окна"""
        form.action_35.setEnabled(True)
        form.calcgeowin = None
        self.asktoSave()
        form.refreshMain()
        QtWidgets.QToolBox.hideEvent(self, e)

    def addRecIgeFiz(self) -> set:
        """Добавляет строку в таблице ИГЭ+Физсвойства"""
        arrIdFiz = []
        i = 0
        for i in range(0, self.modelIGEFiz.rowCount()):
            arrIdFiz.append(self.modelIGEFiz.item(i, 0).data(QtCore.Qt.EditRole))
        if arrIdFiz == []:
            idIgeFiz = 0
        else:
            idIgeFiz = int(np.max(arrIdFiz))
        recone = []
        for j in range(0, 7):
            itm = QtGui.QStandardItem()
            if j == 0:
                itm.setData(idIgeFiz + 1, role=QtCore.Qt.EditRole)
            elif j == 2:
                itm.setData(idActivObekt, role=QtCore.Qt.EditRole)
            elif j == 3:
                itm.setCheckable(True)
                itm.setFlags(QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
                itm.setCheckState(QtCore.Qt.Checked)
            recone.append(itm)
        self.modelIGEFiz.appendRow(recone)
        self.tableIGEFiz.setEnabled(True)
        self.tableIGEFiz.setFocus()
        rc = self.modelIGEFiz.rowCount()
        ind = self.modelIGEFiz.index(rc - 1, 4)
        self.tableIGEFiz.setCurrentIndex(ind)
        self.toolButton_10.setEnabled(True)

    def addRecFiz(self) -> set:
        """Добавляет строку в таблицу результатов испытаний"""
        arrIdFiz = []
        for i in range(0, self.modelFiz.rowCount()):
            arrIdFiz.append(self.modelFiz.item(i, 0).data(QtCore.Qt.EditRole))
        if arrIdFiz == []:
            idFiz = 0
        else:
            idFiz = int(np.max(arrIdFiz))
        recone = []
        for j in range(0, 5):
            itm = QtGui.QStandardItem()
            if j == 0:
                itm.setData(idFiz + 1, role=QtCore.Qt.EditRole)
            elif j == 1:
                itm.setData(self.idIgeFiz, role=QtCore.Qt.EditRole)
            elif j == 2:
                itm.setCheckable(True)
                itm.setFlags(QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
                itm.setCheckState(QtCore.Qt.Checked)
            recone.append(itm)
        self.modelFiz.appendRow(recone)
        self.tableFiz.setEnabled(True)
        self.tableFiz.setFocus()
        rc = self.modelFiz.rowCount()
        ind = self.modelFiz.index(rc - 1, 3)
        self.tableFiz.setCurrentIndex(ind)
        self.toolButton_11.setEnabled(True)
        self.toolButton_9.setEnabled(True)

    def addRecFizAll(self) -> set:
        """Добавление значений из файла формата CSV (id_calcigefiz, labnum, par)"""
        kk = os.getcwd()  # Рабочий каталог
        file = self.setFile()
        if file is not None:
            try:
                ff = open(file)  # Открытие файла
                str1 = tuple(ff.readlines())    # Формирование кортежа из строк открытого файла
                ss = str1[0].split(',')
                ss = tuple(ss)                  # Формирование кортежа первой строки
                sscount = len(ss)
                if sscount == 2:
                    for j in range(0, sscount):
                        if j == 0:
                            num = str(ss[j])
                        else:
                            num = dc.Decimal(ss[j])
                else:
                    num = int('close')
            except:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Critical, "Геологічний калькулятор",
                                               "Вибраний файл не відповідає параметрам файлу для копіювання результатів випробувань ґрунтів представлених одним значенням."
                                               "\nПотрібен файл формату (*.CSV)")
                btnOK = QtWidgets.QPushButton("&OK")
                btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                result = self.formMassWin.exec()
            else:
                str3 = str()
                for i in range(0, len(str1)):       # Формирование нового исходного файла
                    str2 = (str(self.idIgeFiz) + ',' + str1[i])    # Добавление ID ИГЕ в начало каждой строки
                    str3 = str3 + str2      # Добавление строк в новый файл
                ff.close()
                kkff = kk + "/csv/calcfiz.csv"  # Полный путь к новому сформированому файлу
                ff = open(os.path.abspath(r"csv/calcfiz.csv"), "w") # Открытие файла для перезаписи
                ff.writelines(str3)     # Запись нового массива строк в файл
                ff.close()
                with UseDatebase(dbconfig) as curs:
                    curs.execute("COPY calcfiz (id_calcigefiz, labnum, par) FROM %(v1)s WITH CSV;",
                                 {'v1': kkff})
                self.refreshTableFiz()
        else:
            pass

    def addRecIge(self) -> set:
        """Добавляет строку в таблице ИГЭ+Схема срезных испытаний"""
        arrId = []
        i = 0
        for i in range(0, self.modelIGEShema.rowCount()):
            arrId.append(self.modelIGEShema.item(i, 0).data(QtCore.Qt.EditRole))
        if arrId == []:
            idIge = 0
        else:
            idIge = int(np.max(arrId))
        recone = []
        for j in range(0, 7):
            itm = QtGui.QStandardItem()
            if j == 0:
                itm.setData(idIge + 1, role=QtCore.Qt.EditRole)
            elif j == 2:
                itm.setData(idActivObekt, role=QtCore.Qt.EditRole)
            elif j == 3:
                itm.setCheckable(True)
                itm.setFlags(QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
                itm.setCheckState(QtCore.Qt.Checked)
            recone.append(itm)
        self.modelIGEShema.appendRow(recone)
        self.tableIGE.setEnabled(True)
        self.tableIGE.setFocus()
        rc = self.modelIGEShema.rowCount()
        ind = self.modelIGEShema.index(rc - 1, 4)
        self.tableIGE.setCurrentIndex(ind)
        self.toolButton_2.setEnabled(True)

    def addRecSrez(self) -> set:
        """Добавляет строку в таблицу результатов срезных испытаний"""
        arrId = []
        for i in range(0, self.modelSrez.rowCount()):
            arrId.append(self.modelSrez.item(i, 0).data(QtCore.Qt.EditRole))
        if arrId == []:
            idSrez = 0
        else:
            idSrez = int(np.max(arrId))
        recone = []
        for j in range(0, 6):
            itm = QtGui.QStandardItem()
            if j == 0:
                itm.setData(idSrez + 1, role=QtCore.Qt.EditRole)
            elif j == 1:
                itm.setData(self.idIge, role=QtCore.Qt.EditRole)
            elif j == 2:
                itm.setCheckable(True)
                itm.setFlags(QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
                itm.setCheckState(QtCore.Qt.Checked)
            recone.append(itm)
        self.modelSrez.appendRow(recone)
        self.tableSrez.setEnabled(True)
        self.tableSrez.setFocus()
        rc = self.modelSrez.rowCount()
        ind = self.modelSrez.index(rc - 1, 3)
        self.tableSrez.setCurrentIndex(ind)
        self.toolButton_4.setEnabled(True)
        self.toolButton_6.setEnabled(True)

    def addRecSrezAll(self) -> set:
        """Добавление замеров из файла формата CSV (id_calcige, labnum, nagruzka, sopr или
        id_calcige, labnum, tg_f, scep в зависимости от метода обработки результатов срезных испытаний)"""
        kk = os.getcwd()  # Рабочий каталог
        file = self.setFile()
        if file is not None:
            try:
                ff = open(file)  # Открытие файла
                str1 = tuple(ff.readlines())    # Формирование кортежа из строк открытого файла
                ss = str1[0].split(',')
                ss = tuple(ss)                  # Формирование кортежа первой строки
                sscount = len(ss)
                if sscount == 3:
                    for j in range(0, sscount):
                        if j == 0:
                            num = str(ss[j])
                        else:
                            num = dc.Decimal(ss[j])
                else:
                    num = int('close')
            except:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Critical, "Геологічний калькулятор",
                                               "Вибраний файл не відповідає параметрам файлу для копіювання результатів випробувань ґрунтів методом одноплощинного зрізу."
                                               "\nПотрібен файл формату (*.CSV)")
                btnOK = QtWidgets.QPushButton("&OK")
                btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                result = self.formMassWin.exec()
            else:
                str3 = str()
                for i in range(0, len(str1)):       # Формирование нового исходного файла
                    str2 = (str(self.idIge) + ',' + str1[i])    # Добавление ID ИГЕ в начало каждой строки
                    str3 = str3 + str2      # Добавление строк в новый файл
                ff.close()
                kkff = kk + "/csv/calcsrez.csv"  # Полный путь к новому сформированому файлу
                ff = open(os.path.abspath(r"csv/calcsrez.csv"), "w") # Открытие файла для переписания
                ff.writelines(str3)     # Запись нового массива строк в файл
                ff.close()
                if self.radioButton.isChecked():
                    with UseDatebase(dbconfig) as curs:
                        curs.execute("COPY calcsreztg (id_calcige, labnum, tg_f, scep) FROM %(v1)s WITH CSV;",
                                     {'v1': kkff})
                else:
                    with UseDatebase(dbconfig) as curs:
                        curs.execute("COPY calcsrez (id_calcige, labnum, nagruzka, sopr) FROM %(v1)s WITH CSV;",
                                     {'v1': kkff})
                self.refreshTableSrez()
        else:
            pass

    def addRecIgeCompres(self) -> set:
        """Добавляет строку в таблице ИГЭ+Схема компрессионных испытаний"""
        arrId = []
        i = 0
        for i in range(0, self.modelIGECompres.rowCount()):
            arrId.append(self.modelIGECompres.item(i, 0).data(QtCore.Qt.EditRole))
        if arrId == []:
            idIge = 0
        else:
            idIge = int(np.max(arrId))
        recone = []
        for j in range(0, 7):
            itm = QtGui.QStandardItem()
            if j == 0:
                itm.setData(idIge + 1, role=QtCore.Qt.EditRole)
            elif j == 2:
                itm.setData(idActivObekt, role=QtCore.Qt.EditRole)
            elif j == 3:
                itm.setCheckable(True)
                itm.setFlags(QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
                itm.setCheckState(QtCore.Qt.Checked)
            recone.append(itm)
        self.modelIGECompres.appendRow(recone)
        self.tableIGEcompres.setEnabled(True)
        self.tableIGEcompres.setFocus()
        rc = self.modelIGECompres.rowCount()
        ind = self.modelIGECompres.index(rc - 1, 4)
        self.tableIGEcompres.setCurrentIndex(ind)
        self.toolButton_14.setEnabled(True)

    def addRecCompres(self) -> set:
        """Добавляет строку в таблицу результатов компрессионных испытаний"""
        arrId = []
        for i in range(0, self.modelCompres.rowCount()):
            arrId.append(self.modelCompres.item(i, 0).data(QtCore.Qt.EditRole))
        if arrId == []:
            idCompres = 0
        else:
            idCompres = int(np.max(arrId))
        recone = []
        for j in range(0, 6):
            itm = QtGui.QStandardItem()
            if j == 0:
                itm.setData(idCompres + 1, role=QtCore.Qt.EditRole)
            elif j == 1:
                itm.setData(self.idIgecompres, role=QtCore.Qt.EditRole)
            elif j == 2:
                itm.setCheckable(True)
                itm.setFlags(QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
                itm.setCheckState(QtCore.Qt.Checked)
            recone.append(itm)
        self.modelCompres.appendRow(recone)
        self.tableCompres.setEnabled(True)
        self.tableCompres.setFocus()
        rc = self.modelCompres.rowCount()
        ind = self.modelCompres.index(rc - 1, 3)
        self.tableCompres.setCurrentIndex(ind)
        self.toolButton_17.setEnabled(True)
        self.toolButton_16.setEnabled(True)

    def addRecCompresAll(self) -> set:
        """Добавление замеров из файла формата CSV (id_calcige, labnum, nagruzka, otnsjat, betta или
        id_calcige, labnum, nagruzka, kfpor, betta в зависимости от метода обработки результатов компрессионных испытаний)"""
        kk = os.getcwd()  # Рабочий каталог
        file = self.setFile()
        if file is not None:
            try:
                ff = open(file)  # Открытие файла
                str1 = tuple(ff.readlines())    # Формирование кортежа из строк открытого файла
                ss = str1[0].split(',')
                ss = tuple(ss)                  # Формирование кортежа первой строки
                sscount = len(ss)
                if sscount == 4:
                    for j in range(0, sscount):
                        if j == 0:
                            num = str(ss[j])
                        else:
                            num = dc.Decimal(ss[j])
                else:
                    num = int('close')
            except:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Critical, "Геологічний калькулятор",
                                               "Вибраний файл не відповідає параметрам файлу для копіювання результатів випробувань ґрунтів методом компресійного стиску."
                                               "\nПотрібен файл формату (*.CSV)")
                btnOK = QtWidgets.QPushButton("&OK")
                btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                result = self.formMassWin.exec()
            else:
                str3 = str()
                for i in range(0, len(str1)):       # Формирование нового исходного файла
                    str2 = (str(self.idIgecompres) + ',' + str1[i])    # Добавление ID ИГЕ в начало каждой строки
                    str3 = str3 + str2      # Добавление строк в новый файл
                ff.close()
                kkff = kk + "/csv/calccompres.csv"  # Полный путь к новому сформированому файлу
                ff = open(os.path.abspath(r"csv/calccompres.csv"), "w") # Открытие файла для переписания
                ff.writelines(str3)     # Запись нового массива строк в файл
                ff.close()
                if self.radioButton_7.isChecked():
                    with UseDatebase(dbconfig) as curs:
                        curs.execute("COPY calccompres (id_calcigecompres, labnum, nagruzka, otnsjat, betta) FROM %(v1)s WITH CSV;",
                                     {'v1': kkff})
                else:
                    with UseDatebase(dbconfig) as curs:
                        curs.execute("COPY calccompres_e (id_calcigecompres, labnum, nagruzka, kfpor, betta) FROM %(v1)s WITH CSV;",
                                     {'v1': kkff})
                self.refreshTableCompres()
        else:
            pass

    def addRecIGE1(self) -> set:
        """Добавляет строку в таблицу характеристик первого ИГЭ"""
        recone = []
        for j in range(0, 2):
            itm = QtGui.QStandardItem()
            itm.setTextAlignment(QtCore.Qt.AlignCenter)
            if j == 0:
                itm.setData('', role=QtCore.Qt.EditRole)
            elif j == 1:
                itm.setData('0.0000', role=QtCore.Qt.EditRole)
            recone.append(itm)
        self.modelIGE1.appendRow(recone)
        self.tableIGE1.setEnabled(True)
        self.tableIGE1.setFocus()
        rc = self.modelIGE1.rowCount()
        ind = self.modelIGE1.index(rc - 1, 0)
        self.tableIGE1.setCurrentIndex(ind)
        self.toolButton_19.setEnabled(True)
        self.toolButton_22.setEnabled(True)
        self.spinBox_3.setValue(rc)

    def addRecIGE1All(self) -> set:
        """Добавление характеристик первого ИГЭ из файла формата CSV (labnum, value)"""
        file = self.setFile()   # Выбор CSV-файла для импорта
        if file is not None:
            try:
                ff = open(file)  # Открытие файла, его характеристики
                str1 = tuple(ff.readlines())    # Формирование кортежа из строк открытого файла
                ss = str1[0].split(',')
                ss = tuple(ss)                  # Формирование кортежа первой строки
                sscount = len(ss)
                if sscount == 2:                # Проверка первой строки на соответствие формату данных
                    for j in range(0, sscount):
                        if j == 0:
                            num = str(ss[j])
                        else:
                            num = dc.Decimal(ss[j])
                else:
                    num = int('close')
            except:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Critical, "Геологічний калькулятор",
                                               "Вибраний файл не відповідає параметрам файлу для копіювання результатів випробувань ґрунтів."
                                               "\nПотрібен файл формату (*.CSV)")
                btnOK = QtWidgets.QPushButton("&OK")
                btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                result = self.formMassWin.exec()
            else:
                ff.close()
                for i in range(0, len(str1)):
                    stri = str1[i].split(',')   # Список i-строки с символом перевода строки ('\n')
                    for j in range(0, 2):
                        itm = QtGui.QStandardItem()
                        self.modelIGE1.setItem(i, j, itm)
                        if j == 0:
                            itm.setData(str(stri[j]).strip(), role=QtCore.Qt.EditRole)
                        else:
                            strij = round(dc.Decimal(str(stri[j]).rstrip()), 4)
                            itm.setData(str(strij), role=QtCore.Qt.EditRole)
                        itm.setTextAlignment(QtCore.Qt.AlignCenter)
                self.refreshTableIGE1()
        else:
            pass

    def addRecIGE2(self) -> set:
        """Добавляет строку в таблицу характеристик второго ИГЭ"""
        recone = []
        for j in range(0, 2):
            itm = QtGui.QStandardItem()
            itm.setTextAlignment(QtCore.Qt.AlignCenter)
            if j == 0:
                itm.setData('', role=QtCore.Qt.EditRole)
            elif j == 1:
                itm.setData('0.0000', role=QtCore.Qt.EditRole)
            recone.append(itm)
        self.modelIGE2.appendRow(recone)
        self.tableIGE2.setEnabled(True)
        self.tableIGE2.setFocus()
        rc = self.modelIGE2.rowCount()
        ind = self.modelIGE2.index(rc - 1, 0)
        self.tableIGE2.setCurrentIndex(ind)
        self.toolButton_23.setEnabled(True)
        self.toolButton_26.setEnabled(True)
        self.spinBox_6.setValue(rc)

    def addRecIGE2All(self) -> set:
        """Добавление характеристик второго ИГЭ из файла формата CSV (labnum, value)"""
        file = self.setFile()   # Выбор CSV-файла для импорта
        if file is not None:
            try:
                ff = open(file)  # Открытие файла, его характеристики
                str1 = tuple(ff.readlines())    # Формирование кортежа из строк открытого файла
                ss = str1[0].split(',')
                ss = tuple(ss)                  # Формирование кортежа первой строки
                sscount = len(ss)
                if sscount == 2:                # Проверка первой строки на соответствие формату данных
                    for j in range(0, sscount):
                        if j == 0:
                            num = str(ss[j])
                        else:
                            num = dc.Decimal(ss[j])
                else:
                    num = int('close')
            except:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Critical, "Геологічний калькулятор",
                                               "Вибраний файл не відповідає параметрам файлу для копіювання результатів випробувань ґрунтів."
                                               "\nПотрібен файл формату (*.CSV)")
                btnOK = QtWidgets.QPushButton("&OK")
                btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                result = self.formMassWin.exec()
            else:
                ff.close()
                for i in range(0, len(str1)):
                    stri = str1[i].split(',')   # Список i-строки с символом перевода строки ('\n')
                    for j in range(0, 2):
                        itm = QtGui.QStandardItem()
                        self.modelIGE2.setItem(i, j, itm)
                        if j == 0:
                            itm.setData(str(stri[j]).strip(), role=QtCore.Qt.EditRole)
                        else:
                            strij = round(dc.Decimal(str(stri[j]).rstrip()), 4)
                            itm.setData(str(strij), role=QtCore.Qt.EditRole)
                        itm.setTextAlignment(QtCore.Qt.AlignCenter)
                self.refreshTableIGE2()
        else:
            pass

    def setFile(self) -> set:
        """Назначение файла для импорта данных результатов испытаний"""
        winFile = QtWidgets.QFileDialog(parent=None,
                                caption="Вибір файлу для імпорту",
                                directory=QtCore.QDir.currentPath() + '/csv',
                                filter="CSV (*.csv);;Всі файли (*)")
        winFile.setAcceptMode(0)
        winFile.setLabelText(1, "Ім'я файлу")
        winFile.setLabelText(3, "Відкрити")
        winFile.setLabelText(4, "Відміна")
        result = winFile.exec()
        if result == QtWidgets.QDialog.Accepted:
            ff = winFile.selectedFiles()[0]
        else:
            ff = None
        return ff

    def delRecIgeFiz(self) -> set:
        """Удаляет одну строку из таблицы ИГЭ+Физсвойства"""
        i = self.tableIGEFiz.currentIndex().row()
        if i is None or i == -1:
            pass
        else:
            idIgefiz = self.modelIGEFiz.item(i, 0).data(QtCore.Qt.EditRole)
            with UseDatebase(dbconfig) as curs:
                curs.execute("DELETE FROM calcigefiz WHERE id = %(v0)s;", {'v0': idIgefiz})
        self.requeryIgeFiz()
        self.refreshTableIgeFiz()

    def delRecFiz(self) -> set:
        """Удаляет одну строку из таблицы результатов испытаний представленных одним значением"""
        i = self.tableFiz.currentIndex().row()
        if i is None or i == -1:
            pass
        else:
            idFiz = self.modelFiz.item(i, 0).data(QtCore.Qt.EditRole)
            with UseDatebase(dbconfig) as curs:
                curs.execute("DELETE FROM calcfiz WHERE id = %(v0)s;", {'v0': idFiz})
        self.requeryFiz()
        self.refreshTableFiz()

    def delRecFizAll(self) -> set:
        """Удаляет все замеры из таблицы результатов испытаний представленных одним значением текущего ИГЭ"""
        with UseDatebase(dbconfig) as curs:
            curs.execute("""DELETE FROM calcfiz 
                            WHERE id_calcigefiz = %(v1)s;""",
                         {'v1': self.idIgeFiz})
        self.refreshTableFiz()

    def delRecIge(self) -> set:
        """Удаляет одну строку из таблицы ИГЭ+Схема"""
        i = self.tableIGE.currentIndex().row()
        if i is None or i == -1:
            pass
        else:
            idIge = self.modelIGEShema.item(i, 0).data(QtCore.Qt.EditRole)
            with UseDatebase(dbconfig) as curs:
                curs.execute("DELETE FROM calcige WHERE id = %(v0)s;", {'v0': idIge})
        self.requeryIge()
        self.refreshTableIge()

    def delRecSrez(self) -> set:
        """Удаляет одну строку из таблицы результатов срезных испытаний"""
        if self.radioButton.isChecked():
            i = self.tableSrez.currentIndex().row()
            if i is None or i == -1:
                pass
            else:
                idSrez = self.modelSrez.item(i, 0).data(QtCore.Qt.EditRole)
                with UseDatebase(dbconfig) as curs:
                    curs.execute("DELETE FROM calcsreztg WHERE id = %(v0)s;", {'v0': idSrez})
        elif self.radioButton_2.isChecked() or self.radioButton_3.isChecked() or self.radioButton_4.isChecked():
            i = self.tableSrez.currentIndex().row()
            if i is None or i == -1:
                pass
            else:
                idSrez = self.modelSrez.item(i, 0).data(QtCore.Qt.EditRole)
                with UseDatebase(dbconfig) as curs:
                    curs.execute("DELETE FROM calcsrez WHERE id = %(v0)s;", {'v0': idSrez})
        self.requerySrez()
        self.refreshTableSrez()

    def delRecSrezAll(self) -> set:
        """Удаляет все замеры из таблицы результатов срезных испытаний текущего ИГЭ"""
        if self.radioButton.isChecked():
            with UseDatebase(dbconfig) as curs:
                curs.execute("""DELETE FROM calcsreztg 
                                WHERE id_calcige = %(v1)s;""",
                             {'v1': self.idIge})
        elif self.radioButton_2.isChecked() or self.radioButton_3.isChecked() or self.radioButton_4.isChecked():
            with UseDatebase(dbconfig) as curs:
                curs.execute("""DELETE FROM calcsrez 
                                WHERE id_calcige = %(v1)s;""",
                             {'v1': self.idIge})
        self.refreshTableSrez()

    def delRecIgeCompres(self) -> set:
        """Удаляет одну строку из таблицы ИГЭ+Схема компрессионных испытаний"""
        i = self.tableIGEcompres.currentIndex().row()
        if i is None or i == -1:
            pass
        else:
            idIge = self.modelIGECompres.item(i, 0).data(QtCore.Qt.EditRole)
            with UseDatebase(dbconfig) as curs:
                curs.execute("DELETE FROM calcigecompres WHERE id = %(v0)s;", {'v0': idIge})
        self.requeryIgecompres()
        self.refreshTableIgeCompres()

    def delRecCompres(self) -> set:
        """Удаляет одну строку из таблицы результатов компрессионных испытаний"""
        if self.radioButton_7.isChecked():
            i = self.tableCompres.currentIndex().row()
            if i is None or i == -1:
                pass
            else:
                idCompres = self.modelCompres.item(i, 0).data(QtCore.Qt.EditRole)
                with UseDatebase(dbconfig) as curs:
                    curs.execute("DELETE FROM calccompres WHERE id = %(v0)s;", {'v0': idCompres})
        elif self.radioButton_8.isChecked():
            i = self.tableCompres.currentIndex().row()
            if i is None or i == -1:
                pass
            else:
                idCompres = self.modelCompres.item(i, 0).data(QtCore.Qt.EditRole)
                with UseDatebase(dbconfig) as curs:
                    curs.execute("DELETE FROM calccompres_e WHERE id = %(v0)s;", {'v0': idCompres})
        self.requeryCompres()
        self.refreshTableCompres()

    def delRecCompresAll(self) -> set:
        """Удаляет все замеры из таблицы результатов компрессионных испытаний текущего ИГЭ"""
        if self.radioButton_7.isChecked():
            with UseDatebase(dbconfig) as curs:
                curs.execute("""DELETE FROM calccompres 
                                WHERE id_calcigecompres = %(v1)s;""",
                             {'v1': self.idIgecompres})
        elif self.radioButton_8.isChecked():
            with UseDatebase(dbconfig) as curs:
                curs.execute("""DELETE FROM calccompres_e 
                                WHERE id_calcigecompres = %(v1)s;""",
                             {'v1': self.idIgecompres})
        self.refreshTableCompres()

    def delRecIGE1(self) -> set:
        """Удаляет одну строку из таблицы характеристик первого ИГЭ"""
        i = self.tableIGE1.currentIndex().row()
        if i is None or i == -1:
            pass
        else:
            self.modelIGE1.removeRow(i)
        rc = self.modelIGE1.rowCount()
        self.spinBox_3.setValue(rc)
        if rc == 0:
            self.tableIGE1.setEnabled(False)

    def delRecIGE2(self) -> set:
        """Удаляет одну строку из таблицы характеристик второго ИГЭ"""
        i = self.tableIGE2.currentIndex().row()
        if i is None or i == -1:
            pass
        else:
            self.modelIGE2.removeRow(i)
        rc = self.modelIGE2.rowCount()
        self.spinBox_6.setValue(rc)
        if rc == 0:
            self.tableIGE2.setEnabled(False)

    def delRecIGE1All(self) -> set:
        """Удаляет все строки из таблицы характеристик первого ИГЭ"""
        i = self.modelIGE1.rowCount()
        self.modelIGE1.removeRows(0, i)
        self.tableIGE1.setEnabled(False)
        self.toolButton_19.setEnabled(False)
        self.toolButton_22.setEnabled(False)
        self.spinBox_3.setValue(0)

    def delRecIGE2All(self) -> set:
        """Удаляет все строки из таблицы характеристик второго ИГЭ"""
        i = self.modelIGE2.rowCount()
        self.modelIGE2.removeRows(0, i)
        self.tableIGE2.setEnabled(False)
        self.toolButton_23.setEnabled(False)
        self.toolButton_26.setEnabled(False)
        self.spinBox_6.setValue(0)

    def asktoSave(self) -> set:
        """Проверяет наличие изменений в геологическом калькуляторе для активной страницы"""
        if self.currentIndex() == 0:
            askTableIgeFiz = self.asktoSaveTableIgeFiz()
            askTableFiz = self.asktoSaveTableFiz()
            if askTableIgeFiz[0] == False:  # В таблице ИГЕ+Физсвойства есть изменения
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question, "Геологічний калькулятор",
                                               "Є незбережені дані у таблиці ІГЕ та характеристик випробування зразків представлених однією величиною. "
                                               "\nВи бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecordIgeFiz()
                else:
                    pass
            if askTableFiz[0] == False:  # В таблице результатов випробування зразків есть изменения
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question, "Геологічний калькулятор",
                                               "Є незбережені дані у таблиці результатів випробування зразків. "
                                               "\nВи бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecordFiz()
                else:
                    pass
        elif self.currentIndex() == 1:
            askTableIge = self.asktoSaveTableIge()
            askTableSrez = self.asktoSaveTableSrez()
            if askTableIge[0] == False:  # В таблице ИГЕ+Схема есть изменения
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question, "Геологічний калькулятор",
                                               "Є незбережені дані у таблиці ІГЕ та схеми випробування зразків методом одноплощинного зрізу. "
                                               "\nВи бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecordIge()
                else:
                    pass
            if askTableSrez[0] == False:  # В таблице результатов срезных испытаний есть изменения
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question, "Геологічний калькулятор",
                                               "Є незбережені дані у таблиці результатів випробування зразків методом одноплощинного зрізу. "
                                               "\nВи бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecordSrez()
                else:
                    pass
        elif self.currentIndex() == 2:
            pass
        elif self.currentIndex() == 3:
            askTableIgeCompres = self.asktoSaveTableIgeCompres()
            askTableCompres = self.asktoSaveTableCompres()
            if askTableIgeCompres[0] == False:  # В таблице ИГЕ+Схема есть изменения
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question, "Геологічний калькулятор",
                                               "Є незбережені дані у таблиці ІГЕ та схеми випробування зразків методом компресійного стиску. "
                                               "\nВи бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecordIgeCompres()
                else:
                    pass
            if askTableCompres[0] == False:  # В таблице результатов компрессионных испытаний есть изменения
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question, "Геологічний калькулятор",
                                               "Є незбережені дані у таблиці результатів випробування зразків методом компресійного стиску. "
                                               "\nВи бажаєте їх зберегти?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.saveRecordCompres()
                else:
                    pass
        elif self.currentIndex() == 4:
            pass
        else:
            pass

    def asktoSaveTableIgeFiz(self) -> set:
        """Проверка наличия изменений в таблице ИГЭ_Физхарактеристика
        Считывание данных и обновление списка ИГЭ_Физхарактеристика согласно значений экранной формы"""
        self.recAllNewIgeFiz = []
        for i in range(0, self.modelIGEFiz.rowCount()):
            recone = []
            for j in range(0, 7):
                self.modelIGEFiz.item(i, 1).setData(self.modelIGEFiz.item(i, 6).data(QtCore.Qt.UserRole),
                                                      role=QtCore.Qt.EditRole)
                el = self.modelIGEFiz.item(i, j).data(QtCore.Qt.EditRole) # Определение элемента текущей записи
                if j == 3:
                    if self.modelIGEFiz.item(i, j).checkState() == 2:
                        el = True
                    else:
                        el = False
                recone.append(el)  # Формирование текущей записи из элементов
            recone = tuple(recone)
            self.recAllNewIgeFiz.append(recone)  # Формирование обновленного списка (записей-кортежей)
        if self.recAllNewIgeFiz == self.recAllOldIgeFiz:
            askIgeFiz = True
        else:
            askIgeFiz = False
        countAddIgeFiz = self.modelIGEFiz.rowCount() - self.recCountIgeFiz  # Количество добавленных строк в таблицу
        return askIgeFiz, countAddIgeFiz

    def asktoSaveTableFiz(self) -> set:
        """Проверка наличия изменений в таблице значений физических характеристик
        Считывание данных и обновление списка значений физических характеристик согласно значений экранной формы"""
        self.recAllNewFiz = []
        for i in range(0, self.modelFiz.rowCount()):
            recone = []
            for j in range(0, 5):
                el = self.modelFiz.item(i, j).data(QtCore.Qt.EditRole)  # Определение элемента текущей записи
                if j == 2:
                    if self.modelFiz.item(i, j).checkState() == 2:
                        el = True
                    else:
                        el = False
                elif j == 3:
                    el = str(el)
                elif j > 3:
                    if el == 'None' or el == '-':
                        el = None
                    else:
                        el = dc.Decimal(el)
                recone.append(el)  # Формирование текущей записи из элементов
            recone = tuple(recone)
            self.recAllNewFiz.append(recone)  # Формирование обновленного списка (записей-кортежей)
        if self.recAllNewFiz == self.recAllOldFiz:
            askFiz = True
        else:
            askFiz = False
        countAddFiz = self.modelFiz.rowCount() - self.recCountFiz  # Количество добавленных строк в таблицу
        return askFiz, countAddFiz

    def asktoSaveTableIge(self) -> set:
        """Проверка наличия изменений в таблице ИГЭ_Схема испытаний
        Считывание данных и обновление списка ИГЭ_Схема испытаний согласно значений экранной формы"""
        self.recAllNewIge = []
        for i in range(0, self.modelIGEShema.rowCount()):
            recone = []
            for j in range(0, 7):
                self.modelIGEShema.item(i, 1).setData(self.modelIGEShema.item(i, 6).data(QtCore.Qt.UserRole),
                                                      role=QtCore.Qt.EditRole)
                el = self.modelIGEShema.item(i, j).data(QtCore.Qt.EditRole) # Определение элемента текущей записи
                if j == 3:
                    if self.modelIGEShema.item(i, j).checkState() == 2:
                        el = True
                    else:
                        el = False
                recone.append(el)  # Формирование текущей записи из элементов
            recone = tuple(recone)
            self.recAllNewIge.append(recone)  # Формирование обновленного списка (записей-кортежей)
        if self.recAllNewIge == self.recAllOldIge:
            askIge = True
        else:
            askIge = False
        countAddIge = self.modelIGEShema.rowCount() - self.recCountIge  # Количество добавленных строк в таблицу ИГЭ+Схема
        return askIge, countAddIge

    def asktoSaveTableSrez(self) -> set:
        """Проверка наличия изменений в таблице результатов срезных испытаний
        Считывание данных и обновление списка срезных испытаний согласно значений экранной формы"""
        self.recAllNewSrez = []
        for i in range(0, self.modelSrez.rowCount()):
            recone = []
            for j in range(0, 6):
                el = self.modelSrez.item(i, j).data(QtCore.Qt.EditRole)  # Определение элемента текущей записи
                if j == 2:
                    if self.modelSrez.item(i, j).checkState() == 2:
                        el = True
                    else:
                        el = False
                elif j == 3:
                    el = str(el)
                elif j > 3:
                    if el == 'None' or el == '-':
                        el = None
                    else:
                        el = dc.Decimal(el)
                recone.append(el)  # Формирование текущей записи из элементов
            recone = tuple(recone)
            self.recAllNewSrez.append(recone)  # Формирование обновленного списка (записей-кортежей)
        if self.recAllNewSrez == self.recAllOldSrez:
            askSrez = True
        else:
            askSrez = False
        countAddSrez = self.modelSrez.rowCount() - self.recCountSrez  # Количество добавленных строк в таблицу ИГЭ+Схема
        return askSrez, countAddSrez

    def asktoSaveTableIgeCompres(self) -> set:
        """Проверка наличия изменений в таблице ИГЭ_Схема компрессионных испытаний
        Считывание данных и обновление списка ИГЭ_Схема компрессионных испытаний согласно значений экранной формы"""
        self.recAllNewIgeCompres = []
        for i in range(0, self.modelIGECompres.rowCount()):
            recone = []
            for j in range(0, 7):
                self.modelIGECompres.item(i, 1).setData(self.modelIGECompres.item(i, 6).data(QtCore.Qt.UserRole),
                                                      role=QtCore.Qt.EditRole)
                el = self.modelIGECompres.item(i, j).data(QtCore.Qt.EditRole) # Определение элемента текущей записи
                if j == 3:
                    if self.modelIGECompres.item(i, j).checkState() == 2:
                        el = True
                    else:
                        el = False
                recone.append(el)  # Формирование текущей записи из элементов
            recone = tuple(recone)
            self.recAllNewIgeCompres.append(recone)  # Формирование обновленного списка (записей-кортежей)
        if self.recAllNewIgeCompres == self.recAllOldIgeCompres:
            askIgeCompres = True
        else:
            askIgeCompres = False
        countAddIgeCompres = self.modelIGECompres.rowCount() - self.recCountIgecompres  # Количество добавленных строк в таблицу ИГЭ+Схема
        return askIgeCompres, countAddIgeCompres

    def asktoSaveTableCompres(self) -> set:
        """Проверка наличия изменений в таблице результатов компрессионных испытаний
        Считывание данных и обновление списка компрессионных испытаний согласно значений экранной формы"""
        self.recAllNewCompres = []
        for i in range(0, self.modelCompres.rowCount()):
            recone = []
            for j in range(0, 7):
                el = self.modelCompres.item(i, j).data(QtCore.Qt.EditRole)  # Определение элемента текущей записи
                if j == 2:
                    if self.modelCompres.item(i, j).checkState() == 2:
                        el = True
                    else:
                        el = False
                elif j == 3:
                    el = str(el)
                elif j > 3:
                    if el == 'None' or el == '-':
                        el = None
                    else:
                        el = dc.Decimal(el)
                recone.append(el)  # Формирование текущей записи из элементов
            recone = tuple(recone)
            self.recAllNewCompres.append(recone)  # Формирование обновленного списка (записей-кортежей)
        if self.recAllNewCompres == self.recAllOldCompres:
            askCompres = True
        else:
            askCompres = False
        countAddCompres = self.modelCompres.rowCount() - self.recCountCompres  # Количество добавленных строк в таблицу ИГЭ+Схема
        return askCompres, countAddCompres

    def readTableIge(self, mod) -> set:
        """Чтение таблицы ИГЭ+схема всех испытаний и сохранение информации в списке
        mod - модель"""
        recall = []
        for i in range(0, mod.rowCount()):
            recone = []
            for j in range(0, 6):
                if j == 3:
                    if mod.item(i, j).checkState() == 2:
                        val = True
                    else:
                        val = False
                else:
                    val = mod.item(i, j).data(QtCore.Qt.EditRole)
                recone.append(val)
            recall.append(recone)
        return recall

    def readIGE(self, mod) -> set:
        """Чтение таблицы характеристик грунтов ИГЭ (первго и второго)
        для проверки разделения или объединения и сохранение информации в списке
        mod - модель"""
        recall = []
        for i in range(0, mod.rowCount()):
            for j in range(0, 2):
                if j == 1:
                    val = float(mod.item(i, j).data(QtCore.Qt.EditRole))
            recall.append(val)
        return recall

    def saveAll(self) -> set:
        """Сохраняет изменения по нажатию кнопки Сохранить на панели инструментов"""
        if self.currentIndex() == 0:
            indexIgeFiz = self.tableIGEFiz.currentIndex()
            self.saveRecordIgeFiz()
            self.tableIGEFiz.setCurrentIndex(indexIgeFiz)
            self.saveRecordFiz()
            self.tableIGEFiz.setCurrentIndex(indexIgeFiz)
            self.selmodelIGEFiz.select(indexIgeFiz, QtCore.QItemSelectionModel.Select)
            self.indexTableFiz()
        elif self.currentIndex() == 1:
            indexIge = self.tableIGE.currentIndex()
            self.saveRecordIge()
            self.tableIGE.setCurrentIndex(indexIge)
            self.saveRecordSrez()
            self.tableIGE.setCurrentIndex(indexIge)
            self.selmodelIGEShema.select(indexIge, QtCore.QItemSelectionModel.Select)
            self.indexTableSrez()
        elif self.currentIndex() == 2:
            pass
        elif self.currentIndex() == 3:
            indexIgeCompres = self.tableIGEcompres.currentIndex()
            self.saveRecordIgeCompres()
            self.tableIGEcompres.setCurrentIndex(indexIgeCompres)
            self.saveRecordCompres()
            self.tableIGEcompres.setCurrentIndex(indexIgeCompres)
            self.selmodelIGECompres.select(indexIgeCompres, QtCore.QItemSelectionModel.Select)
            self.indexTableCompres()
        elif self.currentIndex() == 4:
            pass
        else:
            pass
        pass

    def saveRecordIgeFiz(self) -> set:
        """Сохранение записей таблицы ИГЭ+Физсвойства"""
        ask = self.asktoSaveTableIgeFiz()
        if ask[1] > 0:
            with UseDatebase(dbconfig) as curs:
                curs.execute("""INSERT INTO calcigefiz (id_obekt, schet) 
                                SELECT %(v2)s, true FROM generate_series(1, %(v0)s);""",
                                {'v2': idActivObekt, 'v0': ask[1]})
        if ask[0] == False:
            for i in range(0, self.modelIGEFiz.rowCount()):
                recone = []
                for j in range(0, 6):
                    if j == 3:
                        if self.modelIGEFiz.item(i, j).checkState() == 2:
                            val = True
                        else:
                            val = False
                    else:
                        val = self.modelIGEFiz.item(i, j).data(QtCore.Qt.EditRole)
                    recone.append(val)
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE calcigefiz  
                                    SET id_harakter = %(v1)s, 
                                        id_obekt = %(v2)s, 
                                        schet = %(v3)s, 
                                        ige = %(v4)s, 
                                        grunt = %(v5)s
                                    WHERE id = %(v0)s;""",
                                 {'v1': recone[1], 'v2': recone[2], 'v3': recone[3],
                                  'v4': recone[4], 'v5': recone[5], 'v0': recone[0]})
        else:
            pass
        self.refreshTableIgeFiz()

    def saveRecordFiz(self) -> set:
        """Сохранение записей в таблице результатов испытаний"""
        ask = self.asktoSaveTableFiz()
        if ask[1] > 0:
            with UseDatebase(dbconfig) as curs:
                curs.execute("""INSERT INTO calcfiz (id_calcigefiz, schet) 
                                        SELECT %(v1)s, true FROM generate_series(1, %(v0)s);""",
                             {'v1': self.idIgeFiz, 'v0': ask[1]})
        if ask[0] == False:
            for i in range(0, self.modelFiz.rowCount()):
                recone = []
                for j in range(0, 5):
                    val = self.modelFiz.item(i, j).data(QtCore.Qt.EditRole)
                    if j == 2:
                        if self.modelFiz.item(i, j).checkState() == 2:
                            val = True
                        else:
                            val = False
                    elif j == 3:
                        val = str(val)
                    elif j > 3:
                        if val == 'None' or val == '-':
                            val = None
                        else:
                            val = dc.Decimal(val)
                    recone.append(val)
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE calcfiz  
                                            SET id_calcigefiz = %(v1)s, 
                                                schet = %(v2)s, 
                                                labnum = %(v3)s, 
                                                par = %(v4)s
                                            WHERE id = %(v0)s;""",
                                 {'v1': recone[1], 'v2': recone[2], 'v3': recone[3],
                                  'v4': recone[4], 'v0': recone[0]})
        else:
            pass

    def saveRecordIge(self) -> set:
        """Сохранение записей таблицы ИГЭ+Схема испытаний"""
        ask = self.asktoSaveTableIge()
        if ask[1] > 0:
            with UseDatebase(dbconfig) as curs:
                curs.execute("""INSERT INTO calcige (id_obekt, schet) 
                                SELECT %(v2)s, true FROM generate_series(1, %(v0)s);""",
                                {'v2': idActivObekt, 'v0': ask[1]})
        if ask[0] == False:
            for i in range(0, self.modelIGEShema.rowCount()):
                recone = []
                for j in range(0, 6):
                    if j == 3:
                        if self.modelIGEShema.item(i, j).checkState() == 2:
                            val = True
                        else:
                            val = False
                    else:
                        val = self.modelIGEShema.item(i, j).data(QtCore.Qt.EditRole)
                    recone.append(val)
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE calcige  
                                    SET id_harakter = %(v1)s, 
                                        id_obekt = %(v2)s, 
                                        schet = %(v3)s, 
                                        ige = %(v4)s, 
                                        grunt = %(v5)s
                                    WHERE id = %(v0)s;""",
                                 {'v1': recone[1], 'v2': recone[2], 'v3': recone[3],
                                  'v4': recone[4], 'v5': recone[5], 'v0': recone[0]})
        else:
            pass
        self.refreshTableIge()

    def saveRecordSrez(self) -> set:
        """Сохранение записей в таблице результатов срезных испытаний"""
        ask = self.asktoSaveTableSrez()
        if ask[1] > 0:
            if self.radioButton.isChecked():
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""INSERT INTO calcsreztg (id_calcige, schet) 
                                            SELECT %(v1)s, true FROM generate_series(1, %(v0)s);""",
                                 {'v1': self.idIge, 'v0': ask[1]})
            elif self.radioButton_2.isChecked() or self.radioButton_3.isChecked() or self.radioButton_4.isChecked():
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""INSERT INTO calcsrez (id_calcige, schet) 
                                            SELECT %(v1)s, true FROM generate_series(1, %(v0)s);""",
                                 {'v1': self.idIge, 'v0': ask[1]})
        if ask[0] == False:
            if self.radioButton.isChecked():
                for i in range(0, self.modelSrez.rowCount()):
                    recone = []
                    for j in range(0, 6):
                        val = self.modelSrez.item(i, j).data(QtCore.Qt.EditRole)
                        if j == 2:
                            if self.modelSrez.item(i, j).checkState() == 2:
                                val = True
                            else:
                                val = False
                        elif j == 3:
                            val = str(val)
                        elif j > 3:
                            if val == 'None' or val == '-':
                                val = None
                            else:
                                val = dc.Decimal(val)
                        recone.append(val)
                    with UseDatebase(dbconfig) as curs:
                        curs.execute("""UPDATE calcsreztg  
                                                SET id_calcige = %(v1)s, 
                                                    schet = %(v2)s, 
                                                    labnum = %(v3)s, 
                                                    tg_f = %(v4)s,
                                                    scep = %(v5)s
                                                WHERE id = %(v0)s;""",
                                     {'v1': recone[1], 'v2': recone[2], 'v3': recone[3],
                                      'v4': recone[4], 'v5': recone[5], 'v0': recone[0]})
            elif self.radioButton_2.isChecked() or self.radioButton_3.isChecked() or self.radioButton_4.isChecked():
                for i in range(0, self.modelSrez.rowCount()):
                    recone = []
                    for j in range(0, 6):
                        val = self.modelSrez.item(i, j).data(QtCore.Qt.EditRole)
                        if j == 2:
                            if self.modelSrez.item(i, j).checkState() == 2:
                                val = True
                            else:
                                val = False
                        elif j == 3:
                            val = str(val)
                        elif j > 3:
                            if val == 'None' or val == '-':
                                val = None
                            else:
                                val = dc.Decimal(val)
                        recone.append(val)
                    with UseDatebase(dbconfig) as curs:
                        curs.execute("""UPDATE calcsrez  
                                                SET id_calcige = %(v1)s, 
                                                    schet = %(v2)s, 
                                                    labnum = %(v3)s, 
                                                    nagruzka = %(v4)s,
                                                    sopr = %(v5)s
                                                WHERE id = %(v0)s;""",
                                     {'v1': recone[1], 'v2': recone[2], 'v3': recone[3],
                                      'v4': recone[4], 'v5': recone[5], 'v0': recone[0]})
        else:
            pass

    def saveRecordIgeCompres(self) -> set:
        """Сохранение записей таблицы ИГЭ+Схема компрессионных испытаний"""
        ask = self.asktoSaveTableIgeCompres()
        mod = self.modelIGECompres
        recallold = self.readTableIge(mod)
        if ask[1] > 0:
            with UseDatebase(dbconfig) as curs:
               curs.execute("""INSERT INTO calcigecompres (id_obekt, schet)
                                SELECT %(v2)s, true FROM generate_series(1, %(v0)s);""",
                                {'v2': idActivObekt, 'v0': ask[1]})
            self.refreshTableIgeCompres()
        if ask[0] == False:
            recall = self.readTableIge(mod)
            for i in range(0, self.modelIGECompres.rowCount()):
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""UPDATE calcigecompres  
                                    SET id_harakter = %(v1)s, 
                                        id_obekt = %(v2)s, 
                                        schet = %(v3)s, 
                                        ige = %(v4)s, 
                                        grunt = %(v5)s
                                    WHERE id = %(v0)s;""",
                                 {'v1': recallold[i][1], 'v2': recallold[i][2], 'v3': recallold[i][3],
                                  'v4': recallold[i][4], 'v5': recallold[i][5], 'v0': recall[i][0]})
        else:
            pass
        self.refreshTableIgeCompres()

    def saveRecordCompres(self) -> set:
        """Сохранение записей в таблице результатов компрессионных испытаний"""
        ask = self.asktoSaveTableCompres()
        if ask[1] > 0:
            if self.radioButton_7.isChecked():
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""INSERT INTO calccompres (id_calcigecompres, schet) 
                                            SELECT %(v1)s, true FROM generate_series(1, %(v0)s);""",
                                 {'v1': self.idIgecompres, 'v0': ask[1]})
            elif self.radioButton_8.isChecked():
                with UseDatebase(dbconfig) as curs:
                    curs.execute("""INSERT INTO calccompres_e (id_calcigecompres, schet) 
                                            SELECT %(v1)s, true FROM generate_series(1, %(v0)s);""",
                                 {'v1': self.idIgecompres, 'v0': ask[1]})
        if ask[0] == False:
            if self.radioButton_7.isChecked():
                for i in range(0, self.modelCompres.rowCount()):
                    recone = []
                    for j in range(0, 7):
                        val = self.modelCompres.item(i, j).data(QtCore.Qt.EditRole)
                        if j == 2:
                            if self.modelCompres.item(i, j).checkState() == 2:
                                val = True
                            else:
                                val = False
                        elif j == 3:
                            val = str(val)
                        elif j > 3:
                            if val == 'None' or val == '-':
                                val = None
                            else:
                                val = dc.Decimal(val)
                        recone.append(val)
                    with UseDatebase(dbconfig) as curs:
                        curs.execute("""UPDATE calccompres  
                                                SET id_calcigecompres = %(v1)s, 
                                                    schet = %(v2)s, 
                                                    labnum = %(v3)s, 
                                                    nagruzka = %(v4)s,
                                                    otnsjat = %(v5)s,
                                                    betta = %(v6)s
                                                WHERE id = %(v0)s;""",
                                     {'v1': recone[1], 'v2': recone[2], 'v3': recone[3],
                                      'v4': recone[4], 'v5': recone[5], 'v6': recone[6], 'v0': recone[0]})
            elif self.radioButton_8.isChecked():
                for i in range(0, self.modelCompres.rowCount()):
                    recone = []
                    for j in range(0, 7):
                        val = self.modelCompres.item(i, j).data(QtCore.Qt.EditRole)
                        if j == 2:
                            if self.modelCompres.item(i, j).checkState() == 2:
                                val = True
                            else:
                                val = False
                        elif j == 3:
                            val = str(val)
                        elif j > 3:
                            if val == 'None' or val == '-':
                                val = None
                            else:
                                val = dc.Decimal(val)
                        recone.append(val)
                    with UseDatebase(dbconfig) as curs:
                        curs.execute("""UPDATE calccompres_e  
                                                SET id_calcigecompres = %(v1)s, 
                                                    schet = %(v2)s, 
                                                    labnum = %(v3)s, 
                                                    nagruzka = %(v4)s,
                                                    kfpor = %(v5)s,
                                                    betta = %(v6)s
                                                WHERE id = %(v0)s;""",
                                     {'v1': recone[1], 'v2': recone[2], 'v3': recone[3],
                                      'v4': recone[4], 'v5': recone[5], 'v6': recone[6], 'v0': recone[0]})
        else:
            pass

    def getParametr(self) -> set:
        """Выбор параметров отчета"""
        formPar = Report_par()
        formPar.exec()
        parId = formPar.setPar()
        return parId

    def getReport(self, nameReport, formatF) -> set:
        """Создание отчета по заданым параметрам"""
        par = self.getParametr()
        if par == '':
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "Формування звіту",
                                           "Не обрано параметрів звіту. "
                                           "Необхідно вибрати параметри звіту (об'єкт або зразки)")
            btnOK = QtWidgets.QPushButton("&OK")
            btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
            result = self.formMassWin.exec()
            outPar = False  # Параметры отчета не указаны
        else:
            with UseDatebase(dbconfig) as curs:
                curs.execute("CREATE OR REPLACE VIEW idobekt (id, numdoc, sost, sost_2, prover, prover_2) AS (VALUES " + par + ")")
            outPar = True   # Параметры отчета указаны

        if nameReport is not None and len(nameReport) > 1:
            input_file = os.path.dirname(os.path.abspath(__file__)) + \
                         '/reports/' + nameReport
            output = os.path.dirname(os.path.abspath(__file__)) + '/reports/outreport/calczvit'
            con = {
                'driver': 'postgres',
                'locale': 'uk_UA',
                'username': 'vik',
                'password': '123',
                'host': 'localhost',
                'database': 'enggeo',
                'schema': 'public',
                'port': '5432'
            }
            jasper = JasperPy()   # PyReportJasper() в новой версии pyreportjasper 2.1.2
            jasper.process(input_file,
                           output_file=output,
                           format_list=[formatF],
                           db_connection=con,
                           locale='uk_UA')
        else:
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "Формування звіту",
                                           "Не обрано звіт. Необхідно вибрати звіт з переліку")
            btnOK = QtWidgets.QPushButton("&OK")
            btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
            result = self.formMassWin.exec()
        if outPar == True:
            self.testOutFile(output, formatF)

    def testOutFile(self, output, formatF) -> set:
        """Проверка наполнения файла и его просмотр"""
        with open(output + '.' + formatF, 'rb') as fileOut:
            lines = fileOut.readlines() # Считывание содержимого файла в список
            if len(lines) < 35:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "Формування звіту",
                                               "Вихідні дані для звіту не виявлено. Отримано порожній або не повний звіт."
                                               "\nЗвіт можна переглянути за адресою: " + output + '.' + formatF)
                btnOK = QtWidgets.QPushButton("&OK")
                btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                result = self.formMassWin.exec()
            else:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information, "Формування звіту",
                                               "Звіт сформовано."
                                               "\nЗвіт можна переглянути за адресою: " + output + '.' + formatF +
                                               ". \nБажаєте переглянути звіт зараз?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    try:
                        subprocess.call(["xdg-open", output + '.pdf'])  # Отображение содержимого файла в Просмотр документа
                    except:
                        webbrowser.open_new(output + '.pdf')  # Отображение содержимого файла в назначеном по умолчанию browser
                else:
                    pass
            fileOut.close()


class MainWindow(QtWidgets.QMainWindow, egclasswin.Ui_EGMainWindow):
    def __init__(self) -> set:
        """Инициализация главного окна"""
        super().__init__()
        global idActivObekt
        idActivObekt = None
        self.ispolwin = None
        self.tipburwin = None
        self.firmawin = None
        self.customerwin = None
        self.obektwin = None
        self.komerchdwin = None
        self.dogovordwin = None
        self.bureholewin = None
        self.szondwin = None
        self.granwin = None
        self.pesokwin = None
        self.glinawin = None
        self.skalawin = None
        self.agressgruntwin = None
        self.agressvodawin = None
        self.srezwin = None
        self.compreswin = None
        self.prosadwin = None
        self.nabuhwin = None
        self.usadkawin = None
        self.calcgeowin = None
        self.setupUi(self)
        # Создание списка объектов для панели инструментов
        self.combo = QtWidgets.QComboBox()
        self.refreshCombo()
        self.toolBar.insertWidget(self.action_2, self.combo)
        self.refreshMain()
        # Назначение обработчиков сигналов
        self.combo.activated.connect(self.setIdActivObekt)
        self.action_19.triggered.connect(self.close)
        self.action_41.triggered.connect(self.openFirma)
        self.action_42.triggered.connect(self.openCustomer)
        self.action.triggered.connect(self.openObekt)
        self.action_28.triggered.connect(self.openKomerch)
        self.action_33.triggered.connect(self.openDogovor)
        self.action_4.triggered.connect(self.openBurehole)
        self.action_12.triggered.connect(self.openSZond)
        self.action_20.triggered.connect(self.openGran)
        self.action_22.triggered.connect(self.openPesok)
        self.action_21.triggered.connect(self.openGlina)
        self.action_46.triggered.connect(self.openSkala)
        self.action_44.triggered.connect(self.openAgressgrunt)
        self.action_45.triggered.connect(self.openAgressvoda)
        self.action_24.triggered.connect(self.openSrez)
        self.action_25.triggered.connect(self.openCompres)
        self.action_26.triggered.connect(self.openProsad)
        self.action_27.triggered.connect(self.openNabuh)
        self.action_38.triggered.connect(self.openUsadka)
        self.action_2.triggered.connect(self.addRecord)
        self.action_6.triggered.connect(self.delRecord)
        self.action_3.triggered.connect(self.delWin)
        self.action_5.triggered.connect(self.saveRecord)
        self.action_8.triggered.connect(self.firstRecord)
        self.action_9.triggered.connect(self.priorRecord)
        self.action_10.triggered.connect(self.nextRecord)
        self.action_11.triggered.connect(self.lastRecord)
        self.action_13.triggered.connect(self.sortRecord)
        self.action_14.triggered.connect(self.desortRecord)
        self.mdiArea.subWindowActivated.connect(self.refreshTool)
        self.mdiArea.subWindowActivated.connect(self.refreshClipBord)
        self.action_7.triggered.connect(self.undoOn)
        self.action_23.triggered.connect(self.redoOn)
        self.action_29.triggered.connect(self.cutOn)
        self.action_30.triggered.connect(self.copyOn)
        self.action_31.triggered.connect(self.pasteOn)
        self.action_32.triggered.connect(self.vudelAll)
        self.action_16.triggered.connect(self.openReport)
        self.action_18.triggered.connect(self.openExport)
        self.action_36.triggered.connect(self.openIspol)
        self.action_37.triggered.connect(self.openTipbur)
        self.action_35.triggered.connect(self.openCalcgeo)

    def refreshCombo(self) -> set:
        """Создание списка объектов для панели инструментов"""
        self.combo.clear()
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT numdog, 
                                    id, 
                                    archnum, 
                                    name
                                FROM obekt
                                ORDER BY obekt.id""")
            recAll = curs.fetchall()
        for i in range(0, len(recAll)):
            recOne = recAll[i]
            self.combo.addItem(recOne[0] + ' (' + recOne[2] + ')')
            self.combo.setItemData(i, recOne[1], role=QtCore.Qt.UserRole)
        self.combo.insertItem(0, "Обʼєкт не активовано", userData=None)
        self.combo.setCurrentIndex(0)

    def setIdActivObekt(self) -> bool:
        """Выбор объекта для активизации"""
        global idActivObekt
        ind = self.combo.currentIndex()
        idActivObekt = self.combo.itemData(ind, role=QtCore.Qt.UserRole)
        egdelegat.idActivObekt = idActivObekt   # Передача идентификатора активного объекта в модуль делегатов
        if self.obektwin is None:
            retval = False
        else:
            self.obektwin.close()
            ObektWindow.setActivObekt(ObektWindow())
            self.openObekt()
            retval = True
        return retval

    @QtCore.pyqtSlot()
    def undoOn(self) -> set:
        """Отмена последней операции"""
        self.action_23.setEnabled(True)
        focusW = QtWidgets.QApplication.focusWidget()
        obn = focusW.objectName()[0:4]
        if obn == "text":
            focusW.undo()
            self.action_23.setEnabled(True)
            self.action_7.setEnabled(False)
        if obn == "line":
            focusW.undo()
            self.action_23.setEnabled(True)
            self.action_7.setEnabled(False)
        else:
            pass
        self.refreshClipBord()

    @QtCore.pyqtSlot()
    def redoOn(self) -> set:
        """Повтор последней операции"""
        self.action_7.setEnabled(True)
        focusW = QtWidgets.QApplication.focusWidget()
        obn = focusW.objectName()[0:4]
        if obn == "text" or obn == "line":
            focusW.redo()
            self.action_7.setEnabled(True)
            self.action_23.setEnabled(False)
        else:
            pass
        self.refreshClipBord()

    @QtCore.pyqtSlot()
    def cutOn(self) -> set:
        """Вырезать техт в буфер"""
        focusW = QtWidgets.QApplication.focusWidget()
        obn = focusW.objectName()[0:4]
        if obn == "text" or obn == "line":
            focusW.cut()
            self.action_7.setEnabled(True)
        else:
            pass
        self.refreshClipBord()

    @QtCore.pyqtSlot()
    def copyOn(self) -> set:
        """Копировать текст в буфер"""
        focusW = QtWidgets.QApplication.focusWidget()
        obn = focusW.objectName()[0:4]
        if obn == "text" or obn == "line":
            focusW.copy()
        else:
            pass
        self.refreshClipBord()

    @QtCore.pyqtSlot()
    def pasteOn(self) -> set:
        """Вставить текст из буфера"""
        focusW = QtWidgets.QApplication.focusWidget()
        obn = focusW.objectName()[0:4]
        if obn == "text":
            if focusW.canPaste() == True:
                focusW.paste()
                self.action_7.setEnabled(True)
            else:
                pass
        elif obn == "line":
            focusW.paste()
        else:
            pass
        self.refreshClipBord()

    @QtCore.pyqtSlot()
    def vudelAll(self) -> set:
        """Выделить весь текст в текущем поле"""
        focusW = QtWidgets.QApplication.focusWidget()
        obn = focusW.objectName()[0:4]
        if obn == "line" or obn == "text":
            focusW.selectAll()
            self.action_29.setEnabled(True)
            self.action_30.setEnabled(True)
        else:
            self.action_29.setEnabled(False)
            self.action_30.setEnabled(False)
        self.refreshClipBord()

    def proverkaActivObekt(self) -> set:
        """Проверка наличия активированного объекта"""
        global idActivObekt
        if idActivObekt is None:
            self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "Інженерно-геологічні вишукування",
                                           "Немає жодного активованого об'єкта. Необхідно активувати об'єкт з яким плануєте працювати")
            btnOK = QtWidgets.QPushButton("&OK")
            btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
            self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
            result = self.formMassWin.exec()
            if result == 0:
                self.formMassWin.close()
            self.formActivate = ActivateObekt()
            self.formActivate.exec()
        else:
            pass
        return idActivObekt

    def proverkaObrazec(self) -> set:
        """Проверяет наличие зарегестрированных образцов в активированном объекте"""
        global idActivObekt
        with UseDatebase(dbconfig) as curs:
            curs.execute("""SELECT burehole.id_obekt,
                                obekt.archnum,
                                obekt.name,
                                obekt.stadia,
                                burehole.num_hole,
                                burehole.koord_z,
                                obrazec.id,
                                obrazec.num_obrazec,
                                obrazec.glub_otbor,
                                obrazec.lab_num
                            FROM obekt,
                                 burehole,
                                 obrazec
                            WHERE obekt.id = burehole.id_obekt
                            AND burehole.id = obrazec.id_burehole
                            AND obekt.id = %(v0)s""", {'v0': idActivObekt})
            recAll = curs.fetchall()
            # Поиск образцов в активированном объекте
            if recAll == []:
                activObrazec = False
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "Інженерно-геологічні вишукування",
                                               "Відсутні зареєстровані зразки в активованому об'єкті. Рекомендується зареєструвати зразки")
                btnOK = QtWidgets.QPushButton("&OK")
                btnOK.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                self.formMassWin.addButton(btnOK, QtWidgets.QMessageBox.AcceptRole)
                result = self.formMassWin.exec()
                if result == 0:
                    self.formMassWin.close()
            else:
                activObrazec = True
        return activObrazec

    def resizeEvent(self, e) -> set:
        """Изменение размера MDI-области по размеру главного окна"""
        w = self.width()
        h = self.height()
        self.mdiArea.resize(w, h - 80)

    def refreshTool(self) -> set:
        """Обновление кнопок перемещения по записям Панели инструментов"""
        if self.mdiArea.activeSubWindow():
            w = self.mdiArea.activeSubWindow().widget()
            w.refreshToolbar()
        else:
            self.refreshMain()

    def delWin(self) -> set:
        """Удаление активного окна"""
        w = self.mdiArea.activeSubWindow()
        self.mdiArea.removeSubWindow(w)

    def addRecord(self) -> set:
        """Добавление записи в активном окне"""
        w = self.mdiArea.activeSubWindow().widget()
        w.addRecord()

    def delRecord(self) -> set:
        """Удаление записи в активном окне"""
        w = self.mdiArea.activeSubWindow().widget()
        w.delRecord()

    def saveRecord(self) -> set:
        """Сохранение записей"""
        w = self.mdiArea.activeSubWindow().widget()
        w.saveAll()

    def firstRecord(self) -> set:
        """Перемещение на первую запись в активном окне"""
        w = self.mdiArea.activeSubWindow().widget()
        w.firstRecord()

    def priorRecord(self) -> set:
        """Перемещение на предыдущую запись в активном окне"""
        w = self.mdiArea.activeSubWindow().widget()
        w.priorRecord()

    def nextRecord(self) -> set:
        """Перемещение на следующую запись в активном окне"""
        w = self.mdiArea.activeSubWindow().widget()
        w.nextRecord()

    def lastRecord(self) -> set:
        """Перемещение на последнюю запись в активном окне"""
        w = self.mdiArea.activeSubWindow().widget()
        w.lastRecord()

    def sortRecord(self) -> set:
        """Сортировка записей в активном окне"""
        w = self.mdiArea.activeSubWindow().widget()
        w.sortRecord()

    def desortRecord(self) -> set:
        """Отмена сортировки в активном окне"""
        w = self.mdiArea.activeSubWindow().widget()
        w.desortRecord()

    def openIspol(self) -> set:
        """Открывает окно Исполнители"""
        if not self.ispolwin:
            recAll = IspolWindow.requerySelect(IspolWindow, 0)
            if not recAll:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question, "Виконавці",
                                               "У файлі відсутні записи виконавців. Додати перший запис?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.openIspolW()
                else:
                    pass
            else:
                self.openIspolW()
        else:
            self.ispolwin.activateWindow()
            self.ispolwin.raise_()
        self.refreshMain()

    def openIspolW(self) -> set:
        """Формирует окно Исполнители"""
        w = IspolWindow()
        self.ispolwin = self.mdiArea.addSubWindow(w)
        self.ispolwin.setWindowFlags(QtCore.Qt.Window
                                    | QtCore.Qt.WindowContextHelpButtonHint
                                    | QtCore.Qt.WA_WindowPropagation
                                    | QtCore.Qt.WA_DeleteOnClose)
        self.ispolwin.setWindowIcon(QtGui.QIcon("./icons/16x16/categories/applications-engineering.png"))
        self.ispolwin.setGeometry(0, 0, 600, 312)
        x = (self.width() - self.ispolwin.width()) // 2
        y = (self.height() - self.ispolwin.height()) // 2 - 40
        self.ispolwin.move(x, y)
        self.ispolwin.show()
        self.ispolwin.activateWindow()

    def openTipbur(self) -> set:
        """Открывает окно Оборудование"""
        if not self.tipburwin:
            recAll = TipburWindow.requerySelect(TipburWindow, 0)
            if not recAll:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question, "Бурове обладнання",
                                               "У файлі відсутні записи бурового обладнання. "
                                               "\nДодати перший запис?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.openTipburW()
                else:
                    pass
            else:
                self.openTipburW()
        else:
            self.tipburwin.activateWindow()
            self.tipburwin.raise_()
        self.refreshMain()

    def openTipburW(self) -> set:
        """Формирует окно Оборудование"""
        w = TipburWindow()
        self.tipburwin = self.mdiArea.addSubWindow(w)
        self.tipburwin.setWindowFlags(QtCore.Qt.Window
                                    | QtCore.Qt.WindowContextHelpButtonHint
                                    | QtCore.Qt.WA_WindowPropagation
                                    | QtCore.Qt.WA_DeleteOnClose)
        self.tipburwin.setWindowIcon(QtGui.QIcon("./icons/16x16/categories/applications-engineering.png"))
        self.tipburwin.setGeometry(0, 0, 720, 312)
        x = (self.width() - self.tipburwin.width()) // 2
        y = (self.height() - self.tipburwin.height()) // 2 - 40
        self.tipburwin.move(x, y)
        self.tipburwin.show()
        self.tipburwin.activateWindow()

    def openCustomer(self) -> set:
        """Открывает окно характеристики предприятия"""
        if not self.customerwin:
            with UseDatebase(dbconfig) as curs:
                curs.execute("SELECT * FROM customer ORDER BY id")
                recAll = curs.fetchall()
            if not recAll:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question, "Замовник",
                                               "У файлі відсутні записи реквізитів підприємства-замовника. "
                                               "\nДодати перший запис?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.openCustomerW()
                else:
                    pass
            else:
                self.openCustomerW()
        else:
            self.customerwin.activateWindow()
            self.customerwin.raise_()
        self.refreshMain()

    def openCustomerW(self) -> set:
        """Формирует окно характеристики предприятия"""
        w = CustomerWindow()
        self.customerwin = self.mdiArea.addSubWindow(w)
        self.customerwin.setWindowFlags(QtCore.Qt.Window
                                    | QtCore.Qt.WindowContextHelpButtonHint
                                    | QtCore.Qt.WA_WindowPropagation
                                    | QtCore.Qt.WA_DeleteOnClose)
        self.customerwin.setWindowIcon(QtGui.QIcon("./icons/16x16/categories/applications-engineering.png"))
        self.customerwin.setGeometry(0, 0, 824, 498)
        x = (self.width() - self.customerwin.width()) // 2
        y = (self.height() - self.customerwin.height()) // 2 - 40
        self.customerwin.move(x, y)
        self.customerwin.show()
        self.customerwin.activateWindow()

    def openFirma(self) -> set:
        """Открывает окно характеристики предприятия"""
        if not self.firmawin:
            with UseDatebase(dbconfig) as curs:
                curs.execute("SELECT * FROM firma ORDER BY id")
                recAll = curs.fetchall()
            if not recAll:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question, "Підрядник",
                                               "У файлі відсутні записи реквізитів підприємства-підрядника. "
                                               "\nДодати перший запис?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.openFirmaW()
                else:
                    pass
            else:
                self.openFirmaW()
        else:
            self.firmawin.activateWindow()
            self.firmawin.raise_()
        self.refreshMain()

    def openFirmaW(self) -> set:
        """Формирует окно характеристики предприятия"""
        w = FirmaWindow()
        self.firmawin = self.mdiArea.addSubWindow(w)
        self.firmawin.setWindowFlags(QtCore.Qt.Window
                                    | QtCore.Qt.WindowContextHelpButtonHint
                                    | QtCore.Qt.WA_WindowPropagation
                                    | QtCore.Qt.WA_DeleteOnClose)
        self.firmawin.setWindowIcon(QtGui.QIcon("./icons/16x16/categories/applications-engineering.png"))
        self.firmawin.setGeometry(0, 0, 824, 498)
        x = (self.width() - self.firmawin.width()) // 2
        y = (self.height() - self.firmawin.height()) // 2 - 40
        self.firmawin.move(x, y)
        self.firmawin.show()
        self.firmawin.activateWindow()

    def openObekt(self) -> set:
        """Открывает окно характеристики объекта работ"""
        if not self.obektwin:
            with UseDatebase(dbconfig) as curs:
                curs.execute("SELECT * FROM obekt ORDER BY id")
                recAll = curs.fetchall()
            if not recAll:
                self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question, "Характеристика об'єкта",
                                               "У файлі відсутні записи характеристик об'єкта вишукувальних робіт. "
                                               "\nДодати перший запис?")
                btnYes = QtWidgets.QPushButton("&Так")
                btnNo = QtWidgets.QPushButton("&Ні")
                btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                self.formMassWin.setDefaultButton(btnYes)
                result = self.formMassWin.exec()
                if result == 0:
                    self.openObektW()
                else:
                    pass
            else:
                self.openObektW()
        else:
            self.obektwin.activateWindow()
            self.obektwin.raise_()
        self.refreshMain()

    def openObektW(self) -> set:
        """Формирует окно характеристики объекта работ"""
        w = ObektWindow()
        self.obektwin = self.mdiArea.addSubWindow(w)
        self.obektwin.setWindowFlags(QtCore.Qt.Window
                                     | QtCore.Qt.MSWindowsFixedSizeDialogHint
                                     | QtCore.Qt.WindowContextHelpButtonHint
                                     | QtCore.Qt.WA_WindowPropagation
                                     | QtCore.Qt.WA_DeleteOnClose)
        self.obektwin.setWindowIcon(QtGui.QIcon("./icons/16x16/categories/applications-engineering.png"))
        self.obektwin.setGeometry(0, 0, 790, 500)
        x = (self.width() - self.obektwin.width()) // 2
        y = (self.height() - self.obektwin.height()) // 2 - 40
        self.obektwin.move(x, y)
        self.obektwin.show()
        self.obektwin.activateWindow()

    def openKomerch(self) -> set:
        """Открывает окно Коммерческого предложения"""
        global idActivObekt
        idActivObekt = self.proverkaActivObekt()
        if idActivObekt is not None:
            if not self.komerchdwin:
                recAll = KomerchWindow.requerySelect(KomerchWindow)
                if not recAll:
                    self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question, "Комерційні пропозиції",
                                                   "У файлі відсутні записи комерційних пропозицій активованого об'єкта. "
                                                   "\nДодати перший запис?")
                    btnYes = QtWidgets.QPushButton("&Так")
                    btnNo = QtWidgets.QPushButton("&Ні")
                    btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                    btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                    self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                    self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                    self.formMassWin.setDefaultButton(btnYes)
                    result = self.formMassWin.exec()
                    if result == 0:
                        self.openKomerchW()
                    else:
                        pass
                else:
                    self.openKomerchW()
            else:
                self.komerchdwin.activateWindow()
                self.komerchdwin.raise_()
            self.refreshMain()
        else:
            pass

    def openKomerchW(self) -> set:
        """Формирует окно Коммерческого предложения"""
        w = KomerchWindow()
        self.komerchdwin = self.mdiArea.addSubWindow(w)
        self.komerchdwin.setWindowFlags(QtCore.Qt.Window
                                        | QtCore.Qt.WindowContextHelpButtonHint
                                        | QtCore.Qt.WA_WindowPropagation
                                        | QtCore.Qt.WA_DeleteOnClose)
        self.komerchdwin.setWindowIcon(QtGui.QIcon("./icons/16x16/categories/applications-engineering.png"))
        self.komerchdwin.setGeometry(0, 0, 900, 610)
        x = (self.width() - self.komerchdwin.width()) // 2
        y = (self.height() - self.komerchdwin.height()) // 2 - 40
        self.komerchdwin.move(x, y)
        self.komerchdwin.show()
        self.komerchdwin.activateWindow()

    def openDogovor(self) -> set:
        """Открывает окно Договоров"""
        global idActivObekt
        idActivObekt = self.proverkaActivObekt()
        if idActivObekt is not None:
            if not self.dogovordwin:
                recAll = DogovorWindow.requerySelect(DogovorWindow)
                if not recAll:
                    self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question, "Договори",
                                                   "У файлі відсутні записи договорів активованого об'єкта. "
                                                   "\nДодати перший запис?")
                    btnYes = QtWidgets.QPushButton("&Так")
                    btnNo = QtWidgets.QPushButton("&Ні")
                    btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                    btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                    self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                    self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                    self.formMassWin.setDefaultButton(btnYes)
                    result = self.formMassWin.exec()
                    if result == 0:
                        self.openDogovorW()
                    else:
                        pass
                else:
                    self.openDogovorW()
            else:
                self.dogovordwin.activateWindow()
                self.dogovordwin.raise_()
            self.refreshMain()
        else:
            pass

    def openDogovorW(self) -> set:
        """Формирует окно Договоров"""
        w = DogovorWindow()
        self.dogovordwin = self.mdiArea.addSubWindow(w)
        self.dogovordwin.setWindowFlags(QtCore.Qt.Window
                                        | QtCore.Qt.WindowContextHelpButtonHint
                                        | QtCore.Qt.WA_WindowPropagation
                                        | QtCore.Qt.WA_DeleteOnClose)
        self.dogovordwin.setWindowIcon(QtGui.QIcon("./icons/16x16/categories/applications-engineering.png"))
        self.dogovordwin.setGeometry(0, 0, 900, 610)
        x = (self.width() - self.dogovordwin.width()) // 2
        y = (self.height() - self.dogovordwin.height()) // 2 - 40
        self.dogovordwin.move(x, y)
        self.dogovordwin.show()
        self.dogovordwin.activateWindow()

    def openBurehole(self) -> set:
        """Открывает окно характеристики выработки с отбором образцов"""
        global idActivObekt
        idActivObekt = self.proverkaActivObekt()
        if idActivObekt is not None:
            if not self.bureholewin:
                recAll = BureholeWindow.requerySelect(BureholeWindow)
                if not recAll:
                    self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question, "Характеристика пунктів відбору проб",
                                                   "У файлі відсутні записи пунктів відбору проб активованого об'єкта. "
                                                   "\nДодати перший запис?")
                    btnYes = QtWidgets.QPushButton("&Так")
                    btnNo = QtWidgets.QPushButton("&Ні")
                    btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                    btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                    self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                    self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                    self.formMassWin.setDefaultButton(btnYes)
                    result = self.formMassWin.exec()
                    if result == 0:
                        self.openBureholeW()
                    else:
                        pass
                else:
                    self.openBureholeW()
            else:
                self.bureholewin.activateWindow()
                self.bureholewin.raise_()
            self.refreshMain()
        else:
            pass

    def openBureholeW(self) -> set:
        """Формирует окно характеристики выработки с отбором образцов"""
        w = BureholeWindow()
        self.bureholewin = self.mdiArea.addSubWindow(w)
        self.bureholewin.setWindowFlags(QtCore.Qt.Window
                                        | QtCore.Qt.WindowContextHelpButtonHint
                                        | QtCore.Qt.WA_WindowPropagation
                                        | QtCore.Qt.WA_DeleteOnClose)
        self.bureholewin.setWindowIcon(QtGui.QIcon("./icons/16x16/categories/applications-engineering.png"))
        self.bureholewin.setGeometry(0, 0, 1390, 807)
        x = (self.width() - self.bureholewin.width()) // 2
        y = (self.height() - self.bureholewin.height()) // 2 - 40
        self.bureholewin.move(x, y)
        self.bureholewin.show()
        self.bureholewin.activateWindow()

    def openSZond(self) -> set:
        """Открывает окно Статического зондирования"""
        global idActivObekt
        idActivObekt = self.proverkaActivObekt()
        if idActivObekt is not None:
            if not self.szondwin:
                recAll = SZondWindow.requerySelect(SZondWindow)
                if not recAll:
                    self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question, "Характеристика пунктів статичного зондування",
                                                   "У файлі відсутні записи пунктів статичного зондування активованого об'єкта. "
                                                   "\nДодати перший запис?")
                    btnYes = QtWidgets.QPushButton("&Так")
                    btnNo = QtWidgets.QPushButton("&Ні")
                    btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                    btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                    self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                    self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                    self.formMassWin.setDefaultButton(btnYes)
                    result = self.formMassWin.exec()
                    if result == 0:
                        self.openSZondW()
                    else:
                        pass
                else:
                    self.openSZondW()
            else:
                self.szondwin.activateWindow()
                self.szondwin.raise_()
            self.refreshMain()
        else:
            pass

    def openSZondW(self) -> set:
        """Формирует окно Статического зондирования"""
        w = SZondWindow()
        self.szondwin = self.mdiArea.addSubWindow(w)
        self.szondwin.setWindowFlags(QtCore.Qt.Window
                                     | QtCore.Qt.WindowContextHelpButtonHint
                                     | QtCore.Qt.WA_WindowPropagation
                                     | QtCore.Qt.WA_DeleteOnClose)
        self.szondwin.setWindowIcon(QtGui.QIcon("./icons/16x16/categories/applications-engineering.png"))
        self.szondwin.setGeometry(0, 0, 1130, 705)
        x = (self.width() - self.szondwin.width()) // 2
        y = (self.height() - self.szondwin.height()) // 2 - 40
        self.szondwin.move(x, y)
        self.szondwin.show()
        self.szondwin.activateWindow()

    def openGran(self) -> set:
        """Открывает окно Гранулометрического состава"""
        global idActivObekt
        idActivObekt = self.proverkaActivObekt()
        if idActivObekt is not None:
            if self.proverkaObrazec() == False:
                pass
            else:
                if not self.granwin:
                    recAll = GranWindow.requerySelect(GranWindow)
                    if not recAll:
                        self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                                       "Гранулометрічний склад",
                                                       "У файлі відсутні записи гранулометричного складу зразків активованого об'єкта. "
                                                       "\nДодати перший запис?")
                        btnYes = QtWidgets.QPushButton("&Так")
                        btnNo = QtWidgets.QPushButton("&Ні")
                        btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                        btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                        self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                        self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                        self.formMassWin.setDefaultButton(btnYes)
                        result = self.formMassWin.exec()
                        if result == 0:
                            self.openGranW()
                        else:
                            pass
                    else:
                        self.openGranW()
                else:
                    self.granwin.activateWindow()
                    self.granwin.raise_()
                self.refreshMain()
        else:
            pass

    def openGranW(self) -> set:
        """Формирует окно Гранулометрического состава"""
        w = GranWindow()
        self.granwin = self.mdiArea.addSubWindow(w)
        self.granwin.setWindowFlags(QtCore.Qt.Window
                                    | QtCore.Qt.WindowContextHelpButtonHint
                                    | QtCore.Qt.WA_WindowPropagation
                                    | QtCore.Qt.WA_DeleteOnClose)
        self.granwin.setWindowIcon(QtGui.QIcon("./icons/16x16/categories/applications-engineering.png"))
        self.granwin.setGeometry(0, 0, 900, 670)
        x = (self.width() - self.granwin.width()) // 2
        y = (self.height() - self.granwin.height()) // 2 - 40
        self.granwin.move(x, y)
        self.granwin.show()
        self.granwin.activateWindow()

    def openPesok(self) -> set:
        """Открывает окно свойств несвязных грунтов"""
        global idActivObekt
        idActivObekt = self.proverkaActivObekt()
        if idActivObekt is not None:
            if self.proverkaObrazec() == False:
                pass
            else:
                if not self.pesokwin:
                    recAll = PesokWindow.requerySelect(PesokWindow)
                    if not recAll:
                        self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                                       "Властивості незв'язних ґрунтів",
                                                       "У файлі відсутні записи властивостей зразків незв'язних ґрунтів активованого об'єкта. "
                                                       "\nДодати перший запис?")
                        btnYes = QtWidgets.QPushButton("&Так")
                        btnNo = QtWidgets.QPushButton("&Ні")
                        btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                        btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                        self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                        self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                        self.formMassWin.setDefaultButton(btnYes)
                        result = self.formMassWin.exec()
                        if result == 0:
                            self.openPesokW()
                        else:
                            pass
                    else:
                        self.openPesokW()
                else:
                    self.pesokwin.activateWindow()
                    self.pesokwin.raise_()
                self.refreshMain()
        else:
            pass

    def openPesokW(self) -> set:
        """Формирует окно свойств несвязных грунтов"""
        w = PesokWindow()
        self.pesokwin = self.mdiArea.addSubWindow(w)
        self.pesokwin.setWindowFlags(QtCore.Qt.Window
                                     | QtCore.Qt.WindowContextHelpButtonHint
                                     | QtCore.Qt.WA_WindowPropagation
                                     | QtCore.Qt.WA_DeleteOnClose)
        self.pesokwin.setWindowIcon(QtGui.QIcon("./icons/16x16/categories/applications-engineering.png"))
        self.pesokwin.setGeometry(0, 0, 820, 700)
        x = (self.width() - self.pesokwin.width()) // 2
        y = (self.height() - self.pesokwin.height()) // 2 - 40
        self.pesokwin.move(x, y)
        self.pesokwin.show()
        self.pesokwin.activateWindow()

    def openGlina(self) -> set:
        """Открывает окно свойств связных грунтов"""
        global idActivObekt
        idActivObekt = self.proverkaActivObekt()
        if idActivObekt is not None:
            if self.proverkaObrazec() == False:
                pass
            else:
                if not self.glinawin:
                    recAll = GlinaWindow.requerySelect(GlinaWindow)
                    if not recAll:
                        self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                                       "Властивості зв'язних ґрунтів",
                                                       "У файлі відсутні записи властивостей зразків зв'язних ґрунтів активованого об'єкта. "
                                                       "\nДодати перший запис?")
                        btnYes = QtWidgets.QPushButton("&Так")
                        btnNo = QtWidgets.QPushButton("&Ні")
                        btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                        btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                        self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                        self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                        self.formMassWin.setDefaultButton(btnYes)
                        result = self.formMassWin.exec()
                        if result == 0:
                            self.openGlinaW()
                        else:
                            pass
                    else:
                        self.openGlinaW()
                else:
                    self.glinawin.activateWindow()
                    self.glinawin.raise_()
                self.refreshMain()
        else:
            pass

    def openGlinaW(self) -> set:
        """Формирует окно свойств связных грунтов"""
        w = GlinaWindow()
        self.glinawin = self.mdiArea.addSubWindow(w)
        self.glinawin.setWindowFlags(QtCore.Qt.Window
                                     | QtCore.Qt.WindowContextHelpButtonHint
                                     | QtCore.Qt.WA_WindowPropagation
                                     | QtCore.Qt.WA_DeleteOnClose)
        self.glinawin.setWindowIcon(QtGui.QIcon("./icons/16x16/categories/applications-engineering.png"))
        self.glinawin.setGeometry(0, 0, 1110, 460)
        x = (self.width() - self.glinawin.width()) // 2
        y = (self.height() - self.glinawin.height()) // 2 - 40
        self.glinawin.move(x, y)
        self.glinawin.show()
        self.glinawin.activateWindow()

    def openSkala(self) -> set:
        """Открывает окно свойств скальных грунтов"""
        global idActivObekt
        idActivObekt = self.proverkaActivObekt()
        if idActivObekt is not None:
            if self.proverkaObrazec() == False:
                pass
            else:
                if not self.skalawin:
                    recAll = SkalaWindow.requerySelect(SkalaWindow)
                    if not recAll:
                        self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                                       "Властивості скальних ґрунтів",
                                                       "У файлі відсутні записи властивостей зразків скальних ґрунтів активованого об'єкта. "
                                                       "\nДодати перший запис?")
                        btnYes = QtWidgets.QPushButton("&Так")
                        btnNo = QtWidgets.QPushButton("&Ні")
                        btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                        btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                        self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                        self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                        self.formMassWin.setDefaultButton(btnYes)
                        result = self.formMassWin.exec()
                        if result == 0:
                            self.openSkalaW()
                        else:
                            pass
                    else:
                        self.openSkalaW()
                else:
                    self.skalawin.activateWindow()
                    self.skalawin.raise_()
                self.refreshMain()
        else:
            pass

    def openSkalaW(self) -> set:
        """Формирует окно свойств скальных грунтов"""
        w = SkalaWindow()
        self.skalawin = self.mdiArea.addSubWindow(w)
        self.skalawin.setWindowFlags(QtCore.Qt.Window
                                     | QtCore.Qt.WindowContextHelpButtonHint
                                     | QtCore.Qt.WA_WindowPropagation
                                     | QtCore.Qt.WA_DeleteOnClose)
        self.skalawin.setWindowIcon(QtGui.QIcon("./icons/16x16/categories/applications-engineering.png"))
        self.skalawin.setGeometry(0, 0, 780, 560)
        x = (self.width() - self.skalawin.width()) // 2
        y = (self.height() - self.skalawin.height()) // 2 - 40
        self.skalawin.move(x, y)
        self.skalawin.show()
        self.skalawin.activateWindow()

    def openAgressgrunt(self) -> set:
        """Открывает окно агрессивности грунтов"""
        global idActivObekt
        idActivObekt = self.proverkaActivObekt()
        if idActivObekt is not None:
            if self.proverkaObrazec() == False:
                pass
            else:
                if not self.agressgruntwin:
                    recAll = AgressgruntWindow.requerySelect(AgressgruntWindow)
                    if not recAll:
                        self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                                       "Хімічна агресивность ґрунтів",
                                                       "У файлі відсутні записи хімічної агресивності ґрунтів активованого об'єкта. "
                                                       "\nДодати перший запис?")
                        btnYes = QtWidgets.QPushButton("&Так")
                        btnNo = QtWidgets.QPushButton("&Ні")
                        btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                        btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                        self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                        self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                        self.formMassWin.setDefaultButton(btnYes)
                        result = self.formMassWin.exec()
                        if result == 0:
                            self.openAgressgruntW()
                        else:
                            pass
                    else:
                        self.openAgressgruntW()
                else:
                    self.agressgruntwin.activateWindow()
                    self.agressgruntwin.raise_()
                self.refreshMain()
        else:
            pass

    def openAgressgruntW(self) -> set:
        """Формирует окно агрессивности грунтов"""
        w = AgressgruntWindow()
        self.agressgruntwin = self.mdiArea.addSubWindow(w)
        self.agressgruntwin.setWindowFlags(QtCore.Qt.Window
                                     | QtCore.Qt.WindowContextHelpButtonHint
                                     | QtCore.Qt.WA_WindowPropagation
                                     | QtCore.Qt.WA_DeleteOnClose)
        self.agressgruntwin.setWindowIcon(QtGui.QIcon("./icons/16x16/categories/applications-engineering.png"))
        self.agressgruntwin.setGeometry(0, 0, 900, 520)
        x = (self.width() - self.agressgruntwin.width()) // 2
        y = (self.height() - self.agressgruntwin.height()) // 2 - 40
        self.agressgruntwin.move(x, y)
        self.agressgruntwin.show()
        self.agressgruntwin.activateWindow()

    def openAgressvoda(self) -> set:
        """Открывает окно свойств воды"""
        global idActivObekt
        idActivObekt = self.proverkaActivObekt()
        if idActivObekt is not None:
            if self.proverkaObrazec() == False:
                pass
            else:
                if not self.agressvodawin:
                    recAll = AgressvodaWindow.requerySelect(AgressvodaWindow)
                    if not recAll:
                        self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                                       "Хімічна агресивность води",
                                                       "У файлі відсутні записи хімічної агресивності води активованого об'єкта. "
                                                       "\nДодати перший запис?")
                        btnYes = QtWidgets.QPushButton("&Так")
                        btnNo = QtWidgets.QPushButton("&Ні")
                        btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                        btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                        self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                        self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                        self.formMassWin.setDefaultButton(btnYes)
                        result = self.formMassWin.exec()
                        if result == 0:
                            self.openAgressvodaW()
                        else:
                            pass
                    else:
                        self.openAgressvodaW()
                else:
                    self.agressvodawin.activateWindow()
                    self.agressvodawin.raise_()
                self.refreshMain()
        else:
            pass

    def openAgressvodaW(self) -> set:
        """Формирует окно свойств воды"""
        w = AgressvodaWindow()
        self.agressvodawin = self.mdiArea.addSubWindow(w)
        self.agressvodawin.setWindowFlags(QtCore.Qt.Window
                                     | QtCore.Qt.WindowContextHelpButtonHint
                                     | QtCore.Qt.WA_WindowPropagation
                                     | QtCore.Qt.WA_DeleteOnClose)
        self.agressvodawin.setWindowIcon(QtGui.QIcon("./icons/16x16/categories/applications-engineering.png"))
        self.agressvodawin.setGeometry(0, 0, 1130, 630)
        x = (self.width() - self.agressvodawin.width()) // 2
        y = (self.height() - self.agressvodawin.height()) // 2 - 40
        self.agressvodawin.move(x, y)
        self.agressvodawin.show()
        self.agressvodawin.activateWindow()

    def openSrez(self) -> set:
        """Открывает окно результатов срезных испытаний грунтов"""
        global idActivObekt
        idActivObekt = self.proverkaActivObekt()
        if idActivObekt is not None:
            if self.proverkaObrazec() == False:
                pass
            else:
                if not self.srezwin:
                    recAll = SrezWindow.requerySelect(SrezWindow)
                    if not recAll:
                        self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                                       "Одноплощинний зріз",
                                                       "У файлі відсутні записи результатів випробувань ґрунтів одноплощинним зрізом активованого об'єкта. "
                                                       "\nДодати перший запис?")
                        btnYes = QtWidgets.QPushButton("&Так")
                        btnNo = QtWidgets.QPushButton("&Ні")
                        btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                        btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                        self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                        self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                        self.formMassWin.setDefaultButton(btnYes)
                        result = self.formMassWin.exec()
                        if result == 0:
                            self.openSrezW()
                        else:
                            pass
                    else:
                        self.openSrezW()
                else:
                    self.srezwin.activateWindow()
                    self.srezwin.raise_()
                self.refreshMain()
        else:
            pass

    def openSrezW(self) -> set:
        """Формирует окно результатов срезных испытаний грунтов"""
        w = SrezWindow()
        self.srezwin = self.mdiArea.addSubWindow(w)
        self.srezwin.setWindowFlags(QtCore.Qt.Window
                                    | QtCore.Qt.WindowContextHelpButtonHint
                                    | QtCore.Qt.WA_WindowPropagation
                                    | QtCore.Qt.WA_DeleteOnClose)
        self.srezwin.setWindowIcon(QtGui.QIcon("./icons/16x16/categories/applications-engineering.png"))
        self.srezwin.setGeometry(0, 0, 1150, 575)
        x = (self.width() - self.srezwin.width()) // 2
        y = (self.height() - self.srezwin.height()) // 2 - 40
        self.srezwin.move(x, y)
        self.srezwin.show()
        self.srezwin.activateWindow()

    def openCompres(self) -> set:
        """Открывает окно результатов компрессионных испытаний грунтов"""
        global idActivObekt
        idActivObekt = self.proverkaActivObekt()
        if idActivObekt is not None:
            if self.proverkaObrazec() == False:
                pass
            else:
                if not self.compreswin:
                    recAll = CompresWindow.requerySelect(CompresWindow)
                    if not recAll:
                        self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                                       "Компресійні іспити",
                                                       "У файлі відсутні записи результатів випробувань ґрунтів методом компресійного стиску активованого об'єкта. "
                                                       "\nДодати перший запис?")
                        btnYes = QtWidgets.QPushButton("&Так")
                        btnNo = QtWidgets.QPushButton("&Ні")
                        btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                        btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                        self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                        self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                        self.formMassWin.setDefaultButton(btnYes)
                        result = self.formMassWin.exec()
                        if result == 0:
                            self.openCompresW()
                        else:
                            pass
                    else:
                        self.openCompresW()
                else:
                    self.compreswin.activateWindow()
                    self.compreswin.raise_()
                self.refreshMain()
        else:
            pass

    def openCompresW(self) -> set:
        """Формирует окно результатов компрессионных испытаний грунтов"""
        w = CompresWindow()
        self.compreswin = self.mdiArea.addSubWindow(w)
        self.compreswin.setWindowFlags(QtCore.Qt.Window
                                       | QtCore.Qt.WindowContextHelpButtonHint
                                       | QtCore.Qt.WA_WindowPropagation
                                       | QtCore.Qt.WA_DeleteOnClose)
        self.compreswin.setWindowIcon(QtGui.QIcon("./icons/16x16/categories/applications-engineering.png"))
        self.compreswin.setGeometry(0, 0, 1160, 690)
        x = (self.width() - self.compreswin.width()) // 2
        y = (self.height() - self.compreswin.height()) // 2 - 40
        self.compreswin.move(x, y)
        self.compreswin.show()
        self.compreswin.activateWindow()

    def openProsad(self) -> set:
        """Открывает окно результатов компрессионных испытаний просадочных грунтов"""
        global idActivObekt
        idActivObekt = self.proverkaActivObekt()
        if idActivObekt is not None:
            if self.proverkaObrazec() == False:
                pass
            else:
                if not self.prosadwin:
                    recAll = ProsadWindow.requerySelect(ProsadWindow)
                    if not recAll:
                        self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                                       "Просідність ґрунтів",
                                                       "У файлі відсутні записи результатів випробувань просідних ґрунтів методом компресійного стиску активованого об'єкта. "
                                                       "\nДодати перший запис?")
                        btnYes = QtWidgets.QPushButton("&Так")
                        btnNo = QtWidgets.QPushButton("&Ні")
                        btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                        btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                        self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                        self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                        self.formMassWin.setDefaultButton(btnYes)
                        result = self.formMassWin.exec()
                        if result == 0:
                            self.openProsadW()
                        else:
                            pass
                    else:
                        self.openProsadW()
                else:
                    self.prosadwin.activateWindow()
                    self.prosadwin.raise_()
                self.refreshMain()
        else:
            pass

    def openProsadW(self) -> set:
        """Формирует окно результатов компрессионных испытаний просадочных грунтов"""
        w = ProsadWindow()
        self.prosadwin = self.mdiArea.addSubWindow(w)
        self.prosadwin.setWindowFlags(QtCore.Qt.Window
                                       | QtCore.Qt.WindowContextHelpButtonHint
                                       | QtCore.Qt.WA_WindowPropagation
                                       | QtCore.Qt.WA_DeleteOnClose)
        self.prosadwin.setWindowIcon(QtGui.QIcon("./icons/16x16/categories/applications-engineering.png"))
        self.prosadwin.setGeometry(0, 0, 1286, 773)
        x = (self.width() - self.prosadwin.width()) // 2
        y = (self.height() - self.prosadwin.height()) // 2 - 40
        self.prosadwin.move(x, y)
        self.prosadwin.show()
        self.prosadwin.activateWindow()

    def openNabuh(self) -> set:
        """Открывает окно результатов набухания грунтов"""
        global idActivObekt
        idActivObekt = self.proverkaActivObekt()
        if idActivObekt is not None:
            if self.proverkaObrazec() == False:
                pass
            else:
                if not self.nabuhwin:
                    recAll = NabuhWindow.requerySelect(NabuhWindow)
                    if not recAll:
                        self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                                       "Набухання ґрунтів",
                                                       "У файлі відсутні записи результатів випробувань з визначення набухаючих властивостей грунтів активованого об'єкта. "
                                                       "\nДодати перший запис?")
                        btnYes = QtWidgets.QPushButton("&Так")
                        btnNo = QtWidgets.QPushButton("&Ні")
                        btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                        btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                        self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                        self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                        self.formMassWin.setDefaultButton(btnYes)
                        result = self.formMassWin.exec()
                        if result == 0:
                            self.openNabuhW()
                        else:
                            pass
                    else:
                        self.openNabuhW()
                else:
                    self.nabuhwin.activateWindow()
                    self.nabuhwin.raise_()
                self.refreshMain()
        else:
            pass

    def openNabuhW(self) -> set:
        """Формирует окно результатов набухания грунтов"""
        w = NabuhWindow()
        self.nabuhwin = self.mdiArea.addSubWindow(w)
        self.nabuhwin.setWindowFlags(QtCore.Qt.Window
                                       | QtCore.Qt.WindowContextHelpButtonHint
                                       | QtCore.Qt.WA_WindowPropagation
                                       | QtCore.Qt.WA_DeleteOnClose)
        self.nabuhwin.setWindowIcon(QtGui.QIcon("./icons/16x16/categories/applications-engineering.png"))
        self.nabuhwin.setGeometry(0, 0, 1160, 690)
        x = (self.width() - self.nabuhwin.width()) // 2
        y = (self.height() - self.nabuhwin.height()) // 2 - 40
        self.nabuhwin.move(x, y)
        self.nabuhwin.show()
        self.nabuhwin.activateWindow()

    def openUsadka(self) -> set:
        """Открывает окно результатов усадки грунтов"""
        global idActivObekt
        idActivObekt = self.proverkaActivObekt()
        if idActivObekt is not None:
            if self.proverkaObrazec() == False:
                pass
            else:
                if not self.usadkawin:
                    recAll = UsadkaWindow.requerySelect(UsadkaWindow)
                    if not recAll:
                        self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                                       "Усадка ґрунтів",
                                                       "У файлі відсутні записи результатів випробувань з визначення усадки ґрунтів активованого об'єкта. "
                                                       "\nДодати перший запис?")
                        btnYes = QtWidgets.QPushButton("&Так")
                        btnNo = QtWidgets.QPushButton("&Ні")
                        btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
                        btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
                        self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
                        self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
                        self.formMassWin.setDefaultButton(btnYes)
                        result = self.formMassWin.exec()
                        if result == 0:
                            self.openUsadkaW()
                        else:
                            pass
                    else:
                        self.openUsadkaW()
                else:
                    self.usadkawin.activateWindow()
                    self.usadkawin.raise_()
                self.refreshMain()
        else:
            pass

    def openUsadkaW(self) -> set:
        """Формирует окно результатов компрессионных испытаний грунтов"""
        w = UsadkaWindow()
        self.usadkawin = self.mdiArea.addSubWindow(w)
        self.usadkawin.setWindowFlags(QtCore.Qt.Window
                                       | QtCore.Qt.WindowContextHelpButtonHint
                                       | QtCore.Qt.WA_WindowPropagation
                                       | QtCore.Qt.WA_DeleteOnClose)
        self.usadkawin.setWindowIcon(QtGui.QIcon("./icons/16x16/categories/applications-engineering.png"))
        self.usadkawin.setGeometry(0, 0, 1160, 690)
        x = (self.width() - self.usadkawin.width()) // 2
        y = (self.height() - self.usadkawin.height()) // 2 - 40
        self.usadkawin.move(x, y)
        self.usadkawin.show()
        self.usadkawin.activateWindow()

    def openReport(self) -> set:
        """Открывает окно отчетов"""
        self.reportwin = ReportWindow()
        self.reportwin.setWindowIcon(QtGui.QIcon("./icons/16x16/categories/applications-engineering.png"))
        disp = QtWidgets.QApplication.desktop()
        x = (disp.width() - self.reportwin.width()) // 2
        y = (disp.height() - self.reportwin.height()) // 2 - 40
        self.reportwin.move(x, y)
        self.reportwin.show()

    def openExport(self) -> set:
        """Открывает окно экспорта"""
        self.exportwin = ExportWindow()
        self.exportwin.setWindowIcon(QtGui.QIcon("./icons/16x16/categories/applications-engineering.png"))
        disp = QtWidgets.QApplication.desktop()
        x = (disp.width() - self.exportwin.width()) // 2
        y = (disp.height() - self.exportwin.height()) // 2 - 40
        self.exportwin.move(x, y)
        self.exportwin.show()

    def openCalcgeo(self) -> set:
        """Открывает окно геологического калькулятора"""
        global idActivObekt
        idActivObekt = self.proverkaActivObekt()
        if idActivObekt is not None:
            self.openCalcgeoW()
        else:
            pass

    def openCalcgeoW(self) -> set:
        """Формирует окно геологического калькулятора"""
        w = CalcgeoWindow()
        self.calcgeowin = self.mdiArea.addSubWindow(w)
        self.calcgeowin.setWindowFlags(QtCore.Qt.Window
                                       | QtCore.Qt.WindowContextHelpButtonHint
                                       | QtCore.Qt.WA_WindowPropagation
                                       | QtCore.Qt.WA_DeleteOnClose)
        self.calcgeowin.setWindowIcon(QtGui.QIcon("./icons/16x16/categories/applications-engineering.png"))
        self.calcgeowin.setGeometry(0, 0, 1285, 760)
        x = (self.width() - self.calcgeowin.width()) // 2
        y = (self.height() - self.calcgeowin.height()) // 2 - 40
        self.calcgeowin.move(x, y)
        self.calcgeowin.show()
        self.calcgeowin.activateWindow()

    def refreshMain(self) -> set:
        """Обновляет панель инструментов"""
        if self.mdiArea.activeSubWindow():
            self.action_2.setEnabled(True)  # Новая запись
            self.action_3.setEnabled(True)  # Закрыть активное окно
            self.action_5.setEnabled(True)  # Сохранить
            self.action_6.setEnabled(True)  # Удалить текущую запись
            self.action_13.setEnabled(True)  # Сортировать
            self.action_14.setEnabled(True)  # Отмена сортировки
        else:
            self.action_2.setEnabled(False)  # Новая запись
            self.action_3.setEnabled(False)  # Закрыть активное окно
            self.action_5.setEnabled(False)  # Сохранить
            self.action_6.setEnabled(False)  # Удалить текущую запись
            self.action_8.setEnabled(False)  # Первая запись
            self.action_9.setEnabled(False)  # Следующая запись
            self.action_10.setEnabled(False)  # Предыдущая запись
            self.action_11.setEnabled(False)  # Последняя запись
            self.action_13.setEnabled(False)  # Сортировать
            self.action_14.setEnabled(False)  # Отмена сортировки

    def refreshClipBord(self):
        if self.mdiArea.activeSubWindow():
            self.action_32.setEnabled(True)
            clipboard = QtWidgets.QApplication.clipboard()
            if clipboard.text() == "":
                self.action_31.setEnabled(False)
            else:
                self.action_31.setEnabled(True)
            focusW = QtWidgets.QApplication.focusWidget()
        else:
            self.action_7.setEnabled(False)
            self.action_23.setEnabled(False)
            self.action_29.setEnabled(False)
            self.action_30.setEnabled(False)
            self.action_31.setEnabled(False)
            self.action_32.setEnabled(False)

    def closeEvent(self, event) -> set:
        """Выполняет действия при закрытии главного окна
        ("./icons/48/gtk-dialog-question.png")"""
        self.formMassWin = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question,
                                       "Інженерно-геологічні вишукування",
                                       "Ви бажаєте завершити роботу з програмою?")
        btnYes = QtWidgets.QPushButton("&Так")
        btnNo = QtWidgets.QPushButton("&Ні")
        btnYes.setIcon(QtGui.QIcon("./icons/16x16/dialog-ok-apply.png"))
        btnNo.setIcon(QtGui.QIcon("./icons/16x16/dialog-cancel.png"))
        self.formMassWin.addButton(btnYes, QtWidgets.QMessageBox.AcceptRole)
        self.formMassWin.addButton(btnNo, QtWidgets.QMessageBox.RejectRole)
        self.formMassWin.setDefaultButton(btnYes)
        result = self.formMassWin.exec()
        if result == 0:
            event.accept()
        else:
            event.ignore()
            self.refreshMain()

    def load_data(self, splash):
        for i in range(0, 11):              # Имитируем процесс загрузки
            time.sleep(0.25)                   # Что-то загружаем
            splash.showMessage("Загрузка данных... {0}%".format(i * 10), QtCore.Qt.AlignHCenter | QtCore.Qt.AlignBottom, QtCore.Qt.yellow)
            QtWidgets.qApp.processEvents()  # Запускаем оборот цикла


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    app.setStyle("Fusion")
#    app.setStyle("Windows")
    splash = QtWidgets.QSplashScreen(QtGui.QPixmap("./icons/engeo.png"))
    splash.showMessage("Загрузка данных... 0%", QtCore.Qt.AlignHCenter | QtCore.Qt.AlignBottom, QtCore.Qt.yellow)
    splash.show()  # Отображаем заставку
    app.processEvents()  # Запускаем оборот цикла
    dbconfig = {"host": "127.0.0.1", "user": "vik", "password": "123", "dbname": "enggeo"}
    form = MainWindow()
    form.load_data(splash)
    form.show()
    splash.finish(form)  # Скрываем заставку
    sys.exit(app.exec_())
